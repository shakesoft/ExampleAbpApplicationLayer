// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Account;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Volo.Abp.Account;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAccountExternalLoginAppService), typeof(AccountExternalLoginClientProxy))]
public partial class AccountExternalLoginClientProxy : ClientProxyBase<IAccountExternalLoginAppService>, IAccountExternalLoginAppService
{
    public virtual async Task<List<AccountExternalLoginDto>> GetListAsync()
    {
        return await RequestAsync<List<AccountExternalLoginDto>>(nameof(GetListAsync));
    }

    public virtual async Task DeleteAsync(string loginProvider, string providerKey)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), loginProvider },
            { typeof(string), providerKey }
        });
    }

    public virtual async Task<bool> HasPasswordVerifiedAsync(Guid userId, string loginProvider, string providerKey)
    {
        return await RequestAsync<bool>(nameof(HasPasswordVerifiedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), userId },
            { typeof(string), loginProvider },
            { typeof(string), providerKey }
        });
    }

    public virtual async Task SetPasswordVerifiedAsync(string loginProvider, string providerKey)
    {
        await RequestAsync(nameof(SetPasswordVerifiedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), loginProvider },
            { typeof(string), providerKey }
        });
    }

    public virtual async Task RemovePasswordVerifiedAsync(string loginProvider, string providerKey)
    {
        await RequestAsync(nameof(RemovePasswordVerifiedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), loginProvider },
            { typeof(string), providerKey }
        });
    }
}
