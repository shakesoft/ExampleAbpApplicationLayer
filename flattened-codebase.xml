<?xml version="1.0" encoding="UTF-8"?>
<files>
  <file path="README.md"><![CDATA[
    ﻿# ExampleAbpApplicationLayer
    
    ## About this solution
    
    This is a layered startup solution based on [Domain Driven Design (DDD)](https://abp.io/docs/latest/framework/architecture/domain-driven-design) practises. All the fundamental ABP modules are already installed. Check the [Application Startup Template](https://abp.io/docs/latest/solution-templates/layered-web-application) documentation for more info.
    
    ### Pre-requirements
    
    * [.NET9.0+ SDK](https://dotnet.microsoft.com/download/dotnet)
    * [Node v18 or 20](https://nodejs.org/en)
    
    ### Configurations
    
    The solution comes with a default configuration that works out of the box. However, you may consider to change the following configuration before running your solution:
    
    * Check the `ConnectionStrings` in `appsettings.json` files under the `ExampleAbpApplicationLayer.HttpApi.Host` and `ExampleAbpApplicationLayer.DbMigrator` projects and change it if you need.
    
    ### Before running the application
    
    * Run `abp install-libs` command on your solution folder to install client-side package dependencies. This step is automatically done when you create a new solution, if you didn't especially disabled it. However, you should run it yourself if you have first cloned this solution from your source control, or added a new client-side package dependency to your solution.
    * Run `ExampleAbpApplicationLayer.DbMigrator` to create the initial database. This step is also automatically done when you create a new solution, if you didn't especially disabled it. This should be done in the first run. It is also needed if a new database migration is added to the solution later.
    
    #### Generating a Signing Certificate
    
    In the production environment, you need to use a production signing certificate. ABP Framework sets up signing and encryption certificates in your application and expects an `openiddict.pfx` file in your application.
    
    To generate a signing certificate, you can use the following command:
    
    ```bash
    dotnet dev-certs https -v -ep openiddict.pfx -p 64d11a84-cb9a-4241-aa49-4d2e1146e0b5
    ```
    
    > `64d11a84-cb9a-4241-aa49-4d2e1146e0b5` is the password of the certificate, you can change it to any password you want.
    
    It is recommended to use **two** RSA certificates, distinct from the certificate(s) used for HTTPS: one for encryption, one for signing.
    
    For more information, please refer to: [OpenIddict Certificate Configuration](https://documentation.openiddict.com/configuration/encryption-and-signing-credentials.html#registering-a-certificate-recommended-for-production-ready-scenarios)
    
    > Also, see the [Configuring OpenIddict](https://abp.io/docs/latest/Deployment/Configuring-OpenIddict#production-environment) documentation for more information.
    
    ### Solution structure
    
    This is a layered monolith application that consists of the following applications:
    
    * `ExampleAbpApplicationLayer.DbMigrator`: A console application which applies the migrations and also seeds the initial data. It is useful on development as well as on production environment.
    * `ExampleAbpApplicationLayer.HttpApi.Host`: ASP.NET Core API application that is used to expose the APIs to the clients.
    * `angular`: Angular application.
    
    
    ## Deploying the application
    
    Deploying an ABP application follows the same process as deploying any .NET or ASP.NET Core application. However, there are important considerations to keep in mind. For detailed guidance, refer to ABP's [deployment documentation](https://abp.io/docs/latest/Deployment/Index).
    
    ### Additional resources
    
    
    #### Internal Resources
    
    You can find detailed setup and configuration guide(s) for your solution below:
    
    * [Local Kubernetes Guide](./etc/helm/README.md)
    * [Angular](./angular/README.md)
    
    #### External Resources
    You can see the following resources to learn more about your solution and the ABP Framework:
    
    * [Web Application Development Tutorial](https://abp.io/docs/latest/tutorials/book-store/part-1)
    * [Application Startup Template](https://abp.io/docs/latest/startup-templates/application/index)
    * [LeptonX Theme Module](https://abp.io/docs/latest/themes/lepton-x/index)
    * [LeptonX Angular UI](https://abp.io/docs/latest/themes/lepton-x/angular)
    
    ]]></file>
  <file path="NuGet.Config"><![CDATA[
    <?xml version="1.0" encoding="utf-8"?>
    <configuration>
      <packageSources>
        <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
        <add key="nuget.abp.io" value="https://nuget.abp.io/de9c67e1-cf24-4f19-ab86-66f35018cc86/v3/index.json" />
      </packageSources>
      <packageSourceMapping>
        <packageSource key="nuget.org">
          <package pattern="*" />
          <package pattern="Microsoft.*" />
          <package pattern="Volo.*" />
        </packageSource>
        <packageSource key="nuget.abp.io">
          <package pattern="Volo.*" />
        </packageSource>
      </packageSourceMapping>
    </configuration>
    ]]></file>
  <file path="ExampleAbpApplicationLayer.sln.DotSettings"><![CDATA[
    ﻿<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    	<s:Boolean x:Key="/Default/CodeEditing/Intellisense/CodeCompletion/IntelliSenseCompletingCharacters/CSharpCompletingCharacters/UpgradedFromVSSettings/@EntryValue">True</s:Boolean>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceDoWhileStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceFixedStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceForeachStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceForStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceIfStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceLockStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceUsingStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceWhileStatementBraces/@EntryIndexedValue">WARNING</s:String>
    	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_FOR/@EntryValue">Required</s:String>
    	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_FOREACH/@EntryValue">Required</s:String>
    	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_IFELSE/@EntryValue">Required</s:String>
    	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_WHILE/@EntryValue">Required</s:String>
    	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_REDUNDANT/@EntryValue">False</s:Boolean>
    	<s:Boolean x:Key="/Default/CodeStyle/Generate/=Implementations/@KeyIndexDefined">True</s:Boolean>
    	<s:String x:Key="/Default/CodeStyle/Generate/=Implementations/Options/=Async/@EntryIndexedValue">False</s:String>
    	<s:String x:Key="/Default/CodeStyle/Generate/=Implementations/Options/=Mutable/@EntryIndexedValue">False</s:String>
    	<s:Boolean x:Key="/Default/CodeStyle/Generate/=Overrides/@KeyIndexDefined">True</s:Boolean>
    	<s:String x:Key="/Default/CodeStyle/Generate/=Overrides/Options/=Async/@EntryIndexedValue">False</s:String>
    	<s:String x:Key="/Default/CodeStyle/Generate/=Overrides/Options/=Mutable/@EntryIndexedValue">False</s:String>
    	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=SQL/@EntryIndexedValue">SQL</s:String>
    </wpf:ResourceDictionary>
    ]]></file>
  <file path="ExampleAbpApplicationLayer.sln"><![CDATA[
    ﻿
    Microsoft Visual Studio Solution File, Format Version 12.00
    # Visual Studio Version 17
    VisualStudioVersion = 17.3.32611.2
    MinimumVisualStudioVersion = 10.0.40219.1
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Domain", "src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj", "{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Application", "src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj", "{1A94A50E-06DC-43C1-80B5-B662820EC3EB}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.EntityFrameworkCore", "src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj", "{C956DD76-69C8-4A9C-83EA-D17DF83340FD}"
    EndProject
    Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "src", "src", "{CA9AC87F-097E-4F15-8393-4BC07735A5B0}"
    EndProject
    Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "test", "test", "{04DBDB01-70F4-4E06-B468-8F87850B22BE}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Application.Tests", "test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.csproj", "{50B2631D-129C-47B3-A587-029CCD6099BC}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Domain.Shared", "src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj", "{42F719ED-8413-4895-B5B4-5AB56079BC66}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Application.Contracts", "src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj", "{520659C8-C734-4298-A3DA-B539DB9DFC0B}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi", "src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.csproj", "{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi.Client", "src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.csproj", "{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.EntityFrameworkCore.Tests", "test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.csproj", "{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.TestBase", "test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.csproj", "{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Domain.Tests", "test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.csproj", "{E512F4D9-9375-480F-A2F6-A46509F9D824}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp", "test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.csproj", "{EF480016-9127-4916-8735-D2466BDBC582}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.DbMigrator", "src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayer.DbMigrator.csproj", "{70680696-BB1E-4383-BCB2-42C3767171FB}"
    EndProject
    Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi.Host", "src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayer.HttpApi.Host.csproj", "{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}"
    EndProject
    Global
    	GlobalSection(SolutionConfigurationPlatforms) = preSolution
    		Debug|Any CPU = Debug|Any CPU
    		Release|Any CPU = Release|Any CPU
    	EndGlobalSection
    	GlobalSection(ProjectConfigurationPlatforms) = postSolution
    		{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Release|Any CPU.Build.0 = Release|Any CPU
    		{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Release|Any CPU.Build.0 = Release|Any CPU
    		{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Release|Any CPU.Build.0 = Release|Any CPU
    		{50B2631D-129C-47B3-A587-029CCD6099BC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{50B2631D-129C-47B3-A587-029CCD6099BC}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{50B2631D-129C-47B3-A587-029CCD6099BC}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{50B2631D-129C-47B3-A587-029CCD6099BC}.Release|Any CPU.Build.0 = Release|Any CPU
    		{42F719ED-8413-4895-B5B4-5AB56079BC66}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{42F719ED-8413-4895-B5B4-5AB56079BC66}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{42F719ED-8413-4895-B5B4-5AB56079BC66}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{42F719ED-8413-4895-B5B4-5AB56079BC66}.Release|Any CPU.Build.0 = Release|Any CPU
    		{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Release|Any CPU.Build.0 = Release|Any CPU
    		{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Release|Any CPU.Build.0 = Release|Any CPU
    		{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Release|Any CPU.Build.0 = Release|Any CPU
    		{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Release|Any CPU.Build.0 = Release|Any CPU
    		{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Release|Any CPU.Build.0 = Release|Any CPU
    		{E512F4D9-9375-480F-A2F6-A46509F9D824}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{E512F4D9-9375-480F-A2F6-A46509F9D824}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{E512F4D9-9375-480F-A2F6-A46509F9D824}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{E512F4D9-9375-480F-A2F6-A46509F9D824}.Release|Any CPU.Build.0 = Release|Any CPU
    		{EF480016-9127-4916-8735-D2466BDBC582}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{EF480016-9127-4916-8735-D2466BDBC582}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{EF480016-9127-4916-8735-D2466BDBC582}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{EF480016-9127-4916-8735-D2466BDBC582}.Release|Any CPU.Build.0 = Release|Any CPU
    		{70680696-BB1E-4383-BCB2-42C3767171FB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{70680696-BB1E-4383-BCB2-42C3767171FB}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{70680696-BB1E-4383-BCB2-42C3767171FB}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{70680696-BB1E-4383-BCB2-42C3767171FB}.Release|Any CPU.Build.0 = Release|Any CPU
    		{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    		{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Debug|Any CPU.Build.0 = Debug|Any CPU
    		{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Release|Any CPU.ActiveCfg = Release|Any CPU
    		{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Release|Any CPU.Build.0 = Release|Any CPU
    	EndGlobalSection
    	GlobalSection(SolutionProperties) = preSolution
    		HideSolutionNode = FALSE
    	EndGlobalSection
    	GlobalSection(NestedProjects) = preSolution
    		{554AD327-6DBA-4F8F-96F8-81CE7A0C863F} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{1A94A50E-06DC-43C1-80B5-B662820EC3EB} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{C956DD76-69C8-4A9C-83EA-D17DF83340FD} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{50B2631D-129C-47B3-A587-029CCD6099BC} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
    		{42F719ED-8413-4895-B5B4-5AB56079BC66} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{520659C8-C734-4298-A3DA-B539DB9DFC0B} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{4164BDF7-F527-4E85-9CE6-E3C2D7426A27} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{3B5A0094-670D-4BB1-BFDD-61B88A8773DC} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
    		{91853F21-9CD9-4132-BC29-A7D5D84FFFE7} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
    		{E512F4D9-9375-480F-A2F6-A46509F9D824} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
    		{EF480016-9127-4916-8735-D2466BDBC582} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
    		{70680696-BB1E-4383-BCB2-42C3767171FB} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    		{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
    	EndGlobalSection
    	GlobalSection(ExtensibilityGlobals) = postSolution
    		SolutionGuid = {28315BFD-90E7-4E14-A2EA-F3D23AF4126F}
    	EndGlobalSection
    EndGlobal
    
    ]]></file>
  <file path="ExampleAbpApplicationLayer.abpsln"><![CDATA[
    {
      "id": "77f0e646-64d1-4b1d-bc32-cc50c219225a",
      "template": "app",
      "versions": {
        "LeptonX": "4.3.1",
        "AbpFramework": "9.3.1",
        "AbpCommercial": "9.3.1",
        "AbpStudio": "1.2.1",
        "TargetDotnetFramework": "net9.0"
      },
      "modules": {
        "ExampleAbpApplicationLayer": {
          "path": "ExampleAbpApplicationLayer.abpmdl"
        }
      },
      "runProfiles": {
        "Default": {
          "path": "etc/abp-studio/run-profiles/Default.abprun.json"
        }
      },
      "k8sProfiles": {
        "local": {
          "path": "etc/abp-studio/k8s-profiles/local.abpk8s.json"
        }
      },
      "commands": {
        "helmBuildDotnetImage": {
          "triggerTargets": [
            "HELM_CHARTS_ROOT",
            "HELM_MAIN_CHART",
            "HELM_SUB_CHART"
          ],
          "executionTargets": [
            "HELM_MAIN_CHART",
            "HELM_SUB_CHART"
          ],
          "displayName": "Build Docker Image(s)",
          "workingDirectory": "etc/helm",
          "terminalCommand": "./build-image.ps1 -ProjectPath {{metadata.projectPath}} -ImageName {{metadata.imageName}} -ProjectType {{metadata.projectType}}",
          "condition": "{{metadata.projectPath != null && metadata.imageName != null && metadata.projectType != null}}"
        },
        "helmInstallChart": {
          "triggerTargets": [
            "HELM_CHARTS_ROOT",
            "HELM_MAIN_CHART"
          ],
          "executionTargets": [
            "HELM_MAIN_CHART"
          ],
          "displayName": "Install Chart(s)",
          "workingDirectory": "etc/helm",
          "terminalCommand": "./install.ps1 -ChartName {{chart.name}} -Namespace {{profile.namespace}} -ReleaseName {{chart.name}}-{{profile.name}} -DotnetEnvironment {{metadata.dotnetEnvironment}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}",
          "requireConfirmation": "true",
          "confirmationText": "Are you sure to install the chart(s) for the profile {{ profile.name }}?"
        },
        "helmUninstallChart": {
          "triggerTargets": [
            "HELM_CHARTS_ROOT",
            "HELM_MAIN_CHART"
          ],
          "executionTargets": [
            "HELM_MAIN_CHART"
          ],
          "displayName": "Uninstall Chart(s)",
          "workingDirectory": "etc/helm",
          "terminalCommand": "./uninstall.ps1 -Namespace {{profile.namespace}} -ReleaseName {{chart.name}}-{{profile.name}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}",
          "requireConfirmation": "true",
          "confirmationText": "Are you sure to uninstall the chart(s) for the profile {{profile.name}}?"
        },
        "kubernetesRedeploy": {
          "triggerTargets": [
            "KUBERNETES_SERVICE"
          ],
          "executionTargets": [
            "KUBERNETES_SERVICE"
          ],
          "displayName": "Redeploy",
          "workingDirectory": "etc/helm",
          "terminalCommand": "./build-image.ps1 -ProjectPath {{chart.metadata.projectPath}} -ImageName {{chart.metadata.imageName}} -ProjectType {{chart.metadata.projectType}} &&& ./install.ps1 -ChartName {{mainChart.name}} -Namespace {{profile.namespace}} -ReleaseName {{mainChart.name}}-{{profile.name}} -DotnetEnvironment {{mainChart.metadata.dotnetEnvironment}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}",
          "requireConfirmation": "true",
          "confirmationText": "Are you sure to redeploy the related chart '{{chart.name}}' for the service '{{name}}'?",
          "condition": "{{chart != null && chart.metadata.projectPath != null && chart.metadata.imageName != null && chart.metadata.projectType != null}}"
        },
        "createTlsSecret": {
          "triggerTargets": [
            "HELM_CHARTS_ROOT"
          ],
          "executionTargets": [
            "HELM_CHARTS_ROOT"
          ],
          "displayName": "Create Self-Signed TLS secret",
          "workingDirectory": "etc/helm",
          "terminalCommand": "./create-tls-secrets.ps1 -Namespace {{profile.namespace}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}"
        }
      },
      "helm": {
        "charts": {
          "exampleabpapplicationlayer": {
            "name": "exampleabpapplicationlayer",
            "path": "etc/helm/exampleabpapplicationlayer",
            "charts": {
              "angular": {
                "name": "angular",
                "path": "etc/helm/exampleabpapplicationlayer/charts/angular",
                "metadata": {
                  "projectPath": "../../angular",
                  "imageName": "exampleabpapplicationlayer/angular",
                  "projectType": "angular"
                },
                "services": [
                  ".*-angular$"
                ]
              },
              "dbmigrator": {
                "name": "dbmigrator",
                "path": "etc/helm/exampleabpapplicationlayer/charts/dbmigrator",
                "metadata": {
                  "projectPath": "../../src/ExampleAbpApplicationLayer.DbMigrator/ExampleAbpApplicationLayer.DbMigrator.csproj",
                  "imageName": "exampleabpapplicationlayer/dbmigrator",
                  "projectType": "dotnet"
                },
                "services": [
                  ".*-dbmigrator"
                ]
              },
              "httpapihost": {
                "name": "httpapihost",
                "path": "etc/helm/exampleabpapplicationlayer/charts/httpapihost",
                "metadata": {
                  "projectPath": "../../src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.csproj",
                  "imageName": "exampleabpapplicationlayer/httpapihost",
                  "projectType": "dotnet"
                },
                "services": [
                  ".*-httpapihost"
                ]
              },
              "rabbitmq": {
                "name": "rabbitmq",
                "path": "etc/helm/exampleabpapplicationlayer/charts/rabbitmq"
              },
              "sqlserver": {
                "name": "sqlserver",
                "path": "etc/helm/exampleabpapplicationlayer/charts/sqlserver"
              },
            },
            "metadata": {}
          }
        }
      },
      "options": {
        "httpRequests": {
          "ignoredUrls": [
          
          ]
        }
      },
      "creatingStudioConfiguration": {
        "template": "app",
        "createdAbpStudioVersion": "1.2.1",
        "tiered": "false",
        "runInstallLibs": "true",
        "useLocalReferences": "false",
        "multiTenancy": "true",
        "includeTests": "true",
        "kubernetesConfiguration": "true",
        "uiFramework": "angular",
        "mobileFramework": "none",
        "distributedEventBus": "rabbitmq",
        "databaseProvider": "ef",
        "runDbMigrator": "false",
        "databaseManagementSystem": "sqlserver",
        "separateTenantSchema": "false",
        "createInitialMigration": "true",
        "theme": "leptonx",
        "themeStyle": "system",
        "themeMenuPlacement": "side",
        "mobileFramework": "none",
        "progressiveWebApp": "false",
        "runProgressiveWebAppSupport": "false",
        "publicWebsite": "false",
        "optionalModules": "GDPR FileManagement TextTemplateManagement LanguageManagement AuditLogging Chat OpenIddictAdmin",
        "socialLogin": "true",
        "selectedLanguages": ["English", "Arabic", ],
        "defaultLanguage": "English",
        "createCommand": "abp new ExampleAbpApplicationLayer -t app --ui-framework angular --database-provider ef --database-management-system sqlserver --theme leptonx --skip-migrator  --without-cms-kit --dont-run-bundling -chat -file-management"
      }
    }
    ]]></file>
  <file path="ExampleAbpApplicationLayer.abpmdl"><![CDATA[
    {
      "template": "app",
      "imports": {
        "Volo.Abp.LeptonXTheme": {
          "version": "4.3.1",
          "isInstalled": true
        },
        "Volo.Abp.TextTemplateManagement": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Chat": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.LanguageManagement": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.FileManagement": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.OpenIddict.Pro": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.Gdpr": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.AuditLogging.Pro": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Saas": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.Identity.Pro": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.Account.Pro": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.SettingManagement": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.PermissionManagement": {
          "version": "9.3.1",
          "isInstalled": true
        },
        "Volo.Abp.FeatureManagement": {
          "version": "9.3.1",
          "isInstalled": true
        }
      },
      "folders": {
        "items": {
          "src": {},
          "test": {}
        }
      },
      "packages": {
        "ExampleAbpApplicationLayer.Application": {
          "path": "src/ExampleAbpApplicationLayer.Application/ExampleAbpApplicationLayer.Application.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.Application.Tests": {
          "path": "test/ExampleAbpApplicationLayer.Application.Tests/ExampleAbpApplicationLayer.Application.Tests.abppkg",
          "folder": "test"
        },
        "ExampleAbpApplicationLayer.Domain.Shared": {
          "path": "src/ExampleAbpApplicationLayer.Domain.Shared/ExampleAbpApplicationLayer.Domain.Shared.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.Application.Contracts": {
          "path": "src/ExampleAbpApplicationLayer.Application.Contracts/ExampleAbpApplicationLayer.Application.Contracts.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.HttpApi": {
          "path": "src/ExampleAbpApplicationLayer.HttpApi/ExampleAbpApplicationLayer.HttpApi.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.HttpApi.Client": {
          "path": "src/ExampleAbpApplicationLayer.HttpApi.Client/ExampleAbpApplicationLayer.HttpApi.Client.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.EntityFrameworkCore.Tests": {
          "path": "test/ExampleAbpApplicationLayer.EntityFrameworkCore.Tests/ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.abppkg",
          "folder": "test"
        },
        "ExampleAbpApplicationLayer.EntityFrameworkCore": {
          "path": "src/ExampleAbpApplicationLayer.EntityFrameworkCore/ExampleAbpApplicationLayer.EntityFrameworkCore.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.TestBase": {
          "path": "test/ExampleAbpApplicationLayer.TestBase/ExampleAbpApplicationLayer.TestBase.abppkg",
          "folder": "test"
        },
        "ExampleAbpApplicationLayer.Domain.Tests": {
          "path": "test/ExampleAbpApplicationLayer.Domain.Tests/ExampleAbpApplicationLayer.Domain.Tests.abppkg",
          "folder": "test"
        },
        "ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp": {
          "path": "test/ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp/ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.abppkg",
          "folder": "test"
        },
        "ExampleAbpApplicationLayer.DbMigrator": {
          "path": "src/ExampleAbpApplicationLayer.DbMigrator/ExampleAbpApplicationLayer.DbMigrator.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.HttpApi.Host": {
          "path": "src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.abppkg",
          "folder": "src"
        },
        "ExampleAbpApplicationLayer.Domain": {
          "path": "src/ExampleAbpApplicationLayer.Domain/ExampleAbpApplicationLayer.Domain.abppkg",
          "folder": "src"
        }
      }
    }
    ]]></file>
  <file path="Directory.Build.props"><![CDATA[
    <Project>
        <ItemGroup>
            <ProjectCapability Include="DynamicDependentFile" />
            <ProjectCapability Include="DynamicFileNesting" />
        </ItemGroup>
    </Project>
    ]]></file>
  <file path="common.props"><![CDATA[
    <Project>
      <PropertyGroup>
        <LangVersion>latest</LangVersion>
        <Version>1.0.0</Version>
        <NoWarn>$(NoWarn);CS1591</NoWarn>
    	<AbpProjectType>app</AbpProjectType>
      </PropertyGroup>
    
      <Target Name="NoWarnOnRazorViewImportedTypeConflicts" BeforeTargets="RazorCoreCompile">
        <PropertyGroup>
          <NoWarn>$(NoWarn);0436</NoWarn>
        </PropertyGroup>
      </Target>
    
      <ItemGroup>
        <None Remove="**\*.abppkg" />
        <None Remove="**\*.abppkg.analyze.json" />
        <Content Remove="$(UserProfile)\.nuget\packages\*\*\contentFiles\any\*\*.abppkg*" />
      </ItemGroup>
    
    </Project>
    ]]></file>
  <file path=".gitignore"><![CDATA[
    ## Ignore Visual Studio temporary files, build results, and
    ## files generated by popular Visual Studio add-ons.
    
    # User-specific files
    *.suo
    *.user
    *.userosscache
    *.sln.docstates
    
    # User-specific files (MonoDevelop/Xamarin Studio)
    *.userprefs
    
    # Build results
    [Dd]ebug/
    [Dd]ebugPublic/
    [Rr]elease/
    [Rr]eleases/
    x64/
    x86/
    bld/
    [Bb]in/
    [Oo]bj/
    [Ll]og/
    
    # Visual Studio 2015 cache/options directory
    .vs/
    # Uncomment if you have tasks that create the project's static files in wwwroot
    #wwwroot/
    
    # MSTest test Results
    [Tt]est[Rr]esult*/
    [Bb]uild[Ll]og.*
    
    # NUNIT
    *.VisualState.xml
    TestResult.xml
    
    # Build Results of an ATL Project
    [Dd]ebugPS/
    [Rr]eleasePS/
    dlldata.c
    
    # DNX
    project.lock.json
    artifacts/
    
    *_i.c
    *_p.c
    *_i.h
    *.ilk
    *.meta
    *.obj
    *.pch
    *.pdb
    *.pgc
    *.pgd
    *.rsp
    *.sbr
    *.tlb
    *.tli
    *.tlh
    *.tmp
    *.tmp_proj
    *.log
    *.vspscc
    *.vssscc
    .builds
    *.pidb
    *.svclog
    *.scc
    
    # Chutzpah Test files
    _Chutzpah*
    
    # Visual C++ cache files
    ipch/
    *.aps
    *.ncb
    *.opendb
    *.opensdf
    *.sdf
    *.cachefile
    *.VC.db
    *.VC.VC.opendb
    
    # Visual Studio profiler
    *.psess
    *.vsp
    *.vspx
    *.sap
    
    # TFS 2012 Local Workspace
    $tf/
    
    # Guidance Automation Toolkit
    *.gpState
    
    # ReSharper is a .NET coding add-in
    _ReSharper*/
    *.[Rr]e[Ss]harper
    *.DotSettings.user
    
    # JustCode is a .NET coding add-in
    .JustCode
    
    # TeamCity is a build add-in
    _TeamCity*
    
    # DotCover is a Code Coverage Tool
    *.dotCover
    
    # NCrunch
    _NCrunch_*
    .*crunch*.local.xml
    nCrunchTemp_*
    
    # MightyMoose
    *.mm.*
    AutoTest.Net/
    
    # Web workbench (sass)
    .sass-cache/
    
    # Installshield output folder
    [Ee]xpress/
    
    # DocProject is a documentation generator add-in
    DocProject/buildhelp/
    DocProject/Help/*.HxT
    DocProject/Help/*.HxC
    DocProject/Help/*.hhc
    DocProject/Help/*.hhk
    DocProject/Help/*.hhp
    DocProject/Help/Html2
    DocProject/Help/html
    
    # Click-Once directory
    publish/
    
    # Publish Web Output
    *.[Pp]ublish.xml
    *.azurePubxml
    # TODO: Comment the next line if you want to checkin your web deploy settings
    # but database connection strings (with potential passwords) will be unencrypted
    *.pubxml
    *.publishproj
    
    # Microsoft Azure Web App publish settings. Comment the next line if you want to
    # checkin your Azure Web App publish settings, but sensitive information contained
    # in these scripts will be unencrypted
    PublishScripts/
    
    # NuGet Packages
    *.nupkg
    # The packages folder can be ignored because of Package Restore
    **/packages/*
    # except build/, which is used as an MSBuild target.
    !**/packages/build/
    # Uncomment if necessary however generally it will be regenerated when needed
    #!**/packages/repositories.config
    # NuGet v3's project.json files produces more ignoreable files
    *.nuget.props
    *.nuget.targets
    
    # Microsoft Azure Build Output
    csx/
    *.build.csdef
    
    # Microsoft Azure Emulator
    ecf/
    rcf/
    
    # Windows Store app package directories and files
    AppPackages/
    BundleArtifacts/
    Package.StoreAssociation.xml
    _pkginfo.txt
    
    # Visual Studio cache files
    # files ending in .cache can be ignored
    *.[Cc]ache
    # but keep track of directories ending in .cache
    !*.[Cc]ache/
    
    # Others
    ClientBin/
    ~$*
    *~
    *.dbmdl
    *.dbproj.schemaview
    *.pfx
    *.publishsettings
    node_modules/
    orleans.codegen.cs
    
    # Since there are multiple workflows, uncomment next line to ignore bower_components
    # (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
    #bower_components/
    
    # RIA/Silverlight projects
    Generated_Code/
    
    # Backup & report files from converting an old project file
    # to a newer Visual Studio version. Backup files are not needed,
    # because we have git ;-)
    _UpgradeReport_Files/
    Backup*/
    UpgradeLog*.XML
    UpgradeLog*.htm
    
    # SQL Server files
    *.mdf
    *.ldf
    
    # Business Intelligence projects
    *.rdl.data
    *.bim.layout
    *.bim_*.settings
    
    # Microsoft Fakes
    FakesAssemblies/
    
    # GhostDoc plugin setting file
    *.GhostDoc.xml
    
    # Node.js Tools for Visual Studio
    .ntvs_analysis.dat
    
    # Visual Studio 6 build log
    *.plg
    
    # Visual Studio 6 workspace options file
    *.opt
    
    # Visual Studio LightSwitch build output
    **/*.HTMLClient/GeneratedArtifacts
    **/*.DesktopClient/GeneratedArtifacts
    **/*.DesktopClient/ModelManifest.xml
    **/*.Server/GeneratedArtifacts
    **/*.Server/ModelManifest.xml
    _Pvt_Extensions
    
    # Paket dependency manager
    .paket/paket.exe
    paket-files/
    
    # FAKE - F# Make
    .fake/
    
    # JetBrains Rider
    **/.idea/
    *.sln.iml
    
    # ABP Studio
    **/.abpstudio/
    
    # ExampleAbpApplicationLayer
    src/ExampleAbpApplicationLayer.Web/Logs/*
    src/ExampleAbpApplicationLayer.Web.Host/Logs/*
    src/ExampleAbpApplicationLayer.Web.Public/Logs/*
    src/ExampleAbpApplicationLayer.Web.Public.Host/Logs/*
    src/ExampleAbpApplicationLayer.AuthServer/Logs/*
    src/ExampleAbpApplicationLayer.HttpApi.Host/Logs/*
    src/ExampleAbpApplicationLayer.HttpApi.Host/Logs/*
    src/ExampleAbpApplicationLayer.DbMigrator/Logs/*
    src/ExampleAbpApplicationLayer.Blazor.Server/Logs/*
    src/ExampleAbpApplicationLayer.Blazor.Server.Tiered/Logs/*
    
    # Use abp install-libs to restore.
    **/wwwroot/libs/*
    
    # IdentityServer temp files
    tempkey.rsa
    tempkey.jwk
    ]]></file>
  <file path=".gitattributes"><![CDATA[
    **/wwwroot/libs/** linguist-vendored
    
    ]]></file>
  <file path=".filenesting.json"><![CDATA[
    {
      "help": "https://go.microsoft.com/fwlink/?linkid=866610",
      "root": true,
    
      "dependentFileProviders": {
        "add": {
          "addedExtension": {},
          "pathSegment": {
            "add": {
              ".*": [
                ".js",
                ".css",
                ".html",
                ".htm",
                ".less",
                ".scss",
                ".coffee",
                ".iced",
                ".config",
                ".cs",
                ".vb",
                ".json"
              ],
              ".Extended.cs": [
                ".cs"
              ],
              ".Extended.cshtml.cs": [
                ".cs"
              ],
              ".Extended.razor.cs": [
                ".cs"
              ]
            }
          },
          "extensionToExtension": {
            "add": {
              ".js": [
                ".coffee",
                ".iced",
                ".ts",
                ".tsx",
                ".jsx"
              ],
              ".css": [
                ".less",
                ".scss",
                ".sass",
                ".styl"
              ],
              ".html": [
                ".md",
                ".mdown",
                ".markdown",
                ".mdwn"
              ],
              ".map": [
                ".js",
                ".css"
              ],
              ".svgz": [
                ".svg"
              ],
              ".designer.cs": [
                ".resx"
              ],
              ".cs.d.ts": [
                ".cs"
              ],
              ".Extended.razor.cs": [
                ".razor"
              ]
            }
          },
          "fileToFile": {
            "add": {
              ".bowerrc": [
                "bower.json"
              ],
              ".npmrc": [
                "package.json"
              ],
              "npm-shrinkwrap.json": [
                "package.json"
              ],
              "yarn.lock": [
                "package.json"
              ],
              ".yarnclean": [
                "package.json"
              ],
              ".yarnignore": [
                "package.json"
              ],
              ".yarn-integrity": [
                "package.json"
              ],
              ".yarnrc": [
                "package.json"
              ],
              "package-lock.json": [
                "package.json"
              ]
            }
          },
          "fileSuffixToExtension": {
            "add": {
              "-vsdoc.js": [
                ".js"
              ]
            }
          },
          "allExtensions": {
            "add": {
            }
          }
        }
      }
    }
    
    ]]></file>
  <file path=".editorconfig"><![CDATA[
    [*.csproj]
    indent_size = 2
    ]]></file>
  <file path="angular\yarn.lock"><![CDATA[
    # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
    # yarn lockfile v1
    
    
    "@abp/ng.components@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.components/-/ng.components-9.3.1.tgz#ce51456a4110bd001b7c9754e3e8b451f4a132cf"
      integrity sha512-/FW6sRxVW/0wW0ul+vHt3wh69XcQ4m5zPeAHeypk1awTyR8syqKICMdfZaGD90S/uu17L8egRqINekCU2RoplQ==
      dependencies:
        "@ctrl/tinycolor" "^4.0.0"
        chart.js "^3.5.1"
        ng-zorro-antd "~20.0.0"
        tslib "^2.0.0"
    
    "@abp/ng.core@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.core/-/ng.core-9.3.1.tgz#33f10cf7c1e92575f3e537a95e7f434962caadfd"
      integrity sha512-d7sCCxpqQqVRmA85Aup6GcKCEWR73v2ecfvDG2vC7lLf7e8VrYuNwOC1NwUnkOSY9GVFSvFA4shcqbFLgMZ4RA==
      dependencies:
        "@abp/utils" "~9.3.1"
        just-clone "^6.0.0"
        just-compare "^2.0.0"
        luxon "^3.0.0"
        ts-toolbelt "^9.0.0"
        tslib "^2.0.0"
    
    "@abp/ng.feature-management@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.feature-management/-/ng.feature-management-9.3.1.tgz#ab86a062aa1b2e4072d11a99c6d6006151163a4f"
      integrity sha512-shz0ZhO1CEGqchuRio3vZLyKwE32UONbovz6ESZ5zwDBumYhwO/xOuAFr6VMGjgUE1oRLD4sZrv5/UX7l08iUg==
      dependencies:
        "@abp/ng.theme.shared" "~9.3.1"
        tslib "^2.0.0"
    
    "@abp/ng.oauth@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.oauth/-/ng.oauth-9.3.1.tgz#0125c432a108bb9ddba6f24904050acc03f4dd63"
      integrity sha512-b3j5jNip7iCU+aryz0j/Y8yU0qGVCqMzyT7z3dMqcEVcNub6FFfArbJmBY/S5+kEyK1t2F3WvOFAIh5ls54igg==
      dependencies:
        "@abp/ng.core" "~9.3.1"
        "@abp/utils" "~9.3.1"
        angular-oauth2-oidc "^20.0.0"
        just-clone "^6.0.0"
        just-compare "^2.0.0"
        tslib "^2.0.0"
    
    "@abp/ng.permission-management@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.permission-management/-/ng.permission-management-9.3.1.tgz#3b8563f02b47c8f37b066eaea1495839688fe2b9"
      integrity sha512-1L7+6S+v/NXmweqn1HW96hs4BdzPvDY/wvVC2dqVBzzhR2d3XT5ScIgKCZ4SskkvDcVZNgYBtFKDH1i19GIJ0w==
      dependencies:
        "@abp/ng.theme.shared" "~9.3.1"
        tslib "^2.0.0"
    
    "@abp/ng.schematics@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.schematics/-/ng.schematics-9.3.1.tgz#49f5b568b41fe47140ecce6dda040f9fd9cc1654"
      integrity sha512-jv1eigGCOkA04mUJ+RDD6/k677dqf9sgIzuOFX+J45zeuL8YRn6LFB2SFk/iSSqjcXdK7rGUpJx4MvTUgxu7wA==
      dependencies:
        "@angular-devkit/core" "~20.0.0"
        "@angular-devkit/schematics" "~20.0.0"
        "@angular/cli" "~20.0.0"
        got "^11.5.2"
        jsonc-parser "^2.3.0"
        should-quote "^1.0.0"
        typescript "~5.8.0"
    
    "@abp/ng.setting-management@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.setting-management/-/ng.setting-management-9.3.1.tgz#403936bd1efeb29b28f924682f37be48cdcd7ef9"
      integrity sha512-o7Lw8VQ8qRnebcgbvq40XpVPDSfoG7c+C0oYw0Bf/XDpIQMFEaAkPDXQ85WYd2goTped0jF/W7l4dzgMI+L4/A==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        tslib "^2.0.0"
    
    "@abp/ng.theme.shared@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/ng.theme.shared/-/ng.theme.shared-9.3.1.tgz#3850289b9246a34fb6fce398640ab4a100278262"
      integrity sha512-QqHi3NWeDNPmREmZF1nYTfuT3RHVkP/Xfh+ngy+AmMIJo3LSDlodkuS+HssVJMhsCn3l1y321TkaTGcF5PlXdQ==
      dependencies:
        "@abp/ng.core" "~9.3.1"
        "@fortawesome/fontawesome-free" "^6.0.0"
        "@ng-bootstrap/ng-bootstrap" "~19.0.0"
        "@ngx-validate/core" "^0.2.0"
        "@popperjs/core" "~2.11.0"
        "@swimlane/ngx-datatable" "^21.0.0"
        bootstrap "^5.0.0"
        tslib "^2.0.0"
    
    "@abp/utils@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@abp/utils/-/utils-9.3.1.tgz#1a649f793c0a95a3a02f331bf0467908ba32fe65"
      integrity sha512-4cEl8npNp3R5cnhIjlXq8DjBLnA3U1H50E4xMtSY8Y9/nnvkn7ESqIzMlYlPDw9SUjQ4uhftVJqUyh83yq48jg==
      dependencies:
        just-compare "^2.3.0"
    
    "@ampproject/remapping@2.3.0", "@ampproject/remapping@^2.2.0":
      version "2.3.0"
      resolved "https://registry.yarnpkg.com/@ampproject/remapping/-/remapping-2.3.0.tgz#ed441b6fa600072520ce18b43d2c8cc8caecc7f4"
      integrity sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==
      dependencies:
        "@jridgewell/gen-mapping" "^0.3.5"
        "@jridgewell/trace-mapping" "^0.3.24"
    
    "@angular-devkit/architect@0.2000.6":
      version "0.2000.6"
      resolved "https://registry.yarnpkg.com/@angular-devkit/architect/-/architect-0.2000.6.tgz#847bb109d6a7d67bb75a9d3b750d188b5f186698"
      integrity sha512-LvXYe7hqEgkBKzDy4VKTgCg2E2nAl8vC986n1+snzt2zMjo2l8wFl6BWal3AtaKGhPlp8/57Y53MdG2TIgUJNA==
      dependencies:
        "@angular-devkit/core" "20.0.6"
        rxjs "7.8.2"
    
    "@angular-devkit/architect@>= 0.2000.0 < 0.2100.0":
      version "0.2002.0"
      resolved "https://registry.yarnpkg.com/@angular-devkit/architect/-/architect-0.2002.0.tgz#3c00b6aea8836e9683122c118523c2a44b508d6e"
      integrity sha512-PaBXFP1kdUuNtMie0lWnitlYbq8o1gz/s0YIa8oY1X3swOJ7bP6kBfxTb9opV5uXAOkXg2zCdnZ4Eu1aVkgPGw==
      dependencies:
        "@angular-devkit/core" "20.2.0"
        rxjs "7.8.2"
    
    "@angular-devkit/build-angular@~20.0.0":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@angular-devkit/build-angular/-/build-angular-20.0.6.tgz#452f250c64b75a0439e09ee0d1d4ac7ba0371ec0"
      integrity sha512-xUpNsvwlZW8BMkw9otMEKoXLR5IgmRt2lROdxDEJLttt+6aW+0HBv1nwkJz4j2VyH98wkAm1C+ik54/QkyX6eA==
      dependencies:
        "@ampproject/remapping" "2.3.0"
        "@angular-devkit/architect" "0.2000.6"
        "@angular-devkit/build-webpack" "0.2000.6"
        "@angular-devkit/core" "20.0.6"
        "@angular/build" "20.0.6"
        "@babel/core" "7.27.1"
        "@babel/generator" "7.27.1"
        "@babel/helper-annotate-as-pure" "7.27.1"
        "@babel/helper-split-export-declaration" "7.24.7"
        "@babel/plugin-transform-async-generator-functions" "7.27.1"
        "@babel/plugin-transform-async-to-generator" "7.27.1"
        "@babel/plugin-transform-runtime" "7.27.1"
        "@babel/preset-env" "7.27.2"
        "@babel/runtime" "7.27.1"
        "@discoveryjs/json-ext" "0.6.3"
        "@ngtools/webpack" "20.0.6"
        ansi-colors "4.1.3"
        autoprefixer "10.4.21"
        babel-loader "10.0.0"
        browserslist "^4.21.5"
        copy-webpack-plugin "13.0.0"
        css-loader "7.1.2"
        esbuild-wasm "0.25.5"
        fast-glob "3.3.3"
        http-proxy-middleware "3.0.5"
        istanbul-lib-instrument "6.0.3"
        jsonc-parser "3.3.1"
        karma-source-map-support "1.4.0"
        less "4.3.0"
        less-loader "12.3.0"
        license-webpack-plugin "4.0.2"
        loader-utils "3.3.1"
        mini-css-extract-plugin "2.9.2"
        open "10.1.2"
        ora "8.2.0"
        picomatch "4.0.2"
        piscina "5.1.1"
        postcss "8.5.3"
        postcss-loader "8.1.1"
        resolve-url-loader "5.0.0"
        rxjs "7.8.2"
        sass "1.88.0"
        sass-loader "16.0.5"
        semver "7.7.2"
        source-map-loader "5.0.0"
        source-map-support "0.5.21"
        terser "5.39.1"
        tree-kill "1.2.2"
        tslib "2.8.1"
        webpack "5.99.8"
        webpack-dev-middleware "7.4.2"
        webpack-dev-server "5.2.1"
        webpack-merge "6.0.1"
        webpack-subresource-integrity "5.1.0"
      optionalDependencies:
        esbuild "0.25.5"
    
    "@angular-devkit/build-webpack@0.2000.6":
      version "0.2000.6"
      resolved "https://registry.yarnpkg.com/@angular-devkit/build-webpack/-/build-webpack-0.2000.6.tgz#e75353393566150c3e0a89d4c3880dcb7ab8a324"
      integrity sha512-cvqAVtEf1HHFYvq+fGi5N7djkfgQGmworIeGoWPKlw052yyNSenBG2dOacj14BPpubkAgd6GoFi5M0bgZa5N7g==
      dependencies:
        "@angular-devkit/architect" "0.2000.6"
        rxjs "7.8.2"
    
    "@angular-devkit/core@20.0.6", "@angular-devkit/core@~20.0.0":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@angular-devkit/core/-/core-20.0.6.tgz#a68439c0f62b7f9167d6f3617553c419cc47634b"
      integrity sha512-kalYqR/soAMPgYdaKJL3iOMCubiq0gljpbQFzS+Uey/P1nn+MDY8V0zzc9cBNhKKkAxCXPN/NIEKC7ICOfaJbg==
      dependencies:
        ajv "8.17.1"
        ajv-formats "3.0.1"
        jsonc-parser "3.3.1"
        picomatch "4.0.2"
        rxjs "7.8.2"
        source-map "0.7.4"
    
    "@angular-devkit/core@20.2.0", "@angular-devkit/core@>= 20.0.0 < 21.0.0":
      version "20.2.0"
      resolved "https://registry.yarnpkg.com/@angular-devkit/core/-/core-20.2.0.tgz#9ad5e8086f15fcadb8d72413643487cf149fe944"
      integrity sha512-3CM6Zsr09Kf92ItFkxijlnC4+ZOgkxdCk0vFYvuw9UuvTDNwyIqJi6693PRPRbcXgpdY2vs6u99elSvQVmoEEw==
      dependencies:
        ajv "8.17.1"
        ajv-formats "3.0.1"
        jsonc-parser "3.3.1"
        picomatch "4.0.3"
        rxjs "7.8.2"
        source-map "0.7.6"
    
    "@angular-devkit/schematics@20.0.6", "@angular-devkit/schematics@~20.0.0":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@angular-devkit/schematics/-/schematics-20.0.6.tgz#69031eed5d72f3e1ccd01f88b2ef0ddaefb209d0"
      integrity sha512-4YjAJVN6bPL7d46Jb4Rok703av5UHlHQBhfJfkPVrUV45mwUboBhBrl0WzlKuUN6JhE44xFO48LApxdT1rbYRA==
      dependencies:
        "@angular-devkit/core" "20.0.6"
        jsonc-parser "3.3.1"
        magic-string "0.30.17"
        ora "8.2.0"
        rxjs "7.8.2"
    
    "@angular-devkit/schematics@>= 20.0.0 < 21.0.0":
      version "20.2.0"
      resolved "https://registry.yarnpkg.com/@angular-devkit/schematics/-/schematics-20.2.0.tgz#99e07f09feeaeb8073e71b7612f2b8381a40d7f1"
      integrity sha512-TCPIN6Bd04oGuNocETmsd9hzGYrjrivisbMKb0WOuDi3OnCkmWqsPR+QA2kYwTOGqG3HXkz/z3CA0g04M2fgrQ==
      dependencies:
        "@angular-devkit/core" "20.2.0"
        jsonc-parser "3.3.1"
        magic-string "0.30.17"
        ora "8.2.0"
        rxjs "7.8.2"
    
    "@angular-eslint/builder@~20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/builder/-/builder-20.0.0.tgz#ac92670310e10c8ddb1911706e88161fe66cdfce"
      integrity sha512-9jS3VvY+K+EHw9pofsdwKxDirKuTuRBnjMZdaKoUfLoYy5eS1XGJBXoMdaQiM+mSlTv113+L0SK4U565xiBLHQ==
      dependencies:
        "@angular-devkit/architect" ">= 0.2000.0 < 0.2100.0"
        "@angular-devkit/core" ">= 20.0.0 < 21.0.0"
    
    "@angular-eslint/bundled-angular-compiler@20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/bundled-angular-compiler/-/bundled-angular-compiler-20.0.0.tgz#dd694e6311b8ecb0b053c6a00ac504d65f2ce08b"
      integrity sha512-mDXMQd08s11q9fC6Ps3ffZmvXop9eLuAAXexofHhA7uuoQAoUWS2zoOSNTWtDR6oxMcqEeMnALCjjFeJVBSVmg==
    
    "@angular-eslint/eslint-plugin-template@20.0.0", "@angular-eslint/eslint-plugin-template@~20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/eslint-plugin-template/-/eslint-plugin-template-20.0.0.tgz#7237f57f7f9f4753406060ceca7946a1db745cc3"
      integrity sha512-QoGgrawU5JFcaj0TjXHKC6fiZkxBeGVRj/TWJtTo/x+c5TVoV5k9pI7Uxdmo9kr4SkPXmt80ZklvExSA510gyw==
      dependencies:
        "@angular-eslint/bundled-angular-compiler" "20.0.0"
        "@angular-eslint/utils" "20.0.0"
        aria-query "5.3.2"
        axobject-query "4.1.0"
    
    "@angular-eslint/eslint-plugin@20.0.0", "@angular-eslint/eslint-plugin@~20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/eslint-plugin/-/eslint-plugin-20.0.0.tgz#bf91c54c6da95c24950b53af4855c79ef4c5a511"
      integrity sha512-xzaLj2yEn43DH0bE9Gw3GrmC+jivIS5/Hbh3bDj3ctw3mUUrD8hrS7kBo1neZ0gnoVLoo/mwIldG+xs5NDY66A==
      dependencies:
        "@angular-eslint/bundled-angular-compiler" "20.0.0"
        "@angular-eslint/utils" "20.0.0"
    
    "@angular-eslint/schematics@~20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/schematics/-/schematics-20.0.0.tgz#3fba14a7d3121a5e70bcca63b2d9719f61227c04"
      integrity sha512-VL3Sb6Df+iiUSPaQG8NxMPLx0dFRtRGSzsfe6CWYW7FUFP5dYEjpB63gKSAiIBLjPgnG6PMAzrRtfN4nDaTM+g==
      dependencies:
        "@angular-devkit/core" ">= 20.0.0 < 21.0.0"
        "@angular-devkit/schematics" ">= 20.0.0 < 21.0.0"
        "@angular-eslint/eslint-plugin" "20.0.0"
        "@angular-eslint/eslint-plugin-template" "20.0.0"
        ignore "7.0.5"
        semver "7.7.2"
        strip-json-comments "3.1.1"
    
    "@angular-eslint/template-parser@~20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/template-parser/-/template-parser-20.0.0.tgz#be8cae43017ffc8ff4dd4bbaa97da1be56792694"
      integrity sha512-5y9hxH/z+9rIOJp1FwRBSgJ6xt8/pgRfBF+eEIPyIHKl5mV0cVzlQiD7j1LMYTcxJZLHAoryomvSBDpmbtAlWg==
      dependencies:
        "@angular-eslint/bundled-angular-compiler" "20.0.0"
        eslint-scope "^8.0.2"
    
    "@angular-eslint/utils@20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@angular-eslint/utils/-/utils-20.0.0.tgz#9a430d75942d254387aa365121132fb89c07ba7e"
      integrity sha512-3wsx0iX5f/IQgcTwXIzQq2VPHSjYXJasKNSfgMyKXn4MJGljaSNj+A0ao/5zjnwWVpL0vK5PQsk7EIuMcgAdrg==
      dependencies:
        "@angular-eslint/bundled-angular-compiler" "20.0.0"
    
    "@angular/animations@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/animations/-/animations-20.0.7.tgz#f019dd4a7108c8d22a7baa4b5a79fbc2bb7bd512"
      integrity sha512-8qGGm7EcqvUHS1fbKOsWp7t+TLb9P782154h5PWDUqhnOlCeCDaIVf7Vbs8ux37zTDv+/CAWUTEArF5sEOBHHw==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/build@20.0.6":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@angular/build/-/build-20.0.6.tgz#8324ca2aa92ebb5a5571d45555ba29477530d0b4"
      integrity sha512-T5BJ1636EW+lASEazkiJx2odTLA22DlXUNfPCv3brA/oqixSAVA7EInB3ID0m8DRgr/xG/v8YXfOBQWrbjerrA==
      dependencies:
        "@ampproject/remapping" "2.3.0"
        "@angular-devkit/architect" "0.2000.6"
        "@babel/core" "7.27.1"
        "@babel/helper-annotate-as-pure" "7.27.1"
        "@babel/helper-split-export-declaration" "7.24.7"
        "@inquirer/confirm" "5.1.10"
        "@vitejs/plugin-basic-ssl" "2.0.0"
        beasties "0.3.4"
        browserslist "^4.23.0"
        esbuild "0.25.5"
        https-proxy-agent "7.0.6"
        istanbul-lib-instrument "6.0.3"
        jsonc-parser "3.3.1"
        listr2 "8.3.3"
        magic-string "0.30.17"
        mrmime "2.0.1"
        parse5-html-rewriting-stream "7.1.0"
        picomatch "4.0.2"
        piscina "5.1.1"
        rollup "4.40.2"
        sass "1.88.0"
        semver "7.7.2"
        source-map-support "0.5.21"
        tinyglobby "0.2.13"
        vite "6.3.5"
        watchpack "2.4.2"
      optionalDependencies:
        lmdb "3.3.0"
    
    "@angular/cdk@^20.0.0":
      version "20.2.0"
      resolved "https://registry.yarnpkg.com/@angular/cdk/-/cdk-20.2.0.tgz#e63d3fe844735fa3d2d7e5d560e02f6ae5ae5378"
      integrity sha512-BZkhRMr3nEOHHCzEgKZM537G4aq0VAwoejhYn7oIvY0UU+arHKz+U7Gc44KH5GaAgVLojtJtkFXsArifzYUwzw==
      dependencies:
        parse5 "^8.0.0"
        tslib "^2.3.0"
    
    "@angular/cli@~20.0.0":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@angular/cli/-/cli-20.0.6.tgz#86d78dc76a062bd9a4c36596cfb4685725b04af5"
      integrity sha512-d7E3QgYQR42pxzvLOHryqxfEvFdcz6OKhskASQdNGdyH8lIXSKE08U/8KpaeMASTksJ8TmLu31N4JCiCSv29HA==
      dependencies:
        "@angular-devkit/architect" "0.2000.6"
        "@angular-devkit/core" "20.0.6"
        "@angular-devkit/schematics" "20.0.6"
        "@inquirer/prompts" "7.5.1"
        "@listr2/prompt-adapter-inquirer" "2.0.22"
        "@schematics/angular" "20.0.6"
        "@yarnpkg/lockfile" "1.1.0"
        ini "5.0.0"
        jsonc-parser "3.3.1"
        listr2 "8.3.3"
        npm-package-arg "12.0.2"
        npm-pick-manifest "10.0.0"
        pacote "21.0.0"
        resolve "1.22.10"
        semver "7.7.2"
        yargs "17.7.2"
    
    "@angular/common@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/common/-/common-20.0.7.tgz#f813b2a4f96dd6411ed25cc28d105a5be3b2dfe4"
      integrity sha512-1LQrpLqTeB4K9LYrDI91SbN+BaLkTnw4905ZQJrySJzX7s37eB2uJdtY8RKS8VgNithGpknoCtPYRDVX+At75Q==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/compiler-cli@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/compiler-cli/-/compiler-cli-20.0.7.tgz#8ac5ccbba512a564440019542c45120dbf35ecbe"
      integrity sha512-t4B18mE2iX6oFwLmVKLAeTnJgFQwXXKciqfUL4EvKBAEm+Q2vMCefVkEnqLUg+eceHZNK3+0biVxoL5TcCoEAw==
      dependencies:
        "@babel/core" "7.27.7"
        "@jridgewell/sourcemap-codec" "^1.4.14"
        chokidar "^4.0.0"
        convert-source-map "^1.5.1"
        reflect-metadata "^0.2.0"
        semver "^7.0.0"
        tslib "^2.3.0"
        yargs "^18.0.0"
    
    "@angular/compiler@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/compiler/-/compiler-20.0.7.tgz#78d8e93a5f46a9f6440f89048aaea097889c3c80"
      integrity sha512-dy3QWLIgx4I9Ds1AHp/xuPlJK4ZAoctRw96r7KS6KPsnfJBVqrCMLk+n7ObgeAYUIRSCmpO4E4+Y5N+ugwy9iQ==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/core@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/core/-/core-20.0.7.tgz#53c49a519dfde3c62cd394212b46cee535752d08"
      integrity sha512-bIG2oD9G/dH5RoGeJZX+hEpyXcgWDAUYo2KxTJ7hrOFzL4gqjtsroqJlrvqjqiHRamcGdfnIaKKInsnszvZ+nw==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/forms@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/forms/-/forms-20.0.7.tgz#3f533733625840eb985ac78a4c5c0aaeafd8caeb"
      integrity sha512-NJVOSFF1oM59lPM7QuxKzPFiDn9aJ4Q2SIWYWHLmTwC+QADgHPoUXPzjMG35FKfdF8QSDLQye40dNPoWKA1wng==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/language-service@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/language-service/-/language-service-20.0.7.tgz#d5ac628cdaaadda2104b09f4999b1c66ea8818ff"
      integrity sha512-gNhkZhcOtUmeMzVopxS9RSBZAFeDe24NupPyT+oXGj5oKeZQKZ4m9C/e4u1Jo4QF1RCUPCkABj9ZjKEdk8gMfQ==
    
    "@angular/localize@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/localize/-/localize-20.0.7.tgz#d7d83eb933c176587c8307c3f24674c382e94c69"
      integrity sha512-y6jCYhZ7ZJ/spkVM17eIuFuYTyVhJw48fF/E5HqzvKXb44bNBK2J5/IruN06GZOSzCdkI/NF2tgxrrornrEobQ==
      dependencies:
        "@babel/core" "7.27.7"
        "@types/babel__core" "7.20.5"
        tinyglobby "^0.2.12"
        yargs "^18.0.0"
    
    "@angular/platform-browser-dynamic@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/platform-browser-dynamic/-/platform-browser-dynamic-20.0.7.tgz#85fb99c583f72d6d26a1eaf35260936408d2cc17"
      integrity sha512-tMfuYU6ud0lAzazE/7x8DEx2thqcafpdx53pj3/Kz8JVvidWf6ep18D0AVkUJpptS2OczgeWzyOn06jLMmdf7w==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/platform-browser@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/platform-browser/-/platform-browser-20.0.7.tgz#ddeb22f34a051a7dcfb1e88b87fa07f3c20f7efe"
      integrity sha512-oEkNs7Qp0VAiCfpDf15FmISMc+HUq/acvKiI2btKCL0rBkSyBA+nbqdOkwrygi311S8LL0KhaXKr25/Evdh2XQ==
      dependencies:
        tslib "^2.3.0"
    
    "@angular/router@~20.0.0":
      version "20.0.7"
      resolved "https://registry.yarnpkg.com/@angular/router/-/router-20.0.7.tgz#f4def81f4122db8359548e66439ad1bc90bec6ad"
      integrity sha512-ku4gPPx2FzltNiRIui5M7a+dgU9PLrgHxk5w0QUnzaZc7VVDD+1mWxPZo/Yqnk0uKp/iTwbaX7NmxXn0sCbRlg==
      dependencies:
        tslib "^2.3.0"
    
    "@ant-design/colors@^7.0.0":
      version "7.2.1"
      resolved "https://registry.yarnpkg.com/@ant-design/colors/-/colors-7.2.1.tgz#3bbc1c6c18550020d1622a0067ff03492318df98"
      integrity sha512-lCHDcEzieu4GA3n8ELeZ5VQ8pKQAWcGGLRTQ50aQM2iqPpq2evTxER84jfdPvsPAtEcZ7m44NI45edFMo8oOYQ==
      dependencies:
        "@ant-design/fast-color" "^2.0.6"
    
    "@ant-design/fast-color@^2.0.6":
      version "2.0.6"
      resolved "https://registry.yarnpkg.com/@ant-design/fast-color/-/fast-color-2.0.6.tgz#ab4d4455c1542c9017d367c2fa8ca3e4215d0ba2"
      integrity sha512-y2217gk4NqL35giHl72o6Zzqji9O7vHh9YmhUVkPtAOpoTCH4uWxo/pr4VE8t0+ChEPs0qo4eJRC5Q1eXWo3vA==
      dependencies:
        "@babel/runtime" "^7.24.7"
    
    "@ant-design/icons-angular@^20.0.0":
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/@ant-design/icons-angular/-/icons-angular-20.0.0.tgz#67eee0b399e37a9ed6f699eb0ce49ae8f029d46b"
      integrity sha512-KMTytjYxprCI/oOEs0KoxNUsT5g+DVCp5JMMgDOSlSpyTpWg5P54kea0398v8urr4QJFpoCucJshFZ8+uv67cA==
      dependencies:
        "@ant-design/colors" "^7.0.0"
        tslib "^2.0.0"
    
    "@babel/code-frame@^7.0.0", "@babel/code-frame@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.27.1.tgz#200f715e66d52a23b221a9435534a91cc13ad5be"
      integrity sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==
      dependencies:
        "@babel/helper-validator-identifier" "^7.27.1"
        js-tokens "^4.0.0"
        picocolors "^1.1.1"
    
    "@babel/compat-data@^7.27.2", "@babel/compat-data@^7.27.7":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@babel/compat-data/-/compat-data-7.28.0.tgz#9fc6fd58c2a6a15243cd13983224968392070790"
      integrity sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==
    
    "@babel/core@7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.27.1.tgz#89de51e86bd12246003e3524704c49541b16c3e6"
      integrity sha512-IaaGWsQqfsQWVLqMn9OB92MNN7zukfVA4s7KKAI0KfrrDsZ0yhi5uV4baBuLuN7n3vsZpwP8asPPcVwApxvjBQ==
      dependencies:
        "@ampproject/remapping" "^2.2.0"
        "@babel/code-frame" "^7.27.1"
        "@babel/generator" "^7.27.1"
        "@babel/helper-compilation-targets" "^7.27.1"
        "@babel/helper-module-transforms" "^7.27.1"
        "@babel/helpers" "^7.27.1"
        "@babel/parser" "^7.27.1"
        "@babel/template" "^7.27.1"
        "@babel/traverse" "^7.27.1"
        "@babel/types" "^7.27.1"
        convert-source-map "^2.0.0"
        debug "^4.1.0"
        gensync "^1.0.0-beta.2"
        json5 "^2.2.3"
        semver "^6.3.1"
    
    "@babel/core@7.27.7":
      version "7.27.7"
      resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.27.7.tgz#0ddeab1e7b17317dad8c3c3a887716f66b5c4428"
      integrity sha512-BU2f9tlKQ5CAthiMIgpzAh4eDTLWo1mqi9jqE2OxMG0E/OM199VJt2q8BztTxpnSW0i1ymdwLXRJnYzvDM5r2w==
      dependencies:
        "@ampproject/remapping" "^2.2.0"
        "@babel/code-frame" "^7.27.1"
        "@babel/generator" "^7.27.5"
        "@babel/helper-compilation-targets" "^7.27.2"
        "@babel/helper-module-transforms" "^7.27.3"
        "@babel/helpers" "^7.27.6"
        "@babel/parser" "^7.27.7"
        "@babel/template" "^7.27.2"
        "@babel/traverse" "^7.27.7"
        "@babel/types" "^7.27.7"
        convert-source-map "^2.0.0"
        debug "^4.1.0"
        gensync "^1.0.0-beta.2"
        json5 "^2.2.3"
        semver "^6.3.1"
    
    "@babel/core@^7.23.9", "@babel/core@^7.7.5":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.28.3.tgz#aceddde69c5d1def69b839d09efa3e3ff59c97cb"
      integrity sha512-yDBHV9kQNcr2/sUr9jghVyz9C3Y5G2zUM2H2lo+9mKv4sFgbA8s8Z9t8D1jiTkGoO/NoIfKMyKWr4s6CN23ZwQ==
      dependencies:
        "@ampproject/remapping" "^2.2.0"
        "@babel/code-frame" "^7.27.1"
        "@babel/generator" "^7.28.3"
        "@babel/helper-compilation-targets" "^7.27.2"
        "@babel/helper-module-transforms" "^7.28.3"
        "@babel/helpers" "^7.28.3"
        "@babel/parser" "^7.28.3"
        "@babel/template" "^7.27.2"
        "@babel/traverse" "^7.28.3"
        "@babel/types" "^7.28.2"
        convert-source-map "^2.0.0"
        debug "^4.1.0"
        gensync "^1.0.0-beta.2"
        json5 "^2.2.3"
        semver "^6.3.1"
    
    "@babel/generator@7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.27.1.tgz#862d4fad858f7208edd487c28b58144036b76230"
      integrity sha512-UnJfnIpc/+JO0/+KRVQNGU+y5taA5vCbwN8+azkX6beii/ZF+enZJSOKo11ZSzGJjlNfJHfQtmQT8H+9TXPG2w==
      dependencies:
        "@babel/parser" "^7.27.1"
        "@babel/types" "^7.27.1"
        "@jridgewell/gen-mapping" "^0.3.5"
        "@jridgewell/trace-mapping" "^0.3.25"
        jsesc "^3.0.2"
    
    "@babel/generator@^7.27.1", "@babel/generator@^7.27.5", "@babel/generator@^7.28.3":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.28.3.tgz#9626c1741c650cbac39121694a0f2d7451b8ef3e"
      integrity sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==
      dependencies:
        "@babel/parser" "^7.28.3"
        "@babel/types" "^7.28.2"
        "@jridgewell/gen-mapping" "^0.3.12"
        "@jridgewell/trace-mapping" "^0.3.28"
        jsesc "^3.0.2"
    
    "@babel/helper-annotate-as-pure@7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.1.tgz#4345d81a9a46a6486e24d069469f13e60445c05d"
      integrity sha512-WnuuDILl9oOBbKnb4L+DyODx7iC47XfzmNCpTttFsSp6hTG7XZxu60+4IO+2/hPfcGOoKbFiwoI/+zwARbNQow==
      dependencies:
        "@babel/types" "^7.27.1"
    
    "@babel/helper-annotate-as-pure@^7.27.1", "@babel/helper-annotate-as-pure@^7.27.3":
      version "7.27.3"
      resolved "https://registry.yarnpkg.com/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.3.tgz#f31fd86b915fc4daf1f3ac6976c59be7084ed9c5"
      integrity sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==
      dependencies:
        "@babel/types" "^7.27.3"
    
    "@babel/helper-compilation-targets@^7.27.1", "@babel/helper-compilation-targets@^7.27.2":
      version "7.27.2"
      resolved "https://registry.yarnpkg.com/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz#46a0f6efab808d51d29ce96858dd10ce8732733d"
      integrity sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==
      dependencies:
        "@babel/compat-data" "^7.27.2"
        "@babel/helper-validator-option" "^7.27.1"
        browserslist "^4.24.0"
        lru-cache "^5.1.1"
        semver "^6.3.1"
    
    "@babel/helper-create-class-features-plugin@^7.27.1", "@babel/helper-create-class-features-plugin@^7.28.3":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.28.3.tgz#3e747434ea007910c320c4d39a6b46f20f371d46"
      integrity sha512-V9f6ZFIYSLNEbuGA/92uOvYsGCJNsuA8ESZ4ldc09bWk/j8H8TKiPw8Mk1eG6olpnO0ALHJmYfZvF4MEE4gajg==
      dependencies:
        "@babel/helper-annotate-as-pure" "^7.27.3"
        "@babel/helper-member-expression-to-functions" "^7.27.1"
        "@babel/helper-optimise-call-expression" "^7.27.1"
        "@babel/helper-replace-supers" "^7.27.1"
        "@babel/helper-skip-transparent-expression-wrappers" "^7.27.1"
        "@babel/traverse" "^7.28.3"
        semver "^6.3.1"
    
    "@babel/helper-create-regexp-features-plugin@^7.18.6", "@babel/helper-create-regexp-features-plugin@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.27.1.tgz#05b0882d97ba1d4d03519e4bce615d70afa18c53"
      integrity sha512-uVDC72XVf8UbrH5qQTc18Agb8emwjTiZrQE11Nv3CuBEZmVvTwwE9CBUEvHku06gQCAyYf8Nv6ja1IN+6LMbxQ==
      dependencies:
        "@babel/helper-annotate-as-pure" "^7.27.1"
        regexpu-core "^6.2.0"
        semver "^6.3.1"
    
    "@babel/helper-define-polyfill-provider@^0.6.3", "@babel/helper-define-polyfill-provider@^0.6.5":
      version "0.6.5"
      resolved "https://registry.yarnpkg.com/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.5.tgz#742ccf1cb003c07b48859fc9fa2c1bbe40e5f753"
      integrity sha512-uJnGFcPsWQK8fvjgGP5LZUZZsYGIoPeRjSF5PGwrelYgq7Q15/Ft9NGFp1zglwgIv//W0uG4BevRuSJRyylZPg==
      dependencies:
        "@babel/helper-compilation-targets" "^7.27.2"
        "@babel/helper-plugin-utils" "^7.27.1"
        debug "^4.4.1"
        lodash.debounce "^4.0.8"
        resolve "^1.22.10"
    
    "@babel/helper-globals@^7.28.0":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@babel/helper-globals/-/helper-globals-7.28.0.tgz#b9430df2aa4e17bc28665eadeae8aa1d985e6674"
      integrity sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==
    
    "@babel/helper-member-expression-to-functions@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.27.1.tgz#ea1211276be93e798ce19037da6f06fbb994fa44"
      integrity sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==
      dependencies:
        "@babel/traverse" "^7.27.1"
        "@babel/types" "^7.27.1"
    
    "@babel/helper-module-imports@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz#7ef769a323e2655e126673bb6d2d6913bbead204"
      integrity sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==
      dependencies:
        "@babel/traverse" "^7.27.1"
        "@babel/types" "^7.27.1"
    
    "@babel/helper-module-transforms@^7.27.1", "@babel/helper-module-transforms@^7.27.3", "@babel/helper-module-transforms@^7.28.3":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz#a2b37d3da3b2344fe085dab234426f2b9a2fa5f6"
      integrity sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==
      dependencies:
        "@babel/helper-module-imports" "^7.27.1"
        "@babel/helper-validator-identifier" "^7.27.1"
        "@babel/traverse" "^7.28.3"
    
    "@babel/helper-optimise-call-expression@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.27.1.tgz#c65221b61a643f3e62705e5dd2b5f115e35f9200"
      integrity sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==
      dependencies:
        "@babel/types" "^7.27.1"
    
    "@babel/helper-plugin-utils@^7.0.0", "@babel/helper-plugin-utils@^7.18.6", "@babel/helper-plugin-utils@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz#ddb2f876534ff8013e6c2b299bf4d39b3c51d44c"
      integrity sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==
    
    "@babel/helper-remap-async-to-generator@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.27.1.tgz#4601d5c7ce2eb2aea58328d43725523fcd362ce6"
      integrity sha512-7fiA521aVw8lSPeI4ZOD3vRFkoqkJcS+z4hFo82bFSH/2tNd6eJ5qCVMS5OzDmZh/kaHQeBaeyxK6wljcPtveA==
      dependencies:
        "@babel/helper-annotate-as-pure" "^7.27.1"
        "@babel/helper-wrap-function" "^7.27.1"
        "@babel/traverse" "^7.27.1"
    
    "@babel/helper-replace-supers@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-replace-supers/-/helper-replace-supers-7.27.1.tgz#b1ed2d634ce3bdb730e4b52de30f8cccfd692bc0"
      integrity sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==
      dependencies:
        "@babel/helper-member-expression-to-functions" "^7.27.1"
        "@babel/helper-optimise-call-expression" "^7.27.1"
        "@babel/traverse" "^7.27.1"
    
    "@babel/helper-skip-transparent-expression-wrappers@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.27.1.tgz#62bb91b3abba8c7f1fec0252d9dbea11b3ee7a56"
      integrity sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==
      dependencies:
        "@babel/traverse" "^7.27.1"
        "@babel/types" "^7.27.1"
    
    "@babel/helper-split-export-declaration@7.24.7":
      version "7.24.7"
      resolved "https://registry.yarnpkg.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.24.7.tgz#83949436890e07fa3d6873c61a96e3bbf692d856"
      integrity sha512-oy5V7pD+UvfkEATUKvIjvIAH/xCzfsFVw7ygW2SI6NClZzquT+mwdTfgfdbUiceh6iQO0CHtCPsyze/MZ2YbAA==
      dependencies:
        "@babel/types" "^7.24.7"
    
    "@babel/helper-string-parser@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz#54da796097ab19ce67ed9f88b47bb2ec49367687"
      integrity sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==
    
    "@babel/helper-validator-identifier@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz#a7054dcc145a967dd4dc8fee845a57c1316c9df8"
      integrity sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==
    
    "@babel/helper-validator-option@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz#fa52f5b1e7db1ab049445b421c4471303897702f"
      integrity sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==
    
    "@babel/helper-wrap-function@^7.27.1":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/helper-wrap-function/-/helper-wrap-function-7.28.3.tgz#fe4872092bc1438ffd0ce579e6f699609f9d0a7a"
      integrity sha512-zdf983tNfLZFletc0RRXYrHrucBEg95NIFMkn6K9dbeMYnsgHaSBGcQqdsCSStG2PYwRre0Qc2NNSCXbG+xc6g==
      dependencies:
        "@babel/template" "^7.27.2"
        "@babel/traverse" "^7.28.3"
        "@babel/types" "^7.28.2"
    
    "@babel/helpers@^7.27.1", "@babel/helpers@^7.27.6", "@babel/helpers@^7.28.3":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.28.3.tgz#b83156c0a2232c133d1b535dd5d3452119c7e441"
      integrity sha512-PTNtvUQihsAsDHMOP5pfobP8C6CM4JWXmP8DrEIt46c3r2bf87Ua1zoqevsMo9g+tWDwgWrFP5EIxuBx5RudAw==
      dependencies:
        "@babel/template" "^7.27.2"
        "@babel/types" "^7.28.2"
    
    "@babel/parser@^7.1.0", "@babel/parser@^7.20.7", "@babel/parser@^7.23.9", "@babel/parser@^7.27.1", "@babel/parser@^7.27.2", "@babel/parser@^7.27.7", "@babel/parser@^7.28.3":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.28.3.tgz#d2d25b814621bca5fe9d172bc93792547e7a2a71"
      integrity sha512-7+Ey1mAgYqFAx2h0RuoxcQT5+MlG3GTV0TQrgr7/ZliKsm/MNDxVVutlWaziMq7wJNAz8MTqz55XLpWvva6StA==
      dependencies:
        "@babel/types" "^7.28.2"
    
    "@babel/plugin-bugfix-firefox-class-in-computed-class-key@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.27.1.tgz#61dd8a8e61f7eb568268d1b5f129da3eee364bf9"
      integrity sha512-QPG3C9cCVRQLxAVwmefEmwdTanECuUBMQZ/ym5kiw3XKCGA7qkuQLcjWWHcrD/GKbn/WmJwaezfuuAOcyKlRPA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/traverse" "^7.27.1"
    
    "@babel/plugin-bugfix-safari-class-field-initializer-scope@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.27.1.tgz#43f70a6d7efd52370eefbdf55ae03d91b293856d"
      integrity sha512-qNeq3bCKnGgLkEXUuFry6dPlGfCdQNZbn7yUAPCInwAJHMU7THJfrBSozkcWq5sNM6RcF3S8XyQL2A52KNR9IA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.27.1.tgz#beb623bd573b8b6f3047bd04c32506adc3e58a72"
      integrity sha512-g4L7OYun04N1WyqMNjldFwlfPCLVkgB54A/YCXICZYBsvJJE3kByKv9c9+R/nAfmIfjl2rKYLNyMHboYbZaWaA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.27.1.tgz#e134a5479eb2ba9c02714e8c1ebf1ec9076124fd"
      integrity sha512-oO02gcONcD5O1iTLi/6frMJBIwWEHceWGSGqrpCmEL8nogiS6J9PBlE48CaK20/Jx1LuRml9aDftLgdjXT8+Cw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-skip-transparent-expression-wrappers" "^7.27.1"
        "@babel/plugin-transform-optional-chaining" "^7.27.1"
    
    "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly@^7.27.1":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.28.3.tgz#373f6e2de0016f73caf8f27004f61d167743742a"
      integrity sha512-b6YTX108evsvE4YgWyQ921ZAFFQm3Bn+CA3+ZXlNVnPhx+UfsVURoPjfGAPCjBgrqo30yX/C2nZGX96DxvR9Iw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/traverse" "^7.28.3"
    
    "@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2":
      version "7.21.0-placeholder-for-preset-env.2"
      resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz#7844f9289546efa9febac2de4cfe358a050bd703"
      integrity sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==
    
    "@babel/plugin-syntax-import-assertions@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.27.1.tgz#88894aefd2b03b5ee6ad1562a7c8e1587496aecd"
      integrity sha512-UT/Jrhw57xg4ILHLFnzFpPDlMbcdEicaAtjPQpbj9wa8T4r5KVWCimHcL/460g8Ht0DMxDyjsLgiWSkVjnwPFg==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-syntax-import-attributes@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz#34c017d54496f9b11b61474e7ea3dfd5563ffe07"
      integrity sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-syntax-unicode-sets-regex@^7.18.6":
      version "7.18.6"
      resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz#d49a3b3e6b52e5be6740022317580234a6a47357"
      integrity sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.18.6"
        "@babel/helper-plugin-utils" "^7.18.6"
    
    "@babel/plugin-transform-arrow-functions@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.27.1.tgz#6e2061067ba3ab0266d834a9f94811196f2aba9a"
      integrity sha512-8Z4TGic6xW70FKThA5HYEKKyBpOOsucTOD1DjU3fZxDg+K3zBJcXMFnt/4yQiZnf5+MiOMSXQ9PaEK/Ilh1DeA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-async-generator-functions@7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.27.1.tgz#ca433df983d68e1375398e7ca71bf2a4f6fd89d7"
      integrity sha512-eST9RrwlpaoJBDHShc+DS2SG4ATTi2MYNb4OxYkf3n+7eb49LWpnS+HSpVfW4x927qQwgk8A2hGNVaajAEw0EA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-remap-async-to-generator" "^7.27.1"
        "@babel/traverse" "^7.27.1"
    
    "@babel/plugin-transform-async-generator-functions@^7.27.1":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.28.0.tgz#1276e6c7285ab2cd1eccb0bc7356b7a69ff842c2"
      integrity sha512-BEOdvX4+M765icNPZeidyADIvQ1m1gmunXufXxvRESy/jNNyfovIqUyE7MVgGBjWktCoJlzvFA1To2O4ymIO3Q==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-remap-async-to-generator" "^7.27.1"
        "@babel/traverse" "^7.28.0"
    
    "@babel/plugin-transform-async-to-generator@7.27.1", "@babel/plugin-transform-async-to-generator@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.27.1.tgz#9a93893b9379b39466c74474f55af03de78c66e7"
      integrity sha512-NREkZsZVJS4xmTr8qzE5y8AfIPqsdQfRuUiLRTEzb7Qii8iFWCyDKaUV2c0rCuh4ljDZ98ALHP/PetiBV2nddA==
      dependencies:
        "@babel/helper-module-imports" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-remap-async-to-generator" "^7.27.1"
    
    "@babel/plugin-transform-block-scoped-functions@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.27.1.tgz#558a9d6e24cf72802dd3b62a4b51e0d62c0f57f9"
      integrity sha512-cnqkuOtZLapWYZUYM5rVIdv1nXYuFVIltZ6ZJ7nIj585QsjKM5dhL2Fu/lICXZ1OyIAFc7Qy+bvDAtTXqGrlhg==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-block-scoping@^7.27.1":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.28.0.tgz#e7c50cbacc18034f210b93defa89638666099451"
      integrity sha512-gKKnwjpdx5sER/wl0WN0efUBFzF/56YZO0RJrSYP4CljXnP31ByY7fol89AzomdlLNzI36AvOTmYHsnZTCkq8Q==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-class-properties@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.27.1.tgz#dd40a6a370dfd49d32362ae206ddaf2bb082a925"
      integrity sha512-D0VcalChDMtuRvJIu3U/fwWjf8ZMykz5iZsg77Nuj821vCKI3zCyRLwRdWbsuJ/uRwZhZ002QtCqIkwC/ZkvbA==
      dependencies:
        "@babel/helper-create-class-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-class-static-block@^7.27.1":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.28.3.tgz#d1b8e69b54c9993bc558203e1f49bfc979bfd852"
      integrity sha512-LtPXlBbRoc4Njl/oh1CeD/3jC+atytbnf/UqLoqTDcEYGUPj022+rvfkbDYieUrSj3CaV4yHDByPE+T2HwfsJg==
      dependencies:
        "@babel/helper-create-class-features-plugin" "^7.28.3"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-classes@^7.27.1":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-classes/-/plugin-transform-classes-7.28.3.tgz#598297260343d0edbd51cb5f5075e07dee91963a"
      integrity sha512-DoEWC5SuxuARF2KdKmGUq3ghfPMO6ZzR12Dnp5gubwbeWJo4dbNWXJPVlwvh4Zlq6Z7YVvL8VFxeSOJgjsx4Sg==
      dependencies:
        "@babel/helper-annotate-as-pure" "^7.27.3"
        "@babel/helper-compilation-targets" "^7.27.2"
        "@babel/helper-globals" "^7.28.0"
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-replace-supers" "^7.27.1"
        "@babel/traverse" "^7.28.3"
    
    "@babel/plugin-transform-computed-properties@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.27.1.tgz#81662e78bf5e734a97982c2b7f0a793288ef3caa"
      integrity sha512-lj9PGWvMTVksbWiDT2tW68zGS/cyo4AkZ/QTp0sQT0mjPopCmrSkzxeXkznjqBxzDI6TclZhOJbBmbBLjuOZUw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/template" "^7.27.1"
    
    "@babel/plugin-transform-destructuring@^7.27.1", "@babel/plugin-transform-destructuring@^7.28.0":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.28.0.tgz#0f156588f69c596089b7d5b06f5af83d9aa7f97a"
      integrity sha512-v1nrSMBiKcodhsyJ4Gf+Z0U/yawmJDBOTpEB3mcQY52r9RIyPneGyAS/yM6seP/8I+mWI3elOMtT5dB8GJVs+A==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/traverse" "^7.28.0"
    
    "@babel/plugin-transform-dotall-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.27.1.tgz#aa6821de864c528b1fecf286f0a174e38e826f4d"
      integrity sha512-gEbkDVGRvjj7+T1ivxrfgygpT7GUd4vmODtYpbs0gZATdkX8/iSnOtZSxiZnsgm1YjTgjI6VKBGSJJevkrclzw==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-duplicate-keys@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.27.1.tgz#f1fbf628ece18e12e7b32b175940e68358f546d1"
      integrity sha512-MTyJk98sHvSs+cvZ4nOauwTTG1JeonDjSGvGGUNHreGQns+Mpt6WX/dVzWBHgg+dYZhkC4X+zTDfkTU+Vy9y7Q==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-duplicate-named-capturing-groups-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.27.1.tgz#5043854ca620a94149372e69030ff8cb6a9eb0ec"
      integrity sha512-hkGcueTEzuhB30B3eJCbCYeCaaEQOmQR0AdvzpD4LoN0GXMWzzGSuRrxR2xTnCrvNbVwK9N6/jQ92GSLfiZWoQ==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-dynamic-import@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.27.1.tgz#4c78f35552ac0e06aa1f6e3c573d67695e8af5a4"
      integrity sha512-MHzkWQcEmjzzVW9j2q8LGjwGWpG2mjwaaB0BNQwst3FIjqsg8Ct/mIZlvSPJvfi9y2AC8mi/ktxbFVL9pZ1I4A==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-exponentiation-operator@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.27.1.tgz#fc497b12d8277e559747f5a3ed868dd8064f83e1"
      integrity sha512-uspvXnhHvGKf2r4VVtBpeFnuDWsJLQ6MF6lGJLC89jBR1uoVeqM416AZtTuhTezOfgHicpJQmoD5YUakO/YmXQ==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-export-namespace-from@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.27.1.tgz#71ca69d3471edd6daa711cf4dfc3400415df9c23"
      integrity sha512-tQvHWSZ3/jH2xuq/vZDy0jNn+ZdXJeM8gHvX4lnJmsc3+50yPlWdZXIc5ay+umX+2/tJIqHqiEqcJvxlmIvRvQ==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-for-of@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.27.1.tgz#bc24f7080e9ff721b63a70ac7b2564ca15b6c40a"
      integrity sha512-BfbWFFEJFQzLCQ5N8VocnCtA8J1CLkNTe2Ms2wocj75dd6VpiqS5Z5quTYcUoo4Yq+DN0rtikODccuv7RU81sw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-skip-transparent-expression-wrappers" "^7.27.1"
    
    "@babel/plugin-transform-function-name@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.27.1.tgz#4d0bf307720e4dce6d7c30fcb1fd6ca77bdeb3a7"
      integrity sha512-1bQeydJF9Nr1eBCMMbC+hdwmRlsv5XYOMu03YSWFwNs0HsAmtSxxF1fyuYPqemVldVyFmlCU7w8UE14LupUSZQ==
      dependencies:
        "@babel/helper-compilation-targets" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/traverse" "^7.27.1"
    
    "@babel/plugin-transform-json-strings@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.27.1.tgz#a2e0ce6ef256376bd527f290da023983527a4f4c"
      integrity sha512-6WVLVJiTjqcQauBhn1LkICsR2H+zm62I3h9faTDKt1qP4jn2o72tSvqMwtGFKGTpojce0gJs+76eZ2uCHRZh0Q==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-literals@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-literals/-/plugin-transform-literals-7.27.1.tgz#baaefa4d10a1d4206f9dcdda50d7d5827bb70b24"
      integrity sha512-0HCFSepIpLTkLcsi86GG3mTUzxV5jpmbv97hTETW3yzrAij8aqlD36toB1D0daVFJM8NK6GvKO0gslVQmm+zZA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-logical-assignment-operators@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.27.1.tgz#890cb20e0270e0e5bebe3f025b434841c32d5baa"
      integrity sha512-SJvDs5dXxiae4FbSL1aBJlG4wvl594N6YEVVn9e3JGulwioy6z3oPjx/sQBO3Y4NwUu5HNix6KJ3wBZoewcdbw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-member-expression-literals@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.27.1.tgz#37b88ba594d852418e99536f5612f795f23aeaf9"
      integrity sha512-hqoBX4dcZ1I33jCSWcXrP+1Ku7kdqXf1oeah7ooKOIiAdKQ+uqftgCFNOSzA5AMS2XIHEYeGFg4cKRCdpxzVOQ==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-modules-amd@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.27.1.tgz#a4145f9d87c2291fe2d05f994b65dba4e3e7196f"
      integrity sha512-iCsytMg/N9/oFq6n+gFTvUYDZQOMK5kEdeYxmxt91fcJGycfxVP9CnrxoliM0oumFERba2i8ZtwRUCMhvP1LnA==
      dependencies:
        "@babel/helper-module-transforms" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-modules-commonjs@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.27.1.tgz#8e44ed37c2787ecc23bdc367f49977476614e832"
      integrity sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==
      dependencies:
        "@babel/helper-module-transforms" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-modules-systemjs@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.27.1.tgz#00e05b61863070d0f3292a00126c16c0e024c4ed"
      integrity sha512-w5N1XzsRbc0PQStASMksmUeqECuzKuTJer7kFagK8AXgpCMkeDMO5S+aaFb7A51ZYDF7XI34qsTX+fkHiIm5yA==
      dependencies:
        "@babel/helper-module-transforms" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-validator-identifier" "^7.27.1"
        "@babel/traverse" "^7.27.1"
    
    "@babel/plugin-transform-modules-umd@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.27.1.tgz#63f2cf4f6dc15debc12f694e44714863d34cd334"
      integrity sha512-iQBE/xC5BV1OxJbp6WG7jq9IWiD+xxlZhLrdwpPkTX3ydmXdvoCpyfJN7acaIBZaOqTfr76pgzqBJflNbeRK+w==
      dependencies:
        "@babel/helper-module-transforms" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-named-capturing-groups-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.27.1.tgz#f32b8f7818d8fc0cc46ee20a8ef75f071af976e1"
      integrity sha512-SstR5JYy8ddZvD6MhV0tM/j16Qds4mIpJTOd1Yu9J9pJjH93bxHECF7pgtc28XvkzTD6Pxcm/0Z73Hvk7kb3Ng==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-new-target@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.27.1.tgz#259c43939728cad1706ac17351b7e6a7bea1abeb"
      integrity sha512-f6PiYeqXQ05lYq3TIfIDu/MtliKUbNwkGApPUvyo6+tc7uaR4cPjPe7DFPr15Uyycg2lZU6btZ575CuQoYh7MQ==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-nullish-coalescing-operator@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.27.1.tgz#4f9d3153bf6782d73dd42785a9d22d03197bc91d"
      integrity sha512-aGZh6xMo6q9vq1JGcw58lZ1Z0+i0xB2x0XaauNIUXd6O1xXc3RwoWEBlsTQrY4KQ9Jf0s5rgD6SiNkaUdJegTA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-numeric-separator@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.27.1.tgz#614e0b15cc800e5997dadd9bd6ea524ed6c819c6"
      integrity sha512-fdPKAcujuvEChxDBJ5c+0BTaS6revLV7CJL08e4m3de8qJfNIuCc2nc7XJYOjBoTMJeqSmwXJ0ypE14RCjLwaw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-object-rest-spread@^7.27.2":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.28.0.tgz#d23021857ffd7cd809f54d624299b8086402ed8d"
      integrity sha512-9VNGikXxzu5eCiQjdE4IZn8sb9q7Xsk5EXLDBKUYg1e/Tve8/05+KJEtcxGxAgCY5t/BpKQM+JEL/yT4tvgiUA==
      dependencies:
        "@babel/helper-compilation-targets" "^7.27.2"
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/plugin-transform-destructuring" "^7.28.0"
        "@babel/plugin-transform-parameters" "^7.27.7"
        "@babel/traverse" "^7.28.0"
    
    "@babel/plugin-transform-object-super@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.27.1.tgz#1c932cd27bf3874c43a5cac4f43ebf970c9871b5"
      integrity sha512-SFy8S9plRPbIcxlJ8A6mT/CxFdJx/c04JEctz4jf8YZaVS2px34j7NXRrlGlHkN/M2gnpL37ZpGRGVFLd3l8Ng==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-replace-supers" "^7.27.1"
    
    "@babel/plugin-transform-optional-catch-binding@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.27.1.tgz#84c7341ebde35ccd36b137e9e45866825072a30c"
      integrity sha512-txEAEKzYrHEX4xSZN4kJ+OfKXFVSWKB2ZxM9dpcE3wT7smwkNmXo5ORRlVzMVdJbD+Q8ILTgSD7959uj+3Dm3Q==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-optional-chaining@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.27.1.tgz#874ce3c4f06b7780592e946026eb76a32830454f"
      integrity sha512-BQmKPPIuc8EkZgNKsv0X4bPmOoayeu4F1YCwx2/CfmDSXDbp7GnzlUH+/ul5VGfRg1AoFPsrIThlEBj2xb4CAg==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-skip-transparent-expression-wrappers" "^7.27.1"
    
    "@babel/plugin-transform-parameters@^7.27.1", "@babel/plugin-transform-parameters@^7.27.7":
      version "7.27.7"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.27.7.tgz#1fd2febb7c74e7d21cf3b05f7aebc907940af53a"
      integrity sha512-qBkYTYCb76RRxUM6CcZA5KRu8K4SM8ajzVeUgVdMVO9NN9uI/GaVmBg/WKJJGnNokV9SY8FxNOVWGXzqzUidBg==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-private-methods@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.27.1.tgz#fdacbab1c5ed81ec70dfdbb8b213d65da148b6af"
      integrity sha512-10FVt+X55AjRAYI9BrdISN9/AQWHqldOeZDUoLyif1Kn05a56xVBXb8ZouL8pZ9jem8QpXaOt8TS7RHUIS+GPA==
      dependencies:
        "@babel/helper-create-class-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-private-property-in-object@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.27.1.tgz#4dbbef283b5b2f01a21e81e299f76e35f900fb11"
      integrity sha512-5J+IhqTi1XPa0DXF83jYOaARrX+41gOewWbkPyjMNRDqgOCqdffGh8L3f/Ek5utaEBZExjSAzcyjmV9SSAWObQ==
      dependencies:
        "@babel/helper-annotate-as-pure" "^7.27.1"
        "@babel/helper-create-class-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-property-literals@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.27.1.tgz#07eafd618800591e88073a0af1b940d9a42c6424"
      integrity sha512-oThy3BCuCha8kDZ8ZkgOg2exvPYUlprMukKQXI1r1pJ47NCvxfkEy8vK+r/hT9nF0Aa4H1WUPZZjHTFtAhGfmQ==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-regenerator@^7.27.1":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.28.3.tgz#b8eee0f8aed37704bbcc932fd0b1a0a34d0b7344"
      integrity sha512-K3/M/a4+ESb5LEldjQb+XSrpY0nF+ZBFlTCbSnKaYAMfD8v33O6PMs4uYnOk19HlcsI8WMu3McdFPTiQHF/1/A==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-regexp-modifiers@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.27.1.tgz#df9ba5577c974e3f1449888b70b76169998a6d09"
      integrity sha512-TtEciroaiODtXvLZv4rmfMhkCv8jx3wgKpL68PuiPh2M4fvz5jhsA7697N1gMvkvr/JTF13DrFYyEbY9U7cVPA==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-reserved-words@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.27.1.tgz#40fba4878ccbd1c56605a4479a3a891ac0274bb4"
      integrity sha512-V2ABPHIJX4kC7HegLkYoDpfg9PVmuWy/i6vUM5eGK22bx4YVFD3M5F0QQnWQoDs6AGsUWTVOopBiMFQgHaSkVw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-runtime@7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.27.1.tgz#f9fbf71949a209eb26b3e60375b1d956937b8be9"
      integrity sha512-TqGF3desVsTcp3WrJGj4HfKokfCXCLcHpt4PJF0D8/iT6LPd9RS82Upw3KPeyr6B22Lfd3DO8MVrmp0oRkUDdw==
      dependencies:
        "@babel/helper-module-imports" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
        babel-plugin-polyfill-corejs2 "^0.4.10"
        babel-plugin-polyfill-corejs3 "^0.11.0"
        babel-plugin-polyfill-regenerator "^0.6.1"
        semver "^6.3.1"
    
    "@babel/plugin-transform-shorthand-properties@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.27.1.tgz#532abdacdec87bfee1e0ef8e2fcdee543fe32b90"
      integrity sha512-N/wH1vcn4oYawbJ13Y/FxcQrWk63jhfNa7jef0ih7PHSIHX2LB7GWE1rkPrOnka9kwMxb6hMl19p7lidA+EHmQ==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-spread@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-spread/-/plugin-transform-spread-7.27.1.tgz#1a264d5fc12750918f50e3fe3e24e437178abb08"
      integrity sha512-kpb3HUqaILBJcRFVhFUs6Trdd4mkrzcGXss+6/mxUd273PfbWqSDHRzMT2234gIg2QYfAjvXLSquP1xECSg09Q==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-skip-transparent-expression-wrappers" "^7.27.1"
    
    "@babel/plugin-transform-sticky-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.27.1.tgz#18984935d9d2296843a491d78a014939f7dcd280"
      integrity sha512-lhInBO5bi/Kowe2/aLdBAawijx+q1pQzicSgnkB6dUPc1+RC8QmJHKf2OjvU+NZWitguJHEaEmbV6VWEouT58g==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-template-literals@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.27.1.tgz#1a0eb35d8bb3e6efc06c9fd40eb0bcef548328b8"
      integrity sha512-fBJKiV7F2DxZUkg5EtHKXQdbsbURW3DZKQUWphDum0uRP6eHGGa/He9mc0mypL680pb+e/lDIthRohlv8NCHkg==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-typeof-symbol@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.27.1.tgz#70e966bb492e03509cf37eafa6dcc3051f844369"
      integrity sha512-RiSILC+nRJM7FY5srIyc4/fGIwUhyDuuBSdWn4y6yT6gm652DpCHZjIipgn6B7MQ1ITOUnAKWixEUjQRIBIcLw==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-unicode-escapes@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.27.1.tgz#3e3143f8438aef842de28816ece58780190cf806"
      integrity sha512-Ysg4v6AmF26k9vpfFuTZg8HRfVWzsh1kVfowA23y9j/Gu6dOuahdUVhkLqpObp3JIv27MLSii6noRnuKN8H0Mg==
      dependencies:
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-unicode-property-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.27.1.tgz#bdfe2d3170c78c5691a3c3be934c8c0087525956"
      integrity sha512-uW20S39PnaTImxp39O5qFlHLS9LJEmANjMG7SxIhap8rCHqu0Ik+tLEPX5DKmHn6CsWQ7j3lix2tFOa5YtL12Q==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-unicode-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.27.1.tgz#25948f5c395db15f609028e370667ed8bae9af97"
      integrity sha512-xvINq24TRojDuyt6JGtHmkVkrfVV3FPT16uytxImLeBZqW3/H52yN+kM1MGuyPkIQxrzKwPHs5U/MP3qKyzkGw==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/plugin-transform-unicode-sets-regex@^7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.27.1.tgz#6ab706d10f801b5c72da8bb2548561fa04193cd1"
      integrity sha512-EtkOujbc4cgvb0mlpQefi4NTPBzhSIevblFevACNLUspmrALgmEBdL/XfnyyITfd8fKBZrZys92zOWcik7j9Tw==
      dependencies:
        "@babel/helper-create-regexp-features-plugin" "^7.27.1"
        "@babel/helper-plugin-utils" "^7.27.1"
    
    "@babel/preset-env@7.27.2":
      version "7.27.2"
      resolved "https://registry.yarnpkg.com/@babel/preset-env/-/preset-env-7.27.2.tgz#106e6bfad92b591b1f6f76fd4cf13b7725a7bf9a"
      integrity sha512-Ma4zSuYSlGNRlCLO+EAzLnCmJK2vdstgv+n7aUP+/IKZrOfWHOJVdSJtuub8RzHTj3ahD37k5OKJWvzf16TQyQ==
      dependencies:
        "@babel/compat-data" "^7.27.2"
        "@babel/helper-compilation-targets" "^7.27.2"
        "@babel/helper-plugin-utils" "^7.27.1"
        "@babel/helper-validator-option" "^7.27.1"
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key" "^7.27.1"
        "@babel/plugin-bugfix-safari-class-field-initializer-scope" "^7.27.1"
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression" "^7.27.1"
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining" "^7.27.1"
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly" "^7.27.1"
        "@babel/plugin-proposal-private-property-in-object" "7.21.0-placeholder-for-preset-env.2"
        "@babel/plugin-syntax-import-assertions" "^7.27.1"
        "@babel/plugin-syntax-import-attributes" "^7.27.1"
        "@babel/plugin-syntax-unicode-sets-regex" "^7.18.6"
        "@babel/plugin-transform-arrow-functions" "^7.27.1"
        "@babel/plugin-transform-async-generator-functions" "^7.27.1"
        "@babel/plugin-transform-async-to-generator" "^7.27.1"
        "@babel/plugin-transform-block-scoped-functions" "^7.27.1"
        "@babel/plugin-transform-block-scoping" "^7.27.1"
        "@babel/plugin-transform-class-properties" "^7.27.1"
        "@babel/plugin-transform-class-static-block" "^7.27.1"
        "@babel/plugin-transform-classes" "^7.27.1"
        "@babel/plugin-transform-computed-properties" "^7.27.1"
        "@babel/plugin-transform-destructuring" "^7.27.1"
        "@babel/plugin-transform-dotall-regex" "^7.27.1"
        "@babel/plugin-transform-duplicate-keys" "^7.27.1"
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex" "^7.27.1"
        "@babel/plugin-transform-dynamic-import" "^7.27.1"
        "@babel/plugin-transform-exponentiation-operator" "^7.27.1"
        "@babel/plugin-transform-export-namespace-from" "^7.27.1"
        "@babel/plugin-transform-for-of" "^7.27.1"
        "@babel/plugin-transform-function-name" "^7.27.1"
        "@babel/plugin-transform-json-strings" "^7.27.1"
        "@babel/plugin-transform-literals" "^7.27.1"
        "@babel/plugin-transform-logical-assignment-operators" "^7.27.1"
        "@babel/plugin-transform-member-expression-literals" "^7.27.1"
        "@babel/plugin-transform-modules-amd" "^7.27.1"
        "@babel/plugin-transform-modules-commonjs" "^7.27.1"
        "@babel/plugin-transform-modules-systemjs" "^7.27.1"
        "@babel/plugin-transform-modules-umd" "^7.27.1"
        "@babel/plugin-transform-named-capturing-groups-regex" "^7.27.1"
        "@babel/plugin-transform-new-target" "^7.27.1"
        "@babel/plugin-transform-nullish-coalescing-operator" "^7.27.1"
        "@babel/plugin-transform-numeric-separator" "^7.27.1"
        "@babel/plugin-transform-object-rest-spread" "^7.27.2"
        "@babel/plugin-transform-object-super" "^7.27.1"
        "@babel/plugin-transform-optional-catch-binding" "^7.27.1"
        "@babel/plugin-transform-optional-chaining" "^7.27.1"
        "@babel/plugin-transform-parameters" "^7.27.1"
        "@babel/plugin-transform-private-methods" "^7.27.1"
        "@babel/plugin-transform-private-property-in-object" "^7.27.1"
        "@babel/plugin-transform-property-literals" "^7.27.1"
        "@babel/plugin-transform-regenerator" "^7.27.1"
        "@babel/plugin-transform-regexp-modifiers" "^7.27.1"
        "@babel/plugin-transform-reserved-words" "^7.27.1"
        "@babel/plugin-transform-shorthand-properties" "^7.27.1"
        "@babel/plugin-transform-spread" "^7.27.1"
        "@babel/plugin-transform-sticky-regex" "^7.27.1"
        "@babel/plugin-transform-template-literals" "^7.27.1"
        "@babel/plugin-transform-typeof-symbol" "^7.27.1"
        "@babel/plugin-transform-unicode-escapes" "^7.27.1"
        "@babel/plugin-transform-unicode-property-regex" "^7.27.1"
        "@babel/plugin-transform-unicode-regex" "^7.27.1"
        "@babel/plugin-transform-unicode-sets-regex" "^7.27.1"
        "@babel/preset-modules" "0.1.6-no-external-plugins"
        babel-plugin-polyfill-corejs2 "^0.4.10"
        babel-plugin-polyfill-corejs3 "^0.11.0"
        babel-plugin-polyfill-regenerator "^0.6.1"
        core-js-compat "^3.40.0"
        semver "^6.3.1"
    
    "@babel/preset-modules@0.1.6-no-external-plugins":
      version "0.1.6-no-external-plugins"
      resolved "https://registry.yarnpkg.com/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz#ccb88a2c49c817236861fee7826080573b8a923a"
      integrity sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==
      dependencies:
        "@babel/helper-plugin-utils" "^7.0.0"
        "@babel/types" "^7.4.4"
        esutils "^2.0.2"
    
    "@babel/runtime@7.27.1":
      version "7.27.1"
      resolved "https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.27.1.tgz#9fce313d12c9a77507f264de74626e87fd0dc541"
      integrity sha512-1x3D2xEk2fRo3PAhwQwu5UubzgiVWSXTBfWpVd2Mx2AzRqJuDJCsgaDVZ7HB5iGzDW1Hl1sWN2mFyKjmR9uAog==
    
    "@babel/runtime@^7.21.0", "@babel/runtime@^7.24.7":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.28.3.tgz#75c5034b55ba868121668be5d5bb31cc64e6e61a"
      integrity sha512-9uIQ10o0WGdpP6GDhXcdOJPJuDgFtIDtN/9+ArJQ2NAfAmiuhTQdzkaTGR33v43GYS2UrSA0eX2pPPHoFVvpxA==
    
    "@babel/template@^7.27.1", "@babel/template@^7.27.2":
      version "7.27.2"
      resolved "https://registry.yarnpkg.com/@babel/template/-/template-7.27.2.tgz#fa78ceed3c4e7b63ebf6cb39e5852fca45f6809d"
      integrity sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==
      dependencies:
        "@babel/code-frame" "^7.27.1"
        "@babel/parser" "^7.27.2"
        "@babel/types" "^7.27.1"
    
    "@babel/traverse@^7.27.1", "@babel/traverse@^7.27.7", "@babel/traverse@^7.28.0", "@babel/traverse@^7.28.3":
      version "7.28.3"
      resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.28.3.tgz#6911a10795d2cce43ec6a28cffc440cca2593434"
      integrity sha512-7w4kZYHneL3A6NP2nxzHvT3HCZ7puDZZjFMqDpBPECub79sTtSO5CGXDkKrTQq8ksAwfD/XI2MRFX23njdDaIQ==
      dependencies:
        "@babel/code-frame" "^7.27.1"
        "@babel/generator" "^7.28.3"
        "@babel/helper-globals" "^7.28.0"
        "@babel/parser" "^7.28.3"
        "@babel/template" "^7.27.2"
        "@babel/types" "^7.28.2"
        debug "^4.3.1"
    
    "@babel/types@^7.0.0", "@babel/types@^7.20.7", "@babel/types@^7.24.7", "@babel/types@^7.27.1", "@babel/types@^7.27.3", "@babel/types@^7.27.7", "@babel/types@^7.28.2", "@babel/types@^7.4.4":
      version "7.28.2"
      resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.28.2.tgz#da9db0856a9a88e0a13b019881d7513588cf712b"
      integrity sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==
      dependencies:
        "@babel/helper-string-parser" "^7.27.1"
        "@babel/helper-validator-identifier" "^7.27.1"
    
    "@colors/colors@1.5.0":
      version "1.5.0"
      resolved "https://registry.yarnpkg.com/@colors/colors/-/colors-1.5.0.tgz#bb504579c1cae923e6576a4f5da43d25f97bdbd9"
      integrity sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==
    
    "@ctrl/tinycolor@^3.6.0":
      version "3.6.1"
      resolved "https://registry.yarnpkg.com/@ctrl/tinycolor/-/tinycolor-3.6.1.tgz#b6c75a56a1947cc916ea058772d666a2c8932f31"
      integrity sha512-SITSV6aIXsuVNV3f3O0f2n/cgyEDWoSqtZMYiAmcsYHydcKrOz3gUxB/iXd/Qf08+IZX4KpgNbvUdMBmWz+kcA==
    
    "@ctrl/tinycolor@^4.0.0":
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/@ctrl/tinycolor/-/tinycolor-4.1.0.tgz#91a8f8120ffc9da2feb2a38f7862b300d5e9691a"
      integrity sha512-WyOx8cJQ+FQus4Mm4uPIZA64gbk3Wxh0so5Lcii0aJifqwoVOlfFtorjLE0Hen4OYyHZMXDWqMmaQemBhgxFRQ==
    
    "@discoveryjs/json-ext@0.6.3":
      version "0.6.3"
      resolved "https://registry.yarnpkg.com/@discoveryjs/json-ext/-/json-ext-0.6.3.tgz#f13c7c205915eb91ae54c557f5e92bddd8be0e83"
      integrity sha512-4B4OijXeVNOPZlYA2oEwWOTkzyltLao+xbotHQeqN++Rv27Y6s818+n2Qkp8q+Fxhn0t/5lA5X1Mxktud8eayQ==
    
    "@esbuild/aix-ppc64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/aix-ppc64/-/aix-ppc64-0.25.5.tgz#4e0f91776c2b340e75558f60552195f6fad09f18"
      integrity sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==
    
    "@esbuild/aix-ppc64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/aix-ppc64/-/aix-ppc64-0.25.9.tgz#bef96351f16520055c947aba28802eede3c9e9a9"
      integrity sha512-OaGtL73Jck6pBKjNIe24BnFE6agGl+6KxDtTfHhy1HmhthfKouEcOhqpSL64K4/0WCtbKFLOdzD/44cJ4k9opA==
    
    "@esbuild/android-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/android-arm64/-/android-arm64-0.25.5.tgz#bc766407f1718923f6b8079c8c61bf86ac3a6a4f"
      integrity sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==
    
    "@esbuild/android-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/android-arm64/-/android-arm64-0.25.9.tgz#d2e70be7d51a529425422091e0dcb90374c1546c"
      integrity sha512-IDrddSmpSv51ftWslJMvl3Q2ZT98fUSL2/rlUXuVqRXHCs5EUF1/f+jbjF5+NG9UffUDMCiTyh8iec7u8RlTLg==
    
    "@esbuild/android-arm@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/android-arm/-/android-arm-0.25.5.tgz#4290d6d3407bae3883ad2cded1081a234473ce26"
      integrity sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==
    
    "@esbuild/android-arm@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/android-arm/-/android-arm-0.25.9.tgz#d2a753fe2a4c73b79437d0ba1480e2d760097419"
      integrity sha512-5WNI1DaMtxQ7t7B6xa572XMXpHAaI/9Hnhk8lcxF4zVN4xstUgTlvuGDorBguKEnZO70qwEcLpfifMLoxiPqHQ==
    
    "@esbuild/android-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/android-x64/-/android-x64-0.25.5.tgz#40c11d9cbca4f2406548c8a9895d321bc3b35eff"
      integrity sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==
    
    "@esbuild/android-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/android-x64/-/android-x64-0.25.9.tgz#5278836e3c7ae75761626962f902a0d55352e683"
      integrity sha512-I853iMZ1hWZdNllhVZKm34f4wErd4lMyeV7BLzEExGEIZYsOzqDWDf+y082izYUE8gtJnYHdeDpN/6tUdwvfiw==
    
    "@esbuild/darwin-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/darwin-arm64/-/darwin-arm64-0.25.5.tgz#49d8bf8b1df95f759ac81eb1d0736018006d7e34"
      integrity sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==
    
    "@esbuild/darwin-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/darwin-arm64/-/darwin-arm64-0.25.9.tgz#f1513eaf9ec8fa15dcaf4c341b0f005d3e8b47ae"
      integrity sha512-XIpIDMAjOELi/9PB30vEbVMs3GV1v2zkkPnuyRRURbhqjyzIINwj+nbQATh4H9GxUgH1kFsEyQMxwiLFKUS6Rg==
    
    "@esbuild/darwin-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/darwin-x64/-/darwin-x64-0.25.5.tgz#e27a5d92a14886ef1d492fd50fc61a2d4d87e418"
      integrity sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==
    
    "@esbuild/darwin-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/darwin-x64/-/darwin-x64-0.25.9.tgz#e27dbc3b507b3a1cea3b9280a04b8b6b725f82be"
      integrity sha512-jhHfBzjYTA1IQu8VyrjCX4ApJDnH+ez+IYVEoJHeqJm9VhG9Dh2BYaJritkYK3vMaXrf7Ogr/0MQ8/MeIefsPQ==
    
    "@esbuild/freebsd-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.5.tgz#97cede59d638840ca104e605cdb9f1b118ba0b1c"
      integrity sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==
    
    "@esbuild/freebsd-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.9.tgz#364e3e5b7a1fd45d92be08c6cc5d890ca75908ca"
      integrity sha512-z93DmbnY6fX9+KdD4Ue/H6sYs+bhFQJNCPZsi4XWJoYblUqT06MQUdBCpcSfuiN72AbqeBFu5LVQTjfXDE2A6Q==
    
    "@esbuild/freebsd-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/freebsd-x64/-/freebsd-x64-0.25.5.tgz#71c77812042a1a8190c3d581e140d15b876b9c6f"
      integrity sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==
    
    "@esbuild/freebsd-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/freebsd-x64/-/freebsd-x64-0.25.9.tgz#7c869b45faeb3df668e19ace07335a0711ec56ab"
      integrity sha512-mrKX6H/vOyo5v71YfXWJxLVxgy1kyt1MQaD8wZJgJfG4gq4DpQGpgTB74e5yBeQdyMTbgxp0YtNj7NuHN0PoZg==
    
    "@esbuild/linux-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-arm64/-/linux-arm64-0.25.5.tgz#f7b7c8f97eff8ffd2e47f6c67eb5c9765f2181b8"
      integrity sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==
    
    "@esbuild/linux-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-arm64/-/linux-arm64-0.25.9.tgz#48d42861758c940b61abea43ba9a29b186d6cb8b"
      integrity sha512-BlB7bIcLT3G26urh5Dmse7fiLmLXnRlopw4s8DalgZ8ef79Jj4aUcYbk90g8iCa2467HX8SAIidbL7gsqXHdRw==
    
    "@esbuild/linux-arm@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-arm/-/linux-arm-0.25.5.tgz#2a0be71b6cd8201fa559aea45598dffabc05d911"
      integrity sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==
    
    "@esbuild/linux-arm@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-arm/-/linux-arm-0.25.9.tgz#6ce4b9cabf148274101701d112b89dc67cc52f37"
      integrity sha512-HBU2Xv78SMgaydBmdor38lg8YDnFKSARg1Q6AT0/y2ezUAKiZvc211RDFHlEZRFNRVhcMamiToo7bDx3VEOYQw==
    
    "@esbuild/linux-ia32@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-ia32/-/linux-ia32-0.25.5.tgz#763414463cd9ea6fa1f96555d2762f9f84c61783"
      integrity sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==
    
    "@esbuild/linux-ia32@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-ia32/-/linux-ia32-0.25.9.tgz#207e54899b79cac9c26c323fc1caa32e3143f1c4"
      integrity sha512-e7S3MOJPZGp2QW6AK6+Ly81rC7oOSerQ+P8L0ta4FhVi+/j/v2yZzx5CqqDaWjtPFfYz21Vi1S0auHrap3Ma3A==
    
    "@esbuild/linux-loong64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-loong64/-/linux-loong64-0.25.5.tgz#428cf2213ff786a502a52c96cf29d1fcf1eb8506"
      integrity sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==
    
    "@esbuild/linux-loong64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-loong64/-/linux-loong64-0.25.9.tgz#0ba48a127159a8f6abb5827f21198b999ffd1fc0"
      integrity sha512-Sbe10Bnn0oUAB2AalYztvGcK+o6YFFA/9829PhOCUS9vkJElXGdphz0A3DbMdP8gmKkqPmPcMJmJOrI3VYB1JQ==
    
    "@esbuild/linux-mips64el@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-mips64el/-/linux-mips64el-0.25.5.tgz#5cbcc7fd841b4cd53358afd33527cd394e325d96"
      integrity sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==
    
    "@esbuild/linux-mips64el@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-mips64el/-/linux-mips64el-0.25.9.tgz#a4d4cc693d185f66a6afde94f772b38ce5d64eb5"
      integrity sha512-YcM5br0mVyZw2jcQeLIkhWtKPeVfAerES5PvOzaDxVtIyZ2NUBZKNLjC5z3/fUlDgT6w89VsxP2qzNipOaaDyA==
    
    "@esbuild/linux-ppc64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-ppc64/-/linux-ppc64-0.25.5.tgz#0d954ab39ce4f5e50f00c4f8c4fd38f976c13ad9"
      integrity sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==
    
    "@esbuild/linux-ppc64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-ppc64/-/linux-ppc64-0.25.9.tgz#0f5805c1c6d6435a1dafdc043cb07a19050357db"
      integrity sha512-++0HQvasdo20JytyDpFvQtNrEsAgNG2CY1CLMwGXfFTKGBGQT3bOeLSYE2l1fYdvML5KUuwn9Z8L1EWe2tzs1w==
    
    "@esbuild/linux-riscv64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-riscv64/-/linux-riscv64-0.25.5.tgz#0e7dd30730505abd8088321e8497e94b547bfb1e"
      integrity sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==
    
    "@esbuild/linux-riscv64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-riscv64/-/linux-riscv64-0.25.9.tgz#6776edece0f8fca79f3386398b5183ff2a827547"
      integrity sha512-uNIBa279Y3fkjV+2cUjx36xkx7eSjb8IvnL01eXUKXez/CBHNRw5ekCGMPM0BcmqBxBcdgUWuUXmVWwm4CH9kg==
    
    "@esbuild/linux-s390x@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-s390x/-/linux-s390x-0.25.5.tgz#5669af81327a398a336d7e40e320b5bbd6e6e72d"
      integrity sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==
    
    "@esbuild/linux-s390x@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-s390x/-/linux-s390x-0.25.9.tgz#3f6f29ef036938447c2218d309dc875225861830"
      integrity sha512-Mfiphvp3MjC/lctb+7D287Xw1DGzqJPb/J2aHHcHxflUo+8tmN/6d4k6I2yFR7BVo5/g7x2Monq4+Yew0EHRIA==
    
    "@esbuild/linux-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-x64/-/linux-x64-0.25.5.tgz#b2357dd153aa49038967ddc1ffd90c68a9d2a0d4"
      integrity sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==
    
    "@esbuild/linux-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/linux-x64/-/linux-x64-0.25.9.tgz#831fe0b0e1a80a8b8391224ea2377d5520e1527f"
      integrity sha512-iSwByxzRe48YVkmpbgoxVzn76BXjlYFXC7NvLYq+b+kDjyyk30J0JY47DIn8z1MO3K0oSl9fZoRmZPQI4Hklzg==
    
    "@esbuild/netbsd-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.5.tgz#53b4dfb8fe1cee93777c9e366893bd3daa6ba63d"
      integrity sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==
    
    "@esbuild/netbsd-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.9.tgz#06f99d7eebe035fbbe43de01c9d7e98d2a0aa548"
      integrity sha512-9jNJl6FqaUG+COdQMjSCGW4QiMHH88xWbvZ+kRVblZsWrkXlABuGdFJ1E9L7HK+T0Yqd4akKNa/lO0+jDxQD4Q==
    
    "@esbuild/netbsd-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/netbsd-x64/-/netbsd-x64-0.25.5.tgz#a0206f6314ce7dc8713b7732703d0f58de1d1e79"
      integrity sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==
    
    "@esbuild/netbsd-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/netbsd-x64/-/netbsd-x64-0.25.9.tgz#db99858e6bed6e73911f92a88e4edd3a8c429a52"
      integrity sha512-RLLdkflmqRG8KanPGOU7Rpg829ZHu8nFy5Pqdi9U01VYtG9Y0zOG6Vr2z4/S+/3zIyOxiK6cCeYNWOFR9QP87g==
    
    "@esbuild/openbsd-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.5.tgz#2a796c87c44e8de78001d808c77d948a21ec22fd"
      integrity sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==
    
    "@esbuild/openbsd-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.9.tgz#afb886c867e36f9d86bb21e878e1185f5d5a0935"
      integrity sha512-YaFBlPGeDasft5IIM+CQAhJAqS3St3nJzDEgsgFixcfZeyGPCd6eJBWzke5piZuZ7CtL656eOSYKk4Ls2C0FRQ==
    
    "@esbuild/openbsd-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/openbsd-x64/-/openbsd-x64-0.25.5.tgz#28d0cd8909b7fa3953af998f2b2ed34f576728f0"
      integrity sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==
    
    "@esbuild/openbsd-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/openbsd-x64/-/openbsd-x64-0.25.9.tgz#30855c9f8381fac6a0ef5b5f31ac6e7108a66ecf"
      integrity sha512-1MkgTCuvMGWuqVtAvkpkXFmtL8XhWy+j4jaSO2wxfJtilVCi0ZE37b8uOdMItIHz4I6z1bWWtEX4CJwcKYLcuA==
    
    "@esbuild/openharmony-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.9.tgz#2f2144af31e67adc2a8e3705c20c2bd97bd88314"
      integrity sha512-4Xd0xNiMVXKh6Fa7HEJQbrpP3m3DDn43jKxMjxLLRjWnRsfxjORYJlXPO4JNcXtOyfajXorRKY9NkOpTHptErg==
    
    "@esbuild/sunos-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/sunos-x64/-/sunos-x64-0.25.5.tgz#a28164f5b997e8247d407e36c90d3fd5ddbe0dc5"
      integrity sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==
    
    "@esbuild/sunos-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/sunos-x64/-/sunos-x64-0.25.9.tgz#69b99a9b5bd226c9eb9c6a73f990fddd497d732e"
      integrity sha512-WjH4s6hzo00nNezhp3wFIAfmGZ8U7KtrJNlFMRKxiI9mxEK1scOMAaa9i4crUtu+tBr+0IN6JCuAcSBJZfnphw==
    
    "@esbuild/win32-arm64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/win32-arm64/-/win32-arm64-0.25.5.tgz#6eadbead38e8bd12f633a5190e45eff80e24007e"
      integrity sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==
    
    "@esbuild/win32-arm64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/win32-arm64/-/win32-arm64-0.25.9.tgz#d789330a712af916c88325f4ffe465f885719c6b"
      integrity sha512-mGFrVJHmZiRqmP8xFOc6b84/7xa5y5YvR1x8djzXpJBSv/UsNK6aqec+6JDjConTgvvQefdGhFDAs2DLAds6gQ==
    
    "@esbuild/win32-ia32@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/win32-ia32/-/win32-ia32-0.25.5.tgz#bab6288005482f9ed2adb9ded7e88eba9a62cc0d"
      integrity sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==
    
    "@esbuild/win32-ia32@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/win32-ia32/-/win32-ia32-0.25.9.tgz#52fc735406bd49688253e74e4e837ac2ba0789e3"
      integrity sha512-b33gLVU2k11nVx1OhX3C8QQP6UHQK4ZtN56oFWvVXvz2VkDoe6fbG8TOgHFxEvqeqohmRnIHe5A1+HADk4OQww==
    
    "@esbuild/win32-x64@0.25.5":
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/@esbuild/win32-x64/-/win32-x64-0.25.5.tgz#7fc114af5f6563f19f73324b5d5ff36ece0803d1"
      integrity sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==
    
    "@esbuild/win32-x64@0.25.9":
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/@esbuild/win32-x64/-/win32-x64-0.25.9.tgz#585624dc829cfb6e7c0aa6c3ca7d7e6daa87e34f"
      integrity sha512-PPOl1mi6lpLNQxnGoyAfschAodRFYXJ+9fs6WHXz7CSWKbOqiMZsubC+BQsVKuul+3vKLuwTHsS2c2y9EoKwxQ==
    
    "@eslint-community/eslint-utils@^4.2.0", "@eslint-community/eslint-utils@^4.4.0":
      version "4.7.0"
      resolved "https://registry.yarnpkg.com/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz#607084630c6c033992a082de6e6fbc1a8b52175a"
      integrity sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==
      dependencies:
        eslint-visitor-keys "^3.4.3"
    
    "@eslint-community/regexpp@^4.10.0", "@eslint-community/regexpp@^4.6.1":
      version "4.12.1"
      resolved "https://registry.yarnpkg.com/@eslint-community/regexpp/-/regexpp-4.12.1.tgz#cfc6cffe39df390a3841cde2abccf92eaa7ae0e0"
      integrity sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==
    
    "@eslint/eslintrc@^2.1.4":
      version "2.1.4"
      resolved "https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-2.1.4.tgz#388a269f0f25c1b6adc317b5a2c55714894c70ad"
      integrity sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==
      dependencies:
        ajv "^6.12.4"
        debug "^4.3.2"
        espree "^9.6.0"
        globals "^13.19.0"
        ignore "^5.2.0"
        import-fresh "^3.2.1"
        js-yaml "^4.1.0"
        minimatch "^3.1.2"
        strip-json-comments "^3.1.1"
    
    "@eslint/js@8.57.1":
      version "8.57.1"
      resolved "https://registry.yarnpkg.com/@eslint/js/-/js-8.57.1.tgz#de633db3ec2ef6a3c89e2f19038063e8a122e2c2"
      integrity sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==
    
    "@floating-ui/core@^1.2.6":
      version "1.7.3"
      resolved "https://registry.yarnpkg.com/@floating-ui/core/-/core-1.7.3.tgz#462d722f001e23e46d86fd2bd0d21b7693ccb8b7"
      integrity sha512-sGnvb5dmrJaKEZ+LDIpguvdX3bDlEllmv4/ClQ9awcmCZrlx5jQyyMWFM5kBI+EyNOCDDiKk8il0zeuX3Zlg/w==
      dependencies:
        "@floating-ui/utils" "^0.2.10"
    
    "@floating-ui/dom@~1.2.8":
      version "1.2.9"
      resolved "https://registry.yarnpkg.com/@floating-ui/dom/-/dom-1.2.9.tgz#b9ed1c15d30963419a6736f1b7feb350dd49c603"
      integrity sha512-sosQxsqgxMNkV3C+3UqTS6LxP7isRLwX8WMepp843Rb3/b0Wz8+MdUkxJksByip3C2WwLugLHN1b4ibn//zKwQ==
      dependencies:
        "@floating-ui/core" "^1.2.6"
    
    "@floating-ui/utils@^0.2.10":
      version "0.2.10"
      resolved "https://registry.yarnpkg.com/@floating-ui/utils/-/utils-0.2.10.tgz#a2a1e3812d14525f725d011a73eceb41fef5bc1c"
      integrity sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==
    
    "@fortawesome/fontawesome-free@^6.0.0":
      version "6.7.2"
      resolved "https://registry.yarnpkg.com/@fortawesome/fontawesome-free/-/fontawesome-free-6.7.2.tgz#8249de9b7e22fcb3ceb5e66090c30a1d5492b81a"
      integrity sha512-JUOtgFW6k9u4Y+xeIaEiLr3+cjoUPiAuLXoyKOJSia6Duzb7pq+A76P9ZdPDoAoxHdHzq6gE9/jKBGXlZT8FbA==
    
    "@humanwhocodes/config-array@^0.13.0":
      version "0.13.0"
      resolved "https://registry.yarnpkg.com/@humanwhocodes/config-array/-/config-array-0.13.0.tgz#fb907624df3256d04b9aa2df50d7aa97ec648748"
      integrity sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==
      dependencies:
        "@humanwhocodes/object-schema" "^2.0.3"
        debug "^4.3.1"
        minimatch "^3.0.5"
    
    "@humanwhocodes/module-importer@^1.0.1":
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz#af5b2691a22b44be847b0ca81641c5fb6ad0172c"
      integrity sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==
    
    "@humanwhocodes/object-schema@^2.0.3":
      version "2.0.3"
      resolved "https://registry.yarnpkg.com/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz#4a2868d75d6d6963e423bcf90b7fd1be343409d3"
      integrity sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==
    
    "@inquirer/checkbox@^4.1.6":
      version "4.2.1"
      resolved "https://registry.yarnpkg.com/@inquirer/checkbox/-/checkbox-4.2.1.tgz#45125a32f27c5cfd82a23d5ecf49b4dc137e1247"
      integrity sha512-bevKGO6kX1eM/N+pdh9leS5L7TBF4ICrzi9a+cbWkrxeAeIcwlo/7OfWGCDERdRCI2/Q6tjltX4bt07ALHDwFw==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/figures" "^1.0.13"
        "@inquirer/type" "^3.0.8"
        ansi-escapes "^4.3.2"
        yoctocolors-cjs "^2.1.2"
    
    "@inquirer/confirm@5.1.10":
      version "5.1.10"
      resolved "https://registry.yarnpkg.com/@inquirer/confirm/-/confirm-5.1.10.tgz#de3732cb7ae9333bd3e354afee6a6ef8cf28d951"
      integrity sha512-FxbQ9giWxUWKUk2O5XZ6PduVnH2CZ/fmMKMBkH71MHJvWr7WL5AHKevhzF1L5uYWB2P548o1RzVxrNd3dpmk6g==
      dependencies:
        "@inquirer/core" "^10.1.11"
        "@inquirer/type" "^3.0.6"
    
    "@inquirer/confirm@^5.1.10":
      version "5.1.15"
      resolved "https://registry.yarnpkg.com/@inquirer/confirm/-/confirm-5.1.15.tgz#c502d5c642fdba0669b17442b40794c97bdbccb4"
      integrity sha512-SwHMGa8Z47LawQN0rog0sT+6JpiL0B7eW9p1Bb7iCeKDGTI5Ez25TSc2l8kw52VV7hA4sX/C78CGkMrKXfuspA==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/type" "^3.0.8"
    
    "@inquirer/core@^10.1.11", "@inquirer/core@^10.1.15":
      version "10.1.15"
      resolved "https://registry.yarnpkg.com/@inquirer/core/-/core-10.1.15.tgz#8feb69fd536786181a2b6bfb84d8674faa9d2e59"
      integrity sha512-8xrp836RZvKkpNbVvgWUlxjT4CraKk2q+I3Ksy+seI2zkcE+y6wNs1BVhgcv8VyImFecUhdQrYLdW32pAjwBdA==
      dependencies:
        "@inquirer/figures" "^1.0.13"
        "@inquirer/type" "^3.0.8"
        ansi-escapes "^4.3.2"
        cli-width "^4.1.0"
        mute-stream "^2.0.0"
        signal-exit "^4.1.0"
        wrap-ansi "^6.2.0"
        yoctocolors-cjs "^2.1.2"
    
    "@inquirer/editor@^4.2.11":
      version "4.2.17"
      resolved "https://registry.yarnpkg.com/@inquirer/editor/-/editor-4.2.17.tgz#5af16f6f24f62f552feb05c7bec2dc0743230584"
      integrity sha512-r6bQLsyPSzbWrZZ9ufoWL+CztkSatnJ6uSxqd6N+o41EZC51sQeWOzI6s5jLb+xxTWxl7PlUppqm8/sow241gg==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/external-editor" "^1.0.1"
        "@inquirer/type" "^3.0.8"
    
    "@inquirer/expand@^4.0.13":
      version "4.0.17"
      resolved "https://registry.yarnpkg.com/@inquirer/expand/-/expand-4.0.17.tgz#b688f4a1a65daf2bf77a11de7734766769cce343"
      integrity sha512-PSqy9VmJx/VbE3CT453yOfNa+PykpKg/0SYP7odez1/NWBGuDXgPhp4AeGYYKjhLn5lUUavVS/JbeYMPdH50Mw==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/type" "^3.0.8"
        yoctocolors-cjs "^2.1.2"
    
    "@inquirer/external-editor@^1.0.1":
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/@inquirer/external-editor/-/external-editor-1.0.1.tgz#ab0a82c5719a963fb469021cde5cd2b74fea30f8"
      integrity sha512-Oau4yL24d2B5IL4ma4UpbQigkVhzPDXLoqy1ggK4gnHg/stmkffJE4oOXHXF3uz0UEpywG68KcyXsyYpA1Re/Q==
      dependencies:
        chardet "^2.1.0"
        iconv-lite "^0.6.3"
    
    "@inquirer/figures@^1.0.13":
      version "1.0.13"
      resolved "https://registry.yarnpkg.com/@inquirer/figures/-/figures-1.0.13.tgz#ad0afd62baab1c23175115a9b62f511b6a751e45"
      integrity sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==
    
    "@inquirer/input@^4.1.10":
      version "4.2.1"
      resolved "https://registry.yarnpkg.com/@inquirer/input/-/input-4.2.1.tgz#c174654eb1ab34dfd42a9cf6095a7e735a4db130"
      integrity sha512-tVC+O1rBl0lJpoUZv4xY+WGWY8V5b0zxU1XDsMsIHYregdh7bN5X5QnIONNBAl0K765FYlAfNHS2Bhn7SSOVow==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/type" "^3.0.8"
    
    "@inquirer/number@^3.0.13":
      version "3.0.17"
      resolved "https://registry.yarnpkg.com/@inquirer/number/-/number-3.0.17.tgz#32a66136ce35cad9f40ceb5f82a8cfac4f306517"
      integrity sha512-GcvGHkyIgfZgVnnimURdOueMk0CztycfC8NZTiIY9arIAkeOgt6zG57G+7vC59Jns3UX27LMkPKnKWAOF5xEYg==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/type" "^3.0.8"
    
    "@inquirer/password@^4.0.13":
      version "4.0.17"
      resolved "https://registry.yarnpkg.com/@inquirer/password/-/password-4.0.17.tgz#45480c8ace688ebf071e350536ea746792b3eeba"
      integrity sha512-DJolTnNeZ00E1+1TW+8614F7rOJJCM4y4BAGQ3Gq6kQIG+OJ4zr3GLjIjVVJCbKsk2jmkmv6v2kQuN/vriHdZA==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/type" "^3.0.8"
        ansi-escapes "^4.3.2"
    
    "@inquirer/prompts@7.5.1":
      version "7.5.1"
      resolved "https://registry.yarnpkg.com/@inquirer/prompts/-/prompts-7.5.1.tgz#44e70dacfe20314d233c61410618ceef29a8482f"
      integrity sha512-5AOrZPf2/GxZ+SDRZ5WFplCA2TAQgK3OYrXCYmJL5NaTu4ECcoWFlfUZuw7Es++6Njv7iu/8vpYJhuzxUH76Vg==
      dependencies:
        "@inquirer/checkbox" "^4.1.6"
        "@inquirer/confirm" "^5.1.10"
        "@inquirer/editor" "^4.2.11"
        "@inquirer/expand" "^4.0.13"
        "@inquirer/input" "^4.1.10"
        "@inquirer/number" "^3.0.13"
        "@inquirer/password" "^4.0.13"
        "@inquirer/rawlist" "^4.1.1"
        "@inquirer/search" "^3.0.13"
        "@inquirer/select" "^4.2.1"
    
    "@inquirer/rawlist@^4.1.1":
      version "4.1.5"
      resolved "https://registry.yarnpkg.com/@inquirer/rawlist/-/rawlist-4.1.5.tgz#e3664e3da3fba93f34ee25813faa7957aa717991"
      integrity sha512-R5qMyGJqtDdi4Ht521iAkNqyB6p2UPuZUbMifakg1sWtu24gc2Z8CJuw8rP081OckNDMgtDCuLe42Q2Kr3BolA==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/type" "^3.0.8"
        yoctocolors-cjs "^2.1.2"
    
    "@inquirer/search@^3.0.13":
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/@inquirer/search/-/search-3.1.0.tgz#22f1373938eef7b98c3c30f604aac8fbe9baf27a"
      integrity sha512-PMk1+O/WBcYJDq2H7foV0aAZSmDdkzZB9Mw2v/DmONRJopwA/128cS9M/TXWLKKdEQKZnKwBzqu2G4x/2Nqx8Q==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/figures" "^1.0.13"
        "@inquirer/type" "^3.0.8"
        yoctocolors-cjs "^2.1.2"
    
    "@inquirer/select@^4.2.1":
      version "4.3.1"
      resolved "https://registry.yarnpkg.com/@inquirer/select/-/select-4.3.1.tgz#b49e76dab47f7c729e4e1e520fedc268e5b88cdc"
      integrity sha512-Gfl/5sqOF5vS/LIrSndFgOh7jgoe0UXEizDqahFRkq5aJBLegZ6WjuMh/hVEJwlFQjyLq1z9fRtvUMkb7jM1LA==
      dependencies:
        "@inquirer/core" "^10.1.15"
        "@inquirer/figures" "^1.0.13"
        "@inquirer/type" "^3.0.8"
        ansi-escapes "^4.3.2"
        yoctocolors-cjs "^2.1.2"
    
    "@inquirer/type@^1.5.5":
      version "1.5.5"
      resolved "https://registry.yarnpkg.com/@inquirer/type/-/type-1.5.5.tgz#303ea04ce7ad2e585b921b662b3be36ef7b4f09b"
      integrity sha512-MzICLu4yS7V8AA61sANROZ9vT1H3ooca5dSmI1FjZkzq7o/koMsRfQSzRtFo+F3Ao4Sf1C0bpLKejpKB/+j6MA==
      dependencies:
        mute-stream "^1.0.0"
    
    "@inquirer/type@^3.0.6", "@inquirer/type@^3.0.8":
      version "3.0.8"
      resolved "https://registry.yarnpkg.com/@inquirer/type/-/type-3.0.8.tgz#efc293ba0ed91e90e6267f1aacc1c70d20b8b4e8"
      integrity sha512-lg9Whz8onIHRthWaN1Q9EGLa/0LFJjyM8mEUbL1eTi6yMGvBf8gvyDLtxSXztQsxMvhxxNpJYrwa1YHdq+w4Jw==
    
    "@isaacs/balanced-match@^4.0.1":
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/@isaacs/balanced-match/-/balanced-match-4.0.1.tgz#3081dadbc3460661b751e7591d7faea5df39dd29"
      integrity sha512-yzMTt9lEb8Gv7zRioUilSglI0c0smZ9k5D65677DLWLtWJaXIS3CqcGyUFByYKlnUj6TkjLVs54fBl6+TiGQDQ==
    
    "@isaacs/brace-expansion@^5.0.0":
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/@isaacs/brace-expansion/-/brace-expansion-5.0.0.tgz#4b3dabab7d8e75a429414a96bd67bf4c1d13e0f3"
      integrity sha512-ZT55BDLV0yv0RBm2czMiZ+SqCGO7AvmOM3G/w2xhVPH+te0aKgFjmBvGlL1dH+ql2tgGO3MVrbb3jCKyvpgnxA==
      dependencies:
        "@isaacs/balanced-match" "^4.0.1"
    
    "@isaacs/cliui@^8.0.2":
      version "8.0.2"
      resolved "https://registry.yarnpkg.com/@isaacs/cliui/-/cliui-8.0.2.tgz#b37667b7bc181c168782259bab42474fbf52b550"
      integrity sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==
      dependencies:
        string-width "^5.1.2"
        string-width-cjs "npm:string-width@^4.2.0"
        strip-ansi "^7.0.1"
        strip-ansi-cjs "npm:strip-ansi@^6.0.1"
        wrap-ansi "^8.1.0"
        wrap-ansi-cjs "npm:wrap-ansi@^7.0.0"
    
    "@isaacs/fs-minipass@^4.0.0":
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz#2d59ae3ab4b38fb4270bfa23d30f8e2e86c7fe32"
      integrity sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==
      dependencies:
        minipass "^7.0.4"
    
    "@istanbuljs/schema@^0.1.2", "@istanbuljs/schema@^0.1.3":
      version "0.1.3"
      resolved "https://registry.yarnpkg.com/@istanbuljs/schema/-/schema-0.1.3.tgz#e45e384e4b8ec16bce2fd903af78450f6bf7ec98"
      integrity sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==
    
    "@jridgewell/gen-mapping@^0.3.12", "@jridgewell/gen-mapping@^0.3.5":
      version "0.3.13"
      resolved "https://registry.yarnpkg.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz#6342a19f44347518c93e43b1ac69deb3c4656a1f"
      integrity sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==
      dependencies:
        "@jridgewell/sourcemap-codec" "^1.5.0"
        "@jridgewell/trace-mapping" "^0.3.24"
    
    "@jridgewell/resolve-uri@^3.1.0":
      version "3.1.2"
      resolved "https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz#7a0ee601f60f99a20c7c7c5ff0c80388c1189bd6"
      integrity sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==
    
    "@jridgewell/source-map@^0.3.3":
      version "0.3.11"
      resolved "https://registry.yarnpkg.com/@jridgewell/source-map/-/source-map-0.3.11.tgz#b21835cbd36db656b857c2ad02ebd413cc13a9ba"
      integrity sha512-ZMp1V8ZFcPG5dIWnQLr3NSI1MiCU7UETdS/A0G8V/XWHvJv3ZsFqutJn1Y5RPmAPX6F3BiE397OqveU/9NCuIA==
      dependencies:
        "@jridgewell/gen-mapping" "^0.3.5"
        "@jridgewell/trace-mapping" "^0.3.25"
    
    "@jridgewell/sourcemap-codec@^1.4.14", "@jridgewell/sourcemap-codec@^1.5.0":
      version "1.5.5"
      resolved "https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz#6912b00d2c631c0d15ce1a7ab57cd657f2a8f8ba"
      integrity sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==
    
    "@jridgewell/trace-mapping@^0.3.24", "@jridgewell/trace-mapping@^0.3.25", "@jridgewell/trace-mapping@^0.3.28":
      version "0.3.30"
      resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz#4a76c4daeee5df09f5d3940e087442fb36ce2b99"
      integrity sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==
      dependencies:
        "@jridgewell/resolve-uri" "^3.1.0"
        "@jridgewell/sourcemap-codec" "^1.4.14"
    
    "@jsonjoy.com/base64@^1.1.2":
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/@jsonjoy.com/base64/-/base64-1.1.2.tgz#cf8ea9dcb849b81c95f14fc0aaa151c6b54d2578"
      integrity sha512-q6XAnWQDIMA3+FTiOYajoYqySkO+JSat0ytXGSuRdq9uXE7o92gzuQwQM14xaCRlBLGq3v5miDGC4vkVTn54xA==
    
    "@jsonjoy.com/buffers@^1.0.0":
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/@jsonjoy.com/buffers/-/buffers-1.0.0.tgz#ade6895b7d3883d70f87b5743efaa12c71dfef7a"
      integrity sha512-NDigYR3PHqCnQLXYyoLbnEdzMMvzeiCWo1KOut7Q0CoIqg9tUAPKJ1iq/2nFhc5kZtexzutNY0LFjdwWL3Dw3Q==
    
    "@jsonjoy.com/codegen@^1.0.0":
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/@jsonjoy.com/codegen/-/codegen-1.0.0.tgz#5c23f796c47675f166d23b948cdb889184b93207"
      integrity sha512-E8Oy+08cmCf0EK/NMxpaJZmOxPqM+6iSe2S4nlSBrPZOORoDJILxtbSUEDKQyTamm/BVAhIGllOBNU79/dwf0g==
    
    "@jsonjoy.com/json-pack@^1.11.0":
      version "1.11.0"
      resolved "https://registry.yarnpkg.com/@jsonjoy.com/json-pack/-/json-pack-1.11.0.tgz#3d40d3d8042f5e9eeb005658a76b788e8ca84ac0"
      integrity sha512-nLqSTAYwpk+5ZQIoVp7pfd/oSKNWlEdvTq2LzVA4r2wtWZg6v+5u0VgBOaDJuUfNOuw/4Ysq6glN5QKSrOCgrA==
      dependencies:
        "@jsonjoy.com/base64" "^1.1.2"
        "@jsonjoy.com/buffers" "^1.0.0"
        "@jsonjoy.com/codegen" "^1.0.0"
        "@jsonjoy.com/json-pointer" "^1.0.1"
        "@jsonjoy.com/util" "^1.9.0"
        hyperdyperid "^1.2.0"
        thingies "^2.5.0"
    
    "@jsonjoy.com/json-pointer@^1.0.1":
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/@jsonjoy.com/json-pointer/-/json-pointer-1.0.1.tgz#3b710158e8a212708a2886ea5e38d92e2ea4f4a0"
      integrity sha512-tJpwQfuBuxqZlyoJOSZcqf7OUmiYQ6MiPNmOv4KbZdXE/DdvBSSAwhos0zIlJU/AXxC8XpuO8p08bh2fIl+RKA==
      dependencies:
        "@jsonjoy.com/util" "^1.3.0"
    
    "@jsonjoy.com/util@^1.3.0", "@jsonjoy.com/util@^1.9.0":
      version "1.9.0"
      resolved "https://registry.yarnpkg.com/@jsonjoy.com/util/-/util-1.9.0.tgz#7ee95586aed0a766b746cd8d8363e336c3c47c46"
      integrity sha512-pLuQo+VPRnN8hfPqUTLTHk126wuYdXVxE6aDmjSeV4NCAgyxWbiOIeNJVtID3h1Vzpoi9m4jXezf73I6LgabgQ==
      dependencies:
        "@jsonjoy.com/buffers" "^1.0.0"
        "@jsonjoy.com/codegen" "^1.0.0"
    
    "@leichtgewicht/ip-codec@^2.0.1":
      version "2.0.5"
      resolved "https://registry.yarnpkg.com/@leichtgewicht/ip-codec/-/ip-codec-2.0.5.tgz#4fc56c15c580b9adb7dc3c333a134e540b44bfb1"
      integrity sha512-Vo+PSpZG2/fmgmiNzYK9qWRh8h/CHrwD0mo1h1DzL4yzHNSfWYujGTYsWGreD000gcgmZ7K4Ys6Tx9TxtsKdDw==
    
    "@listr2/prompt-adapter-inquirer@2.0.22":
      version "2.0.22"
      resolved "https://registry.yarnpkg.com/@listr2/prompt-adapter-inquirer/-/prompt-adapter-inquirer-2.0.22.tgz#95f7730de62089be79a87a80aa333f5f4644f3c5"
      integrity sha512-hV36ZoY+xKL6pYOt1nPNnkciFkn89KZwqLhAFzJvYysAvL5uBQdiADZx/8bIDXIukzzwG0QlPYolgMzQUtKgpQ==
      dependencies:
        "@inquirer/type" "^1.5.5"
    
    "@lmdb/lmdb-darwin-arm64@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-darwin-arm64/-/lmdb-darwin-arm64-3.3.0.tgz#8120e59facefd54c79b86761ef308db2833a494d"
      integrity sha512-LipbQobyEfQtu8WixasaFUZZ+JCGlho4OWwWIQ5ol0rB1RKkcZvypu7sS1CBvofBGVAa3vbOh8IOGQMrbmL5dg==
    
    "@lmdb/lmdb-darwin-x64@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-darwin-x64/-/lmdb-darwin-x64-3.3.0.tgz#3e5c7a1ea0e1d5c9c38ad89c9d1dce91e883924c"
      integrity sha512-yA+9P+ZeA3vg76BLXWeUomIAjxfmSmR2eg8fueHXDg5Xe1Xmkl9JCKuHXUhtJ+mMVcH12d5k4kJBLbyXTadfGQ==
    
    "@lmdb/lmdb-linux-arm64@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-linux-arm64/-/lmdb-linux-arm64-3.3.0.tgz#cc04c17a35710a46432306c7c12a941aa1590722"
      integrity sha512-OeWvSgjXXZ/zmtLqqL78I3910F6UYpUubmsUU+iBHo6nTtjkpXms95rJtGrjkWQqwswKBD7xSMplbYC4LEsiPA==
    
    "@lmdb/lmdb-linux-arm@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-linux-arm/-/lmdb-linux-arm-3.3.0.tgz#f36a07eb8f1656cc989ffa4e5a014b18d133079f"
      integrity sha512-EDYrW9kle+8wI19JCj/PhRnGoCN9bked5cdOPdo1wdgH/HzjgoLPFTn9DHlZccgTEVhp3O+bpWXdN/rWySVvjw==
    
    "@lmdb/lmdb-linux-x64@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-linux-x64/-/lmdb-linux-x64-3.3.0.tgz#0b4b0a73ee69d1d98695905065ff1de415f5ac72"
      integrity sha512-wDd02mt5ScX4+xd6g78zKBr6ojpgCJCTrllCAabjgap5FzuETqOqaQfKhO+tJuGWv/J5q+GIds6uY7rNFueOxg==
    
    "@lmdb/lmdb-win32-arm64@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-win32-arm64/-/lmdb-win32-arm64-3.3.0.tgz#e631dbe9bee71d00fb49b158b460a2306429ce46"
      integrity sha512-COotWhHJgzXULLiEjOgWQwqig6PoA+6ji6W+sDl6M1HhMXWIymEVHGs0edsVSNtsNSCAWMxJgR3asv6FNX/2EA==
    
    "@lmdb/lmdb-win32-x64@3.3.0":
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/@lmdb/lmdb-win32-x64/-/lmdb-win32-x64-3.3.0.tgz#02f81fa98bcd527a493de6009ba65e3758a322c4"
      integrity sha512-kqUgQH+l8HDbkAapx+aoko7Ez4X4DqkIraOqY/k0QY5EN/iialVlFpBUXh4wFXzirdmEVjbIUMrceUh0Kh8LeA==
    
    "@microsoft/signalr@^7.0.0":
      version "7.0.14"
      resolved "https://registry.yarnpkg.com/@microsoft/signalr/-/signalr-7.0.14.tgz#97551d68f09bb0ae063ffec738f7398f29d297ff"
      integrity sha512-dnS7gSJF5LxByZwJaj82+F1K755ya7ttPT+JnSeCBef3sL8p8FBkHePXphK8NSuOquIb7vsphXWa28A+L2SPpw==
      dependencies:
        abort-controller "^3.0.0"
        eventsource "^2.0.2"
        fetch-cookie "^2.0.3"
        node-fetch "^2.6.7"
        ws "^7.4.5"
    
    "@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3":
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.3.tgz#9edec61b22c3082018a79f6d1c30289ddf3d9d11"
      integrity sha512-QZHtlVgbAdy2zAqNA9Gu1UpIuI8Xvsd1v8ic6B2pZmeFnFcMWiPLfWXh7TVw4eGEZ/C9TH281KwhVoeQUKbyjw==
    
    "@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3":
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.3.tgz#33677a275204898ad8acbf62734fc4dc0b6a4855"
      integrity sha512-mdzd3AVzYKuUmiWOQ8GNhl64/IoFGol569zNRdkLReh6LRLHOXxU4U8eq0JwaD8iFHdVGqSy4IjFL4reoWCDFw==
    
    "@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3":
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.3.tgz#19edf7cdc2e7063ee328403c1d895a86dd28f4bb"
      integrity sha512-YxQL+ax0XqBJDZiKimS2XQaf+2wDGVa1enVRGzEvLLVFeqa5kx2bWbtcSXgsxjQB7nRqqIGFIcLteF/sHeVtQg==
    
    "@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3":
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.3.tgz#94fb0543ba2e28766c3fc439cabbe0440ae70159"
      integrity sha512-fg0uy/dG/nZEXfYilKoRe7yALaNmHoYeIoJuJ7KJ+YyU2bvY8vPv27f7UKhGRpY6euFYqEVhxCFZgAUNQBM3nw==
    
    "@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3":
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.3.tgz#4a0609ab5fe44d07c9c60a11e4484d3c38bbd6e3"
      integrity sha512-cvwNfbP07pKUfq1uH+S6KJ7dT9K8WOE4ZiAcsrSes+UY55E/0jLYc+vq+DO7jlmqRb5zAggExKm0H7O/CBaesg==
    
    "@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3":
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.3.tgz#0aa5502d547b57abfc4ac492de68e2006e417242"
      integrity sha512-x0fWaQtYp4E6sktbsdAqnehxDgEc/VwM7uLsRCYWaiGu0ykYdZPiS8zCWdnjHwyiumousxfBm4SO31eXqwEZhQ==
    
    "@napi-rs/nice-android-arm-eabi@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-android-arm-eabi/-/nice-android-arm-eabi-1.1.1.tgz#4ebd966821cd6c2cc7cc020eb468de397bb9b40f"
      integrity sha512-kjirL3N6TnRPv5iuHw36wnucNqXAO46dzK9oPb0wj076R5Xm8PfUVA9nAFB5ZNMmfJQJVKACAPd/Z2KYMppthw==
    
    "@napi-rs/nice-android-arm64@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-android-arm64/-/nice-android-arm64-1.1.1.tgz#e183ba874512bc005852daab8b78c63e0a4288a8"
      integrity sha512-blG0i7dXgbInN5urONoUCNf+DUEAavRffrO7fZSeoRMJc5qD+BJeNcpr54msPF6qfDD6kzs9AQJogZvT2KD5nw==
    
    "@napi-rs/nice-darwin-arm64@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-darwin-arm64/-/nice-darwin-arm64-1.1.1.tgz#64b1585809774cbb8bf95cea3d4c8827c9897394"
      integrity sha512-s/E7w45NaLqTGuOjC2p96pct4jRfo61xb9bU1unM/MJ/RFkKlJyJDx7OJI/O0ll/hrfpqKopuAFDV8yo0hfT7A==
    
    "@napi-rs/nice-darwin-x64@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-darwin-x64/-/nice-darwin-x64-1.1.1.tgz#99c0c7f62cb1e23ca76881bb29cc6000aeccc6f0"
      integrity sha512-dGoEBnVpsdcC+oHHmW1LRK5eiyzLwdgNQq3BmZIav+9/5WTZwBYX7r5ZkQC07Nxd3KHOCkgbHSh4wPkH1N1LiQ==
    
    "@napi-rs/nice-freebsd-x64@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-freebsd-x64/-/nice-freebsd-x64-1.1.1.tgz#9a5ca0e3ced86207887c98a5a560de8cde5a909e"
      integrity sha512-kHv4kEHAylMYmlNwcQcDtXjklYp4FCf0b05E+0h6nDHsZ+F0bDe04U/tXNOqrx5CmIAth4vwfkjjUmp4c4JktQ==
    
    "@napi-rs/nice-linux-arm-gnueabihf@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-arm-gnueabihf/-/nice-linux-arm-gnueabihf-1.1.1.tgz#b8a6a1bc88d0de3e99ac3fdea69980dc6e20b502"
      integrity sha512-E1t7K0efyKXZDoZg1LzCOLxgolxV58HCkaEkEvIYQx12ht2pa8hoBo+4OB3qh7e+QiBlp1SRf+voWUZFxyhyqg==
    
    "@napi-rs/nice-linux-arm64-gnu@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-arm64-gnu/-/nice-linux-arm64-gnu-1.1.1.tgz#226f1ef30fcb80fa40370e843b75cc86e39e1183"
      integrity sha512-CIKLA12DTIZlmTaaKhQP88R3Xao+gyJxNWEn04wZwC2wmRapNnxCUZkVwggInMJvtVElA+D4ZzOU5sX4jV+SmQ==
    
    "@napi-rs/nice-linux-arm64-musl@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-arm64-musl/-/nice-linux-arm64-musl-1.1.1.tgz#01345c3db79210ba5406c8729e8db75ed11c5f14"
      integrity sha512-+2Rzdb3nTIYZ0YJF43qf2twhqOCkiSrHx2Pg6DJaCPYhhaxbLcdlV8hCRMHghQ+EtZQWGNcS2xF4KxBhSGeutg==
    
    "@napi-rs/nice-linux-ppc64-gnu@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-ppc64-gnu/-/nice-linux-ppc64-gnu-1.1.1.tgz#ce7a1025227daab491ded40784b561394d688fcb"
      integrity sha512-4FS8oc0GeHpwvv4tKciKkw3Y4jKsL7FRhaOeiPei0X9T4Jd619wHNe4xCLmN2EMgZoeGg+Q7GY7BsvwKpL22Tg==
    
    "@napi-rs/nice-linux-riscv64-gnu@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-riscv64-gnu/-/nice-linux-riscv64-gnu-1.1.1.tgz#9bef5dc89a0425d03163853b4968dbb686d98fd5"
      integrity sha512-HU0nw9uD4FO/oGCCk409tCi5IzIZpH2agE6nN4fqpwVlCn5BOq0MS1dXGjXaG17JaAvrlpV5ZeyZwSon10XOXw==
    
    "@napi-rs/nice-linux-s390x-gnu@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-s390x-gnu/-/nice-linux-s390x-gnu-1.1.1.tgz#247c8c7c45876877bdb337cfeb290ff4fd82de62"
      integrity sha512-2YqKJWWl24EwrX0DzCQgPLKQBxYDdBxOHot1KWEq7aY2uYeX+Uvtv4I8xFVVygJDgf6/92h9N3Y43WPx8+PAgQ==
    
    "@napi-rs/nice-linux-x64-gnu@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-x64-gnu/-/nice-linux-x64-gnu-1.1.1.tgz#7fd1f5e037cb44ab4f5f95a3b3225a99e3248f12"
      integrity sha512-/gaNz3R92t+dcrfCw/96pDopcmec7oCcAQ3l/M+Zxr82KT4DljD37CpgrnXV+pJC263JkW572pdbP3hP+KjcIg==
    
    "@napi-rs/nice-linux-x64-musl@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-linux-x64-musl/-/nice-linux-x64-musl-1.1.1.tgz#d447cd7157ae5da5c0b15fc618bf61f0c344ff6f"
      integrity sha512-xScCGnyj/oppsNPMnevsBe3pvNaoK7FGvMjT35riz9YdhB2WtTG47ZlbxtOLpjeO9SqqQ2J2igCmz6IJOD5JYw==
    
    "@napi-rs/nice-openharmony-arm64@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-openharmony-arm64/-/nice-openharmony-arm64-1.1.1.tgz#1120e457d2cc6b2bc86ef0a697faefe2e194dfce"
      integrity sha512-6uJPRVwVCLDeoOaNyeiW0gp2kFIM4r7PL2MczdZQHkFi9gVlgm+Vn+V6nTWRcu856mJ2WjYJiumEajfSm7arPQ==
    
    "@napi-rs/nice-win32-arm64-msvc@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-win32-arm64-msvc/-/nice-win32-arm64-msvc-1.1.1.tgz#91e4cfecf339b43fa7934f0c8b19d04f4cdd9bc0"
      integrity sha512-uoTb4eAvM5B2aj/z8j+Nv8OttPf2m+HVx3UjA5jcFxASvNhQriyCQF1OB1lHL43ZhW+VwZlgvjmP5qF3+59atA==
    
    "@napi-rs/nice-win32-ia32-msvc@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-win32-ia32-msvc/-/nice-win32-ia32-msvc-1.1.1.tgz#ed9300bba074d3e3b0a077d6b157f2b4ff70af0e"
      integrity sha512-CNQqlQT9MwuCsg1Vd/oKXiuH+TcsSPJmlAFc5frFyX/KkOh0UpBLEj7aoY656d5UKZQMQFP7vJNa1DNUNORvug==
    
    "@napi-rs/nice-win32-x64-msvc@1.1.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice-win32-x64-msvc/-/nice-win32-x64-msvc-1.1.1.tgz#8292b82fb46458618ccff5b8130f78974349541e"
      integrity sha512-vB+4G/jBQCAh0jelMTY3+kgFy00Hlx2f2/1zjMoH821IbplbWZOkLiTYXQkygNTzQJTq5cvwBDgn2ppHD+bglQ==
    
    "@napi-rs/nice@^1.0.1":
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/@napi-rs/nice/-/nice-1.1.1.tgz#c1aacd631ecd4c500c959e3e7cfedd5c73bffe2a"
      integrity sha512-xJIPs+bYuc9ASBl+cvGsKbGrJmS6fAKaSZCnT0lhahT5rhA2VVy9/EcIgd2JhtEuFOJNx7UHNn/qiTPTY4nrQw==
      optionalDependencies:
        "@napi-rs/nice-android-arm-eabi" "1.1.1"
        "@napi-rs/nice-android-arm64" "1.1.1"
        "@napi-rs/nice-darwin-arm64" "1.1.1"
        "@napi-rs/nice-darwin-x64" "1.1.1"
        "@napi-rs/nice-freebsd-x64" "1.1.1"
        "@napi-rs/nice-linux-arm-gnueabihf" "1.1.1"
        "@napi-rs/nice-linux-arm64-gnu" "1.1.1"
        "@napi-rs/nice-linux-arm64-musl" "1.1.1"
        "@napi-rs/nice-linux-ppc64-gnu" "1.1.1"
        "@napi-rs/nice-linux-riscv64-gnu" "1.1.1"
        "@napi-rs/nice-linux-s390x-gnu" "1.1.1"
        "@napi-rs/nice-linux-x64-gnu" "1.1.1"
        "@napi-rs/nice-linux-x64-musl" "1.1.1"
        "@napi-rs/nice-openharmony-arm64" "1.1.1"
        "@napi-rs/nice-win32-arm64-msvc" "1.1.1"
        "@napi-rs/nice-win32-ia32-msvc" "1.1.1"
        "@napi-rs/nice-win32-x64-msvc" "1.1.1"
    
    "@ng-bootstrap/ng-bootstrap@~19.0.0":
      version "19.0.1"
      resolved "https://registry.yarnpkg.com/@ng-bootstrap/ng-bootstrap/-/ng-bootstrap-19.0.1.tgz#a9d962f590012e0a6f731b5c5069c70c6ae8cb7f"
      integrity sha512-1lErAkwh0F+gWkzpiddViY4GfA9LVXkwLpgBsV9Mb3IC0zo6WNkY8WxCC+LqajirBTu20DCkZSqeRzrwaVLpZw==
      dependencies:
        tslib "^2.3.0"
    
    "@ngtools/webpack@20.0.6":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@ngtools/webpack/-/webpack-20.0.6.tgz#f7e7afed07d3ac1d43c190d0c0edd6c43dc3e055"
      integrity sha512-onb0wIEIRrsD15GiVnEHqPMjwgh3rPDNt5oKrXfhLpdJOAewo3JsLzcZi+2vRZHVlIxDQWZuReNVmfiJpOYlqg==
    
    "@ngx-validate/core@^0.2.0":
      version "0.2.0"
      resolved "https://registry.yarnpkg.com/@ngx-validate/core/-/core-0.2.0.tgz#5b3d9bb963c2fcb5cb6d745ca2f553d411082a3f"
      integrity sha512-04iGHPCXyFCykAyCGehxetziOt69Lhk/6yWifhC/vc8PZJ0S8m3hIn6tI63pEdVoV95+Hc1GQ1K/wMRtRD0uLQ==
      dependencies:
        tslib "^2.0.0"
    
    "@nodelib/fs.scandir@2.1.5":
      version "2.1.5"
      resolved "https://registry.yarnpkg.com/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz#7619c2eb21b25483f6d167548b4cfd5a7488c3d5"
      integrity sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==
      dependencies:
        "@nodelib/fs.stat" "2.0.5"
        run-parallel "^1.1.9"
    
    "@nodelib/fs.stat@2.0.5", "@nodelib/fs.stat@^2.0.2":
      version "2.0.5"
      resolved "https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz#5bd262af94e9d25bd1e71b05deed44876a222e8b"
      integrity sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==
    
    "@nodelib/fs.walk@^1.2.3", "@nodelib/fs.walk@^1.2.8":
      version "1.2.8"
      resolved "https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz#e95737e8bb6746ddedf69c556953494f196fe69a"
      integrity sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==
      dependencies:
        "@nodelib/fs.scandir" "2.1.5"
        fastq "^1.6.0"
    
    "@npmcli/agent@^3.0.0":
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/@npmcli/agent/-/agent-3.0.0.tgz#1685b1fbd4a1b7bb4f930cbb68ce801edfe7aa44"
      integrity sha512-S79NdEgDQd/NGCay6TCoVzXSj74skRZIKJcpJjC5lOq34SZzyI6MqtiiWoiVWoVrTcGjNeC4ipbh1VIHlpfF5Q==
      dependencies:
        agent-base "^7.1.0"
        http-proxy-agent "^7.0.0"
        https-proxy-agent "^7.0.1"
        lru-cache "^10.0.1"
        socks-proxy-agent "^8.0.3"
    
    "@npmcli/fs@^4.0.0":
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/@npmcli/fs/-/fs-4.0.0.tgz#a1eb1aeddefd2a4a347eca0fab30bc62c0e1c0f2"
      integrity sha512-/xGlezI6xfGO9NwuJlnwz/K14qD1kCSAGtacBHnGzeAIuJGazcp45KP5NuyARXoKb7cwulAGWVsbeSxdG/cb0Q==
      dependencies:
        semver "^7.3.5"
    
    "@npmcli/git@^6.0.0":
      version "6.0.3"
      resolved "https://registry.yarnpkg.com/@npmcli/git/-/git-6.0.3.tgz#966cbb228514372877de5244db285b199836f3aa"
      integrity sha512-GUYESQlxZRAdhs3UhbB6pVRNUELQOHXwK9ruDkwmCv2aZ5y0SApQzUJCg02p3A7Ue2J5hxvlk1YI53c00NmRyQ==
      dependencies:
        "@npmcli/promise-spawn" "^8.0.0"
        ini "^5.0.0"
        lru-cache "^10.0.1"
        npm-pick-manifest "^10.0.0"
        proc-log "^5.0.0"
        promise-retry "^2.0.1"
        semver "^7.3.5"
        which "^5.0.0"
    
    "@npmcli/installed-package-contents@^3.0.0":
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/@npmcli/installed-package-contents/-/installed-package-contents-3.0.0.tgz#2c1170ff4f70f68af125e2842e1853a93223e4d1"
      integrity sha512-fkxoPuFGvxyrH+OQzyTkX2LUEamrF4jZSmxjAtPPHHGO0dqsQ8tTKjnIS8SAnPHdk2I03BDtSMR5K/4loKg79Q==
      dependencies:
        npm-bundled "^4.0.0"
        npm-normalize-package-bin "^4.0.0"
    
    "@npmcli/node-gyp@^4.0.0":
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/@npmcli/node-gyp/-/node-gyp-4.0.0.tgz#01f900bae62f0f27f9a5a127b40d443ddfb9d4c6"
      integrity sha512-+t5DZ6mO/QFh78PByMq1fGSAub/agLJZDRfJRMeOSNCt8s9YVlTjmGpIPwPhvXTGUIJk+WszlT0rQa1W33yzNA==
    
    "@npmcli/package-json@^6.0.0":
      version "6.2.0"
      resolved "https://registry.yarnpkg.com/@npmcli/package-json/-/package-json-6.2.0.tgz#7c7e61e466eefdf729cb87a34c3adc15d76e2f97"
      integrity sha512-rCNLSB/JzNvot0SEyXqWZ7tX2B5dD2a1br2Dp0vSYVo5jh8Z0EZ7lS9TsZ1UtziddB1UfNUaMCc538/HztnJGA==
      dependencies:
        "@npmcli/git" "^6.0.0"
        glob "^10.2.2"
        hosted-git-info "^8.0.0"
        json-parse-even-better-errors "^4.0.0"
        proc-log "^5.0.0"
        semver "^7.5.3"
        validate-npm-package-license "^3.0.4"
    
    "@npmcli/promise-spawn@^8.0.0":
      version "8.0.2"
      resolved "https://registry.yarnpkg.com/@npmcli/promise-spawn/-/promise-spawn-8.0.2.tgz#053688f8bc2b4ecc036d2d52c691fd82af58ea5e"
      integrity sha512-/bNJhjc+o6qL+Dwz/bqfTQClkEO5nTQ1ZEcdCkAQjhkZMHIh22LPG7fNh1enJP1NKWDqYiiABnjFCY7E0zHYtQ==
      dependencies:
        which "^5.0.0"
    
    "@npmcli/redact@^3.0.0":
      version "3.2.2"
      resolved "https://registry.yarnpkg.com/@npmcli/redact/-/redact-3.2.2.tgz#4a6745e0ae269120ad223780ce374d6c59ae34cd"
      integrity sha512-7VmYAmk4csGv08QzrDKScdzn11jHPFGyqJW39FyPgPuAp3zIaUmuCo1yxw9aGs+NEJuTGQ9Gwqpt93vtJubucg==
    
    "@npmcli/run-script@^9.0.0":
      version "9.1.0"
      resolved "https://registry.yarnpkg.com/@npmcli/run-script/-/run-script-9.1.0.tgz#6168c2be4703fe5ed31acb08a2151cb620ed30a4"
      integrity sha512-aoNSbxtkePXUlbZB+anS1LqsJdctG5n3UVhfU47+CDdwMi6uNTBMF9gPcQRnqghQd2FGzcwwIFBruFMxjhBewg==
      dependencies:
        "@npmcli/node-gyp" "^4.0.0"
        "@npmcli/package-json" "^6.0.0"
        "@npmcli/promise-spawn" "^8.0.0"
        node-gyp "^11.0.0"
        proc-log "^5.0.0"
        which "^5.0.0"
    
    "@parcel/watcher-android-arm64@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.5.1.tgz#507f836d7e2042f798c7d07ad19c3546f9848ac1"
      integrity sha512-KF8+j9nNbUN8vzOFDpRMsaKBHZ/mcjEjMToVMJOhTozkDonQFFrRcfdLWn6yWKCmJKmdVxSgHiYvTCef4/qcBA==
    
    "@parcel/watcher-darwin-arm64@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-darwin-arm64/-/watcher-darwin-arm64-2.5.1.tgz#3d26dce38de6590ef79c47ec2c55793c06ad4f67"
      integrity sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==
    
    "@parcel/watcher-darwin-x64@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-darwin-x64/-/watcher-darwin-x64-2.5.1.tgz#99f3af3869069ccf774e4ddfccf7e64fd2311ef8"
      integrity sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==
    
    "@parcel/watcher-freebsd-x64@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-freebsd-x64/-/watcher-freebsd-x64-2.5.1.tgz#14d6857741a9f51dfe51d5b08b7c8afdbc73ad9b"
      integrity sha512-SI4eljM7Flp9yPuKi8W0ird8TI/JK6CSxju3NojVI6BjHsTyK7zxA9urjVjEKJ5MBYC+bLmMcbAWlZ+rFkLpJQ==
    
    "@parcel/watcher-linux-arm-glibc@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-linux-arm-glibc/-/watcher-linux-arm-glibc-2.5.1.tgz#43c3246d6892381db473bb4f663229ad20b609a1"
      integrity sha512-RCdZlEyTs8geyBkkcnPWvtXLY44BCeZKmGYRtSgtwwnHR4dxfHRG3gR99XdMEdQ7KeiDdasJwwvNSF5jKtDwdA==
    
    "@parcel/watcher-linux-arm-musl@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-linux-arm-musl/-/watcher-linux-arm-musl-2.5.1.tgz#663750f7090bb6278d2210de643eb8a3f780d08e"
      integrity sha512-6E+m/Mm1t1yhB8X412stiKFG3XykmgdIOqhjWj+VL8oHkKABfu/gjFj8DvLrYVHSBNC+/u5PeNrujiSQ1zwd1Q==
    
    "@parcel/watcher-linux-arm64-glibc@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-linux-arm64-glibc/-/watcher-linux-arm64-glibc-2.5.1.tgz#ba60e1f56977f7e47cd7e31ad65d15fdcbd07e30"
      integrity sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==
    
    "@parcel/watcher-linux-arm64-musl@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-linux-arm64-musl/-/watcher-linux-arm64-musl-2.5.1.tgz#f7fbcdff2f04c526f96eac01f97419a6a99855d2"
      integrity sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==
    
    "@parcel/watcher-linux-x64-glibc@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-linux-x64-glibc/-/watcher-linux-x64-glibc-2.5.1.tgz#4d2ea0f633eb1917d83d483392ce6181b6a92e4e"
      integrity sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==
    
    "@parcel/watcher-linux-x64-musl@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-linux-x64-musl/-/watcher-linux-x64-musl-2.5.1.tgz#277b346b05db54f55657301dd77bdf99d63606ee"
      integrity sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==
    
    "@parcel/watcher-win32-arm64@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-win32-arm64/-/watcher-win32-arm64-2.5.1.tgz#7e9e02a26784d47503de1d10e8eab6cceb524243"
      integrity sha512-RFzklRvmc3PkjKjry3hLF9wD7ppR4AKcWNzH7kXR7GUe0Igb3Nz8fyPwtZCSquGrhU5HhUNDr/mKBqj7tqA2Vw==
    
    "@parcel/watcher-win32-ia32@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-win32-ia32/-/watcher-win32-ia32-2.5.1.tgz#2d0f94fa59a873cdc584bf7f6b1dc628ddf976e6"
      integrity sha512-c2KkcVN+NJmuA7CGlaGD1qJh1cLfDnQsHjE89E60vUEMlqduHGCdCLJCID5geFVM0dOtA3ZiIO8BoEQmzQVfpQ==
    
    "@parcel/watcher-win32-x64@2.5.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher-win32-x64/-/watcher-win32-x64-2.5.1.tgz#ae52693259664ba6f2228fa61d7ee44b64ea0947"
      integrity sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==
    
    "@parcel/watcher@^2.4.1":
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/@parcel/watcher/-/watcher-2.5.1.tgz#342507a9cfaaf172479a882309def1e991fb1200"
      integrity sha512-dfUnCxiN9H4ap84DvD2ubjw+3vUNpstxa0TneY/Paat8a3R4uQZDLSvWjmznAY/DoahqTHl9V46HF/Zs3F29pg==
      dependencies:
        detect-libc "^1.0.3"
        is-glob "^4.0.3"
        micromatch "^4.0.5"
        node-addon-api "^7.0.0"
      optionalDependencies:
        "@parcel/watcher-android-arm64" "2.5.1"
        "@parcel/watcher-darwin-arm64" "2.5.1"
        "@parcel/watcher-darwin-x64" "2.5.1"
        "@parcel/watcher-freebsd-x64" "2.5.1"
        "@parcel/watcher-linux-arm-glibc" "2.5.1"
        "@parcel/watcher-linux-arm-musl" "2.5.1"
        "@parcel/watcher-linux-arm64-glibc" "2.5.1"
        "@parcel/watcher-linux-arm64-musl" "2.5.1"
        "@parcel/watcher-linux-x64-glibc" "2.5.1"
        "@parcel/watcher-linux-x64-musl" "2.5.1"
        "@parcel/watcher-win32-arm64" "2.5.1"
        "@parcel/watcher-win32-ia32" "2.5.1"
        "@parcel/watcher-win32-x64" "2.5.1"
    
    "@pkgjs/parseargs@^0.11.0":
      version "0.11.0"
      resolved "https://registry.yarnpkg.com/@pkgjs/parseargs/-/parseargs-0.11.0.tgz#a77ea742fab25775145434eb1d2328cf5013ac33"
      integrity sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==
    
    "@popperjs/core@~2.11.0":
      version "2.11.8"
      resolved "https://registry.yarnpkg.com/@popperjs/core/-/core-2.11.8.tgz#6b79032e760a0899cd4204710beede972a3a185f"
      integrity sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==
    
    "@rollup/rollup-android-arm-eabi@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.2.tgz#c228d00a41f0dbd6fb8b7ea819bbfbf1c1157a10"
      integrity sha512-JkdNEq+DFxZfUwxvB58tHMHBHVgX23ew41g1OQinthJ+ryhdRk67O31S7sYw8u2lTjHUPFxwar07BBt1KHp/hg==
    
    "@rollup/rollup-android-arm-eabi@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.47.1.tgz#6e236cd2fd29bb01a300ad4ff6ed0f1a17550e69"
      integrity sha512-lTahKRJip0knffA/GTNFJMrToD+CM+JJ+Qt5kjzBK/sFQ0EWqfKW3AYQSlZXN98tX0lx66083U9JYIMioMMK7g==
    
    "@rollup/rollup-android-arm64@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.2.tgz#e2b38d0c912169fd55d7e38d723aada208d37256"
      integrity sha512-13unNoZ8NzUmnndhPTkWPWbX3vtHodYmy+I9kuLxN+F+l+x3LdVF7UCu8TWVMt1POHLh6oDHhnOA04n8oJZhBw==
    
    "@rollup/rollup-android-arm64@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.47.1.tgz#808f2c9c7e68161add613ebcb0eac5a058a0df3c"
      integrity sha512-uqxkb3RJLzlBbh/bbNQ4r7YpSZnjgMgyoEOY7Fy6GCbelkDSAzeiogxMG9TfLsBbqmGsdDObo3mzGqa8hps4MA==
    
    "@rollup/rollup-darwin-arm64@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.2.tgz#1fddb3690f2ae33df16d334c613377f05abe4878"
      integrity sha512-Gzf1Hn2Aoe8VZzevHostPX23U7N5+4D36WJNHK88NZHCJr7aVMG4fadqkIf72eqVPGjGc0HJHNuUaUcxiR+N/w==
    
    "@rollup/rollup-darwin-arm64@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.47.1.tgz#fa41e413c8e73d61039d6375b234595f24b1e5e3"
      integrity sha512-tV6reObmxBDS4DDyLzTDIpymthNlxrLBGAoQx6m2a7eifSNEZdkXQl1PE4ZjCkEDPVgNXSzND/k9AQ3mC4IOEQ==
    
    "@rollup/rollup-darwin-x64@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.2.tgz#818298d11c8109e1112590165142f14be24b396d"
      integrity sha512-47N4hxa01a4x6XnJoskMKTS8XZ0CZMd8YTbINbi+w03A2w4j1RTlnGHOz/P0+Bg1LaVL6ufZyNprSg+fW5nYQQ==
    
    "@rollup/rollup-darwin-x64@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.47.1.tgz#9aac64e886435493f2e3a0aa5e4aad098a90814c"
      integrity sha512-XuJRPTnMk1lwsSnS3vYyVMu4x/+WIw1MMSiqj5C4j3QOWsMzbJEK90zG+SWV1h0B1ABGCQ0UZUjti+TQK35uHQ==
    
    "@rollup/rollup-freebsd-arm64@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.2.tgz#91a28dc527d5bed7f9ecf0e054297b3012e19618"
      integrity sha512-8t6aL4MD+rXSHHZUR1z19+9OFJ2rl1wGKvckN47XFRVO+QL/dUSpKA2SLRo4vMg7ELA8pzGpC+W9OEd1Z/ZqoQ==
    
    "@rollup/rollup-freebsd-arm64@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.47.1.tgz#9fc804264f7b7a7cdad3747950299f990163be1f"
      integrity sha512-79BAm8Ag/tmJ5asCqgOXsb3WY28Rdd5Lxj8ONiQzWzy9LvWORd5qVuOnjlqiWWZJw+dWewEktZb5yiM1DLLaHw==
    
    "@rollup/rollup-freebsd-x64@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.2.tgz#28acadefa76b5c7bede1576e065b51d335c62c62"
      integrity sha512-C+AyHBzfpsOEYRFjztcYUFsH4S7UsE9cDtHCtma5BK8+ydOZYgMmWg1d/4KBytQspJCld8ZIujFMAdKG1xyr4Q==
    
    "@rollup/rollup-freebsd-x64@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.47.1.tgz#933feaff864feb03bbbcd0c18ea351ade957cf79"
      integrity sha512-OQ2/ZDGzdOOlyfqBiip0ZX/jVFekzYrGtUsqAfLDbWy0jh1PUU18+jYp8UMpqhly5ltEqotc2miLngf9FPSWIA==
    
    "@rollup/rollup-linux-arm-gnueabihf@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.2.tgz#819691464179cbcd9a9f9d3dc7617954840c6186"
      integrity sha512-de6TFZYIvJwRNjmW3+gaXiZ2DaWL5D5yGmSYzkdzjBDS3W+B9JQ48oZEsmMvemqjtAFzE16DIBLqd6IQQRuG9Q==
    
    "@rollup/rollup-linux-arm-gnueabihf@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.47.1.tgz#02915e6b2c55fe5961c27404aba2d9c8ef48ac6c"
      integrity sha512-HZZBXJL1udxlCVvoVadstgiU26seKkHbbAMLg7680gAcMnRNP9SAwTMVet02ANA94kXEI2VhBnXs4e5nf7KG2A==
    
    "@rollup/rollup-linux-arm-musleabihf@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.2.tgz#d149207039e4189e267e8724050388effc80d704"
      integrity sha512-urjaEZubdIkacKc930hUDOfQPysezKla/O9qV+O89enqsqUmQm8Xj8O/vh0gHg4LYfv7Y7UsE3QjzLQzDYN1qg==
    
    "@rollup/rollup-linux-arm-musleabihf@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.47.1.tgz#1afef33191b26e76ae7f0d0dc767efc6be1285ce"
      integrity sha512-sZ5p2I9UA7T950JmuZ3pgdKA6+RTBr+0FpK427ExW0t7n+QwYOcmDTK/aRlzoBrWyTpJNlS3kacgSlSTUg6P/Q==
    
    "@rollup/rollup-linux-arm64-gnu@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.2.tgz#fa72ebddb729c3c6d88973242f1a2153c83e86ec"
      integrity sha512-KlE8IC0HFOC33taNt1zR8qNlBYHj31qGT1UqWqtvR/+NuCVhfufAq9fxO8BMFC22Wu0rxOwGVWxtCMvZVLmhQg==
    
    "@rollup/rollup-linux-arm64-gnu@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.47.1.tgz#6e7f38fb99d14143de3ce33204e6cd61e1c2c780"
      integrity sha512-3hBFoqPyU89Dyf1mQRXCdpc6qC6At3LV6jbbIOZd72jcx7xNk3aAp+EjzAtN6sDlmHFzsDJN5yeUySvorWeRXA==
    
    "@rollup/rollup-linux-arm64-musl@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.2.tgz#2054216e34469ab8765588ebf343d531fc3c9228"
      integrity sha512-j8CgxvfM0kbnhu4XgjnCWJQyyBOeBI1Zq91Z850aUddUmPeQvuAy6OiMdPS46gNFgy8gN1xkYyLgwLYZG3rBOg==
    
    "@rollup/rollup-linux-arm64-musl@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.47.1.tgz#25ab09f14bbcba85a604bcee2962d2486db90794"
      integrity sha512-49J4FnMHfGodJWPw73Ve+/hsPjZgcXQGkmqBGZFvltzBKRS+cvMiWNLadOMXKGnYRhs1ToTGM0sItKISoSGUNA==
    
    "@rollup/rollup-linux-loongarch64-gnu@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.2.tgz#818de242291841afbfc483a84f11e9c7a11959bc"
      integrity sha512-Ybc/1qUampKuRF4tQXc7G7QY9YRyeVSykfK36Y5Qc5dmrIxwFhrOzqaVTNoZygqZ1ZieSWTibfFhQ5qK8jpWxw==
    
    "@rollup/rollup-linux-loongarch64-gnu@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.47.1.tgz#d3e3a3fd61e21b2753094391dee9b515a2bc9ecd"
      integrity sha512-4yYU8p7AneEpQkRX03pbpLmE21z5JNys16F1BZBZg5fP9rIlb0TkeQjn5du5w4agConCCEoYIG57sNxjryHEGg==
    
    "@rollup/rollup-linux-powerpc64le-gnu@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.2.tgz#0bb4cb8fc4a2c635f68c1208c924b2145eb647cb"
      integrity sha512-3FCIrnrt03CCsZqSYAOW/k9n625pjpuMzVfeI+ZBUSDT3MVIFDSPfSUgIl9FqUftxcUXInvFah79hE1c9abD+Q==
    
    "@rollup/rollup-linux-ppc64-gnu@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.47.1.tgz#6b44445e2bd5866692010de241bf18d2ae8b0cb8"
      integrity sha512-fAiq+J28l2YMWgC39jz/zPi2jqc0y3GSRo1yyxlBHt6UN0yYgnegHSRPa3pnHS5amT/efXQrm0ug5+aNEu9UuQ==
    
    "@rollup/rollup-linux-riscv64-gnu@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.2.tgz#4b3b8e541b7b13e447ae07774217d98c06f6926d"
      integrity sha512-QNU7BFHEvHMp2ESSY3SozIkBPaPBDTsfVNGx3Xhv+TdvWXFGOSH2NJvhD1zKAT6AyuuErJgbdvaJhYVhVqrWTg==
    
    "@rollup/rollup-linux-riscv64-gnu@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.47.1.tgz#3ff412d20d3b157e6aadabf84788e8c5cb221ba7"
      integrity sha512-daoT0PMENNdjVYYU9xec30Y2prb1AbEIbb64sqkcQcSaR0zYuKkoPuhIztfxuqN82KYCKKrj+tQe4Gi7OSm1ow==
    
    "@rollup/rollup-linux-riscv64-musl@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.2.tgz#e065405e67d8bd64a7d0126c931bd9f03910817f"
      integrity sha512-5W6vNYkhgfh7URiXTO1E9a0cy4fSgfE4+Hl5agb/U1sa0kjOLMLC1wObxwKxecE17j0URxuTrYZZME4/VH57Hg==
    
    "@rollup/rollup-linux-riscv64-musl@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.47.1.tgz#104f451497d53d82a49c6d08c13c59f5f30eed57"
      integrity sha512-JNyXaAhWtdzfXu5pUcHAuNwGQKevR+6z/poYQKVW+pLaYOj9G1meYc57/1Xv2u4uTxfu9qEWmNTjv/H/EpAisw==
    
    "@rollup/rollup-linux-s390x-gnu@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.2.tgz#dda3265bbbfe16a5d0089168fd07f5ebb2a866fe"
      integrity sha512-B7LKIz+0+p348JoAL4X/YxGx9zOx3sR+o6Hj15Y3aaApNfAshK8+mWZEf759DXfRLeL2vg5LYJBB7DdcleYCoQ==
    
    "@rollup/rollup-linux-s390x-gnu@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.47.1.tgz#d04de7b21d181f30750760cb3553946306506172"
      integrity sha512-U/CHbqKSwEQyZXjCpY43/GLYcTVKEXeRHw0rMBJP7fP3x6WpYG4LTJWR3ic6TeYKX6ZK7mrhltP4ppolyVhLVQ==
    
    "@rollup/rollup-linux-x64-gnu@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.2.tgz#90993269b8b995b4067b7b9d72ff1c360ef90a17"
      integrity sha512-lG7Xa+BmBNwpjmVUbmyKxdQJ3Q6whHjMjzQplOs5Z+Gj7mxPtWakGHqzMqNER68G67kmCX9qX57aRsW5V0VOng==
    
    "@rollup/rollup-linux-x64-gnu@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.47.1.tgz#a6ba88ff7480940a435b1e67ddbb3f207a7ae02f"
      integrity sha512-uTLEakjxOTElfeZIGWkC34u2auLHB1AYS6wBjPGI00bWdxdLcCzK5awjs25YXpqB9lS8S0vbO0t9ZcBeNibA7g==
    
    "@rollup/rollup-linux-x64-musl@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.2.tgz#fdf5b09fd121eb8d977ebb0fda142c7c0167b8de"
      integrity sha512-tD46wKHd+KJvsmije4bUskNuvWKFcTOIM9tZ/RrmIvcXnbi0YK/cKS9FzFtAm7Oxi2EhV5N2OpfFB348vSQRXA==
    
    "@rollup/rollup-linux-x64-musl@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.47.1.tgz#c912c8ffa0c242ed3175cd91cdeaef98109afa54"
      integrity sha512-Ft+d/9DXs30BK7CHCTX11FtQGHUdpNDLJW0HHLign4lgMgBcPFN3NkdIXhC5r9iwsMwYreBBc4Rho5ieOmKNVQ==
    
    "@rollup/rollup-win32-arm64-msvc@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.2.tgz#6397e1e012db64dfecfed0774cb9fcf89503d716"
      integrity sha512-Bjv/HG8RRWLNkXwQQemdsWw4Mg+IJ29LK+bJPW2SCzPKOUaMmPEppQlu/Fqk1d7+DX3V7JbFdbkh/NMmurT6Pg==
    
    "@rollup/rollup-win32-arm64-msvc@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.47.1.tgz#ca5eaae89443554b461bb359112a056528cfdac0"
      integrity sha512-N9X5WqGYzZnjGAFsKSfYFtAShYjwOmFJoWbLg3dYixZOZqU7hdMq+/xyS14zKLhFhZDhP9VfkzQnsdk0ZDS9IA==
    
    "@rollup/rollup-win32-ia32-msvc@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.2.tgz#df0991464a52a35506103fe18d29913bf8798a0c"
      integrity sha512-dt1llVSGEsGKvzeIO76HToiYPNPYPkmjhMHhP00T9S4rDern8P2ZWvWAQUEJ+R1UdMWJ/42i/QqJ2WV765GZcA==
    
    "@rollup/rollup-win32-ia32-msvc@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.47.1.tgz#34e76172515fb4b374eb990d59f54faff938246e"
      integrity sha512-O+KcfeCORZADEY8oQJk4HK8wtEOCRE4MdOkb8qGZQNun3jzmj2nmhV/B/ZaaZOkPmJyvm/gW9n0gsB4eRa1eiQ==
    
    "@rollup/rollup-win32-x64-msvc@4.40.2":
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.2.tgz#8dae04d01a2cbd84d6297d99356674c6b993f0fc"
      integrity sha512-bwspbWB04XJpeElvsp+DCylKfF4trJDa2Y9Go8O6A7YLX2LIKGcNK/CYImJN6ZP4DcuOHB4Utl3iCbnR62DudA==
    
    "@rollup/rollup-win32-x64-msvc@4.47.1":
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.47.1.tgz#e5e0a0bae2c9d4858cc9b8dc508b2e10d7f0df8b"
      integrity sha512-CpKnYa8eHthJa3c+C38v/E+/KZyF1Jdh2Cz3DyKZqEWYgrM1IHFArXNWvBLPQCKUEsAqqKX27tTqVEFbDNUcOA==
    
    "@schematics/angular@20.0.6":
      version "20.0.6"
      resolved "https://registry.yarnpkg.com/@schematics/angular/-/angular-20.0.6.tgz#d8252e246179e68692e3d81f0ead720035e0e873"
      integrity sha512-aAGHku+Aka8gNLBdgGOnofx2Do8bQoZbzfA4OGtrxrYR8C2wrES3fKmFbQO2aRyUjzX31w2oSOy9BNN/L3gnIA==
      dependencies:
        "@angular-devkit/core" "20.0.6"
        "@angular-devkit/schematics" "20.0.6"
        jsonc-parser "3.3.1"
    
    "@sigstore/bundle@^3.1.0":
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/@sigstore/bundle/-/bundle-3.1.0.tgz#74f8f3787148400ddd364be8a9a9212174c66646"
      integrity sha512-Mm1E3/CmDDCz3nDhFKTuYdB47EdRFRQMOE/EAbiG1MJW77/w1b3P7Qx7JSrVJs8PfwOLOVcKQCHErIwCTyPbag==
      dependencies:
        "@sigstore/protobuf-specs" "^0.4.0"
    
    "@sigstore/core@^2.0.0":
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/@sigstore/core/-/core-2.0.0.tgz#f888a8e4c8fdaa27848514a281920b6fd8eca955"
      integrity sha512-nYxaSb/MtlSI+JWcwTHQxyNmWeWrUXJJ/G4liLrGG7+tS4vAz6LF3xRXqLH6wPIVUoZQel2Fs4ddLx4NCpiIYg==
    
    "@sigstore/protobuf-specs@^0.4.0", "@sigstore/protobuf-specs@^0.4.1":
      version "0.4.3"
      resolved "https://registry.yarnpkg.com/@sigstore/protobuf-specs/-/protobuf-specs-0.4.3.tgz#5d974eb16c0a1d44a3f0af6e3e7219b35ac57953"
      integrity sha512-fk2zjD9117RL9BjqEwF7fwv7Q/P9yGsMV4MUJZ/DocaQJ6+3pKr+syBq1owU5Q5qGw5CUbXzm+4yJ2JVRDQeSA==
    
    "@sigstore/sign@^3.1.0":
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/@sigstore/sign/-/sign-3.1.0.tgz#5d098d4d2b59a279e9ac9b51c794104cda0c649e"
      integrity sha512-knzjmaOHOov1Ur7N/z4B1oPqZ0QX5geUfhrVaqVlu+hl0EAoL4o+l0MSULINcD5GCWe3Z0+YJO8ues6vFlW0Yw==
      dependencies:
        "@sigstore/bundle" "^3.1.0"
        "@sigstore/core" "^2.0.0"
        "@sigstore/protobuf-specs" "^0.4.0"
        make-fetch-happen "^14.0.2"
        proc-log "^5.0.0"
        promise-retry "^2.0.1"
    
    "@sigstore/tuf@^3.1.0":
      version "3.1.1"
      resolved "https://registry.yarnpkg.com/@sigstore/tuf/-/tuf-3.1.1.tgz#b01b261288f646e0da57737782893e7d2695c52e"
      integrity sha512-eFFvlcBIoGwVkkwmTi/vEQFSva3xs5Ot3WmBcjgjVdiaoelBLQaQ/ZBfhlG0MnG0cmTYScPpk7eDdGDWUcFUmg==
      dependencies:
        "@sigstore/protobuf-specs" "^0.4.1"
        tuf-js "^3.0.1"
    
    "@sigstore/verify@^2.1.0":
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/@sigstore/verify/-/verify-2.1.1.tgz#f67730012cd474f595044c3717f32ac2a1e9d2bc"
      integrity sha512-hVJD77oT67aowHxwT4+M6PGOp+E2LtLdTK3+FC0lBO9T7sYwItDMXZ7Z07IDCvR1M717a4axbIWckrW67KMP/w==
      dependencies:
        "@sigstore/bundle" "^3.1.0"
        "@sigstore/core" "^2.0.0"
        "@sigstore/protobuf-specs" "^0.4.1"
    
    "@sindresorhus/is@^4.0.0":
      version "4.6.0"
      resolved "https://registry.yarnpkg.com/@sindresorhus/is/-/is-4.6.0.tgz#3c7c9c46e678feefe7a2e5bb609d3dbd665ffb3f"
      integrity sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==
    
    "@socket.io/component-emitter@~3.1.0":
      version "3.1.2"
      resolved "https://registry.yarnpkg.com/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz#821f8442f4175d8f0467b9daf26e3a18e2d02af2"
      integrity sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==
    
    "@swimlane/ngx-datatable@^21.0.0":
      version "21.1.0"
      resolved "https://registry.yarnpkg.com/@swimlane/ngx-datatable/-/ngx-datatable-21.1.0.tgz#74bfa4a36c8842d68d2ad8d69aa39e373190918d"
      integrity sha512-JSlMJh9Kat7HnLTx9gFLVZnjn4nPKUCv+U0VzuvPY3lxL+EwsMf0ch3ugbmBROwTYZFIrClj72fdKQ8VaK3jZw==
      dependencies:
        tslib "^2.0.0"
    
    "@szmarczak/http-timer@^4.0.5":
      version "4.0.6"
      resolved "https://registry.yarnpkg.com/@szmarczak/http-timer/-/http-timer-4.0.6.tgz#b4a914bb62e7c272d4e5989fe4440f812ab1d807"
      integrity sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==
      dependencies:
        defer-to-connect "^2.0.0"
    
    "@transloadit/prettier-bytes@^0.3.4":
      version "0.3.5"
      resolved "https://registry.yarnpkg.com/@transloadit/prettier-bytes/-/prettier-bytes-0.3.5.tgz#0cca83975293e3f4990229914942c69714122ede"
      integrity sha512-xF4A3d/ZyX2LJWeQZREZQw+qFX4TGQ8bGVP97OLRt6sPO6T0TNHBFTuRHOJh7RNmYOBmQ9MHxpolD9bXihpuVA==
    
    "@tufjs/canonical-json@2.0.0":
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/@tufjs/canonical-json/-/canonical-json-2.0.0.tgz#a52f61a3d7374833fca945b2549bc30a2dd40d0a"
      integrity sha512-yVtV8zsdo8qFHe+/3kw81dSLyF7D576A5cCFCi4X7B39tWT7SekaEFUnvnWJHz+9qO7qJTah1JbrDjWKqFtdWA==
    
    "@tufjs/models@3.0.1":
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/@tufjs/models/-/models-3.0.1.tgz#5aebb782ebb9e06f071ae7831c1f35b462b0319c"
      integrity sha512-UUYHISyhCU3ZgN8yaear3cGATHb3SMuKHsQ/nVbHXcmnBf+LzQ/cQfhNG+rfaSHgqGKNEm2cOCLVLELStUQ1JA==
      dependencies:
        "@tufjs/canonical-json" "2.0.0"
        minimatch "^9.0.5"
    
    "@types/babel__core@7.20.5":
      version "7.20.5"
      resolved "https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.20.5.tgz#3df15f27ba85319caa07ba08d0721889bb39c017"
      integrity sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==
      dependencies:
        "@babel/parser" "^7.20.7"
        "@babel/types" "^7.20.7"
        "@types/babel__generator" "*"
        "@types/babel__template" "*"
        "@types/babel__traverse" "*"
    
    "@types/babel__generator@*":
      version "7.27.0"
      resolved "https://registry.yarnpkg.com/@types/babel__generator/-/babel__generator-7.27.0.tgz#b5819294c51179957afaec341442f9341e4108a9"
      integrity sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==
      dependencies:
        "@babel/types" "^7.0.0"
    
    "@types/babel__template@*":
      version "7.4.4"
      resolved "https://registry.yarnpkg.com/@types/babel__template/-/babel__template-7.4.4.tgz#5672513701c1b2199bc6dad636a9d7491586766f"
      integrity sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==
      dependencies:
        "@babel/parser" "^7.1.0"
        "@babel/types" "^7.0.0"
    
    "@types/babel__traverse@*":
      version "7.28.0"
      resolved "https://registry.yarnpkg.com/@types/babel__traverse/-/babel__traverse-7.28.0.tgz#07d713d6cce0d265c9849db0cbe62d3f61f36f74"
      integrity sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==
      dependencies:
        "@babel/types" "^7.28.2"
    
    "@types/body-parser@*":
      version "1.19.6"
      resolved "https://registry.yarnpkg.com/@types/body-parser/-/body-parser-1.19.6.tgz#1859bebb8fd7dac9918a45d54c1971ab8b5af474"
      integrity sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==
      dependencies:
        "@types/connect" "*"
        "@types/node" "*"
    
    "@types/bonjour@^3.5.13":
      version "3.5.13"
      resolved "https://registry.yarnpkg.com/@types/bonjour/-/bonjour-3.5.13.tgz#adf90ce1a105e81dd1f9c61fdc5afda1bfb92956"
      integrity sha512-z9fJ5Im06zvUL548KvYNecEVlA7cVDkGUi6kZusb04mpyEFKCIZJvloCcmpmLaIahDpOQGHaHmG6imtPMmPXGQ==
      dependencies:
        "@types/node" "*"
    
    "@types/cacheable-request@^6.0.1":
      version "6.0.3"
      resolved "https://registry.yarnpkg.com/@types/cacheable-request/-/cacheable-request-6.0.3.tgz#a430b3260466ca7b5ca5bfd735693b36e7a9d183"
      integrity sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==
      dependencies:
        "@types/http-cache-semantics" "*"
        "@types/keyv" "^3.1.4"
        "@types/node" "*"
        "@types/responselike" "^1.0.0"
    
    "@types/connect-history-api-fallback@^1.5.4":
      version "1.5.4"
      resolved "https://registry.yarnpkg.com/@types/connect-history-api-fallback/-/connect-history-api-fallback-1.5.4.tgz#7de71645a103056b48ac3ce07b3520b819c1d5b3"
      integrity sha512-n6Cr2xS1h4uAulPRdlw6Jl6s1oG8KrVilPN2yUITEs+K48EzMJJ3W1xy8K5eWuFvjp3R74AOIGSmp2UfBJ8HFw==
      dependencies:
        "@types/express-serve-static-core" "*"
        "@types/node" "*"
    
    "@types/connect@*":
      version "3.4.38"
      resolved "https://registry.yarnpkg.com/@types/connect/-/connect-3.4.38.tgz#5ba7f3bc4fbbdeaff8dded952e5ff2cc53f8d858"
      integrity sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==
      dependencies:
        "@types/node" "*"
    
    "@types/cors@^2.8.12":
      version "2.8.19"
      resolved "https://registry.yarnpkg.com/@types/cors/-/cors-2.8.19.tgz#d93ea2673fd8c9f697367f5eeefc2bbfa94f0342"
      integrity sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==
      dependencies:
        "@types/node" "*"
    
    "@types/eslint-scope@^3.7.7":
      version "3.7.7"
      resolved "https://registry.yarnpkg.com/@types/eslint-scope/-/eslint-scope-3.7.7.tgz#3108bd5f18b0cdb277c867b3dd449c9ed7079ac5"
      integrity sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==
      dependencies:
        "@types/eslint" "*"
        "@types/estree" "*"
    
    "@types/eslint@*":
      version "9.6.1"
      resolved "https://registry.yarnpkg.com/@types/eslint/-/eslint-9.6.1.tgz#d5795ad732ce81715f27f75da913004a56751584"
      integrity sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==
      dependencies:
        "@types/estree" "*"
        "@types/json-schema" "*"
    
    "@types/estree@*", "@types/estree@1.0.8", "@types/estree@^1.0.6":
      version "1.0.8"
      resolved "https://registry.yarnpkg.com/@types/estree/-/estree-1.0.8.tgz#958b91c991b1867ced318bedea0e215ee050726e"
      integrity sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==
    
    "@types/estree@1.0.7":
      version "1.0.7"
      resolved "https://registry.yarnpkg.com/@types/estree/-/estree-1.0.7.tgz#4158d3105276773d5b7695cd4834b1722e4f37a8"
      integrity sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==
    
    "@types/express-serve-static-core@*", "@types/express-serve-static-core@^5.0.0":
      version "5.0.7"
      resolved "https://registry.yarnpkg.com/@types/express-serve-static-core/-/express-serve-static-core-5.0.7.tgz#2fa94879c9d46b11a5df4c74ac75befd6b283de6"
      integrity sha512-R+33OsgWw7rOhD1emjU7dzCDHucJrgJXMA5PYCzJxVil0dsyx5iBEPHqpPfiKNJQb7lZ1vxwoLR4Z87bBUpeGQ==
      dependencies:
        "@types/node" "*"
        "@types/qs" "*"
        "@types/range-parser" "*"
        "@types/send" "*"
    
    "@types/express-serve-static-core@^4.17.21", "@types/express-serve-static-core@^4.17.33":
      version "4.19.6"
      resolved "https://registry.yarnpkg.com/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz#e01324c2a024ff367d92c66f48553ced0ab50267"
      integrity sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==
      dependencies:
        "@types/node" "*"
        "@types/qs" "*"
        "@types/range-parser" "*"
        "@types/send" "*"
    
    "@types/express@*":
      version "5.0.3"
      resolved "https://registry.yarnpkg.com/@types/express/-/express-5.0.3.tgz#6c4bc6acddc2e2a587142e1d8be0bce20757e956"
      integrity sha512-wGA0NX93b19/dZC1J18tKWVIYWyyF2ZjT9vin/NRu0qzzvfVzWjs04iq2rQ3H65vCTQYlRqs3YHfY7zjdV+9Kw==
      dependencies:
        "@types/body-parser" "*"
        "@types/express-serve-static-core" "^5.0.0"
        "@types/serve-static" "*"
    
    "@types/express@^4.17.21":
      version "4.17.23"
      resolved "https://registry.yarnpkg.com/@types/express/-/express-4.17.23.tgz#35af3193c640bfd4d7fe77191cd0ed411a433bef"
      integrity sha512-Crp6WY9aTYP3qPi2wGDo9iUe/rceX01UMhnF1jmwDcKCFM6cx7YhGP/Mpr3y9AASpfHixIG0E6azCcL5OcDHsQ==
      dependencies:
        "@types/body-parser" "*"
        "@types/express-serve-static-core" "^4.17.33"
        "@types/qs" "*"
        "@types/serve-static" "*"
    
    "@types/http-cache-semantics@*":
      version "4.0.4"
      resolved "https://registry.yarnpkg.com/@types/http-cache-semantics/-/http-cache-semantics-4.0.4.tgz#b979ebad3919799c979b17c72621c0bc0a31c6c4"
      integrity sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==
    
    "@types/http-errors@*":
      version "2.0.5"
      resolved "https://registry.yarnpkg.com/@types/http-errors/-/http-errors-2.0.5.tgz#5b749ab2b16ba113423feb1a64a95dcd30398472"
      integrity sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==
    
    "@types/http-proxy@^1.17.15", "@types/http-proxy@^1.17.8":
      version "1.17.16"
      resolved "https://registry.yarnpkg.com/@types/http-proxy/-/http-proxy-1.17.16.tgz#dee360707b35b3cc85afcde89ffeebff7d7f9240"
      integrity sha512-sdWoUajOB1cd0A8cRRQ1cfyWNbmFKLAqBB89Y8x5iYyG/mkJHc0YUH8pdWBy2omi9qtCpiIgGjuwO0dQST2l5w==
      dependencies:
        "@types/node" "*"
    
    "@types/jasmine@~3.6.0":
      version "3.6.11"
      resolved "https://registry.yarnpkg.com/@types/jasmine/-/jasmine-3.6.11.tgz#4b1d77aa9dfc757407cb9e277216d8e83553f09d"
      integrity sha512-S6pvzQDvMZHrkBz2Mcn/8Du7cpr76PlRJBAoHnSDNbulULsH5dp0Gns+WRyNX5LHejz/ljxK4/vIHK/caHt6SQ==
    
    "@types/json-schema@*", "@types/json-schema@^7.0.15", "@types/json-schema@^7.0.9":
      version "7.0.15"
      resolved "https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.15.tgz#596a1747233694d50f6ad8a7869fcb6f56cf5841"
      integrity sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==
    
    "@types/keyv@^3.1.4":
      version "3.1.4"
      resolved "https://registry.yarnpkg.com/@types/keyv/-/keyv-3.1.4.tgz#3ccdb1c6751b0c7e52300bcdacd5bcbf8faa75b6"
      integrity sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==
      dependencies:
        "@types/node" "*"
    
    "@types/mime@^1":
      version "1.3.5"
      resolved "https://registry.yarnpkg.com/@types/mime/-/mime-1.3.5.tgz#1ef302e01cf7d2b5a0fa526790c9123bf1d06690"
      integrity sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==
    
    "@types/node-forge@^1.3.0":
      version "1.3.14"
      resolved "https://registry.yarnpkg.com/@types/node-forge/-/node-forge-1.3.14.tgz#006c2616ccd65550560c2757d8472eb6d3ecea0b"
      integrity sha512-mhVF2BnD4BO+jtOp7z1CdzaK4mbuK0LLQYAvdOLqHTavxFNq4zA1EmYkpnFjP8HOUzedfQkRnp0E2ulSAYSzAw==
      dependencies:
        "@types/node" "*"
    
    "@types/node@*", "@types/node@>=10.0.0":
      version "24.3.0"
      resolved "https://registry.yarnpkg.com/@types/node/-/node-24.3.0.tgz#89b09f45cb9a8ee69466f18ee5864e4c3eb84dec"
      integrity sha512-aPTXCrfwnDLj4VvXrm+UUCQjNEvJgNA8s5F1cvwQU+3KNltTOkBm1j30uNLyqqPNe7gE3KFzImYoZEfLhp4Yow==
      dependencies:
        undici-types "~7.10.0"
    
    "@types/node@^20.0.0":
      version "20.19.11"
      resolved "https://registry.yarnpkg.com/@types/node/-/node-20.19.11.tgz#728cab53092bd5f143beed7fbba7ba99de3c16c4"
      integrity sha512-uug3FEEGv0r+jrecvUUpbY8lLisvIjg6AAic6a2bSP5OEOLeJsDSnvhCDov7ipFFMXS3orMpzlmi0ZcuGkBbow==
      dependencies:
        undici-types "~6.21.0"
    
    "@types/qs@*":
      version "6.14.0"
      resolved "https://registry.yarnpkg.com/@types/qs/-/qs-6.14.0.tgz#d8b60cecf62f2db0fb68e5e006077b9178b85de5"
      integrity sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==
    
    "@types/range-parser@*":
      version "1.2.7"
      resolved "https://registry.yarnpkg.com/@types/range-parser/-/range-parser-1.2.7.tgz#50ae4353eaaddc04044279812f52c8c65857dbcb"
      integrity sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==
    
    "@types/responselike@^1.0.0":
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/@types/responselike/-/responselike-1.0.3.tgz#cc29706f0a397cfe6df89debfe4bf5cea159db50"
      integrity sha512-H/+L+UkTV33uf49PH5pCAUBVPNj2nDBXTN+qS1dOwyyg24l3CcicicCA7ca+HMvJBZcFgl5r8e+RR6elsb4Lyw==
      dependencies:
        "@types/node" "*"
    
    "@types/retry@0.12.2":
      version "0.12.2"
      resolved "https://registry.yarnpkg.com/@types/retry/-/retry-0.12.2.tgz#ed279a64fa438bb69f2480eda44937912bb7480a"
      integrity sha512-XISRgDJ2Tc5q4TRqvgJtzsRkFYNJzZrhTdtMoGVBttwzzQJkPnS3WWTFc7kuDRoPtPakl+T+OfdEUjYJj7Jbow==
    
    "@types/send@*":
      version "0.17.5"
      resolved "https://registry.yarnpkg.com/@types/send/-/send-0.17.5.tgz#d991d4f2b16f2b1ef497131f00a9114290791e74"
      integrity sha512-z6F2D3cOStZvuk2SaP6YrwkNO65iTZcwA2ZkSABegdkAh/lf+Aa/YQndZVfmEXT5vgAp6zv06VQ3ejSVjAny4w==
      dependencies:
        "@types/mime" "^1"
        "@types/node" "*"
    
    "@types/serve-index@^1.9.4":
      version "1.9.4"
      resolved "https://registry.yarnpkg.com/@types/serve-index/-/serve-index-1.9.4.tgz#e6ae13d5053cb06ed36392110b4f9a49ac4ec898"
      integrity sha512-qLpGZ/c2fhSs5gnYsQxtDEq3Oy8SXPClIXkW5ghvAvsNuVSA8k+gCONcUCS/UjLEYvYps+e8uBtfgXgvhwfNug==
      dependencies:
        "@types/express" "*"
    
    "@types/serve-static@*", "@types/serve-static@^1.15.5":
      version "1.15.8"
      resolved "https://registry.yarnpkg.com/@types/serve-static/-/serve-static-1.15.8.tgz#8180c3fbe4a70e8f00b9f70b9ba7f08f35987877"
      integrity sha512-roei0UY3LhpOJvjbIP6ZZFngyLKl5dskOtDhxY5THRSpO+ZI+nzJ+m5yUMzGrp89YRa7lvknKkMYjqQFGwA7Sg==
      dependencies:
        "@types/http-errors" "*"
        "@types/node" "*"
        "@types/send" "*"
    
    "@types/sockjs@^0.3.36":
      version "0.3.36"
      resolved "https://registry.yarnpkg.com/@types/sockjs/-/sockjs-0.3.36.tgz#ce322cf07bcc119d4cbf7f88954f3a3bd0f67535"
      integrity sha512-MK9V6NzAS1+Ud7JV9lJLFqW85VbC9dq3LmwZCuBe4wBDgKC0Kj/jd8Xl+nSviU+Qc3+m7umHHyHg//2KSa0a0Q==
      dependencies:
        "@types/node" "*"
    
    "@types/ws@^8.5.10":
      version "8.18.1"
      resolved "https://registry.yarnpkg.com/@types/ws/-/ws-8.18.1.tgz#48464e4bf2ddfd17db13d845467f6070ffea4aa9"
      integrity sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==
      dependencies:
        "@types/node" "*"
    
    "@typescript-eslint/eslint-plugin@^7.0.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-7.18.0.tgz#b16d3cf3ee76bf572fdf511e79c248bdec619ea3"
      integrity sha512-94EQTWZ40mzBc42ATNIBimBEDltSJ9RQHCC8vc/PDbxi4k8dVwUAv4o98dk50M1zB+JGFxp43FP7f8+FP8R6Sw==
      dependencies:
        "@eslint-community/regexpp" "^4.10.0"
        "@typescript-eslint/scope-manager" "7.18.0"
        "@typescript-eslint/type-utils" "7.18.0"
        "@typescript-eslint/utils" "7.18.0"
        "@typescript-eslint/visitor-keys" "7.18.0"
        graphemer "^1.4.0"
        ignore "^5.3.1"
        natural-compare "^1.4.0"
        ts-api-utils "^1.3.0"
    
    "@typescript-eslint/parser@^7.0.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-7.18.0.tgz#83928d0f1b7f4afa974098c64b5ce6f9051f96a0"
      integrity sha512-4Z+L8I2OqhZV8qA132M4wNL30ypZGYOQVBfMgxDH/K5UX0PNqTu1c6za9ST5r9+tavvHiTWmBnKzpCJ/GlVFtg==
      dependencies:
        "@typescript-eslint/scope-manager" "7.18.0"
        "@typescript-eslint/types" "7.18.0"
        "@typescript-eslint/typescript-estree" "7.18.0"
        "@typescript-eslint/visitor-keys" "7.18.0"
        debug "^4.3.4"
    
    "@typescript-eslint/scope-manager@7.18.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/scope-manager/-/scope-manager-7.18.0.tgz#c928e7a9fc2c0b3ed92ab3112c614d6bd9951c83"
      integrity sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==
      dependencies:
        "@typescript-eslint/types" "7.18.0"
        "@typescript-eslint/visitor-keys" "7.18.0"
    
    "@typescript-eslint/type-utils@7.18.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/type-utils/-/type-utils-7.18.0.tgz#2165ffaee00b1fbbdd2d40aa85232dab6998f53b"
      integrity sha512-XL0FJXuCLaDuX2sYqZUUSOJ2sG5/i1AAze+axqmLnSkNEVMVYLF+cbwlB2w8D1tinFuSikHmFta+P+HOofrLeA==
      dependencies:
        "@typescript-eslint/typescript-estree" "7.18.0"
        "@typescript-eslint/utils" "7.18.0"
        debug "^4.3.4"
        ts-api-utils "^1.3.0"
    
    "@typescript-eslint/types@7.18.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/types/-/types-7.18.0.tgz#b90a57ccdea71797ffffa0321e744f379ec838c9"
      integrity sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==
    
    "@typescript-eslint/typescript-estree@7.18.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/typescript-estree/-/typescript-estree-7.18.0.tgz#b5868d486c51ce8f312309ba79bdb9f331b37931"
      integrity sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==
      dependencies:
        "@typescript-eslint/types" "7.18.0"
        "@typescript-eslint/visitor-keys" "7.18.0"
        debug "^4.3.4"
        globby "^11.1.0"
        is-glob "^4.0.3"
        minimatch "^9.0.4"
        semver "^7.6.0"
        ts-api-utils "^1.3.0"
    
    "@typescript-eslint/utils@7.18.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/utils/-/utils-7.18.0.tgz#bca01cde77f95fc6a8d5b0dbcbfb3d6ca4be451f"
      integrity sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==
      dependencies:
        "@eslint-community/eslint-utils" "^4.4.0"
        "@typescript-eslint/scope-manager" "7.18.0"
        "@typescript-eslint/types" "7.18.0"
        "@typescript-eslint/typescript-estree" "7.18.0"
    
    "@typescript-eslint/visitor-keys@7.18.0":
      version "7.18.0"
      resolved "https://registry.yarnpkg.com/@typescript-eslint/visitor-keys/-/visitor-keys-7.18.0.tgz#0564629b6124d67607378d0f0332a0495b25e7d7"
      integrity sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==
      dependencies:
        "@typescript-eslint/types" "7.18.0"
        eslint-visitor-keys "^3.4.3"
    
    "@ungap/structured-clone@^1.2.0":
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/@ungap/structured-clone/-/structured-clone-1.3.0.tgz#d06bbb384ebcf6c505fde1c3d0ed4ddffe0aaff8"
      integrity sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==
    
    "@uppy/companion-client@^3.8.1":
      version "3.8.2"
      resolved "https://registry.yarnpkg.com/@uppy/companion-client/-/companion-client-3.8.2.tgz#8dd531ea378826db699be835442c687405e55604"
      integrity sha512-WLjZ0Y6Fe7lzwU1YPvvQ/YqooejcgIZkT2TC39xr+QQ7Y1FwJECsyUdlKwgi1ee8TNpjoCrj3Q1Hjel/+p0VhA==
      dependencies:
        "@uppy/utils" "^5.9.0"
        namespace-emitter "^2.0.1"
        p-retry "^6.1.0"
    
    "@uppy/core@^3.0.0":
      version "3.13.1"
      resolved "https://registry.yarnpkg.com/@uppy/core/-/core-3.13.1.tgz#01b42684b5c08186033bb8c86bbfb5a1d8b5ae94"
      integrity sha512-iQGAUO4ziQRpfv7kix6tO6JOWqjI0K4vt8AynvHWzDPZxYSba3zd6RojGNPsYWSR7Xv+dRXYx+GU8oTiK1FRUA==
      dependencies:
        "@transloadit/prettier-bytes" "^0.3.4"
        "@uppy/store-default" "^3.2.2"
        "@uppy/utils" "^5.9.0"
        lodash "^4.17.21"
        mime-match "^1.0.2"
        namespace-emitter "^2.0.1"
        nanoid "^4.0.0"
        preact "^10.5.13"
    
    "@uppy/dashboard@^3.0.0":
      version "3.9.1"
      resolved "https://registry.yarnpkg.com/@uppy/dashboard/-/dashboard-3.9.1.tgz#257c8b920ccd7883129c22cc956c176f939a2a79"
      integrity sha512-zZp+5Dwqu1jUdAZEu0Os2kC/8bF3cdrkve8CYEwqP/12yjNe8PF+XUQKF1RCYITjDE4hPSXcTh0MWw6t2LONuw==
      dependencies:
        "@transloadit/prettier-bytes" "^0.3.4"
        "@uppy/informer" "^3.1.0"
        "@uppy/provider-views" "^3.13.0"
        "@uppy/status-bar" "^3.3.3"
        "@uppy/thumbnail-generator" "^3.1.0"
        "@uppy/utils" "^5.9.0"
        classnames "^2.2.6"
        is-shallow-equal "^1.0.1"
        lodash "^4.17.21"
        memoize-one "^6.0.0"
        nanoid "^4.0.0"
        preact "^10.5.13"
    
    "@uppy/informer@^3.1.0":
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/@uppy/informer/-/informer-3.1.0.tgz#40a8489f508911c778a7305fd5c551947fd4c96b"
      integrity sha512-vmpTLqzSLmZSuIVDZV0o19yXVqyTh5/uCbKUEiyfBhR726kQiuYQLP/ZHaKcvW3c1ESQGbNg53iNHbFBqF681w==
      dependencies:
        "@uppy/utils" "^5.7.4"
        preact "^10.5.13"
    
    "@uppy/provider-views@^3.13.0":
      version "3.13.0"
      resolved "https://registry.yarnpkg.com/@uppy/provider-views/-/provider-views-3.13.0.tgz#9fa98b35e0827ef24c264de1729241f85e29bfa2"
      integrity sha512-Z2oI88A+GC2zIPk8beoeFN/miHKkhtF58mYjvb5miGCMMZM7p7LRj98sgb5OOdKsGrfeiuTavtgL424BvcVd8w==
      dependencies:
        "@uppy/utils" "^5.9.0"
        classnames "^2.2.6"
        nanoid "^4.0.0"
        p-queue "^7.3.4"
        preact "^10.5.13"
    
    "@uppy/status-bar@^3.3.3":
      version "3.3.3"
      resolved "https://registry.yarnpkg.com/@uppy/status-bar/-/status-bar-3.3.3.tgz#3ad4bd5477904fd137ee46c69c3e5fd3b22e5d08"
      integrity sha512-TCcnBjTDbq/AmnGOcWbCpQNsv05Z6Y36zdmTCt/xNe2/gTVAYAzGRoGOrkeb6jf/E4AAi25VyOolSqL2ibB8Kw==
      dependencies:
        "@transloadit/prettier-bytes" "^0.3.4"
        "@uppy/utils" "^5.9.0"
        classnames "^2.2.6"
        preact "^10.5.13"
    
    "@uppy/store-default@^3.2.2":
      version "3.2.2"
      resolved "https://registry.yarnpkg.com/@uppy/store-default/-/store-default-3.2.2.tgz#19ef59ea9a427372b21395fd4c842e193b9a9dde"
      integrity sha512-OiSgT++Jj4nLK0N9WTeod3UNjCH81OXE5BcMJCd9oWzl2d0xPNq2T/E9Y6O72XVd+6Y7+tf5vZlPElutfMB3KQ==
    
    "@uppy/thumbnail-generator@^3.1.0":
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/@uppy/thumbnail-generator/-/thumbnail-generator-3.1.0.tgz#8352542a12c0a4ed209c16c55850b3744af7d59c"
      integrity sha512-tDKK/cukC0CrM0F/OlHFmvpGGUq+Db4YfakhIGPKtT7ZO8aWOiIu5JIvaYUnKRxGq3RGsk4zhkxYXuoxVzzsGA==
      dependencies:
        "@uppy/utils" "^5.7.5"
        exifr "^7.0.0"
    
    "@uppy/utils@^5.7.4", "@uppy/utils@^5.7.5", "@uppy/utils@^5.9.0":
      version "5.9.0"
      resolved "https://registry.yarnpkg.com/@uppy/utils/-/utils-5.9.0.tgz#c88827f9678a53cd13c7cd2f51e7682efd060e7d"
      integrity sha512-9Ubddd3orCOLYjf0KobwgJ+aTrABSxk9t4X/QdM4qJHVZuMIftkaMplrViRUO+kvIBCXEZDIP2AmS060siDNGw==
      dependencies:
        lodash "^4.17.21"
        preact "^10.5.13"
    
    "@uppy/xhr-upload@^3.0.0":
      version "3.6.8"
      resolved "https://registry.yarnpkg.com/@uppy/xhr-upload/-/xhr-upload-3.6.8.tgz#8282dee5c71f337e92052f1c74b5da17dbd79493"
      integrity sha512-zr3OHrIdo08jmCqTYKS0C7o3E0XQpjtZI40wmB6VvXYzu4x/aZankG9QqKxLiY0n8KbZ9aCIvO8loxBGoL7Kaw==
      dependencies:
        "@uppy/companion-client" "^3.8.1"
        "@uppy/utils" "^5.9.0"
    
    "@vitejs/plugin-basic-ssl@2.0.0":
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/@vitejs/plugin-basic-ssl/-/plugin-basic-ssl-2.0.0.tgz#9169bfe748743b8806553e0d1aa78e8227c27b2d"
      integrity sha512-gc9Tjg8bUxBVSTzeWT3Njc0Cl3PakHFKdNfABnZWiUgbxqmHDEn7uECv3fHVylxoYgNzAcmU7ZrILz+BwSo3sA==
    
    "@volo/abp.commercial.ng.ui@^9.3.1", "@volo/abp.commercial.ng.ui@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.commercial.ng.ui/-/abp.commercial.ng.ui-9.3.1.tgz#89ee2cdb6d66153f1bdb3cad8621512904749bed"
      integrity sha512-IkAc/9d75u8FZ0xFLHfaFmJP8SICEute3eorWaZFnHD/ZcfhcDHliJgDk74dOrWDlYpxxnUGpfn55fTLq5otXw==
      dependencies:
        "@abp/ng.theme.shared" "~9.3.1"
        tslib "^2.0.0"
    
    "@volo/abp.ng.account.core@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.account.core/-/abp.ng.account.core-9.3.1.tgz#010ce83770825680880291167441bdeb87b6f6f8"
      integrity sha512-idoGG1jqFMq8kIIjiVg/U4EBA1igbX+kdyHcLCXIm4tn14SerVHtn9xNj34DY6g+sLCVK7tjINRDKZPHiE3+4w==
      dependencies:
        tslib "^2.0.0"
    
    "@volo/abp.ng.account@^9.3.1", "@volo/abp.ng.account@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.account/-/abp.ng.account-9.3.1.tgz#e80d19e41570a62ca4a963a2db0afe44cb70a3bf"
      integrity sha512-+L7ezDSTjnxWGoqV8RnvWI+awBmiBUwF4G1i9oMWFzwX6I/wo9DAczClbiaLh5r7woH26vSuCLRWtost+8rSyA==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.setting-management" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        angularx-qrcode "^20.0.0"
        cropperjs "^1.5.12"
        tslib "^2.0.0"
    
    "@volo/abp.ng.audit-logging@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.audit-logging/-/abp.ng.audit-logging-9.3.1.tgz#27ec07629ce748e046ea4684ac50a7610a315a44"
      integrity sha512-cBCwE/1y/Kubp0VwKqpnDRlTLPlfhtdY45itHA7Jvsjx42e4dz0j+lkHvDTcu+ztMzFrkaCYwqADKpEbE3iJ4g==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        tslib "^2.0.0"
    
    "@volo/abp.ng.chat@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.chat/-/abp.ng.chat-9.3.1.tgz#c920fa0e65d306c756bba105efa12a336c22d968"
      integrity sha512-O3fs5M3MEC7FhPZHcMf3WCqSyGjFmhkN6VdLv1q63XphBI6WryiJUsEXXqlHjAq5C2RNMsAsdLiylzenVIRg0Q==
      dependencies:
        "@microsoft/signalr" "^7.0.0"
        tslib "^2.3.0"
    
    "@volo/abp.ng.file-management@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.file-management/-/abp.ng.file-management-9.3.1.tgz#b6079948265ef23415192f30053ac1517b6c1061"
      integrity sha512-JtWDAXBFjfViZQC3b9Kd79qWpBfJXffZldUd/EPYbAMrsQQt7bZWm58/zHpb2+kSeY7mJPLvFqnYOBTbvBgOIw==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@uppy/core" "^3.0.0"
        "@uppy/dashboard" "^3.0.0"
        "@uppy/xhr-upload" "^3.0.0"
        tslib "^2.0.0"
    
    "@volo/abp.ng.gdpr@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.gdpr/-/abp.ng.gdpr-9.3.1.tgz#7e25399d1e943ccf6b082f07747aeba68a255f20"
      integrity sha512-7hN8D4M06Hm/kMEGDFWW5MlP/kFWE3cA7iNoUDmVM1TGGXjS/ZTzLNclRO1Eklc1/e4bY22VjF/RivOJ/9mQYg==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        tslib "^2.3.0"
    
    "@volo/abp.ng.identity@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.identity/-/abp.ng.identity-9.3.1.tgz#eb3856fa06ebbb545d16bacb23ffe6755072215d"
      integrity sha512-q1uD7QCnMpBWtVz2VNRyQMhklp9/ltTZvxEA2eGjrmTL2AgIzNlTtPkhWDQiPdP46FU2FhvAjcPtSlTDNfRuVQ==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.permission-management" "~9.3.1"
        "@abp/ng.setting-management" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        "@volo/abp.ng.account" "^9.3.1"
        tslib "^2.0.0"
    
    "@volo/abp.ng.language-management@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.language-management/-/abp.ng.language-management-9.3.1.tgz#91197d931ecc1d9df200197b977e869028317a07"
      integrity sha512-28w21hwSf04cf1fNrVLn06S4zm+bIoP3trdXfFeAaBUIns+AeqbAAw7e2rlrXg1A3F3JD5SG7ZjLi28qp+o0uQ==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        tslib "^2.0.0"
    
    "@volo/abp.ng.lepton-x.core@~4.3.1":
      version "4.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.lepton-x.core/-/abp.ng.lepton-x.core-4.3.1.tgz#e924d5b968fdc8bdb0863e77a969630f9f0250cb"
      integrity sha512-xkMHdKuZA0/zu7IZZ6u9NFyuaPMNuts4TOgKQdT8TW5u2SycRMGwVKdE6hfPJ5chLW9IzYaIfy2rIhV76OtcvA==
      dependencies:
        "@volo/ngx-lepton-x.core" "4.3.1"
        tslib "^2.3.0"
    
    "@volo/abp.ng.openiddictpro@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.openiddictpro/-/abp.ng.openiddictpro-9.3.1.tgz#f8962707f0fece7d298f8330b2477cca8f4679b8"
      integrity sha512-X3HW/KBgdggM5w1KrUbA3YQGgoc7qA4yZGfrW+NJAI90IA0J1rf3lQ6oHN4IresI8absNPuRnu+3Y0RDS29kpA==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.permission-management" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        tslib "^2.0.0"
    
    "@volo/abp.ng.saas@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.saas/-/abp.ng.saas-9.3.1.tgz#5f0807a462bb1e1f525616c593ef0a0cd96aa765"
      integrity sha512-lxCvt4CbCT8SkXDnEvpu5BgGwAXkkDCASwpvzWt96kzYqqLFkx/zaP7N/ML4fPPBOv6mVWutqotbv9bhpko5ng==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.feature-management" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        tslib "^2.0.0"
    
    "@volo/abp.ng.text-template-management@~9.3.1":
      version "9.3.1"
      resolved "https://registry.yarnpkg.com/@volo/abp.ng.text-template-management/-/abp.ng.text-template-management-9.3.1.tgz#7ff902966672888b8286c91a1898e6bc12e0adb6"
      integrity sha512-R8YeCOBgQ1MYKx9+9LkoLn59LECmdsABykuok8MPmJ9G40DlWq1ZZdg/cLp3elAwv7XVWHgg+EzMlvGapsdqgw==
      dependencies:
        "@abp/ng.components" "~9.3.1"
        "@abp/ng.theme.shared" "~9.3.1"
        "@volo/abp.commercial.ng.ui" "^9.3.1"
        tslib "^2.0.0"
    
    "@volo/ngx-lepton-x.core@4.3.1":
      version "4.3.1"
      resolved "https://registry.yarnpkg.com/@volo/ngx-lepton-x.core/-/ngx-lepton-x.core-4.3.1.tgz#0a6cef31d0f202b8309ef6b587650bb61f55f46d"
      integrity sha512-Mdoib6cPc2qwR+HAOzygxC5Hp0SnwaAYbk5L9dA7CXe/o00HSSXn60gDx/jn2Cb7iJ5fzvWwqSw7406AOM6LYA==
      dependencies:
        ts-toolbelt "^9.0.0"
        tslib "^2.3.0"
    
    "@volosoft/abp.ng.theme.lepton-x@~4.3.1":
      version "4.3.1"
      resolved "https://registry.yarnpkg.com/@volosoft/abp.ng.theme.lepton-x/-/abp.ng.theme.lepton-x-4.3.1.tgz#b36b15c052aed55b1afd511947fc96807b412226"
      integrity sha512-AbzHp/2dRuuoeRVP2Dag0GIFgZ+OMYXeeQN1LeSYPQwfhUg25a24s5dekCO8MEvgrW2y3EAqA5WCCl1q0nronA==
      dependencies:
        "@abp/ng.theme.shared" "~9.3.1"
        "@ng-bootstrap/ng-bootstrap" "~19.0.0"
        "@volo/abp.commercial.ng.ui" "~9.3.1"
        "@volo/abp.ng.account.core" "~9.3.1"
        "@volo/abp.ng.lepton-x.core" "~4.3.1"
        "@volosoft/ngx-lepton-x" "~4.3.1"
        tslib "^2.3.0"
    
    "@volosoft/ngx-lepton-x@~4.3.1":
      version "4.3.1"
      resolved "https://registry.yarnpkg.com/@volosoft/ngx-lepton-x/-/ngx-lepton-x-4.3.1.tgz#684540dd000dd09dfe1434989bb56d11093d795f"
      integrity sha512-pfSt4gKXOA/2hnE2X3UpXsPkEsDd6J5JU7x78GkCLGjUccDGJcC+7ek1S7JpYvrdJmU4q/B5cVaf+ovspaLdJA==
      dependencies:
        "@floating-ui/dom" "~1.2.8"
        "@volo/ngx-lepton-x.core" "4.3.1"
        bootstrap-icons "~1.7.2"
        tslib "^2.3.0"
    
    "@webassemblyjs/ast@1.14.1", "@webassemblyjs/ast@^1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/ast/-/ast-1.14.1.tgz#a9f6a07f2b03c95c8d38c4536a1fdfb521ff55b6"
      integrity sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==
      dependencies:
        "@webassemblyjs/helper-numbers" "1.13.2"
        "@webassemblyjs/helper-wasm-bytecode" "1.13.2"
    
    "@webassemblyjs/floating-point-hex-parser@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz#fcca1eeddb1cc4e7b6eed4fc7956d6813b21b9fb"
      integrity sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==
    
    "@webassemblyjs/helper-api-error@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz#e0a16152248bc38daee76dd7e21f15c5ef3ab1e7"
      integrity sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==
    
    "@webassemblyjs/helper-buffer@1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz#822a9bc603166531f7d5df84e67b5bf99b72b96b"
      integrity sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==
    
    "@webassemblyjs/helper-numbers@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz#dbd932548e7119f4b8a7877fd5a8d20e63490b2d"
      integrity sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==
      dependencies:
        "@webassemblyjs/floating-point-hex-parser" "1.13.2"
        "@webassemblyjs/helper-api-error" "1.13.2"
        "@xtuc/long" "4.2.2"
    
    "@webassemblyjs/helper-wasm-bytecode@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz#e556108758f448aae84c850e593ce18a0eb31e0b"
      integrity sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==
    
    "@webassemblyjs/helper-wasm-section@1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz#9629dda9c4430eab54b591053d6dc6f3ba050348"
      integrity sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==
      dependencies:
        "@webassemblyjs/ast" "1.14.1"
        "@webassemblyjs/helper-buffer" "1.14.1"
        "@webassemblyjs/helper-wasm-bytecode" "1.13.2"
        "@webassemblyjs/wasm-gen" "1.14.1"
    
    "@webassemblyjs/ieee754@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz#1c5eaace1d606ada2c7fd7045ea9356c59ee0dba"
      integrity sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==
      dependencies:
        "@xtuc/ieee754" "^1.2.0"
    
    "@webassemblyjs/leb128@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/leb128/-/leb128-1.13.2.tgz#57c5c3deb0105d02ce25fa3fd74f4ebc9fd0bbb0"
      integrity sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==
      dependencies:
        "@xtuc/long" "4.2.2"
    
    "@webassemblyjs/utf8@1.13.2":
      version "1.13.2"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/utf8/-/utf8-1.13.2.tgz#917a20e93f71ad5602966c2d685ae0c6c21f60f1"
      integrity sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==
    
    "@webassemblyjs/wasm-edit@^1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz#ac6689f502219b59198ddec42dcd496b1004d597"
      integrity sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==
      dependencies:
        "@webassemblyjs/ast" "1.14.1"
        "@webassemblyjs/helper-buffer" "1.14.1"
        "@webassemblyjs/helper-wasm-bytecode" "1.13.2"
        "@webassemblyjs/helper-wasm-section" "1.14.1"
        "@webassemblyjs/wasm-gen" "1.14.1"
        "@webassemblyjs/wasm-opt" "1.14.1"
        "@webassemblyjs/wasm-parser" "1.14.1"
        "@webassemblyjs/wast-printer" "1.14.1"
    
    "@webassemblyjs/wasm-gen@1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz#991e7f0c090cb0bb62bbac882076e3d219da9570"
      integrity sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==
      dependencies:
        "@webassemblyjs/ast" "1.14.1"
        "@webassemblyjs/helper-wasm-bytecode" "1.13.2"
        "@webassemblyjs/ieee754" "1.13.2"
        "@webassemblyjs/leb128" "1.13.2"
        "@webassemblyjs/utf8" "1.13.2"
    
    "@webassemblyjs/wasm-opt@1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz#e6f71ed7ccae46781c206017d3c14c50efa8106b"
      integrity sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==
      dependencies:
        "@webassemblyjs/ast" "1.14.1"
        "@webassemblyjs/helper-buffer" "1.14.1"
        "@webassemblyjs/wasm-gen" "1.14.1"
        "@webassemblyjs/wasm-parser" "1.14.1"
    
    "@webassemblyjs/wasm-parser@1.14.1", "@webassemblyjs/wasm-parser@^1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz#b3e13f1893605ca78b52c68e54cf6a865f90b9fb"
      integrity sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==
      dependencies:
        "@webassemblyjs/ast" "1.14.1"
        "@webassemblyjs/helper-api-error" "1.13.2"
        "@webassemblyjs/helper-wasm-bytecode" "1.13.2"
        "@webassemblyjs/ieee754" "1.13.2"
        "@webassemblyjs/leb128" "1.13.2"
        "@webassemblyjs/utf8" "1.13.2"
    
    "@webassemblyjs/wast-printer@1.14.1":
      version "1.14.1"
      resolved "https://registry.yarnpkg.com/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz#3bb3e9638a8ae5fdaf9610e7a06b4d9f9aa6fe07"
      integrity sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==
      dependencies:
        "@webassemblyjs/ast" "1.14.1"
        "@xtuc/long" "4.2.2"
    
    "@xtuc/ieee754@^1.2.0":
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/@xtuc/ieee754/-/ieee754-1.2.0.tgz#eef014a3145ae477a1cbc00cd1e552336dceb790"
      integrity sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==
    
    "@xtuc/long@4.2.2":
      version "4.2.2"
      resolved "https://registry.yarnpkg.com/@xtuc/long/-/long-4.2.2.tgz#d291c6a4e97989b5c61d9acf396ae4fe133a718d"
      integrity sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==
    
    "@yarnpkg/lockfile@1.1.0":
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/@yarnpkg/lockfile/-/lockfile-1.1.0.tgz#e77a97fbd345b76d83245edcd17d393b1b41fb31"
      integrity sha512-GpSwvyXOcOOlV70vbnzjj4fW5xW/FdUF6nQEt1ENy7m4ZCczi1+/buVUPAqmGfqznsORNFzUMjctTIp8a9tuCQ==
    
    abbrev@^3.0.0:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/abbrev/-/abbrev-3.0.1.tgz#8ac8b3b5024d31464fe2a5feeea9f4536bf44025"
      integrity sha512-AO2ac6pjRB3SJmGJo+v5/aK6Omggp6fsLrs6wN9bd35ulu4cCwaAU9+7ZhXjeqHVkaHThLuzH0nZr0YpCDhygg==
    
    abort-controller@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/abort-controller/-/abort-controller-3.0.0.tgz#eaf54d53b62bae4138e809ca225c8439a6efb392"
      integrity sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==
      dependencies:
        event-target-shim "^5.0.0"
    
    accepts@~1.3.4, accepts@~1.3.8:
      version "1.3.8"
      resolved "https://registry.yarnpkg.com/accepts/-/accepts-1.3.8.tgz#0bf0be125b67014adcb0b0921e62db7bffe16b2e"
      integrity sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==
      dependencies:
        mime-types "~2.1.34"
        negotiator "0.6.3"
    
    acorn-jsx@^5.3.2:
      version "5.3.2"
      resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.2.tgz#7ed5bb55908b3b2f1bc55c6af1653bada7f07937"
      integrity sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==
    
    acorn@^8.14.0, acorn@^8.8.2, acorn@^8.9.0:
      version "8.15.0"
      resolved "https://registry.yarnpkg.com/acorn/-/acorn-8.15.0.tgz#a360898bc415edaac46c8241f6383975b930b816"
      integrity sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==
    
    adjust-sourcemap-loader@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz#fc4a0fd080f7d10471f30a7320f25560ade28c99"
      integrity sha512-OXwN5b9pCUXNQHJpwwD2qP40byEmSgzj8B4ydSN0uMNYWiFmJ6x6KwUllMmfk8Rwu/HJDFR7U8ubsWBoN0Xp0A==
      dependencies:
        loader-utils "^2.0.0"
        regex-parser "^2.2.11"
    
    agent-base@^7.1.0, agent-base@^7.1.2:
      version "7.1.4"
      resolved "https://registry.yarnpkg.com/agent-base/-/agent-base-7.1.4.tgz#e3cd76d4c548ee895d3c3fd8dc1f6c5b9032e7a8"
      integrity sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==
    
    ajv-formats@3.0.1:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/ajv-formats/-/ajv-formats-3.0.1.tgz#3d5dc762bca17679c3c2ea7e90ad6b7532309578"
      integrity sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==
      dependencies:
        ajv "^8.0.0"
    
    ajv-formats@^2.1.1:
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/ajv-formats/-/ajv-formats-2.1.1.tgz#6e669400659eb74973bbf2e33327180a0996b520"
      integrity sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==
      dependencies:
        ajv "^8.0.0"
    
    ajv-keywords@^5.1.0:
      version "5.1.0"
      resolved "https://registry.yarnpkg.com/ajv-keywords/-/ajv-keywords-5.1.0.tgz#69d4d385a4733cdbeab44964a1170a88f87f0e16"
      integrity sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==
      dependencies:
        fast-deep-equal "^3.1.3"
    
    ajv@8.17.1, ajv@^8.0.0, ajv@^8.9.0:
      version "8.17.1"
      resolved "https://registry.yarnpkg.com/ajv/-/ajv-8.17.1.tgz#37d9a5c776af6bc92d7f4f9510eba4c0a60d11a6"
      integrity sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==
      dependencies:
        fast-deep-equal "^3.1.3"
        fast-uri "^3.0.1"
        json-schema-traverse "^1.0.0"
        require-from-string "^2.0.2"
    
    ajv@^6.12.4:
      version "6.12.6"
      resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
      integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
      dependencies:
        fast-deep-equal "^3.1.1"
        fast-json-stable-stringify "^2.0.0"
        json-schema-traverse "^0.4.1"
        uri-js "^4.2.2"
    
    angular-oauth2-oidc@^20.0.0:
      version "20.0.2"
      resolved "https://registry.yarnpkg.com/angular-oauth2-oidc/-/angular-oauth2-oidc-20.0.2.tgz#fd107bda3a72496f8f333e4c750d7bb5f8cbaf52"
      integrity sha512-bMSXEQIuvgq8yqnsIatZggAvCJvY+pm7G8MK0tWCHR93UpFuNN+L5B6pY9CzRg8Ys+VVhkLIBx4zEHbJnv9icg==
      dependencies:
        tslib "^2.5.2"
    
    angularx-qrcode@^20.0.0:
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/angularx-qrcode/-/angularx-qrcode-20.0.0.tgz#7d16c833f941224b401f46896f6d5ffb586acaf3"
      integrity sha512-WZolRZztQsQxOXqodNSDicxPWNO79t/AT4wts+DxwYdtdXb1RELfZjtax9oGMQQ6mEZ6bwk5GqBGEDB3Y+cSqw==
      dependencies:
        qrcode "1.5.4"
        tslib "^2.3.0"
    
    ansi-colors@4.1.3:
      version "4.1.3"
      resolved "https://registry.yarnpkg.com/ansi-colors/-/ansi-colors-4.1.3.tgz#37611340eb2243e70cc604cad35d63270d48781b"
      integrity sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==
    
    ansi-escapes@^4.3.2:
      version "4.3.2"
      resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-4.3.2.tgz#6b2291d1db7d98b6521d5f1efa42d0f3a9feb65e"
      integrity sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==
      dependencies:
        type-fest "^0.21.3"
    
    ansi-escapes@^7.0.0:
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-7.0.0.tgz#00fc19f491bbb18e1d481b97868204f92109bfe7"
      integrity sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==
      dependencies:
        environment "^1.0.0"
    
    ansi-html-community@^0.0.8:
      version "0.0.8"
      resolved "https://registry.yarnpkg.com/ansi-html-community/-/ansi-html-community-0.0.8.tgz#69fbc4d6ccbe383f9736934ae34c3f8290f1bf41"
      integrity sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==
    
    ansi-regex@^5.0.1:
      version "5.0.1"
      resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304"
      integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==
    
    ansi-regex@^6.0.1:
      version "6.2.0"
      resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-6.2.0.tgz#2f302e7550431b1b7762705fffb52cf1ffa20447"
      integrity sha512-TKY5pyBkHyADOPYlRT9Lx6F544mPl0vS5Ew7BJ45hA08Q+t3GjbueLliBWN3sMICk6+y7HdyxSzC4bWS8baBdg==
    
    ansi-styles@^4.0.0, ansi-styles@^4.1.0:
      version "4.3.0"
      resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
      integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
      dependencies:
        color-convert "^2.0.1"
    
    ansi-styles@^6.0.0, ansi-styles@^6.1.0, ansi-styles@^6.2.1:
      version "6.2.1"
      resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-6.2.1.tgz#0e62320cf99c21afff3b3012192546aacbfb05c5"
      integrity sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==
    
    anymatch@~3.1.2:
      version "3.1.3"
      resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-3.1.3.tgz#790c58b19ba1720a84205b57c618d5ad8524973e"
      integrity sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==
      dependencies:
        normalize-path "^3.0.0"
        picomatch "^2.0.4"
    
    argparse@^2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38"
      integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==
    
    aria-query@5.3.2:
      version "5.3.2"
      resolved "https://registry.yarnpkg.com/aria-query/-/aria-query-5.3.2.tgz#93f81a43480e33a338f19163a3d10a50c01dcd59"
      integrity sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==
    
    array-flatten@1.1.1:
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/array-flatten/-/array-flatten-1.1.1.tgz#9a5f699051b1e7073328f2a008968b64ea2955d2"
      integrity sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==
    
    array-union@^2.1.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d"
      integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==
    
    autoprefixer@10.4.21:
      version "10.4.21"
      resolved "https://registry.yarnpkg.com/autoprefixer/-/autoprefixer-10.4.21.tgz#77189468e7a8ad1d9a37fbc08efc9f480cf0a95d"
      integrity sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==
      dependencies:
        browserslist "^4.24.4"
        caniuse-lite "^1.0.30001702"
        fraction.js "^4.3.7"
        normalize-range "^0.1.2"
        picocolors "^1.1.1"
        postcss-value-parser "^4.2.0"
    
    axobject-query@4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/axobject-query/-/axobject-query-4.1.0.tgz#28768c76d0e3cff21bc62a9e2d0b6ac30042a1ee"
      integrity sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==
    
    babel-loader@10.0.0:
      version "10.0.0"
      resolved "https://registry.yarnpkg.com/babel-loader/-/babel-loader-10.0.0.tgz#b9743714c0e1e084b3e4adef3cd5faee33089977"
      integrity sha512-z8jt+EdS61AMw22nSfoNJAZ0vrtmhPRVi6ghL3rCeRZI8cdNYFiV5xeV3HbE7rlZZNmGH8BVccwWt8/ED0QOHA==
      dependencies:
        find-up "^5.0.0"
    
    babel-plugin-polyfill-corejs2@^0.4.10:
      version "0.4.14"
      resolved "https://registry.yarnpkg.com/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.14.tgz#8101b82b769c568835611542488d463395c2ef8f"
      integrity sha512-Co2Y9wX854ts6U8gAAPXfn0GmAyctHuK8n0Yhfjd6t30g7yvKjspvvOo9yG+z52PZRgFErt7Ka2pYnXCjLKEpg==
      dependencies:
        "@babel/compat-data" "^7.27.7"
        "@babel/helper-define-polyfill-provider" "^0.6.5"
        semver "^6.3.1"
    
    babel-plugin-polyfill-corejs3@^0.11.0:
      version "0.11.1"
      resolved "https://registry.yarnpkg.com/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.11.1.tgz#4e4e182f1bb37c7ba62e2af81d8dd09df31344f6"
      integrity sha512-yGCqvBT4rwMczo28xkH/noxJ6MZ4nJfkVYdoDaC/utLtWrXxv27HVrzAeSbqR8SxDsp46n0YF47EbHoixy6rXQ==
      dependencies:
        "@babel/helper-define-polyfill-provider" "^0.6.3"
        core-js-compat "^3.40.0"
    
    babel-plugin-polyfill-regenerator@^0.6.1:
      version "0.6.5"
      resolved "https://registry.yarnpkg.com/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.5.tgz#32752e38ab6f6767b92650347bf26a31b16ae8c5"
      integrity sha512-ISqQ2frbiNU9vIJkzg7dlPpznPZ4jOiUQ1uSmB0fEHeowtN3COYRsXr/xexn64NpU13P06jc/L5TgiJXOgrbEg==
      dependencies:
        "@babel/helper-define-polyfill-provider" "^0.6.5"
    
    balanced-match@^1.0.0:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.2.tgz#e83e3a7e3f300b34cb9d87f615fa0cbf357690ee"
      integrity sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==
    
    base64id@2.0.0, base64id@~2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/base64id/-/base64id-2.0.0.tgz#2770ac6bc47d312af97a8bf9a634342e0cd25cb6"
      integrity sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==
    
    batch@0.6.1:
      version "0.6.1"
      resolved "https://registry.yarnpkg.com/batch/-/batch-0.6.1.tgz#dc34314f4e679318093fc760272525f94bf25c16"
      integrity sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw==
    
    beasties@0.3.4:
      version "0.3.4"
      resolved "https://registry.yarnpkg.com/beasties/-/beasties-0.3.4.tgz#a2268bd84ee9b51b0a89d208f768e93b7be5ee63"
      integrity sha512-NmzN1zN1cvGccXFyZ73335+ASXwBlVWcUPssiUDIlFdfyatHPRRufjCd5w8oPaQPvVnf9ELklaCGb1gi9FBwIw==
      dependencies:
        css-select "^5.1.0"
        css-what "^6.1.0"
        dom-serializer "^2.0.0"
        domhandler "^5.0.3"
        htmlparser2 "^10.0.0"
        picocolors "^1.1.1"
        postcss "^8.4.49"
        postcss-media-query-parser "^0.2.3"
    
    big.js@^5.2.2:
      version "5.2.2"
      resolved "https://registry.yarnpkg.com/big.js/-/big.js-5.2.2.tgz#65f0af382f578bcdc742bd9c281e9cb2d7768328"
      integrity sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==
    
    binary-extensions@^2.0.0:
      version "2.3.0"
      resolved "https://registry.yarnpkg.com/binary-extensions/-/binary-extensions-2.3.0.tgz#f6e14a97858d327252200242d4ccfe522c445522"
      integrity sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==
    
    body-parser@1.20.3, body-parser@^1.19.0:
      version "1.20.3"
      resolved "https://registry.yarnpkg.com/body-parser/-/body-parser-1.20.3.tgz#1953431221c6fb5cd63c4b36d53fab0928e548c6"
      integrity sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==
      dependencies:
        bytes "3.1.2"
        content-type "~1.0.5"
        debug "2.6.9"
        depd "2.0.0"
        destroy "1.2.0"
        http-errors "2.0.0"
        iconv-lite "0.4.24"
        on-finished "2.4.1"
        qs "6.13.0"
        raw-body "2.5.2"
        type-is "~1.6.18"
        unpipe "1.0.0"
    
    bonjour-service@^1.2.1:
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/bonjour-service/-/bonjour-service-1.3.0.tgz#80d867430b5a0da64e82a8047fc1e355bdb71722"
      integrity sha512-3YuAUiSkWykd+2Azjgyxei8OWf8thdn8AITIog2M4UICzoqfjlqr64WIjEXZllf/W6vK1goqleSR6brGomxQqA==
      dependencies:
        fast-deep-equal "^3.1.3"
        multicast-dns "^7.2.5"
    
    boolbase@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/boolbase/-/boolbase-1.0.0.tgz#68dff5fbe60c51eb37725ea9e3ed310dcc1e776e"
      integrity sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==
    
    bootstrap-icons@~1.7.2:
      version "1.7.2"
      resolved "https://registry.yarnpkg.com/bootstrap-icons/-/bootstrap-icons-1.7.2.tgz#4024e081e2c850602552e1fed6451e682d09322a"
      integrity sha512-NiR2PqC73AQOPdVSu6GJfnk+hN2z6powcistXk1JgPnKuoV2FSdSl26w931Oz9HYbKCcKUSB6ncZTYJAYJl3QQ==
    
    bootstrap@^5.0.0:
      version "5.3.7"
      resolved "https://registry.yarnpkg.com/bootstrap/-/bootstrap-5.3.7.tgz#8640065036124d961d885d80b5945745e1154d90"
      integrity sha512-7KgiD8UHjfcPBHEpDNg+zGz8L3LqR3GVwqZiBRFX04a1BCArZOz1r2kjly2HQ0WokqTO0v1nF+QAt8dsW4lKlw==
    
    brace-expansion@^1.1.7:
      version "1.1.12"
      resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.12.tgz#ab9b454466e5a8cc3a187beaad580412a9c5b843"
      integrity sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==
      dependencies:
        balanced-match "^1.0.0"
        concat-map "0.0.1"
    
    brace-expansion@^2.0.1:
      version "2.0.2"
      resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-2.0.2.tgz#54fc53237a613d854c7bd37463aad17df87214e7"
      integrity sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==
      dependencies:
        balanced-match "^1.0.0"
    
    braces@^3.0.2, braces@^3.0.3, braces@~3.0.2:
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/braces/-/braces-3.0.3.tgz#490332f40919452272d55a8480adc0c441358789"
      integrity sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==
      dependencies:
        fill-range "^7.1.1"
    
    browserslist@^4.21.5, browserslist@^4.23.0, browserslist@^4.24.0, browserslist@^4.24.4, browserslist@^4.25.3:
      version "4.25.3"
      resolved "https://registry.yarnpkg.com/browserslist/-/browserslist-4.25.3.tgz#9167c9cbb40473f15f75f85189290678b99b16c5"
      integrity sha512-cDGv1kkDI4/0e5yON9yM5G/0A5u8sf5TnmdX5C9qHzI9PPu++sQ9zjm1k9NiOrf3riY4OkK0zSGqfvJyJsgCBQ==
      dependencies:
        caniuse-lite "^1.0.30001735"
        electron-to-chromium "^1.5.204"
        node-releases "^2.0.19"
        update-browserslist-db "^1.1.3"
    
    buffer-from@^1.0.0:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/buffer-from/-/buffer-from-1.1.2.tgz#2b146a6fd72e80b4f55d255f35ed59a3a9a41bd5"
      integrity sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==
    
    bundle-name@^4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/bundle-name/-/bundle-name-4.1.0.tgz#f3b96b34160d6431a19d7688135af7cfb8797889"
      integrity sha512-tjwM5exMg6BGRI+kNmTntNsvdZS1X8BFYS6tnJ2hdH0kVxM6/eVZ2xy+FqStSWvYmtfFMDLIxurorHwDKfDz5Q==
      dependencies:
        run-applescript "^7.0.0"
    
    bytes@3.1.2:
      version "3.1.2"
      resolved "https://registry.yarnpkg.com/bytes/-/bytes-3.1.2.tgz#8b0beeb98605adf1b128fa4386403c009e0221a5"
      integrity sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==
    
    cacache@^19.0.0, cacache@^19.0.1:
      version "19.0.1"
      resolved "https://registry.yarnpkg.com/cacache/-/cacache-19.0.1.tgz#3370cc28a758434c85c2585008bd5bdcff17d6cd"
      integrity sha512-hdsUxulXCi5STId78vRVYEtDAjq99ICAUktLTeTYsLoTE6Z8dS0c8pWNCxwdrk9YfJeobDZc2Y186hD/5ZQgFQ==
      dependencies:
        "@npmcli/fs" "^4.0.0"
        fs-minipass "^3.0.0"
        glob "^10.2.2"
        lru-cache "^10.0.1"
        minipass "^7.0.3"
        minipass-collect "^2.0.1"
        minipass-flush "^1.0.5"
        minipass-pipeline "^1.2.4"
        p-map "^7.0.2"
        ssri "^12.0.0"
        tar "^7.4.3"
        unique-filename "^4.0.0"
    
    cacheable-lookup@^5.0.3:
      version "5.0.4"
      resolved "https://registry.yarnpkg.com/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz#5a6b865b2c44357be3d5ebc2a467b032719a7005"
      integrity sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==
    
    cacheable-request@^7.0.2:
      version "7.0.4"
      resolved "https://registry.yarnpkg.com/cacheable-request/-/cacheable-request-7.0.4.tgz#7a33ebf08613178b403635be7b899d3e69bbe817"
      integrity sha512-v+p6ongsrp0yTGbJXjgxPow2+DL93DASP4kXCDKb8/bwRtt9OEF3whggkkDkGNzgcWy2XaF4a8nZglC7uElscg==
      dependencies:
        clone-response "^1.0.2"
        get-stream "^5.1.0"
        http-cache-semantics "^4.0.0"
        keyv "^4.0.0"
        lowercase-keys "^2.0.0"
        normalize-url "^6.0.1"
        responselike "^2.0.0"
    
    call-bind-apply-helpers@^1.0.1, call-bind-apply-helpers@^1.0.2:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz#4b5428c222be985d79c3d82657479dbe0b59b2d6"
      integrity sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==
      dependencies:
        es-errors "^1.3.0"
        function-bind "^1.1.2"
    
    call-bound@^1.0.2, call-bound@^1.0.3:
      version "1.0.4"
      resolved "https://registry.yarnpkg.com/call-bound/-/call-bound-1.0.4.tgz#238de935d2a2a692928c538c7ccfa91067fd062a"
      integrity sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==
      dependencies:
        call-bind-apply-helpers "^1.0.2"
        get-intrinsic "^1.3.0"
    
    callsites@^3.0.0:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
      integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
    
    camelcase@^5.0.0:
      version "5.3.1"
      resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320"
      integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==
    
    caniuse-lite@^1.0.30001702, caniuse-lite@^1.0.30001735:
      version "1.0.30001737"
      resolved "https://registry.yarnpkg.com/caniuse-lite/-/caniuse-lite-1.0.30001737.tgz#8292bb7591932ff09e9a765f12fdf5629a241ccc"
      integrity sha512-BiloLiXtQNrY5UyF0+1nSJLXUENuhka2pzy2Fx5pGxqavdrxSCW4U6Pn/PoG3Efspi2frRbHpBV2XsrPE6EDlw==
    
    chalk@^4.0.0:
      version "4.1.2"
      resolved "https://registry.yarnpkg.com/chalk/-/chalk-4.1.2.tgz#aac4e2b7734a740867aeb16bf02aad556a1e7a01"
      integrity sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==
      dependencies:
        ansi-styles "^4.1.0"
        supports-color "^7.1.0"
    
    chalk@^5.3.0:
      version "5.6.0"
      resolved "https://registry.yarnpkg.com/chalk/-/chalk-5.6.0.tgz#a1a8d294ea3526dbb77660f12649a08490e33ab8"
      integrity sha512-46QrSQFyVSEyYAgQ22hQ+zDa60YHA4fBstHmtSApj1Y5vKtG27fWowW03jCk5KcbXEWPZUIR894aARCA/G1kfQ==
    
    chardet@^2.1.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/chardet/-/chardet-2.1.0.tgz#1007f441a1ae9f9199a4a67f6e978fb0aa9aa3fe"
      integrity sha512-bNFETTG/pM5ryzQ9Ad0lJOTa6HWD/YsScAR3EnCPZRPlQh77JocYktSHOUHelyhm8IARL+o4c4F1bP5KVOjiRA==
    
    chart.js@^3.5.1:
      version "3.9.1"
      resolved "https://registry.yarnpkg.com/chart.js/-/chart.js-3.9.1.tgz#3abf2c775169c4c71217a107163ac708515924b8"
      integrity sha512-Ro2JbLmvg83gXF5F4sniaQ+lTbSv18E+TIf2cOeiH1Iqd2PGFOtem+DUufMZsCJwFE7ywPOpfXFBwRTGq7dh6w==
    
    chokidar@^3.5.1, chokidar@^3.6.0:
      version "3.6.0"
      resolved "https://registry.yarnpkg.com/chokidar/-/chokidar-3.6.0.tgz#197c6cc669ef2a8dc5e7b4d97ee4e092c3eb0d5b"
      integrity sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==
      dependencies:
        anymatch "~3.1.2"
        braces "~3.0.2"
        glob-parent "~5.1.2"
        is-binary-path "~2.1.0"
        is-glob "~4.0.1"
        normalize-path "~3.0.0"
        readdirp "~3.6.0"
      optionalDependencies:
        fsevents "~2.3.2"
    
    chokidar@^4.0.0:
      version "4.0.3"
      resolved "https://registry.yarnpkg.com/chokidar/-/chokidar-4.0.3.tgz#7be37a4c03c9aee1ecfe862a4a23b2c70c205d30"
      integrity sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==
      dependencies:
        readdirp "^4.0.1"
    
    chownr@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/chownr/-/chownr-2.0.0.tgz#15bfbe53d2eab4cf70f18a8cd68ebe5b3cb1dece"
      integrity sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==
    
    chownr@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/chownr/-/chownr-3.0.0.tgz#9855e64ecd240a9cc4267ce8a4aa5d24a1da15e4"
      integrity sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==
    
    chrome-trace-event@^1.0.2:
      version "1.0.4"
      resolved "https://registry.yarnpkg.com/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz#05bffd7ff928465093314708c93bdfa9bd1f0f5b"
      integrity sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==
    
    classnames@^2.2.6:
      version "2.5.1"
      resolved "https://registry.yarnpkg.com/classnames/-/classnames-2.5.1.tgz#ba774c614be0f016da105c858e7159eae8e7687b"
      integrity sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow==
    
    cli-cursor@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-5.0.0.tgz#24a4831ecf5a6b01ddeb32fb71a4b2088b0dce38"
      integrity sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==
      dependencies:
        restore-cursor "^5.0.0"
    
    cli-spinners@^2.9.2:
      version "2.9.2"
      resolved "https://registry.yarnpkg.com/cli-spinners/-/cli-spinners-2.9.2.tgz#1773a8f4b9c4d6ac31563df53b3fc1d79462fe41"
      integrity sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==
    
    cli-truncate@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/cli-truncate/-/cli-truncate-4.0.0.tgz#6cc28a2924fee9e25ce91e973db56c7066e6172a"
      integrity sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==
      dependencies:
        slice-ansi "^5.0.0"
        string-width "^7.0.0"
    
    cli-width@^4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/cli-width/-/cli-width-4.1.0.tgz#42daac41d3c254ef38ad8ac037672130173691c5"
      integrity sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==
    
    cliui@^6.0.0:
      version "6.0.0"
      resolved "https://registry.yarnpkg.com/cliui/-/cliui-6.0.0.tgz#511d702c0c4e41ca156d7d0e96021f23e13225b1"
      integrity sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==
      dependencies:
        string-width "^4.2.0"
        strip-ansi "^6.0.0"
        wrap-ansi "^6.2.0"
    
    cliui@^7.0.2:
      version "7.0.4"
      resolved "https://registry.yarnpkg.com/cliui/-/cliui-7.0.4.tgz#a0265ee655476fc807aea9df3df8df7783808b4f"
      integrity sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==
      dependencies:
        string-width "^4.2.0"
        strip-ansi "^6.0.0"
        wrap-ansi "^7.0.0"
    
    cliui@^8.0.1:
      version "8.0.1"
      resolved "https://registry.yarnpkg.com/cliui/-/cliui-8.0.1.tgz#0c04b075db02cbfe60dc8e6cf2f5486b1a3608aa"
      integrity sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==
      dependencies:
        string-width "^4.2.0"
        strip-ansi "^6.0.1"
        wrap-ansi "^7.0.0"
    
    cliui@^9.0.1:
      version "9.0.1"
      resolved "https://registry.yarnpkg.com/cliui/-/cliui-9.0.1.tgz#6f7890f386f6f1f79953adc1f78dec46fcc2d291"
      integrity sha512-k7ndgKhwoQveBL+/1tqGJYNz097I7WOvwbmmU2AR5+magtbjPWQTS1C5vzGkBC8Ym8UWRzfKUzUUqFLypY4Q+w==
      dependencies:
        string-width "^7.2.0"
        strip-ansi "^7.1.0"
        wrap-ansi "^9.0.0"
    
    clone-deep@^4.0.1:
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/clone-deep/-/clone-deep-4.0.1.tgz#c19fd9bdbbf85942b4fd979c84dcf7d5f07c2387"
      integrity sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==
      dependencies:
        is-plain-object "^2.0.4"
        kind-of "^6.0.2"
        shallow-clone "^3.0.0"
    
    clone-response@^1.0.2:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/clone-response/-/clone-response-1.0.3.tgz#af2032aa47816399cf5f0a1d0db902f517abb8c3"
      integrity sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==
      dependencies:
        mimic-response "^1.0.0"
    
    color-convert@^2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
      integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
      dependencies:
        color-name "~1.1.4"
    
    color-name@~1.1.4:
      version "1.1.4"
      resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
      integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
    
    colorette@^2.0.10, colorette@^2.0.20:
      version "2.0.20"
      resolved "https://registry.yarnpkg.com/colorette/-/colorette-2.0.20.tgz#9eb793e6833067f7235902fcd3b09917a000a95a"
      integrity sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==
    
    commander@^2.20.0:
      version "2.20.3"
      resolved "https://registry.yarnpkg.com/commander/-/commander-2.20.3.tgz#fd485e84c03eb4881c20722ba48035e8531aeb33"
      integrity sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==
    
    compressible@~2.0.18:
      version "2.0.18"
      resolved "https://registry.yarnpkg.com/compressible/-/compressible-2.0.18.tgz#af53cca6b070d4c3c0750fbd77286a6d7cc46fba"
      integrity sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==
      dependencies:
        mime-db ">= 1.43.0 < 2"
    
    compression@^1.7.4:
      version "1.8.1"
      resolved "https://registry.yarnpkg.com/compression/-/compression-1.8.1.tgz#4a45d909ac16509195a9a28bd91094889c180d79"
      integrity sha512-9mAqGPHLakhCLeNyxPkK4xVo746zQ/czLH1Ky+vkitMnWfWZps8r0qXuwhwizagCRttsL4lfG4pIOvaWLpAP0w==
      dependencies:
        bytes "3.1.2"
        compressible "~2.0.18"
        debug "2.6.9"
        negotiator "~0.6.4"
        on-headers "~1.1.0"
        safe-buffer "5.2.1"
        vary "~1.1.2"
    
    concat-map@0.0.1:
      version "0.0.1"
      resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
      integrity sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==
    
    connect-history-api-fallback@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/connect-history-api-fallback/-/connect-history-api-fallback-2.0.0.tgz#647264845251a0daf25b97ce87834cace0f5f1c8"
      integrity sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==
    
    connect@^3.7.0:
      version "3.7.0"
      resolved "https://registry.yarnpkg.com/connect/-/connect-3.7.0.tgz#5d49348910caa5e07a01800b030d0c35f20484f8"
      integrity sha512-ZqRXc+tZukToSNmh5C2iWMSoV3X1YUcPbqEM4DkEG5tNQXrQUZCNVGGv3IuicnkMtPfGf3Xtp8WCXs295iQ1pQ==
      dependencies:
        debug "2.6.9"
        finalhandler "1.1.2"
        parseurl "~1.3.3"
        utils-merge "1.0.1"
    
    content-disposition@0.5.4:
      version "0.5.4"
      resolved "https://registry.yarnpkg.com/content-disposition/-/content-disposition-0.5.4.tgz#8b82b4efac82512a02bb0b1dcec9d2c5e8eb5bfe"
      integrity sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==
      dependencies:
        safe-buffer "5.2.1"
    
    content-type@~1.0.4, content-type@~1.0.5:
      version "1.0.5"
      resolved "https://registry.yarnpkg.com/content-type/-/content-type-1.0.5.tgz#8b773162656d1d1086784c8f23a54ce6d73d7918"
      integrity sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==
    
    convert-source-map@^1.5.1, convert-source-map@^1.7.0:
      version "1.9.0"
      resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.9.0.tgz#7faae62353fb4213366d0ca98358d22e8368b05f"
      integrity sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==
    
    convert-source-map@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-2.0.0.tgz#4b560f649fc4e918dd0ab75cf4961e8bc882d82a"
      integrity sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==
    
    cookie-signature@1.0.6:
      version "1.0.6"
      resolved "https://registry.yarnpkg.com/cookie-signature/-/cookie-signature-1.0.6.tgz#e303a882b342cc3ee8ca513a79999734dab3ae2c"
      integrity sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==
    
    cookie@0.7.1:
      version "0.7.1"
      resolved "https://registry.yarnpkg.com/cookie/-/cookie-0.7.1.tgz#2f73c42142d5d5cf71310a74fc4ae61670e5dbc9"
      integrity sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==
    
    cookie@~0.7.2:
      version "0.7.2"
      resolved "https://registry.yarnpkg.com/cookie/-/cookie-0.7.2.tgz#556369c472a2ba910f2979891b526b3436237ed7"
      integrity sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==
    
    copy-anything@^2.0.1:
      version "2.0.6"
      resolved "https://registry.yarnpkg.com/copy-anything/-/copy-anything-2.0.6.tgz#092454ea9584a7b7ad5573062b2a87f5900fc480"
      integrity sha512-1j20GZTsvKNkc4BY3NpMOM8tt///wY3FpIzozTOFO2ffuZcV61nojHXVKIy3WM+7ADCy5FVhdZYHYDdgTU0yJw==
      dependencies:
        is-what "^3.14.1"
    
    copy-webpack-plugin@13.0.0:
      version "13.0.0"
      resolved "https://registry.yarnpkg.com/copy-webpack-plugin/-/copy-webpack-plugin-13.0.0.tgz#793342576eed76fdbc7936b873eae17aa7a7d9a3"
      integrity sha512-FgR/h5a6hzJqATDGd9YG41SeDViH+0bkHn6WNXCi5zKAZkeESeSxLySSsFLHqLEVCh0E+rITmCf0dusXWYukeQ==
      dependencies:
        glob-parent "^6.0.1"
        normalize-path "^3.0.0"
        schema-utils "^4.2.0"
        serialize-javascript "^6.0.2"
        tinyglobby "^0.2.12"
    
    core-js-compat@^3.40.0:
      version "3.45.1"
      resolved "https://registry.yarnpkg.com/core-js-compat/-/core-js-compat-3.45.1.tgz#424f3f4af30bf676fd1b67a579465104f64e9c7a"
      integrity sha512-tqTt5T4PzsMIZ430XGviK4vzYSoeNJ6CXODi6c/voxOT6IZqBht5/EKaSNnYiEjjRYxjVz7DQIsOsY0XNi8PIA==
      dependencies:
        browserslist "^4.25.3"
    
    core-util-is@~1.0.0:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.3.tgz#a6042d3634c2b27e9328f837b965fac83808db85"
      integrity sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==
    
    cors@~2.8.5:
      version "2.8.5"
      resolved "https://registry.yarnpkg.com/cors/-/cors-2.8.5.tgz#eac11da51592dd86b9f06f6e7ac293b3df875d29"
      integrity sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==
      dependencies:
        object-assign "^4"
        vary "^1"
    
    cosmiconfig@^9.0.0:
      version "9.0.0"
      resolved "https://registry.yarnpkg.com/cosmiconfig/-/cosmiconfig-9.0.0.tgz#34c3fc58287b915f3ae905ab6dc3de258b55ad9d"
      integrity sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==
      dependencies:
        env-paths "^2.2.1"
        import-fresh "^3.3.0"
        js-yaml "^4.1.0"
        parse-json "^5.2.0"
    
    cropperjs@^1.5.12:
      version "1.6.2"
      resolved "https://registry.yarnpkg.com/cropperjs/-/cropperjs-1.6.2.tgz#d1a5d627d880581cca41b7901f06923500e4201b"
      integrity sha512-nhymn9GdnV3CqiEHJVai54TULFAE3VshJTXSqSJKa8yXAKyBKDWdhHarnlIPrshJ0WMFTGuFvG02YjLXfPiuOA==
    
    cross-spawn@^7.0.2, cross-spawn@^7.0.6:
      version "7.0.6"
      resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.6.tgz#8a58fe78f00dcd70c370451759dfbfaf03e8ee9f"
      integrity sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==
      dependencies:
        path-key "^3.1.0"
        shebang-command "^2.0.0"
        which "^2.0.1"
    
    css-loader@7.1.2:
      version "7.1.2"
      resolved "https://registry.yarnpkg.com/css-loader/-/css-loader-7.1.2.tgz#64671541c6efe06b0e22e750503106bdd86880f8"
      integrity sha512-6WvYYn7l/XEGN8Xu2vWFt9nVzrCn39vKyTEFf/ExEyoksJjjSZV/0/35XPlMbpnr6VGhZIUg5yJrL8tGfes/FA==
      dependencies:
        icss-utils "^5.1.0"
        postcss "^8.4.33"
        postcss-modules-extract-imports "^3.1.0"
        postcss-modules-local-by-default "^4.0.5"
        postcss-modules-scope "^3.2.0"
        postcss-modules-values "^4.0.0"
        postcss-value-parser "^4.2.0"
        semver "^7.5.4"
    
    css-select@^5.1.0:
      version "5.2.2"
      resolved "https://registry.yarnpkg.com/css-select/-/css-select-5.2.2.tgz#01b6e8d163637bb2dd6c982ca4ed65863682786e"
      integrity sha512-TizTzUddG/xYLA3NXodFM0fSbNizXjOKhqiQQwvhlspadZokn1KDy0NZFS0wuEubIYAV5/c1/lAr0TaaFXEXzw==
      dependencies:
        boolbase "^1.0.0"
        css-what "^6.1.0"
        domhandler "^5.0.2"
        domutils "^3.0.1"
        nth-check "^2.0.1"
    
    css-what@^6.1.0:
      version "6.2.2"
      resolved "https://registry.yarnpkg.com/css-what/-/css-what-6.2.2.tgz#cdcc8f9b6977719fdfbd1de7aec24abf756b9dea"
      integrity sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==
    
    cssesc@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/cssesc/-/cssesc-3.0.0.tgz#37741919903b868565e1c09ea747445cd18983ee"
      integrity sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==
    
    custom-event@~1.0.0:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/custom-event/-/custom-event-1.0.1.tgz#5d02a46850adf1b4a317946a3928fccb5bfd0425"
      integrity sha512-GAj5FOq0Hd+RsCGVJxZuKaIDXDf3h6GQoNEjFgbLLI/trgtavwUbSnZ5pVfg27DVCaWjIohryS0JFwIJyT2cMg==
    
    date-fns@^2.16.1:
      version "2.30.0"
      resolved "https://registry.yarnpkg.com/date-fns/-/date-fns-2.30.0.tgz#f367e644839ff57894ec6ac480de40cae4b0f4d0"
      integrity sha512-fnULvOpxnC5/Vg3NCiWelDsLiUc9bRwAPs/+LfTLNvetFCtCTN+yQz15C/fs4AwX1R9K5GLtLfn8QW+dWisaAw==
      dependencies:
        "@babel/runtime" "^7.21.0"
    
    date-format@^4.0.14:
      version "4.0.14"
      resolved "https://registry.yarnpkg.com/date-format/-/date-format-4.0.14.tgz#7a8e584434fb169a521c8b7aa481f355810d9400"
      integrity sha512-39BOQLs9ZjKh0/patS9nrT8wc3ioX3/eA/zgbKNopnF2wCqJEoxywwwElATYvRsXdnOxA/OQeQoFZ3rFjVajhg==
    
    debug@2.6.9:
      version "2.6.9"
      resolved "https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f"
      integrity sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==
      dependencies:
        ms "2.0.0"
    
    debug@4, debug@^4.1.0, debug@^4.1.1, debug@^4.3.1, debug@^4.3.2, debug@^4.3.4, debug@^4.3.6, debug@^4.4.1:
      version "4.4.1"
      resolved "https://registry.yarnpkg.com/debug/-/debug-4.4.1.tgz#e5a8bc6cbc4c6cd3e64308b0693a3d4fa550189b"
      integrity sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==
      dependencies:
        ms "^2.1.3"
    
    debug@~4.3.1, debug@~4.3.2, debug@~4.3.4:
      version "4.3.7"
      resolved "https://registry.yarnpkg.com/debug/-/debug-4.3.7.tgz#87945b4151a011d76d95a198d7111c865c360a52"
      integrity sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==
      dependencies:
        ms "^2.1.3"
    
    decamelize@^1.2.0:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290"
      integrity sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==
    
    decompress-response@^6.0.0:
      version "6.0.0"
      resolved "https://registry.yarnpkg.com/decompress-response/-/decompress-response-6.0.0.tgz#ca387612ddb7e104bd16d85aab00d5ecf09c66fc"
      integrity sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==
      dependencies:
        mimic-response "^3.1.0"
    
    deep-is@^0.1.3:
      version "0.1.4"
      resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.4.tgz#a6f2dce612fadd2ef1f519b73551f17e85199831"
      integrity sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==
    
    default-browser-id@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/default-browser-id/-/default-browser-id-5.0.0.tgz#a1d98bf960c15082d8a3fa69e83150ccccc3af26"
      integrity sha512-A6p/pu/6fyBcA1TRz/GqWYPViplrftcW2gZC9q79ngNCKAeR/X3gcEdXQHl4KNXV+3wgIJ1CPkJQ3IHM6lcsyA==
    
    default-browser@^5.2.1:
      version "5.2.1"
      resolved "https://registry.yarnpkg.com/default-browser/-/default-browser-5.2.1.tgz#7b7ba61204ff3e425b556869ae6d3e9d9f1712cf"
      integrity sha512-WY/3TUME0x3KPYdRRxEJJvXRHV4PyPoUsxtZa78lwItwRQRHhd2U9xOscaT/YTf8uCXIAjeJOFBVEh/7FtD8Xg==
      dependencies:
        bundle-name "^4.1.0"
        default-browser-id "^5.0.0"
    
    defer-to-connect@^2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/defer-to-connect/-/defer-to-connect-2.0.1.tgz#8016bdb4143e4632b77a3449c6236277de520587"
      integrity sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==
    
    define-lazy-prop@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/define-lazy-prop/-/define-lazy-prop-3.0.0.tgz#dbb19adfb746d7fc6d734a06b72f4a00d021255f"
      integrity sha512-N+MeXYoqr3pOgn8xfyRPREN7gHakLYjhsHhWGT3fWAiL4IkAt0iDw14QiiEm2bE30c5XX5q0FtAA3CK5f9/BUg==
    
    depd@2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/depd/-/depd-2.0.0.tgz#b696163cc757560d09cf22cc8fad1571b79e76df"
      integrity sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==
    
    depd@~1.1.2:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/depd/-/depd-1.1.2.tgz#9bcd52e14c097763e749b274c4346ed2e560b5a9"
      integrity sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==
    
    destroy@1.2.0:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/destroy/-/destroy-1.2.0.tgz#4803735509ad8be552934c67df614f94e66fa015"
      integrity sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==
    
    detect-libc@^1.0.3:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/detect-libc/-/detect-libc-1.0.3.tgz#fa137c4bd698edf55cd5cd02ac559f91a4c4ba9b"
      integrity sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==
    
    detect-libc@^2.0.1:
      version "2.0.4"
      resolved "https://registry.yarnpkg.com/detect-libc/-/detect-libc-2.0.4.tgz#f04715b8ba815e53b4d8109655b6508a6865a7e8"
      integrity sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==
    
    detect-node@^2.0.4:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/detect-node/-/detect-node-2.1.0.tgz#c9c70775a49c3d03bc2c06d9a73be550f978f8b1"
      integrity sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==
    
    di@^0.0.1:
      version "0.0.1"
      resolved "https://registry.yarnpkg.com/di/-/di-0.0.1.tgz#806649326ceaa7caa3306d75d985ea2748ba913c"
      integrity sha512-uJaamHkagcZtHPqCIHZxnFrXlunQXgBOsZSUOWwFw31QJCAbyTBoHMW75YOTur5ZNx8pIeAKgf6GWIgaqqiLhA==
    
    dijkstrajs@^1.0.1:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/dijkstrajs/-/dijkstrajs-1.0.3.tgz#4c8dbdea1f0f6478bff94d9c49c784d623e4fc23"
      integrity sha512-qiSlmBq9+BCdCA/L46dw8Uy93mloxsPSbwnm5yrKn2vMPiy8KyAskTF6zuV/j5BMsmOGZDPs7KjU+mjb670kfA==
    
    dir-glob@^3.0.1:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/dir-glob/-/dir-glob-3.0.1.tgz#56dbf73d992a4a93ba1584f4534063fd2e41717f"
      integrity sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==
      dependencies:
        path-type "^4.0.0"
    
    dns-packet@^5.2.2:
      version "5.6.1"
      resolved "https://registry.yarnpkg.com/dns-packet/-/dns-packet-5.6.1.tgz#ae888ad425a9d1478a0674256ab866de1012cf2f"
      integrity sha512-l4gcSouhcgIKRvyy99RNVOgxXiicE+2jZoNmaNmZ6JXiGajBOJAesk1OBlJuM5k2c+eudGdLxDqXuPCKIj6kpw==
      dependencies:
        "@leichtgewicht/ip-codec" "^2.0.1"
    
    doctrine@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-3.0.0.tgz#addebead72a6574db783639dc87a121773973961"
      integrity sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==
      dependencies:
        esutils "^2.0.2"
    
    dom-serialize@^2.2.1:
      version "2.2.1"
      resolved "https://registry.yarnpkg.com/dom-serialize/-/dom-serialize-2.2.1.tgz#562ae8999f44be5ea3076f5419dcd59eb43ac95b"
      integrity sha512-Yra4DbvoW7/Z6LBN560ZwXMjoNOSAN2wRsKFGc4iBeso+mpIA6qj1vfdf9HpMaKAqG6wXTy+1SYEzmNpKXOSsQ==
      dependencies:
        custom-event "~1.0.0"
        ent "~2.2.0"
        extend "^3.0.0"
        void-elements "^2.0.0"
    
    dom-serializer@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/dom-serializer/-/dom-serializer-2.0.0.tgz#e41b802e1eedf9f6cae183ce5e622d789d7d8e53"
      integrity sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==
      dependencies:
        domelementtype "^2.3.0"
        domhandler "^5.0.2"
        entities "^4.2.0"
    
    domelementtype@^2.3.0:
      version "2.3.0"
      resolved "https://registry.yarnpkg.com/domelementtype/-/domelementtype-2.3.0.tgz#5c45e8e869952626331d7aab326d01daf65d589d"
      integrity sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==
    
    domhandler@^5.0.2, domhandler@^5.0.3:
      version "5.0.3"
      resolved "https://registry.yarnpkg.com/domhandler/-/domhandler-5.0.3.tgz#cc385f7f751f1d1fc650c21374804254538c7d31"
      integrity sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==
      dependencies:
        domelementtype "^2.3.0"
    
    domutils@^3.0.1, domutils@^3.2.1:
      version "3.2.2"
      resolved "https://registry.yarnpkg.com/domutils/-/domutils-3.2.2.tgz#edbfe2b668b0c1d97c24baf0f1062b132221bc78"
      integrity sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==
      dependencies:
        dom-serializer "^2.0.0"
        domelementtype "^2.3.0"
        domhandler "^5.0.3"
    
    dunder-proto@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/dunder-proto/-/dunder-proto-1.0.1.tgz#d7ae667e1dc83482f8b70fd0f6eefc50da30f58a"
      integrity sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==
      dependencies:
        call-bind-apply-helpers "^1.0.1"
        es-errors "^1.3.0"
        gopd "^1.2.0"
    
    eastasianwidth@^0.2.0:
      version "0.2.0"
      resolved "https://registry.yarnpkg.com/eastasianwidth/-/eastasianwidth-0.2.0.tgz#696ce2ec0aa0e6ea93a397ffcf24aa7840c827cb"
      integrity sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==
    
    ee-first@1.1.1:
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/ee-first/-/ee-first-1.1.1.tgz#590c61156b0ae2f4f0255732a158b266bc56b21d"
      integrity sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==
    
    electron-to-chromium@^1.5.204:
      version "1.5.208"
      resolved "https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.5.208.tgz#609c29502fd7257b4d721e3446f3ae391a0ca1b3"
      integrity sha512-ozZyibehoe7tOhNaf16lKmljVf+3npZcJIEbJRVftVsmAg5TeA1mGS9dVCZzOwr2xT7xK15V0p7+GZqSPgkuPg==
    
    emoji-regex@^10.3.0:
      version "10.4.0"
      resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-10.4.0.tgz#03553afea80b3975749cfcb36f776ca268e413d4"
      integrity sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==
    
    emoji-regex@^8.0.0:
      version "8.0.0"
      resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
      integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
    
    emoji-regex@^9.2.2:
      version "9.2.2"
      resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-9.2.2.tgz#840c8803b0d8047f4ff0cf963176b32d4ef3ed72"
      integrity sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==
    
    emojis-list@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/emojis-list/-/emojis-list-3.0.0.tgz#5570662046ad29e2e916e71aae260abdff4f6a78"
      integrity sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==
    
    encodeurl@~1.0.2:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/encodeurl/-/encodeurl-1.0.2.tgz#ad3ff4c86ec2d029322f5a02c3a9a606c95b3f59"
      integrity sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==
    
    encodeurl@~2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/encodeurl/-/encodeurl-2.0.0.tgz#7b8ea898077d7e409d3ac45474ea38eaf0857a58"
      integrity sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==
    
    encoding@^0.1.13:
      version "0.1.13"
      resolved "https://registry.yarnpkg.com/encoding/-/encoding-0.1.13.tgz#56574afdd791f54a8e9b2785c0582a2d26210fa9"
      integrity sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==
      dependencies:
        iconv-lite "^0.6.2"
    
    end-of-stream@^1.1.0:
      version "1.4.5"
      resolved "https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.5.tgz#7344d711dea40e0b74abc2ed49778743ccedb08c"
      integrity sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==
      dependencies:
        once "^1.4.0"
    
    engine.io-parser@~5.2.1:
      version "5.2.3"
      resolved "https://registry.yarnpkg.com/engine.io-parser/-/engine.io-parser-5.2.3.tgz#00dc5b97b1f233a23c9398d0209504cf5f94d92f"
      integrity sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==
    
    engine.io@~6.6.0:
      version "6.6.4"
      resolved "https://registry.yarnpkg.com/engine.io/-/engine.io-6.6.4.tgz#0a89a3e6b6c1d4b0c2a2a637495e7c149ec8d8ee"
      integrity sha512-ZCkIjSYNDyGn0R6ewHDtXgns/Zre/NT6Agvq1/WobF7JXgFff4SeDroKiCO3fNJreU9YG429Sc81o4w5ok/W5g==
      dependencies:
        "@types/cors" "^2.8.12"
        "@types/node" ">=10.0.0"
        accepts "~1.3.4"
        base64id "2.0.0"
        cookie "~0.7.2"
        cors "~2.8.5"
        debug "~4.3.1"
        engine.io-parser "~5.2.1"
        ws "~8.17.1"
    
    enhanced-resolve@^5.17.1:
      version "5.18.3"
      resolved "https://registry.yarnpkg.com/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz#9b5f4c5c076b8787c78fe540392ce76a88855b44"
      integrity sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==
      dependencies:
        graceful-fs "^4.2.4"
        tapable "^2.2.0"
    
    ent@~2.2.0:
      version "2.2.2"
      resolved "https://registry.yarnpkg.com/ent/-/ent-2.2.2.tgz#22a5ed2fd7ce0cbcff1d1474cf4909a44bdb6e85"
      integrity sha512-kKvD1tO6BM+oK9HzCPpUdRb4vKFQY/FPTFmurMvh6LlN68VMrdj77w8yp51/kDbpkFOS9J8w5W6zIzgM2H8/hw==
      dependencies:
        call-bound "^1.0.3"
        es-errors "^1.3.0"
        punycode "^1.4.1"
        safe-regex-test "^1.1.0"
    
    entities@^4.2.0:
      version "4.5.0"
      resolved "https://registry.yarnpkg.com/entities/-/entities-4.5.0.tgz#5d268ea5e7113ec74c4d033b79ea5a35a488fb48"
      integrity sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==
    
    entities@^6.0.0:
      version "6.0.1"
      resolved "https://registry.yarnpkg.com/entities/-/entities-6.0.1.tgz#c28c34a43379ca7f61d074130b2f5f7020a30694"
      integrity sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==
    
    env-paths@^2.2.0, env-paths@^2.2.1:
      version "2.2.1"
      resolved "https://registry.yarnpkg.com/env-paths/-/env-paths-2.2.1.tgz#420399d416ce1fbe9bc0a07c62fa68d67fd0f8f2"
      integrity sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==
    
    environment@^1.0.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/environment/-/environment-1.1.0.tgz#8e86c66b180f363c7ab311787e0259665f45a9f1"
      integrity sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==
    
    err-code@^2.0.2:
      version "2.0.3"
      resolved "https://registry.yarnpkg.com/err-code/-/err-code-2.0.3.tgz#23c2f3b756ffdfc608d30e27c9a941024807e7f9"
      integrity sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==
    
    errno@^0.1.1:
      version "0.1.8"
      resolved "https://registry.yarnpkg.com/errno/-/errno-0.1.8.tgz#8bb3e9c7d463be4976ff888f76b4809ebc2e811f"
      integrity sha512-dJ6oBr5SQ1VSd9qkk7ByRgb/1SH4JZjCHSW/mr63/QcXO9zLVxvJ6Oy13nio03rxpSnVDDjFor75SjVeZWPW/A==
      dependencies:
        prr "~1.0.1"
    
    error-ex@^1.3.1:
      version "1.3.2"
      resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.2.tgz#b4ac40648107fdcdcfae242f428bea8a14d4f1bf"
      integrity sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==
      dependencies:
        is-arrayish "^0.2.1"
    
    es-define-property@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/es-define-property/-/es-define-property-1.0.1.tgz#983eb2f9a6724e9303f61addf011c72e09e0b0fa"
      integrity sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==
    
    es-errors@^1.3.0:
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/es-errors/-/es-errors-1.3.0.tgz#05f75a25dab98e4fb1dcd5e1472c0546d5057c8f"
      integrity sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==
    
    es-module-lexer@^1.2.1:
      version "1.7.0"
      resolved "https://registry.yarnpkg.com/es-module-lexer/-/es-module-lexer-1.7.0.tgz#9159601561880a85f2734560a9099b2c31e5372a"
      integrity sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==
    
    es-object-atoms@^1.0.0, es-object-atoms@^1.1.1:
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/es-object-atoms/-/es-object-atoms-1.1.1.tgz#1c4f2c4837327597ce69d2ca190a7fdd172338c1"
      integrity sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==
      dependencies:
        es-errors "^1.3.0"
    
    esbuild-wasm@0.25.5:
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/esbuild-wasm/-/esbuild-wasm-0.25.5.tgz#09b26f023b45d24edc9fdf2f1a74ef0238a049cb"
      integrity sha512-V/rbdOws2gDcnCAECfPrajhuafI0WY4WumUgc8ZHwOLnvmM0doLQ+dqvVFI2qkVxQsvo6880aC9IjpyDqcwwTw==
    
    esbuild@0.25.5:
      version "0.25.5"
      resolved "https://registry.yarnpkg.com/esbuild/-/esbuild-0.25.5.tgz#71075054993fdfae76c66586f9b9c1f8d7edd430"
      integrity sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==
      optionalDependencies:
        "@esbuild/aix-ppc64" "0.25.5"
        "@esbuild/android-arm" "0.25.5"
        "@esbuild/android-arm64" "0.25.5"
        "@esbuild/android-x64" "0.25.5"
        "@esbuild/darwin-arm64" "0.25.5"
        "@esbuild/darwin-x64" "0.25.5"
        "@esbuild/freebsd-arm64" "0.25.5"
        "@esbuild/freebsd-x64" "0.25.5"
        "@esbuild/linux-arm" "0.25.5"
        "@esbuild/linux-arm64" "0.25.5"
        "@esbuild/linux-ia32" "0.25.5"
        "@esbuild/linux-loong64" "0.25.5"
        "@esbuild/linux-mips64el" "0.25.5"
        "@esbuild/linux-ppc64" "0.25.5"
        "@esbuild/linux-riscv64" "0.25.5"
        "@esbuild/linux-s390x" "0.25.5"
        "@esbuild/linux-x64" "0.25.5"
        "@esbuild/netbsd-arm64" "0.25.5"
        "@esbuild/netbsd-x64" "0.25.5"
        "@esbuild/openbsd-arm64" "0.25.5"
        "@esbuild/openbsd-x64" "0.25.5"
        "@esbuild/sunos-x64" "0.25.5"
        "@esbuild/win32-arm64" "0.25.5"
        "@esbuild/win32-ia32" "0.25.5"
        "@esbuild/win32-x64" "0.25.5"
    
    esbuild@^0.25.0:
      version "0.25.9"
      resolved "https://registry.yarnpkg.com/esbuild/-/esbuild-0.25.9.tgz#15ab8e39ae6cdc64c24ff8a2c0aef5b3fd9fa976"
      integrity sha512-CRbODhYyQx3qp7ZEwzxOk4JBqmD/seJrzPa/cGjY1VtIn5E09Oi9/dB4JwctnfZ8Q8iT7rioVv5k/FNT/uf54g==
      optionalDependencies:
        "@esbuild/aix-ppc64" "0.25.9"
        "@esbuild/android-arm" "0.25.9"
        "@esbuild/android-arm64" "0.25.9"
        "@esbuild/android-x64" "0.25.9"
        "@esbuild/darwin-arm64" "0.25.9"
        "@esbuild/darwin-x64" "0.25.9"
        "@esbuild/freebsd-arm64" "0.25.9"
        "@esbuild/freebsd-x64" "0.25.9"
        "@esbuild/linux-arm" "0.25.9"
        "@esbuild/linux-arm64" "0.25.9"
        "@esbuild/linux-ia32" "0.25.9"
        "@esbuild/linux-loong64" "0.25.9"
        "@esbuild/linux-mips64el" "0.25.9"
        "@esbuild/linux-ppc64" "0.25.9"
        "@esbuild/linux-riscv64" "0.25.9"
        "@esbuild/linux-s390x" "0.25.9"
        "@esbuild/linux-x64" "0.25.9"
        "@esbuild/netbsd-arm64" "0.25.9"
        "@esbuild/netbsd-x64" "0.25.9"
        "@esbuild/openbsd-arm64" "0.25.9"
        "@esbuild/openbsd-x64" "0.25.9"
        "@esbuild/openharmony-arm64" "0.25.9"
        "@esbuild/sunos-x64" "0.25.9"
        "@esbuild/win32-arm64" "0.25.9"
        "@esbuild/win32-ia32" "0.25.9"
        "@esbuild/win32-x64" "0.25.9"
    
    escalade@^3.1.1, escalade@^3.2.0:
      version "3.2.0"
      resolved "https://registry.yarnpkg.com/escalade/-/escalade-3.2.0.tgz#011a3f69856ba189dffa7dc8fcce99d2a87903e5"
      integrity sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==
    
    escape-html@~1.0.3:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988"
      integrity sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==
    
    escape-string-regexp@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz#14ba83a5d373e3d311e5afca29cf5bfad965bf34"
      integrity sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==
    
    eslint-scope@5.1.1:
      version "5.1.1"
      resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-5.1.1.tgz#e786e59a66cb92b3f6c1fb0d508aab174848f48c"
      integrity sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==
      dependencies:
        esrecurse "^4.3.0"
        estraverse "^4.1.1"
    
    eslint-scope@^7.2.2:
      version "7.2.2"
      resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-7.2.2.tgz#deb4f92563390f32006894af62a22dba1c46423f"
      integrity sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==
      dependencies:
        esrecurse "^4.3.0"
        estraverse "^5.2.0"
    
    eslint-scope@^8.0.2:
      version "8.4.0"
      resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-8.4.0.tgz#88e646a207fad61436ffa39eb505147200655c82"
      integrity sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==
      dependencies:
        esrecurse "^4.3.0"
        estraverse "^5.2.0"
    
    eslint-visitor-keys@^3.4.1, eslint-visitor-keys@^3.4.3:
      version "3.4.3"
      resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz#0cd72fe8550e3c2eae156a96a4dddcd1c8ac5800"
      integrity sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==
    
    eslint@^8.0.0:
      version "8.57.1"
      resolved "https://registry.yarnpkg.com/eslint/-/eslint-8.57.1.tgz#7df109654aba7e3bbe5c8eae533c5e461d3c6ca9"
      integrity sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==
      dependencies:
        "@eslint-community/eslint-utils" "^4.2.0"
        "@eslint-community/regexpp" "^4.6.1"
        "@eslint/eslintrc" "^2.1.4"
        "@eslint/js" "8.57.1"
        "@humanwhocodes/config-array" "^0.13.0"
        "@humanwhocodes/module-importer" "^1.0.1"
        "@nodelib/fs.walk" "^1.2.8"
        "@ungap/structured-clone" "^1.2.0"
        ajv "^6.12.4"
        chalk "^4.0.0"
        cross-spawn "^7.0.2"
        debug "^4.3.2"
        doctrine "^3.0.0"
        escape-string-regexp "^4.0.0"
        eslint-scope "^7.2.2"
        eslint-visitor-keys "^3.4.3"
        espree "^9.6.1"
        esquery "^1.4.2"
        esutils "^2.0.2"
        fast-deep-equal "^3.1.3"
        file-entry-cache "^6.0.1"
        find-up "^5.0.0"
        glob-parent "^6.0.2"
        globals "^13.19.0"
        graphemer "^1.4.0"
        ignore "^5.2.0"
        imurmurhash "^0.1.4"
        is-glob "^4.0.0"
        is-path-inside "^3.0.3"
        js-yaml "^4.1.0"
        json-stable-stringify-without-jsonify "^1.0.1"
        levn "^0.4.1"
        lodash.merge "^4.6.2"
        minimatch "^3.1.2"
        natural-compare "^1.4.0"
        optionator "^0.9.3"
        strip-ansi "^6.0.1"
        text-table "^0.2.0"
    
    espree@^9.6.0, espree@^9.6.1:
      version "9.6.1"
      resolved "https://registry.yarnpkg.com/espree/-/espree-9.6.1.tgz#a2a17b8e434690a5432f2f8018ce71d331a48c6f"
      integrity sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==
      dependencies:
        acorn "^8.9.0"
        acorn-jsx "^5.3.2"
        eslint-visitor-keys "^3.4.1"
    
    esquery@^1.4.2:
      version "1.6.0"
      resolved "https://registry.yarnpkg.com/esquery/-/esquery-1.6.0.tgz#91419234f804d852a82dceec3e16cdc22cf9dae7"
      integrity sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==
      dependencies:
        estraverse "^5.1.0"
    
    esrecurse@^4.3.0:
      version "4.3.0"
      resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.3.0.tgz#7ad7964d679abb28bee72cec63758b1c5d2c9921"
      integrity sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==
      dependencies:
        estraverse "^5.2.0"
    
    estraverse@^4.1.1:
      version "4.3.0"
      resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.3.0.tgz#398ad3f3c5a24948be7725e83d11a7de28cdbd1d"
      integrity sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==
    
    estraverse@^5.1.0, estraverse@^5.2.0:
      version "5.3.0"
      resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-5.3.0.tgz#2eea5290702f26ab8fe5370370ff86c965d21123"
      integrity sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==
    
    esutils@^2.0.2:
      version "2.0.3"
      resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
      integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
    
    etag@~1.8.1:
      version "1.8.1"
      resolved "https://registry.yarnpkg.com/etag/-/etag-1.8.1.tgz#41ae2eeb65efa62268aebfea83ac7d79299b0887"
      integrity sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==
    
    event-target-shim@^5.0.0:
      version "5.0.1"
      resolved "https://registry.yarnpkg.com/event-target-shim/-/event-target-shim-5.0.1.tgz#5d4d3ebdf9583d63a5333ce2deb7480ab2b05789"
      integrity sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==
    
    eventemitter3@^4.0.0:
      version "4.0.7"
      resolved "https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-4.0.7.tgz#2de9b68f6528d5644ef5c59526a1b4a07306169f"
      integrity sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==
    
    eventemitter3@^5.0.1:
      version "5.0.1"
      resolved "https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-5.0.1.tgz#53f5ffd0a492ac800721bb42c66b841de96423c4"
      integrity sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==
    
    events@^3.2.0:
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/events/-/events-3.3.0.tgz#31a95ad0a924e2d2c419a813aeb2c4e878ea7400"
      integrity sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==
    
    eventsource@^2.0.2:
      version "2.0.2"
      resolved "https://registry.yarnpkg.com/eventsource/-/eventsource-2.0.2.tgz#76dfcc02930fb2ff339520b6d290da573a9e8508"
      integrity sha512-IzUmBGPR3+oUG9dUeXynyNmf91/3zUSJg1lCktzKw47OXuhco54U3r9B7O4XX+Rb1Itm9OZ2b0RkTs10bICOxA==
    
    exifr@^7.0.0:
      version "7.1.3"
      resolved "https://registry.yarnpkg.com/exifr/-/exifr-7.1.3.tgz#f6218012c36dbb7d843222011b27f065fddbab6f"
      integrity sha512-g/aje2noHivrRSLbAUtBPWFbxKdKhgj/xr1vATDdUXPOFYJlQ62Ft0oy+72V6XLIpDJfHs6gXLbBLAolqOXYRw==
    
    exponential-backoff@^3.1.1:
      version "3.1.2"
      resolved "https://registry.yarnpkg.com/exponential-backoff/-/exponential-backoff-3.1.2.tgz#a8f26adb96bf78e8cd8ad1037928d5e5c0679d91"
      integrity sha512-8QxYTVXUkuy7fIIoitQkPwGonB8F3Zj8eEO8Sqg9Zv/bkI7RJAzowee4gr81Hak/dUTpA2Z7VfQgoijjPNlUZA==
    
    express@^4.21.2:
      version "4.21.2"
      resolved "https://registry.yarnpkg.com/express/-/express-4.21.2.tgz#cf250e48362174ead6cea4a566abef0162c1ec32"
      integrity sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==
      dependencies:
        accepts "~1.3.8"
        array-flatten "1.1.1"
        body-parser "1.20.3"
        content-disposition "0.5.4"
        content-type "~1.0.4"
        cookie "0.7.1"
        cookie-signature "1.0.6"
        debug "2.6.9"
        depd "2.0.0"
        encodeurl "~2.0.0"
        escape-html "~1.0.3"
        etag "~1.8.1"
        finalhandler "1.3.1"
        fresh "0.5.2"
        http-errors "2.0.0"
        merge-descriptors "1.0.3"
        methods "~1.1.2"
        on-finished "2.4.1"
        parseurl "~1.3.3"
        path-to-regexp "0.1.12"
        proxy-addr "~2.0.7"
        qs "6.13.0"
        range-parser "~1.2.1"
        safe-buffer "5.2.1"
        send "0.19.0"
        serve-static "1.16.2"
        setprototypeof "1.2.0"
        statuses "2.0.1"
        type-is "~1.6.18"
        utils-merge "1.0.1"
        vary "~1.1.2"
    
    extend@^3.0.0:
      version "3.0.2"
      resolved "https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa"
      integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==
    
    fast-deep-equal@^3.1.1, fast-deep-equal@^3.1.3:
      version "3.1.3"
      resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
      integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
    
    fast-glob@3.3.3, fast-glob@^3.2.9:
      version "3.3.3"
      resolved "https://registry.yarnpkg.com/fast-glob/-/fast-glob-3.3.3.tgz#d06d585ce8dba90a16b0505c543c3ccfb3aeb818"
      integrity sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==
      dependencies:
        "@nodelib/fs.stat" "^2.0.2"
        "@nodelib/fs.walk" "^1.2.3"
        glob-parent "^5.1.2"
        merge2 "^1.3.0"
        micromatch "^4.0.8"
    
    fast-json-stable-stringify@^2.0.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
      integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
    
    fast-levenshtein@^2.0.6:
      version "2.0.6"
      resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
      integrity sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==
    
    fast-uri@^3.0.1:
      version "3.0.6"
      resolved "https://registry.yarnpkg.com/fast-uri/-/fast-uri-3.0.6.tgz#88f130b77cfaea2378d56bf970dea21257a68748"
      integrity sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==
    
    fastq@^1.6.0:
      version "1.19.1"
      resolved "https://registry.yarnpkg.com/fastq/-/fastq-1.19.1.tgz#d50eaba803c8846a883c16492821ebcd2cda55f5"
      integrity sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==
      dependencies:
        reusify "^1.0.4"
    
    faye-websocket@^0.11.3:
      version "0.11.4"
      resolved "https://registry.yarnpkg.com/faye-websocket/-/faye-websocket-0.11.4.tgz#7f0d9275cfdd86a1c963dc8b65fcc451edcbb1da"
      integrity sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==
      dependencies:
        websocket-driver ">=0.5.1"
    
    fdir@^6.4.4:
      version "6.5.0"
      resolved "https://registry.yarnpkg.com/fdir/-/fdir-6.5.0.tgz#ed2ab967a331ade62f18d077dae192684d50d350"
      integrity sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==
    
    fetch-cookie@^2.0.3:
      version "2.2.0"
      resolved "https://registry.yarnpkg.com/fetch-cookie/-/fetch-cookie-2.2.0.tgz#01086b6b5b1c3e08f15ffd8647b02ca100377365"
      integrity sha512-h9AgfjURuCgA2+2ISl8GbavpUdR+WGAM2McW/ovn4tVccegp8ZqCKWSBR8uRdM8dDNlx5WdKRWxBYUwteLDCNQ==
      dependencies:
        set-cookie-parser "^2.4.8"
        tough-cookie "^4.0.0"
    
    file-entry-cache@^6.0.1:
      version "6.0.1"
      resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-6.0.1.tgz#211b2dd9659cb0394b073e7323ac3c933d522027"
      integrity sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==
      dependencies:
        flat-cache "^3.0.4"
    
    fill-range@^7.1.1:
      version "7.1.1"
      resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-7.1.1.tgz#44265d3cac07e3ea7dc247516380643754a05292"
      integrity sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==
      dependencies:
        to-regex-range "^5.0.1"
    
    finalhandler@1.1.2:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/finalhandler/-/finalhandler-1.1.2.tgz#b7e7d000ffd11938d0fdb053506f6ebabe9f587d"
      integrity sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==
      dependencies:
        debug "2.6.9"
        encodeurl "~1.0.2"
        escape-html "~1.0.3"
        on-finished "~2.3.0"
        parseurl "~1.3.3"
        statuses "~1.5.0"
        unpipe "~1.0.0"
    
    finalhandler@1.3.1:
      version "1.3.1"
      resolved "https://registry.yarnpkg.com/finalhandler/-/finalhandler-1.3.1.tgz#0c575f1d1d324ddd1da35ad7ece3df7d19088019"
      integrity sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==
      dependencies:
        debug "2.6.9"
        encodeurl "~2.0.0"
        escape-html "~1.0.3"
        on-finished "2.4.1"
        parseurl "~1.3.3"
        statuses "2.0.1"
        unpipe "~1.0.0"
    
    find-up@^4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/find-up/-/find-up-4.1.0.tgz#97afe7d6cdc0bc5928584b7c8d7b16e8a9aa5d19"
      integrity sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==
      dependencies:
        locate-path "^5.0.0"
        path-exists "^4.0.0"
    
    find-up@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/find-up/-/find-up-5.0.0.tgz#4c92819ecb7083561e4f4a240a86be5198f536fc"
      integrity sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==
      dependencies:
        locate-path "^6.0.0"
        path-exists "^4.0.0"
    
    flat-cache@^3.0.4:
      version "3.2.0"
      resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-3.2.0.tgz#2c0c2d5040c99b1632771a9d105725c0115363ee"
      integrity sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==
      dependencies:
        flatted "^3.2.9"
        keyv "^4.5.3"
        rimraf "^3.0.2"
    
    flat@^5.0.2:
      version "5.0.2"
      resolved "https://registry.yarnpkg.com/flat/-/flat-5.0.2.tgz#8ca6fe332069ffa9d324c327198c598259ceb241"
      integrity sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==
    
    flatted@^3.2.7, flatted@^3.2.9:
      version "3.3.3"
      resolved "https://registry.yarnpkg.com/flatted/-/flatted-3.3.3.tgz#67c8fad95454a7c7abebf74bb78ee74a44023358"
      integrity sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==
    
    follow-redirects@^1.0.0:
      version "1.15.11"
      resolved "https://registry.yarnpkg.com/follow-redirects/-/follow-redirects-1.15.11.tgz#777d73d72a92f8ec4d2e410eb47352a56b8e8340"
      integrity sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==
    
    foreground-child@^3.1.0:
      version "3.3.1"
      resolved "https://registry.yarnpkg.com/foreground-child/-/foreground-child-3.3.1.tgz#32e8e9ed1b68a3497befb9ac2b6adf92a638576f"
      integrity sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==
      dependencies:
        cross-spawn "^7.0.6"
        signal-exit "^4.0.1"
    
    forwarded@0.2.0:
      version "0.2.0"
      resolved "https://registry.yarnpkg.com/forwarded/-/forwarded-0.2.0.tgz#2269936428aad4c15c7ebe9779a84bf0b2a81811"
      integrity sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==
    
    fraction.js@^4.3.7:
      version "4.3.7"
      resolved "https://registry.yarnpkg.com/fraction.js/-/fraction.js-4.3.7.tgz#06ca0085157e42fda7f9e726e79fefc4068840f7"
      integrity sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==
    
    fresh@0.5.2:
      version "0.5.2"
      resolved "https://registry.yarnpkg.com/fresh/-/fresh-0.5.2.tgz#3d8cadd90d976569fa835ab1f8e4b23a105605a7"
      integrity sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==
    
    fs-extra@^8.1.0:
      version "8.1.0"
      resolved "https://registry.yarnpkg.com/fs-extra/-/fs-extra-8.1.0.tgz#49d43c45a88cd9677668cb7be1b46efdb8d2e1c0"
      integrity sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==
      dependencies:
        graceful-fs "^4.2.0"
        jsonfile "^4.0.0"
        universalify "^0.1.0"
    
    fs-minipass@^2.0.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/fs-minipass/-/fs-minipass-2.1.0.tgz#7f5036fdbf12c63c169190cbe4199c852271f9fb"
      integrity sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==
      dependencies:
        minipass "^3.0.0"
    
    fs-minipass@^3.0.0:
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/fs-minipass/-/fs-minipass-3.0.3.tgz#79a85981c4dc120065e96f62086bf6f9dc26cc54"
      integrity sha512-XUBA9XClHbnJWSfBzjkm6RvPsyg3sryZt06BEQoXcF7EK/xpGaQYJgQKDJSUH5SGZ76Y7pFx1QBnXz09rU5Fbw==
      dependencies:
        minipass "^7.0.3"
    
    fs.realpath@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
      integrity sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==
    
    fsevents@~2.3.2, fsevents@~2.3.3:
      version "2.3.3"
      resolved "https://registry.yarnpkg.com/fsevents/-/fsevents-2.3.3.tgz#cac6407785d03675a2a5e1a5305c697b347d90d6"
      integrity sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==
    
    function-bind@^1.1.2:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.2.tgz#2c02d864d97f3ea6c8830c464cbd11ab6eab7a1c"
      integrity sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==
    
    gensync@^1.0.0-beta.2:
      version "1.0.0-beta.2"
      resolved "https://registry.yarnpkg.com/gensync/-/gensync-1.0.0-beta.2.tgz#32a6ee76c3d7f52d46b2b1ae5d93fea8580a25e0"
      integrity sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==
    
    get-caller-file@^2.0.1, get-caller-file@^2.0.5:
      version "2.0.5"
      resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
      integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
    
    get-east-asian-width@^1.0.0:
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/get-east-asian-width/-/get-east-asian-width-1.3.0.tgz#21b4071ee58ed04ee0db653371b55b4299875389"
      integrity sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==
    
    get-intrinsic@^1.2.5, get-intrinsic@^1.3.0:
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/get-intrinsic/-/get-intrinsic-1.3.0.tgz#743f0e3b6964a93a5491ed1bffaae054d7f98d01"
      integrity sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==
      dependencies:
        call-bind-apply-helpers "^1.0.2"
        es-define-property "^1.0.1"
        es-errors "^1.3.0"
        es-object-atoms "^1.1.1"
        function-bind "^1.1.2"
        get-proto "^1.0.1"
        gopd "^1.2.0"
        has-symbols "^1.1.0"
        hasown "^2.0.2"
        math-intrinsics "^1.1.0"
    
    get-proto@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/get-proto/-/get-proto-1.0.1.tgz#150b3f2743869ef3e851ec0c49d15b1d14d00ee1"
      integrity sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==
      dependencies:
        dunder-proto "^1.0.1"
        es-object-atoms "^1.0.0"
    
    get-stream@^5.1.0:
      version "5.2.0"
      resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-5.2.0.tgz#4966a1795ee5ace65e706c4b7beb71257d6e22d3"
      integrity sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==
      dependencies:
        pump "^3.0.0"
    
    glob-parent@^5.1.2, glob-parent@~5.1.2:
      version "5.1.2"
      resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4"
      integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==
      dependencies:
        is-glob "^4.0.1"
    
    glob-parent@^6.0.1, glob-parent@^6.0.2:
      version "6.0.2"
      resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-6.0.2.tgz#6d237d99083950c79290f24c7642a3de9a28f9e3"
      integrity sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==
      dependencies:
        is-glob "^4.0.3"
    
    glob-to-regexp@^0.4.1:
      version "0.4.1"
      resolved "https://registry.yarnpkg.com/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz#c75297087c851b9a578bd217dd59a92f59fe546e"
      integrity sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==
    
    glob@^10.2.2:
      version "10.4.5"
      resolved "https://registry.yarnpkg.com/glob/-/glob-10.4.5.tgz#f4d9f0b90ffdbab09c9d77f5f29b4262517b0956"
      integrity sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==
      dependencies:
        foreground-child "^3.1.0"
        jackspeak "^3.1.2"
        minimatch "^9.0.4"
        minipass "^7.1.2"
        package-json-from-dist "^1.0.0"
        path-scurry "^1.11.1"
    
    glob@^7.1.3, glob@^7.1.7:
      version "7.2.3"
      resolved "https://registry.yarnpkg.com/glob/-/glob-7.2.3.tgz#b8df0fb802bbfa8e89bd1d938b4e16578ed44f2b"
      integrity sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==
      dependencies:
        fs.realpath "^1.0.0"
        inflight "^1.0.4"
        inherits "2"
        minimatch "^3.1.1"
        once "^1.3.0"
        path-is-absolute "^1.0.0"
    
    globals@^13.19.0:
      version "13.24.0"
      resolved "https://registry.yarnpkg.com/globals/-/globals-13.24.0.tgz#8432a19d78ce0c1e833949c36adb345400bb1171"
      integrity sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==
      dependencies:
        type-fest "^0.20.2"
    
    globby@^11.1.0:
      version "11.1.0"
      resolved "https://registry.yarnpkg.com/globby/-/globby-11.1.0.tgz#bd4be98bb042f83d796f7e3811991fbe82a0d34b"
      integrity sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==
      dependencies:
        array-union "^2.1.0"
        dir-glob "^3.0.1"
        fast-glob "^3.2.9"
        ignore "^5.2.0"
        merge2 "^1.4.1"
        slash "^3.0.0"
    
    gopd@^1.2.0:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/gopd/-/gopd-1.2.0.tgz#89f56b8217bdbc8802bd299df6d7f1081d7e51a1"
      integrity sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==
    
    got@^11.5.2:
      version "11.8.6"
      resolved "https://registry.yarnpkg.com/got/-/got-11.8.6.tgz#276e827ead8772eddbcfc97170590b841823233a"
      integrity sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==
      dependencies:
        "@sindresorhus/is" "^4.0.0"
        "@szmarczak/http-timer" "^4.0.5"
        "@types/cacheable-request" "^6.0.1"
        "@types/responselike" "^1.0.0"
        cacheable-lookup "^5.0.3"
        cacheable-request "^7.0.2"
        decompress-response "^6.0.0"
        http2-wrapper "^1.0.0-beta.5.2"
        lowercase-keys "^2.0.0"
        p-cancelable "^2.0.0"
        responselike "^2.0.0"
    
    graceful-fs@^4.1.2, graceful-fs@^4.1.6, graceful-fs@^4.2.0, graceful-fs@^4.2.11, graceful-fs@^4.2.4, graceful-fs@^4.2.6:
      version "4.2.11"
      resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.11.tgz#4183e4e8bf08bb6e05bbb2f7d2e0c8f712ca40e3"
      integrity sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==
    
    graphemer@^1.4.0:
      version "1.4.0"
      resolved "https://registry.yarnpkg.com/graphemer/-/graphemer-1.4.0.tgz#fb2f1d55e0e3a1849aeffc90c4fa0dd53a0e66c6"
      integrity sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==
    
    handle-thing@^2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/handle-thing/-/handle-thing-2.0.1.tgz#857f79ce359580c340d43081cc648970d0bb234e"
      integrity sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg==
    
    has-flag@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b"
      integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==
    
    has-symbols@^1.0.3, has-symbols@^1.1.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.1.0.tgz#fc9c6a783a084951d0b971fe1018de813707a338"
      integrity sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==
    
    has-tostringtag@^1.0.2:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/has-tostringtag/-/has-tostringtag-1.0.2.tgz#2cdc42d40bef2e5b4eeab7c01a73c54ce7ab5abc"
      integrity sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==
      dependencies:
        has-symbols "^1.0.3"
    
    hasown@^2.0.2:
      version "2.0.2"
      resolved "https://registry.yarnpkg.com/hasown/-/hasown-2.0.2.tgz#003eaf91be7adc372e84ec59dc37252cedb80003"
      integrity sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==
      dependencies:
        function-bind "^1.1.2"
    
    hosted-git-info@^8.0.0:
      version "8.1.0"
      resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-8.1.0.tgz#153cd84c03c6721481e16a5709eb74b1a0ab2ed0"
      integrity sha512-Rw/B2DNQaPBICNXEm8balFz9a6WpZrkCGpcWFpy7nCj+NyhSdqXipmfvtmWt9xGfp0wZnBxB+iVpLmQMYt47Tw==
      dependencies:
        lru-cache "^10.0.1"
    
    hpack.js@^2.1.6:
      version "2.1.6"
      resolved "https://registry.yarnpkg.com/hpack.js/-/hpack.js-2.1.6.tgz#87774c0949e513f42e84575b3c45681fade2a0b2"
      integrity sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==
      dependencies:
        inherits "^2.0.1"
        obuf "^1.0.0"
        readable-stream "^2.0.1"
        wbuf "^1.1.0"
    
    html-escaper@^2.0.0:
      version "2.0.2"
      resolved "https://registry.yarnpkg.com/html-escaper/-/html-escaper-2.0.2.tgz#dfd60027da36a36dfcbe236262c00a5822681453"
      integrity sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==
    
    htmlparser2@^10.0.0:
      version "10.0.0"
      resolved "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-10.0.0.tgz#77ad249037b66bf8cc99c6e286ef73b83aeb621d"
      integrity sha512-TwAZM+zE5Tq3lrEHvOlvwgj1XLWQCtaaibSN11Q+gGBAS7Y1uZSWwXXRe4iF6OXnaq1riyQAPFOBtYc77Mxq0g==
      dependencies:
        domelementtype "^2.3.0"
        domhandler "^5.0.3"
        domutils "^3.2.1"
        entities "^6.0.0"
    
    http-cache-semantics@^4.0.0, http-cache-semantics@^4.1.1:
      version "4.2.0"
      resolved "https://registry.yarnpkg.com/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz#205f4db64f8562b76a4ff9235aa5279839a09dd5"
      integrity sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==
    
    http-deceiver@^1.2.7:
      version "1.2.7"
      resolved "https://registry.yarnpkg.com/http-deceiver/-/http-deceiver-1.2.7.tgz#fa7168944ab9a519d337cb0bec7284dc3e723d87"
      integrity sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw==
    
    http-errors@2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/http-errors/-/http-errors-2.0.0.tgz#b7774a1486ef73cf7667ac9ae0858c012c57b9d3"
      integrity sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==
      dependencies:
        depd "2.0.0"
        inherits "2.0.4"
        setprototypeof "1.2.0"
        statuses "2.0.1"
        toidentifier "1.0.1"
    
    http-errors@~1.6.2:
      version "1.6.3"
      resolved "https://registry.yarnpkg.com/http-errors/-/http-errors-1.6.3.tgz#8b55680bb4be283a0b5bf4ea2e38580be1d9320d"
      integrity sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==
      dependencies:
        depd "~1.1.2"
        inherits "2.0.3"
        setprototypeof "1.1.0"
        statuses ">= 1.4.0 < 2"
    
    http-parser-js@>=0.5.1:
      version "0.5.10"
      resolved "https://registry.yarnpkg.com/http-parser-js/-/http-parser-js-0.5.10.tgz#b3277bd6d7ed5588e20ea73bf724fcbe44609075"
      integrity sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==
    
    http-proxy-agent@^7.0.0:
      version "7.0.2"
      resolved "https://registry.yarnpkg.com/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz#9a8b1f246866c028509486585f62b8f2c18c270e"
      integrity sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==
      dependencies:
        agent-base "^7.1.0"
        debug "^4.3.4"
    
    http-proxy-middleware@3.0.5:
      version "3.0.5"
      resolved "https://registry.yarnpkg.com/http-proxy-middleware/-/http-proxy-middleware-3.0.5.tgz#9dcde663edc44079bc5a9c63e03fe5e5d6037fab"
      integrity sha512-GLZZm1X38BPY4lkXA01jhwxvDoOkkXqjgVyUzVxiEK4iuRu03PZoYHhHRwxnfhQMDuaxi3vVri0YgSro/1oWqg==
      dependencies:
        "@types/http-proxy" "^1.17.15"
        debug "^4.3.6"
        http-proxy "^1.18.1"
        is-glob "^4.0.3"
        is-plain-object "^5.0.0"
        micromatch "^4.0.8"
    
    http-proxy-middleware@^2.0.7:
      version "2.0.9"
      resolved "https://registry.yarnpkg.com/http-proxy-middleware/-/http-proxy-middleware-2.0.9.tgz#e9e63d68afaa4eee3d147f39149ab84c0c2815ef"
      integrity sha512-c1IyJYLYppU574+YI7R4QyX2ystMtVXZwIdzazUIPIJsHuWNd+mho2j+bKoHftndicGj9yh+xjd+l0yj7VeT1Q==
      dependencies:
        "@types/http-proxy" "^1.17.8"
        http-proxy "^1.18.1"
        is-glob "^4.0.1"
        is-plain-obj "^3.0.0"
        micromatch "^4.0.2"
    
    http-proxy@^1.18.1:
      version "1.18.1"
      resolved "https://registry.yarnpkg.com/http-proxy/-/http-proxy-1.18.1.tgz#401541f0534884bbf95260334e72f88ee3976549"
      integrity sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==
      dependencies:
        eventemitter3 "^4.0.0"
        follow-redirects "^1.0.0"
        requires-port "^1.0.0"
    
    http2-wrapper@^1.0.0-beta.5.2:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/http2-wrapper/-/http2-wrapper-1.0.3.tgz#b8f55e0c1f25d4ebd08b3b0c2c079f9590800b3d"
      integrity sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==
      dependencies:
        quick-lru "^5.1.1"
        resolve-alpn "^1.0.0"
    
    https-proxy-agent@7.0.6, https-proxy-agent@^7.0.1:
      version "7.0.6"
      resolved "https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz#da8dfeac7da130b05c2ba4b59c9b6cd66611a6b9"
      integrity sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==
      dependencies:
        agent-base "^7.1.2"
        debug "4"
    
    hyperdyperid@^1.2.0:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/hyperdyperid/-/hyperdyperid-1.2.0.tgz#59668d323ada92228d2a869d3e474d5a33b69e6b"
      integrity sha512-Y93lCzHYgGWdrJ66yIktxiaGULYc6oGiABxhcO5AufBeOyoIdZF7bIfLaOrbM0iGIOXQQgxxRrFEnb+Y6w1n4A==
    
    iconv-lite@0.4.24:
      version "0.4.24"
      resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b"
      integrity sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==
      dependencies:
        safer-buffer ">= 2.1.2 < 3"
    
    iconv-lite@^0.6.2, iconv-lite@^0.6.3:
      version "0.6.3"
      resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.6.3.tgz#a52f80bf38da1952eb5c681790719871a1a72501"
      integrity sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==
      dependencies:
        safer-buffer ">= 2.1.2 < 3.0.0"
    
    icss-utils@^5.0.0, icss-utils@^5.1.0:
      version "5.1.0"
      resolved "https://registry.yarnpkg.com/icss-utils/-/icss-utils-5.1.0.tgz#c6be6858abd013d768e98366ae47e25d5887b1ae"
      integrity sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==
    
    ignore-walk@^8.0.0:
      version "8.0.0"
      resolved "https://registry.yarnpkg.com/ignore-walk/-/ignore-walk-8.0.0.tgz#380c173badc3a18c57ff33440753f0052f572b14"
      integrity sha512-FCeMZT4NiRQGh+YkeKMtWrOmBgWjHjMJ26WQWrRQyoyzqevdaGSakUaJW5xQYmjLlUVk2qUnCjYVBax9EKKg8A==
      dependencies:
        minimatch "^10.0.3"
    
    ignore@7.0.5:
      version "7.0.5"
      resolved "https://registry.yarnpkg.com/ignore/-/ignore-7.0.5.tgz#4cb5f6cd7d4c7ab0365738c7aea888baa6d7efd9"
      integrity sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==
    
    ignore@^5.2.0, ignore@^5.3.1:
      version "5.3.2"
      resolved "https://registry.yarnpkg.com/ignore/-/ignore-5.3.2.tgz#3cd40e729f3643fd87cb04e50bf0eb722bc596f5"
      integrity sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==
    
    image-size@~0.5.0:
      version "0.5.5"
      resolved "https://registry.yarnpkg.com/image-size/-/image-size-0.5.5.tgz#09dfd4ab9d20e29eb1c3e80b8990378df9e3cb9c"
      integrity sha512-6TDAlDPZxUFCv+fuOkIoXT/V/f3Qbq8e37p+YOiYrUv3v9cc3/6x78VdfPgFVaB9dZYeLUfKgHRebpkm/oP2VQ==
    
    immutable@^5.0.2:
      version "5.1.3"
      resolved "https://registry.yarnpkg.com/immutable/-/immutable-5.1.3.tgz#e6486694c8b76c37c063cca92399fa64098634d4"
      integrity sha512-+chQdDfvscSF1SJqv2gn4SRO2ZyS3xL3r7IW/wWEEzrzLisnOlKiQu5ytC/BVNcS15C39WT2Hg/bjKjDMcu+zg==
    
    import-fresh@^3.2.1, import-fresh@^3.3.0:
      version "3.3.1"
      resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-3.3.1.tgz#9cecb56503c0ada1f2741dbbd6546e4b13b57ccf"
      integrity sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==
      dependencies:
        parent-module "^1.0.0"
        resolve-from "^4.0.0"
    
    imurmurhash@^0.1.4:
      version "0.1.4"
      resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
      integrity sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==
    
    inflight@^1.0.4:
      version "1.0.6"
      resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
      integrity sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==
      dependencies:
        once "^1.3.0"
        wrappy "1"
    
    inherits@2, inherits@2.0.4, inherits@^2.0.1, inherits@^2.0.3, inherits@~2.0.3:
      version "2.0.4"
      resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
      integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
    
    inherits@2.0.3:
      version "2.0.3"
      resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de"
      integrity sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==
    
    ini@5.0.0, ini@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/ini/-/ini-5.0.0.tgz#a7a4615339843d9a8ccc2d85c9d81cf93ffbc638"
      integrity sha512-+N0ngpO3e7cRUWOJAS7qw0IZIVc6XPrW4MlFBdD066F2L4k1L6ker3hLqSq7iXxU5tgS4WGkIUElWn5vogAEnw==
    
    ip-address@^10.0.1:
      version "10.0.1"
      resolved "https://registry.yarnpkg.com/ip-address/-/ip-address-10.0.1.tgz#a8180b783ce7788777d796286d61bce4276818ed"
      integrity sha512-NWv9YLW4PoW2B7xtzaS3NCot75m6nK7Icdv0o3lfMceJVRfSoQwqD4wEH5rLwoKJwUiZ/rfpiVBhnaF0FK4HoA==
    
    ipaddr.js@1.9.1:
      version "1.9.1"
      resolved "https://registry.yarnpkg.com/ipaddr.js/-/ipaddr.js-1.9.1.tgz#bff38543eeb8984825079ff3a2a8e6cbd46781b3"
      integrity sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==
    
    ipaddr.js@^2.1.0:
      version "2.2.0"
      resolved "https://registry.yarnpkg.com/ipaddr.js/-/ipaddr.js-2.2.0.tgz#d33fa7bac284f4de7af949638c9d68157c6b92e8"
      integrity sha512-Ag3wB2o37wslZS19hZqorUnrnzSkpOVy+IiiDEiTqNubEYpYuHWIf6K4psgN2ZWKExS4xhVCrRVfb/wfW8fWJA==
    
    is-arrayish@^0.2.1:
      version "0.2.1"
      resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"
      integrity sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==
    
    is-binary-path@~2.1.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/is-binary-path/-/is-binary-path-2.1.0.tgz#ea1f7f3b80f064236e83470f86c09c254fb45b09"
      integrity sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==
      dependencies:
        binary-extensions "^2.0.0"
    
    is-core-module@^2.16.0:
      version "2.16.1"
      resolved "https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.16.1.tgz#2a98801a849f43e2add644fbb6bc6229b19a4ef4"
      integrity sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==
      dependencies:
        hasown "^2.0.2"
    
    is-docker@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/is-docker/-/is-docker-3.0.0.tgz#90093aa3106277d8a77a5910dbae71747e15a200"
      integrity sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==
    
    is-extglob@^2.1.1:
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
      integrity sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==
    
    is-fullwidth-code-point@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
      integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
    
    is-fullwidth-code-point@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz#fae3167c729e7463f8461ce512b080a49268aa88"
      integrity sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==
    
    is-fullwidth-code-point@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz#9609efced7c2f97da7b60145ef481c787c7ba704"
      integrity sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==
      dependencies:
        get-east-asian-width "^1.0.0"
    
    is-glob@^4.0.0, is-glob@^4.0.1, is-glob@^4.0.3, is-glob@~4.0.1:
      version "4.0.3"
      resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-4.0.3.tgz#64f61e42cbbb2eec2071a9dac0b28ba1e65d5084"
      integrity sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==
      dependencies:
        is-extglob "^2.1.1"
    
    is-inside-container@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/is-inside-container/-/is-inside-container-1.0.0.tgz#e81fba699662eb31dbdaf26766a61d4814717ea4"
      integrity sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==
      dependencies:
        is-docker "^3.0.0"
    
    is-interactive@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/is-interactive/-/is-interactive-2.0.0.tgz#40c57614593826da1100ade6059778d597f16e90"
      integrity sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==
    
    is-network-error@^1.0.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/is-network-error/-/is-network-error-1.1.0.tgz#d26a760e3770226d11c169052f266a4803d9c997"
      integrity sha512-tUdRRAnhT+OtCZR/LxZelH/C7QtjtFrTu5tXCA8pl55eTUElUHT+GPYV8MBMBvea/j+NxQqVt3LbWMRir7Gx9g==
    
    is-number@^7.0.0:
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b"
      integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==
    
    is-path-inside@^3.0.3:
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/is-path-inside/-/is-path-inside-3.0.3.tgz#d231362e53a07ff2b0e0ea7fed049161ffd16283"
      integrity sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==
    
    is-plain-obj@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/is-plain-obj/-/is-plain-obj-3.0.0.tgz#af6f2ea14ac5a646183a5bbdb5baabbc156ad9d7"
      integrity sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==
    
    is-plain-object@^2.0.4:
      version "2.0.4"
      resolved "https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-2.0.4.tgz#2c163b3fafb1b606d9d17928f05c2a1c38e07677"
      integrity sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==
      dependencies:
        isobject "^3.0.1"
    
    is-plain-object@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-5.0.0.tgz#4427f50ab3429e9025ea7d52e9043a9ef4159344"
      integrity sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==
    
    is-regex@^1.2.1:
      version "1.2.1"
      resolved "https://registry.yarnpkg.com/is-regex/-/is-regex-1.2.1.tgz#76d70a3ed10ef9be48eb577887d74205bf0cad22"
      integrity sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==
      dependencies:
        call-bound "^1.0.2"
        gopd "^1.2.0"
        has-tostringtag "^1.0.2"
        hasown "^2.0.2"
    
    is-shallow-equal@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/is-shallow-equal/-/is-shallow-equal-1.0.1.tgz#c410b51eb1c12ee50cd02891d32d1691a132d73c"
      integrity sha512-lq5RvK+85Hs5J3p4oA4256M1FEffzmI533ikeDHvJd42nouRRx5wBzt36JuviiGe5dIPyHON/d0/Up+PBo6XkQ==
    
    is-unicode-supported@^1.3.0:
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz#d824984b616c292a2e198207d4a609983842f714"
      integrity sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==
    
    is-unicode-supported@^2.0.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/is-unicode-supported/-/is-unicode-supported-2.1.0.tgz#09f0ab0de6d3744d48d265ebb98f65d11f2a9b3a"
      integrity sha512-mE00Gnza5EEB3Ds0HfMyllZzbBrmLOX3vfWoj9A9PEnTfratQ/BcaJOuMhnkhjXvb2+FkY3VuHqtAGpTPmglFQ==
    
    is-what@^3.14.1:
      version "3.14.1"
      resolved "https://registry.yarnpkg.com/is-what/-/is-what-3.14.1.tgz#e1222f46ddda85dead0fd1c9df131760e77755c1"
      integrity sha512-sNxgpk9793nzSs7bA6JQJGeIuRBQhAaNGG77kzYQgMkrID+lS6SlK07K5LaptscDlSaIgH+GPFzf+d75FVxozA==
    
    is-wsl@^3.1.0:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/is-wsl/-/is-wsl-3.1.0.tgz#e1c657e39c10090afcbedec61720f6b924c3cbd2"
      integrity sha512-UcVfVfaK4Sc4m7X3dUSoHoozQGBEFeDC+zVo06t98xe8CzHSZZBekNXH+tu0NalHolcJ/QAGqS46Hef7QXBIMw==
      dependencies:
        is-inside-container "^1.0.0"
    
    isarray@~1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
      integrity sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==
    
    isbinaryfile@^4.0.8:
      version "4.0.10"
      resolved "https://registry.yarnpkg.com/isbinaryfile/-/isbinaryfile-4.0.10.tgz#0c5b5e30c2557a2f06febd37b7322946aaee42b3"
      integrity sha512-iHrqe5shvBUcFbmZq9zOQHBoeOhZJu6RQGrDpBgenUm/Am+F3JM2MgQj+rK3Z601fzrL5gLZWtAPH2OBaSVcyw==
    
    isexe@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
      integrity sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==
    
    isexe@^3.1.1:
      version "3.1.1"
      resolved "https://registry.yarnpkg.com/isexe/-/isexe-3.1.1.tgz#4a407e2bd78ddfb14bea0c27c6f7072dde775f0d"
      integrity sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==
    
    isobject@^3.0.1:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/isobject/-/isobject-3.0.1.tgz#4e431e92b11a9731636aa1f9c8d1ccbcfdab78df"
      integrity sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==
    
    istanbul-lib-coverage@^3.0.0, istanbul-lib-coverage@^3.2.0:
      version "3.2.2"
      resolved "https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz#2d166c4b0644d43a39f04bf6c2edd1e585f31756"
      integrity sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==
    
    istanbul-lib-instrument@6.0.3:
      version "6.0.3"
      resolved "https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz#fa15401df6c15874bcb2105f773325d78c666765"
      integrity sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==
      dependencies:
        "@babel/core" "^7.23.9"
        "@babel/parser" "^7.23.9"
        "@istanbuljs/schema" "^0.1.3"
        istanbul-lib-coverage "^3.2.0"
        semver "^7.5.4"
    
    istanbul-lib-instrument@^4.0.3:
      version "4.0.3"
      resolved "https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-4.0.3.tgz#873c6fff897450118222774696a3f28902d77c1d"
      integrity sha512-BXgQl9kf4WTCPCCpmFGoJkz/+uhvm7h7PFKUYxh7qarQd3ER33vHG//qaE8eN25l07YqZPpHXU9I09l/RD5aGQ==
      dependencies:
        "@babel/core" "^7.7.5"
        "@istanbuljs/schema" "^0.1.2"
        istanbul-lib-coverage "^3.0.0"
        semver "^6.3.0"
    
    istanbul-lib-report@^3.0.0:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz#908305bac9a5bd175ac6a74489eafd0fc2445a7d"
      integrity sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==
      dependencies:
        istanbul-lib-coverage "^3.0.0"
        make-dir "^4.0.0"
        supports-color "^7.1.0"
    
    istanbul-lib-source-maps@^4.0.1:
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz#895f3a709fcfba34c6de5a42939022f3e4358551"
      integrity sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==
      dependencies:
        debug "^4.1.1"
        istanbul-lib-coverage "^3.0.0"
        source-map "^0.6.1"
    
    istanbul-reports@^3.0.5:
      version "3.2.0"
      resolved "https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-3.2.0.tgz#cb4535162b5784aa623cee21a7252cf2c807ac93"
      integrity sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==
      dependencies:
        html-escaper "^2.0.0"
        istanbul-lib-report "^3.0.0"
    
    jackspeak@^3.1.2:
      version "3.4.3"
      resolved "https://registry.yarnpkg.com/jackspeak/-/jackspeak-3.4.3.tgz#8833a9d89ab4acde6188942bd1c53b6390ed5a8a"
      integrity sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==
      dependencies:
        "@isaacs/cliui" "^8.0.2"
      optionalDependencies:
        "@pkgjs/parseargs" "^0.11.0"
    
    jasmine-core@^3.6.0:
      version "3.99.1"
      resolved "https://registry.yarnpkg.com/jasmine-core/-/jasmine-core-3.99.1.tgz#5bfa4b2d76618868bfac4c8ff08bb26fffa4120d"
      integrity sha512-Hu1dmuoGcZ7AfyynN3LsfruwMbxMALMka+YtZeGoLuDEySVmVAPaonkNoBRIw/ectu8b9tVQCJNgp4a4knp+tg==
    
    jasmine-core@~4.0.0:
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/jasmine-core/-/jasmine-core-4.0.1.tgz#ea4b0495d82155023bd56c25181d9f9b623f61b8"
      integrity sha512-w+JDABxQCkxbGGxg+a2hUVZyqUS2JKngvIyLGu/xiw2ZwgsoSB0iiecLQsQORSeaKQ6iGrCyWG86RfNDuoA7Lg==
    
    jest-worker@^27.4.5:
      version "27.5.1"
      resolved "https://registry.yarnpkg.com/jest-worker/-/jest-worker-27.5.1.tgz#8d146f0900e8973b106b6f73cc1e9a8cb86f8db0"
      integrity sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==
      dependencies:
        "@types/node" "*"
        merge-stream "^2.0.0"
        supports-color "^8.0.0"
    
    jiti@^1.20.0:
      version "1.21.7"
      resolved "https://registry.yarnpkg.com/jiti/-/jiti-1.21.7.tgz#9dd81043424a3d28458b193d965f0d18a2300ba9"
      integrity sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==
    
    js-tokens@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
      integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
    
    js-yaml@^4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-4.1.0.tgz#c1fb65f8f5017901cdd2c951864ba18458a10602"
      integrity sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==
      dependencies:
        argparse "^2.0.1"
    
    jsesc@^3.0.2:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-3.1.0.tgz#74d335a234f67ed19907fdadfac7ccf9d409825d"
      integrity sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==
    
    jsesc@~3.0.2:
      version "3.0.2"
      resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-3.0.2.tgz#bb8b09a6597ba426425f2e4a07245c3d00b9343e"
      integrity sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==
    
    json-buffer@3.0.1:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/json-buffer/-/json-buffer-3.0.1.tgz#9338802a30d3b6605fbe0613e094008ca8c05a13"
      integrity sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==
    
    json-parse-even-better-errors@^2.3.0, json-parse-even-better-errors@^2.3.1:
      version "2.3.1"
      resolved "https://registry.yarnpkg.com/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz#7c47805a94319928e05777405dc12e1f7a4ee02d"
      integrity sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==
    
    json-parse-even-better-errors@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/json-parse-even-better-errors/-/json-parse-even-better-errors-4.0.0.tgz#d3f67bd5925e81d3e31aa466acc821c8375cec43"
      integrity sha512-lR4MXjGNgkJc7tkQ97kb2nuEMnNCyU//XYVH0MKTGcXEiSudQ5MKGKen3C5QubYy0vmq+JGitUg92uuywGEwIA==
    
    json-schema-traverse@^0.4.1:
      version "0.4.1"
      resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
      integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
    
    json-schema-traverse@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz#ae7bcb3656ab77a73ba5c49bf654f38e6b6860e2"
      integrity sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==
    
    json-stable-stringify-without-jsonify@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
      integrity sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==
    
    json5@^2.1.2, json5@^2.2.3:
      version "2.2.3"
      resolved "https://registry.yarnpkg.com/json5/-/json5-2.2.3.tgz#78cd6f1a19bdc12b73db5ad0c61efd66c1e29283"
      integrity sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==
    
    jsonc-parser@3.3.1:
      version "3.3.1"
      resolved "https://registry.yarnpkg.com/jsonc-parser/-/jsonc-parser-3.3.1.tgz#f2a524b4f7fd11e3d791e559977ad60b98b798b4"
      integrity sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==
    
    jsonc-parser@^2.3.0:
      version "2.3.1"
      resolved "https://registry.yarnpkg.com/jsonc-parser/-/jsonc-parser-2.3.1.tgz#59549150b133f2efacca48fe9ce1ec0659af2342"
      integrity sha512-H8jvkz1O50L3dMZCsLqiuB2tA7muqbSg1AtGEkN0leAqGjsUzDJir3Zwr02BhqdcITPg3ei3mZ+HjMocAknhhg==
    
    jsonfile@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/jsonfile/-/jsonfile-4.0.0.tgz#8771aae0799b64076b76640fca058f9c10e33ecb"
      integrity sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==
      optionalDependencies:
        graceful-fs "^4.1.6"
    
    jsonparse@^1.3.1:
      version "1.3.1"
      resolved "https://registry.yarnpkg.com/jsonparse/-/jsonparse-1.3.1.tgz#3f4dae4a91fac315f71062f8521cc239f1366280"
      integrity sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==
    
    just-clone@^6.0.0:
      version "6.2.0"
      resolved "https://registry.yarnpkg.com/just-clone/-/just-clone-6.2.0.tgz#a4614d9bf7e4bbdcae7f9ba904aea5ea9cae8ae5"
      integrity sha512-1IynUYEc/HAwxhi3WDpIpxJbZpMCvvrrmZVqvj9EhpvbH8lls7HhdhiByjL7DkAaWlLIzpC0Xc/VPvy/UxLNjA==
    
    just-compare@^2.0.0, just-compare@^2.3.0:
      version "2.3.0"
      resolved "https://registry.yarnpkg.com/just-compare/-/just-compare-2.3.0.tgz#a2adcc1d1940536263275f5a1ef1298bcacfeda7"
      integrity sha512-6shoR7HDT+fzfL3gBahx1jZG3hWLrhPAf+l7nCwahDdT9XDtosB9kIF0ZrzUp5QY8dJWfQVr5rnsPqsbvflDzg==
    
    karma-chrome-launcher@~3.1.0:
      version "3.1.1"
      resolved "https://registry.yarnpkg.com/karma-chrome-launcher/-/karma-chrome-launcher-3.1.1.tgz#baca9cc071b1562a1db241827257bfe5cab597ea"
      integrity sha512-hsIglcq1vtboGPAN+DGCISCFOxW+ZVnIqhDQcCMqqCp+4dmJ0Qpq5QAjkbA0X2L9Mi6OBkHi2Srrbmm7pUKkzQ==
      dependencies:
        which "^1.2.1"
    
    karma-coverage@~2.1.0:
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/karma-coverage/-/karma-coverage-2.1.1.tgz#7434f8736841e08de3e6c302632e8d239634f388"
      integrity sha512-oxeOSBVK/jdZsiX03LhHQkO4eISSQb5GbHi6Nsw3Mw7G4u6yUgacBAftnO7q+emPBLMsrNbz1pGIrj+Jb3z17A==
      dependencies:
        istanbul-lib-coverage "^3.2.0"
        istanbul-lib-instrument "^4.0.3"
        istanbul-lib-report "^3.0.0"
        istanbul-lib-source-maps "^4.0.1"
        istanbul-reports "^3.0.5"
        minimatch "^3.0.4"
    
    karma-jasmine-html-reporter@^1.0.0:
      version "1.7.0"
      resolved "https://registry.yarnpkg.com/karma-jasmine-html-reporter/-/karma-jasmine-html-reporter-1.7.0.tgz#52c489a74d760934a1089bfa5ea4a8fcb84cc28b"
      integrity sha512-pzum1TL7j90DTE86eFt48/s12hqwQuiD+e5aXx2Dc9wDEn2LfGq6RoAxEZZjFiN0RDSCOnosEKRZWxbQ+iMpQQ==
    
    karma-jasmine@~4.0.0:
      version "4.0.2"
      resolved "https://registry.yarnpkg.com/karma-jasmine/-/karma-jasmine-4.0.2.tgz#386db2a3e1acc0af5265c711f673f78f1e4938de"
      integrity sha512-ggi84RMNQffSDmWSyyt4zxzh2CQGwsxvYYsprgyR1j8ikzIduEdOlcLvXjZGwXG/0j41KUXOWsUCBfbEHPWP9g==
      dependencies:
        jasmine-core "^3.6.0"
    
    karma-source-map-support@1.4.0:
      version "1.4.0"
      resolved "https://registry.yarnpkg.com/karma-source-map-support/-/karma-source-map-support-1.4.0.tgz#58526ceccf7e8730e56effd97a4de8d712ac0d6b"
      integrity sha512-RsBECncGO17KAoJCYXjv+ckIz+Ii9NCi+9enk+rq6XC81ezYkb4/RHE6CTXdA7IOJqoF3wcaLfVG0CPmE5ca6A==
      dependencies:
        source-map-support "^0.5.5"
    
    karma@~6.3.0:
      version "6.3.20"
      resolved "https://registry.yarnpkg.com/karma/-/karma-6.3.20.tgz#12f5c3b0e68f204607cb0a3a78d4751b42ef61a8"
      integrity sha512-HRNQhMuKOwKpjYlWiJP0DUrJOh+QjaI/DTaD8b9rEm4Il3tJ8MijutVZH4ts10LuUFst/CedwTS6vieCN8yTSw==
      dependencies:
        "@colors/colors" "1.5.0"
        body-parser "^1.19.0"
        braces "^3.0.2"
        chokidar "^3.5.1"
        connect "^3.7.0"
        di "^0.0.1"
        dom-serialize "^2.2.1"
        glob "^7.1.7"
        graceful-fs "^4.2.6"
        http-proxy "^1.18.1"
        isbinaryfile "^4.0.8"
        lodash "^4.17.21"
        log4js "^6.4.1"
        mime "^2.5.2"
        minimatch "^3.0.4"
        mkdirp "^0.5.5"
        qjobs "^1.2.0"
        range-parser "^1.2.1"
        rimraf "^3.0.2"
        socket.io "^4.4.1"
        source-map "^0.6.1"
        tmp "^0.2.1"
        ua-parser-js "^0.7.30"
        yargs "^16.1.1"
    
    keyv@^4.0.0, keyv@^4.5.3:
      version "4.5.4"
      resolved "https://registry.yarnpkg.com/keyv/-/keyv-4.5.4.tgz#a879a99e29452f942439f2a405e3af8b31d4de93"
      integrity sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==
      dependencies:
        json-buffer "3.0.1"
    
    kind-of@^6.0.2:
      version "6.0.3"
      resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.3.tgz#07c05034a6c349fa06e24fa35aa76db4580ce4dd"
      integrity sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==
    
    launch-editor@^2.6.1:
      version "2.11.1"
      resolved "https://registry.yarnpkg.com/launch-editor/-/launch-editor-2.11.1.tgz#61a0b7314a42fd84a6cbb564573d9e9ffcf3d72b"
      integrity sha512-SEET7oNfgSaB6Ym0jufAdCeo3meJVeCaaDyzRygy0xsp2BFKCprcfHljTq4QkzTLUxEKkFK6OK4811YM2oSrRg==
      dependencies:
        picocolors "^1.1.1"
        shell-quote "^1.8.3"
    
    less-loader@12.3.0:
      version "12.3.0"
      resolved "https://registry.yarnpkg.com/less-loader/-/less-loader-12.3.0.tgz#d4a00361568be86a97da3df4f16954b0d4c15340"
      integrity sha512-0M6+uYulvYIWs52y0LqN4+QM9TqWAohYSNTo4htE8Z7Cn3G/qQMEmktfHmyJT23k+20kU9zHH2wrfFXkxNLtVw==
    
    less@4.3.0:
      version "4.3.0"
      resolved "https://registry.yarnpkg.com/less/-/less-4.3.0.tgz#ef0cfc260a9ca8079ed8d0e3512bda8a12c82f2a"
      integrity sha512-X9RyH9fvemArzfdP8Pi3irr7lor2Ok4rOttDXBhlwDg+wKQsXOXgHWduAJE1EsF7JJx0w0bcO6BC6tCKKYnXKA==
      dependencies:
        copy-anything "^2.0.1"
        parse-node-version "^1.0.1"
        tslib "^2.3.0"
      optionalDependencies:
        errno "^0.1.1"
        graceful-fs "^4.1.2"
        image-size "~0.5.0"
        make-dir "^2.1.0"
        mime "^1.4.1"
        needle "^3.1.0"
        source-map "~0.6.0"
    
    levn@^0.4.1:
      version "0.4.1"
      resolved "https://registry.yarnpkg.com/levn/-/levn-0.4.1.tgz#ae4562c007473b932a6200d403268dd2fffc6ade"
      integrity sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==
      dependencies:
        prelude-ls "^1.2.1"
        type-check "~0.4.0"
    
    license-webpack-plugin@4.0.2:
      version "4.0.2"
      resolved "https://registry.yarnpkg.com/license-webpack-plugin/-/license-webpack-plugin-4.0.2.tgz#1e18442ed20b754b82f1adeff42249b81d11aec6"
      integrity sha512-771TFWFD70G1wLTC4oU2Cw4qvtmNrIw+wRvBtn+okgHl7slJVi7zfNcdmqDL72BojM30VNJ2UHylr1o77U37Jw==
      dependencies:
        webpack-sources "^3.0.0"
    
    lines-and-columns@^1.1.6:
      version "1.2.4"
      resolved "https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz#eca284f75d2965079309dc0ad9255abb2ebc1632"
      integrity sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==
    
    listr2@8.3.3:
      version "8.3.3"
      resolved "https://registry.yarnpkg.com/listr2/-/listr2-8.3.3.tgz#815fc8f738260ff220981bf9e866b3e11e8121bf"
      integrity sha512-LWzX2KsqcB1wqQ4AHgYb4RsDXauQiqhjLk+6hjbaeHG4zpjjVAB6wC/gz6X0l+Du1cN3pUB5ZlrvTbhGSNnUQQ==
      dependencies:
        cli-truncate "^4.0.0"
        colorette "^2.0.20"
        eventemitter3 "^5.0.1"
        log-update "^6.1.0"
        rfdc "^1.4.1"
        wrap-ansi "^9.0.0"
    
    lmdb@3.3.0:
      version "3.3.0"
      resolved "https://registry.yarnpkg.com/lmdb/-/lmdb-3.3.0.tgz#85149c8178a3fa57a9230bd1adf9fd96ceb9125f"
      integrity sha512-MgJocUI6QEiSXQBFWLeyo1R7eQj8Rke5dlPxX0KFwli8/bsCxpM/KbXO5y0qmV/5llQ3wpneDWcTYxa+4vn8iQ==
      dependencies:
        msgpackr "^1.11.2"
        node-addon-api "^6.1.0"
        node-gyp-build-optional-packages "5.2.2"
        ordered-binary "^1.5.3"
        weak-lru-cache "^1.2.2"
      optionalDependencies:
        "@lmdb/lmdb-darwin-arm64" "3.3.0"
        "@lmdb/lmdb-darwin-x64" "3.3.0"
        "@lmdb/lmdb-linux-arm" "3.3.0"
        "@lmdb/lmdb-linux-arm64" "3.3.0"
        "@lmdb/lmdb-linux-x64" "3.3.0"
        "@lmdb/lmdb-win32-arm64" "3.3.0"
        "@lmdb/lmdb-win32-x64" "3.3.0"
    
    loader-runner@^4.2.0:
      version "4.3.0"
      resolved "https://registry.yarnpkg.com/loader-runner/-/loader-runner-4.3.0.tgz#c1b4a163b99f614830353b16755e7149ac2314e1"
      integrity sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==
    
    loader-utils@3.3.1:
      version "3.3.1"
      resolved "https://registry.yarnpkg.com/loader-utils/-/loader-utils-3.3.1.tgz#735b9a19fd63648ca7adbd31c2327dfe281304e5"
      integrity sha512-FMJTLMXfCLMLfJxcX9PFqX5qD88Z5MRGaZCVzfuqeZSPsyiBzs+pahDQjbIWz2QIzPZz0NX9Zy4FX3lmK6YHIg==
    
    loader-utils@^2.0.0:
      version "2.0.4"
      resolved "https://registry.yarnpkg.com/loader-utils/-/loader-utils-2.0.4.tgz#8b5cb38b5c34a9a018ee1fc0e6a066d1dfcc528c"
      integrity sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==
      dependencies:
        big.js "^5.2.2"
        emojis-list "^3.0.0"
        json5 "^2.1.2"
    
    locate-path@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-5.0.0.tgz#1afba396afd676a6d42504d0a67a3a7eb9f62aa0"
      integrity sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==
      dependencies:
        p-locate "^4.1.0"
    
    locate-path@^6.0.0:
      version "6.0.0"
      resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-6.0.0.tgz#55321eb309febbc59c4801d931a72452a681d286"
      integrity sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==
      dependencies:
        p-locate "^5.0.0"
    
    lodash.debounce@^4.0.8:
      version "4.0.8"
      resolved "https://registry.yarnpkg.com/lodash.debounce/-/lodash.debounce-4.0.8.tgz#82d79bff30a67c4005ffd5e2515300ad9ca4d7af"
      integrity sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==
    
    lodash.merge@^4.6.2:
      version "4.6.2"
      resolved "https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a"
      integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==
    
    lodash@^4.17.21:
      version "4.17.21"
      resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
      integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==
    
    log-symbols@^6.0.0:
      version "6.0.0"
      resolved "https://registry.yarnpkg.com/log-symbols/-/log-symbols-6.0.0.tgz#bb95e5f05322651cac30c0feb6404f9f2a8a9439"
      integrity sha512-i24m8rpwhmPIS4zscNzK6MSEhk0DUWa/8iYQWxhffV8jkI4Phvs3F+quL5xvS0gdQR0FyTCMMH33Y78dDTzzIw==
      dependencies:
        chalk "^5.3.0"
        is-unicode-supported "^1.3.0"
    
    log-update@^6.1.0:
      version "6.1.0"
      resolved "https://registry.yarnpkg.com/log-update/-/log-update-6.1.0.tgz#1a04ff38166f94647ae1af562f4bd6a15b1b7cd4"
      integrity sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==
      dependencies:
        ansi-escapes "^7.0.0"
        cli-cursor "^5.0.0"
        slice-ansi "^7.1.0"
        strip-ansi "^7.1.0"
        wrap-ansi "^9.0.0"
    
    log4js@^6.4.1:
      version "6.9.1"
      resolved "https://registry.yarnpkg.com/log4js/-/log4js-6.9.1.tgz#aba5a3ff4e7872ae34f8b4c533706753709e38b6"
      integrity sha512-1somDdy9sChrr9/f4UlzhdaGfDR2c/SaD2a4T7qEkG4jTS57/B3qmnjLYePwQ8cqWnUHZI0iAKxMBpCZICiZ2g==
      dependencies:
        date-format "^4.0.14"
        debug "^4.3.4"
        flatted "^3.2.7"
        rfdc "^1.3.0"
        streamroller "^3.1.5"
    
    lowercase-keys@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/lowercase-keys/-/lowercase-keys-2.0.0.tgz#2603e78b7b4b0006cbca2fbcc8a3202558ac9479"
      integrity sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==
    
    lru-cache@^10.0.1, lru-cache@^10.2.0:
      version "10.4.3"
      resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-10.4.3.tgz#410fc8a17b70e598013df257c2446b7f3383f119"
      integrity sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==
    
    lru-cache@^5.1.1:
      version "5.1.1"
      resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-5.1.1.tgz#1da27e6710271947695daf6848e847f01d84b920"
      integrity sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==
      dependencies:
        yallist "^3.0.2"
    
    luxon@^3.0.0:
      version "3.7.1"
      resolved "https://registry.yarnpkg.com/luxon/-/luxon-3.7.1.tgz#9bd09aa84a56afb00c57ea78a8ec5bd16eb24ec0"
      integrity sha512-RkRWjA926cTvz5rAb1BqyWkKbbjzCGchDUIKMCUvNi17j6f6j8uHGDV82Aqcqtzd+icoYpELmG3ksgGiFNNcNg==
    
    magic-string@0.30.17:
      version "0.30.17"
      resolved "https://registry.yarnpkg.com/magic-string/-/magic-string-0.30.17.tgz#450a449673d2460e5bbcfba9a61916a1714c7453"
      integrity sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==
      dependencies:
        "@jridgewell/sourcemap-codec" "^1.5.0"
    
    make-dir@^2.1.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-2.1.0.tgz#5f0310e18b8be898cc07009295a30ae41e91e6f5"
      integrity sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==
      dependencies:
        pify "^4.0.1"
        semver "^5.6.0"
    
    make-dir@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-4.0.0.tgz#c3c2307a771277cd9638305f915c29ae741b614e"
      integrity sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==
      dependencies:
        semver "^7.5.3"
    
    make-fetch-happen@^14.0.0, make-fetch-happen@^14.0.2, make-fetch-happen@^14.0.3:
      version "14.0.3"
      resolved "https://registry.yarnpkg.com/make-fetch-happen/-/make-fetch-happen-14.0.3.tgz#d74c3ecb0028f08ab604011e0bc6baed483fcdcd"
      integrity sha512-QMjGbFTP0blj97EeidG5hk/QhKQ3T4ICckQGLgz38QF7Vgbk6e6FTARN8KhKxyBbWn8R0HU+bnw8aSoFPD4qtQ==
      dependencies:
        "@npmcli/agent" "^3.0.0"
        cacache "^19.0.1"
        http-cache-semantics "^4.1.1"
        minipass "^7.0.2"
        minipass-fetch "^4.0.0"
        minipass-flush "^1.0.5"
        minipass-pipeline "^1.2.4"
        negotiator "^1.0.0"
        proc-log "^5.0.0"
        promise-retry "^2.0.1"
        ssri "^12.0.0"
    
    math-intrinsics@^1.1.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/math-intrinsics/-/math-intrinsics-1.1.0.tgz#a0dd74be81e2aa5c2f27e65ce283605ee4e2b7f9"
      integrity sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==
    
    media-typer@0.3.0:
      version "0.3.0"
      resolved "https://registry.yarnpkg.com/media-typer/-/media-typer-0.3.0.tgz#8710d7af0aa626f8fffa1ce00168545263255748"
      integrity sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==
    
    memfs@^4.6.0:
      version "4.37.1"
      resolved "https://registry.yarnpkg.com/memfs/-/memfs-4.37.1.tgz#f0e733bf145b86a9c34071e67380426e7fff1f3d"
      integrity sha512-10/gLuR1lnzU17BvXrpVplKs6lQmRtzH/67bar7fwRBEGLCSfK33M8lxN3gT1MdSUmGRRpN8LpIex9c39hAUyQ==
      dependencies:
        "@jsonjoy.com/json-pack" "^1.11.0"
        "@jsonjoy.com/util" "^1.9.0"
        thingies "^2.5.0"
        tree-dump "^1.0.3"
        tslib "^2.0.0"
    
    memoize-one@^6.0.0:
      version "6.0.0"
      resolved "https://registry.yarnpkg.com/memoize-one/-/memoize-one-6.0.0.tgz#b2591b871ed82948aee4727dc6abceeeac8c1045"
      integrity sha512-rkpe71W0N0c0Xz6QD0eJETuWAJGnJ9afsl1srmwPrI+yBCkge5EycXXbYRyvL29zZVUWQCY7InPRCv3GDXuZNw==
    
    merge-descriptors@1.0.3:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/merge-descriptors/-/merge-descriptors-1.0.3.tgz#d80319a65f3c7935351e5cfdac8f9318504dbed5"
      integrity sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==
    
    merge-stream@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz#52823629a14dd00c9770fb6ad47dc6310f2c1f60"
      integrity sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==
    
    merge2@^1.3.0, merge2@^1.4.1:
      version "1.4.1"
      resolved "https://registry.yarnpkg.com/merge2/-/merge2-1.4.1.tgz#4368892f885e907455a6fd7dc55c0c9d404990ae"
      integrity sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==
    
    methods@~1.1.2:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/methods/-/methods-1.1.2.tgz#5529a4d67654134edcc5266656835b0f851afcee"
      integrity sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==
    
    micromatch@^4.0.2, micromatch@^4.0.5, micromatch@^4.0.8:
      version "4.0.8"
      resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-4.0.8.tgz#d66fa18f3a47076789320b9b1af32bd86d9fa202"
      integrity sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==
      dependencies:
        braces "^3.0.3"
        picomatch "^2.3.1"
    
    mime-db@1.52.0:
      version "1.52.0"
      resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.52.0.tgz#bbabcdc02859f4987301c856e3387ce5ec43bf70"
      integrity sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==
    
    "mime-db@>= 1.43.0 < 2":
      version "1.54.0"
      resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.54.0.tgz#cddb3ee4f9c64530dff640236661d42cb6a314f5"
      integrity sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==
    
    mime-match@^1.0.2:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/mime-match/-/mime-match-1.0.2.tgz#3f87c31e9af1a5fd485fb9db134428b23bbb7ba8"
      integrity sha512-VXp/ugGDVh3eCLOBCiHZMYWQaTNUHv2IJrut+yXA6+JbLPXHglHwfS/5A5L0ll+jkCY7fIzRJcH6OIunF+c6Cg==
      dependencies:
        wildcard "^1.1.0"
    
    mime-types@^2.1.27, mime-types@^2.1.31, mime-types@~2.1.17, mime-types@~2.1.24, mime-types@~2.1.34:
      version "2.1.35"
      resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.35.tgz#381a871b62a734450660ae3deee44813f70d959a"
      integrity sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==
      dependencies:
        mime-db "1.52.0"
    
    mime@1.6.0, mime@^1.4.1:
      version "1.6.0"
      resolved "https://registry.yarnpkg.com/mime/-/mime-1.6.0.tgz#32cd9e5c64553bd58d19a568af452acff04981b1"
      integrity sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==
    
    mime@^2.5.2:
      version "2.6.0"
      resolved "https://registry.yarnpkg.com/mime/-/mime-2.6.0.tgz#a2a682a95cd4d0cb1d6257e28f83da7e35800367"
      integrity sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==
    
    mimic-function@^5.0.0:
      version "5.0.1"
      resolved "https://registry.yarnpkg.com/mimic-function/-/mimic-function-5.0.1.tgz#acbe2b3349f99b9deaca7fb70e48b83e94e67076"
      integrity sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==
    
    mimic-response@^1.0.0:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/mimic-response/-/mimic-response-1.0.1.tgz#4923538878eef42063cb8a3e3b0798781487ab1b"
      integrity sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==
    
    mimic-response@^3.1.0:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/mimic-response/-/mimic-response-3.1.0.tgz#2d1d59af9c1b129815accc2c46a022a5ce1fa3c9"
      integrity sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==
    
    mini-css-extract-plugin@2.9.2:
      version "2.9.2"
      resolved "https://registry.yarnpkg.com/mini-css-extract-plugin/-/mini-css-extract-plugin-2.9.2.tgz#966031b468917a5446f4c24a80854b2947503c5b"
      integrity sha512-GJuACcS//jtq4kCtd5ii/M0SZf7OZRH+BxdqXZHaJfb8TJiVl+NgQRPwiYt2EuqeSkNydn/7vP+bcE27C5mb9w==
      dependencies:
        schema-utils "^4.0.0"
        tapable "^2.2.1"
    
    minimalistic-assert@^1.0.0:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz#2e194de044626d4a10e7f7fbc00ce73e83e4d5c7"
      integrity sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==
    
    minimatch@^10.0.3:
      version "10.0.3"
      resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-10.0.3.tgz#cf7a0314a16c4d9ab73a7730a0e8e3c3502d47aa"
      integrity sha512-IPZ167aShDZZUMdRk66cyQAW3qr0WzbHkPdMYa8bzZhlHhO3jALbKdxcaak7W9FfT2rZNpQuUu4Od7ILEpXSaw==
      dependencies:
        "@isaacs/brace-expansion" "^5.0.0"
    
    minimatch@^3.0.4, minimatch@^3.0.5, minimatch@^3.1.1, minimatch@^3.1.2:
      version "3.1.2"
      resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.1.2.tgz#19cd194bfd3e428f049a70817c038d89ab4be35b"
      integrity sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==
      dependencies:
        brace-expansion "^1.1.7"
    
    minimatch@^9.0.4, minimatch@^9.0.5:
      version "9.0.5"
      resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-9.0.5.tgz#d74f9dd6b57d83d8e98cfb82133b03978bc929e5"
      integrity sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==
      dependencies:
        brace-expansion "^2.0.1"
    
    minimist@^1.2.6:
      version "1.2.8"
      resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.8.tgz#c1a464e7693302e082a075cee0c057741ac4772c"
      integrity sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==
    
    minipass-collect@^2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/minipass-collect/-/minipass-collect-2.0.1.tgz#1621bc77e12258a12c60d34e2276ec5c20680863"
      integrity sha512-D7V8PO9oaz7PWGLbCACuI1qEOsq7UKfLotx/C0Aet43fCUB/wfQ7DYeq2oR/svFJGYDHPr38SHATeaj/ZoKHKw==
      dependencies:
        minipass "^7.0.3"
    
    minipass-fetch@^4.0.0:
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/minipass-fetch/-/minipass-fetch-4.0.1.tgz#f2d717d5a418ad0b1a7274f9b913515d3e78f9e5"
      integrity sha512-j7U11C5HXigVuutxebFadoYBbd7VSdZWggSe64NVdvWNBqGAiXPL2QVCehjmw7lY1oF9gOllYbORh+hiNgfPgQ==
      dependencies:
        minipass "^7.0.3"
        minipass-sized "^1.0.3"
        minizlib "^3.0.1"
      optionalDependencies:
        encoding "^0.1.13"
    
    minipass-flush@^1.0.5:
      version "1.0.5"
      resolved "https://registry.yarnpkg.com/minipass-flush/-/minipass-flush-1.0.5.tgz#82e7135d7e89a50ffe64610a787953c4c4cbb373"
      integrity sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==
      dependencies:
        minipass "^3.0.0"
    
    minipass-pipeline@^1.2.4:
      version "1.2.4"
      resolved "https://registry.yarnpkg.com/minipass-pipeline/-/minipass-pipeline-1.2.4.tgz#68472f79711c084657c067c5c6ad93cddea8214c"
      integrity sha512-xuIq7cIOt09RPRJ19gdi4b+RiNvDFYe5JH+ggNvBqGqpQXcru3PcRmOZuHBKWK1Txf9+cQ+HMVN4d6z46LZP7A==
      dependencies:
        minipass "^3.0.0"
    
    minipass-sized@^1.0.3:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/minipass-sized/-/minipass-sized-1.0.3.tgz#70ee5a7c5052070afacfbc22977ea79def353b70"
      integrity sha512-MbkQQ2CTiBMlA2Dm/5cY+9SWFEN8pzzOXi6rlM5Xxq0Yqbda5ZQy9sU75a673FE9ZK0Zsbr6Y5iP6u9nktfg2g==
      dependencies:
        minipass "^3.0.0"
    
    minipass@^3.0.0:
      version "3.3.6"
      resolved "https://registry.yarnpkg.com/minipass/-/minipass-3.3.6.tgz#7bba384db3a1520d18c9c0e5251c3444e95dd94a"
      integrity sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==
      dependencies:
        yallist "^4.0.0"
    
    minipass@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/minipass/-/minipass-5.0.0.tgz#3e9788ffb90b694a5d0ec94479a45b5d8738133d"
      integrity sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==
    
    "minipass@^5.0.0 || ^6.0.2 || ^7.0.0", minipass@^7.0.2, minipass@^7.0.3, minipass@^7.0.4, minipass@^7.1.2:
      version "7.1.2"
      resolved "https://registry.yarnpkg.com/minipass/-/minipass-7.1.2.tgz#93a9626ce5e5e66bd4db86849e7515e92340a707"
      integrity sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==
    
    minizlib@^2.1.1:
      version "2.1.2"
      resolved "https://registry.yarnpkg.com/minizlib/-/minizlib-2.1.2.tgz#e90d3466ba209b932451508a11ce3d3632145931"
      integrity sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==
      dependencies:
        minipass "^3.0.0"
        yallist "^4.0.0"
    
    minizlib@^3.0.1:
      version "3.0.2"
      resolved "https://registry.yarnpkg.com/minizlib/-/minizlib-3.0.2.tgz#f33d638eb279f664439aa38dc5f91607468cb574"
      integrity sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==
      dependencies:
        minipass "^7.1.2"
    
    mkdirp@^0.5.5:
      version "0.5.6"
      resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.6.tgz#7def03d2432dcae4ba1d611445c48396062255f6"
      integrity sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==
      dependencies:
        minimist "^1.2.6"
    
    mkdirp@^1.0.3:
      version "1.0.4"
      resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-1.0.4.tgz#3eb5ed62622756d79a5f0e2a221dfebad75c2f7e"
      integrity sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==
    
    mkdirp@^3.0.1:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-3.0.1.tgz#e44e4c5607fb279c168241713cc6e0fea9adcb50"
      integrity sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==
    
    mrmime@2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/mrmime/-/mrmime-2.0.1.tgz#bc3e87f7987853a54c9850eeb1f1078cd44adddc"
      integrity sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==
    
    ms@2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/ms/-/ms-2.0.0.tgz#5608aeadfc00be6c2901df5f9861788de0d597c8"
      integrity sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==
    
    ms@2.1.3, ms@^2.1.3:
      version "2.1.3"
      resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.3.tgz#574c8138ce1d2b5861f0b44579dbadd60c6615b2"
      integrity sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==
    
    msgpackr-extract@^3.0.2:
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/msgpackr-extract/-/msgpackr-extract-3.0.3.tgz#e9d87023de39ce714872f9e9504e3c1996d61012"
      integrity sha512-P0efT1C9jIdVRefqjzOQ9Xml57zpOXnIuS+csaB4MdZbTdmGDLo8XhzBG1N7aO11gKDDkJvBLULeFTo46wwreA==
      dependencies:
        node-gyp-build-optional-packages "5.2.2"
      optionalDependencies:
        "@msgpackr-extract/msgpackr-extract-darwin-arm64" "3.0.3"
        "@msgpackr-extract/msgpackr-extract-darwin-x64" "3.0.3"
        "@msgpackr-extract/msgpackr-extract-linux-arm" "3.0.3"
        "@msgpackr-extract/msgpackr-extract-linux-arm64" "3.0.3"
        "@msgpackr-extract/msgpackr-extract-linux-x64" "3.0.3"
        "@msgpackr-extract/msgpackr-extract-win32-x64" "3.0.3"
    
    msgpackr@^1.11.2:
      version "1.11.5"
      resolved "https://registry.yarnpkg.com/msgpackr/-/msgpackr-1.11.5.tgz#edf0b9d9cb7d8ed6897dd0e42cfb865a2f4b602e"
      integrity sha512-UjkUHN0yqp9RWKy0Lplhh+wlpdt9oQBYgULZOiFhV3VclSF1JnSQWZ5r9gORQlNYaUKQoR8itv7g7z1xDDuACA==
      optionalDependencies:
        msgpackr-extract "^3.0.2"
    
    multicast-dns@^7.2.5:
      version "7.2.5"
      resolved "https://registry.yarnpkg.com/multicast-dns/-/multicast-dns-7.2.5.tgz#77eb46057f4d7adbd16d9290fa7299f6fa64cced"
      integrity sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==
      dependencies:
        dns-packet "^5.2.2"
        thunky "^1.0.2"
    
    mute-stream@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/mute-stream/-/mute-stream-1.0.0.tgz#e31bd9fe62f0aed23520aa4324ea6671531e013e"
      integrity sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==
    
    mute-stream@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/mute-stream/-/mute-stream-2.0.0.tgz#a5446fc0c512b71c83c44d908d5c7b7b4c493b2b"
      integrity sha512-WWdIxpyjEn+FhQJQQv9aQAYlHoNVdzIzUySNV1gHUPDSdZJ3yZn7pAAbQcV7B56Mvu881q9FZV+0Vx2xC44VWA==
    
    namespace-emitter@^2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/namespace-emitter/-/namespace-emitter-2.0.1.tgz#978d51361c61313b4e6b8cf6f3853d08dfa2b17c"
      integrity sha512-N/sMKHniSDJBjfrkbS/tpkPj4RAbvW3mr8UAzvlMHyun93XEm83IAvhWtJVHo+RHn/oO8Job5YN4b+wRjSVp5g==
    
    nanoid@^3.3.11, nanoid@^3.3.8:
      version "3.3.11"
      resolved "https://registry.yarnpkg.com/nanoid/-/nanoid-3.3.11.tgz#4f4f112cefbe303202f2199838128936266d185b"
      integrity sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==
    
    nanoid@^4.0.0:
      version "4.0.2"
      resolved "https://registry.yarnpkg.com/nanoid/-/nanoid-4.0.2.tgz#140b3c5003959adbebf521c170f282c5e7f9fb9e"
      integrity sha512-7ZtY5KTCNheRGfEFxnedV5zFiORN1+Y1N6zvPTnHQd8ENUvfaDBeuJDZb2bN/oXwXxu3qkTXDzy57W5vAmDTBw==
    
    natural-compare@^1.4.0:
      version "1.4.0"
      resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
      integrity sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==
    
    needle@^3.1.0:
      version "3.3.1"
      resolved "https://registry.yarnpkg.com/needle/-/needle-3.3.1.tgz#63f75aec580c2e77e209f3f324e2cdf3d29bd049"
      integrity sha512-6k0YULvhpw+RoLNiQCRKOl09Rv1dPLr8hHnVjHqdolKwDrdNyk+Hmrthi4lIGPPz3r39dLx0hsF5s40sZ3Us4Q==
      dependencies:
        iconv-lite "^0.6.3"
        sax "^1.2.4"
    
    negotiator@0.6.3:
      version "0.6.3"
      resolved "https://registry.yarnpkg.com/negotiator/-/negotiator-0.6.3.tgz#58e323a72fedc0d6f9cd4d31fe49f51479590ccd"
      integrity sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==
    
    negotiator@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/negotiator/-/negotiator-1.0.0.tgz#b6c91bb47172d69f93cfd7c357bbb529019b5f6a"
      integrity sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==
    
    negotiator@~0.6.4:
      version "0.6.4"
      resolved "https://registry.yarnpkg.com/negotiator/-/negotiator-0.6.4.tgz#777948e2452651c570b712dd01c23e262713fff7"
      integrity sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==
    
    neo-async@^2.6.2:
      version "2.6.2"
      resolved "https://registry.yarnpkg.com/neo-async/-/neo-async-2.6.2.tgz#b4aafb93e3aeb2d8174ca53cf163ab7d7308305f"
      integrity sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==
    
    ng-zorro-antd@~20.0.0:
      version "20.0.0"
      resolved "https://registry.yarnpkg.com/ng-zorro-antd/-/ng-zorro-antd-20.0.0.tgz#d0093f1499ca5dedb9f3893575afe723cf2f8f49"
      integrity sha512-12cQq+JaoBdMtKO+JsDHXdfzFIiF0ocDJ4KSsypzupsUTVJa8/jpfPKnW8b8HZ5aY6scPtnPWKJ/uIrJ/Bwn6A==
      dependencies:
        "@angular/cdk" "^20.0.0"
        "@ant-design/icons-angular" "^20.0.0"
        "@ctrl/tinycolor" "^3.6.0"
        date-fns "^2.16.1"
        tslib "^2.3.0"
    
    node-addon-api@^6.1.0:
      version "6.1.0"
      resolved "https://registry.yarnpkg.com/node-addon-api/-/node-addon-api-6.1.0.tgz#ac8470034e58e67d0c6f1204a18ae6995d9c0d76"
      integrity sha512-+eawOlIgy680F0kBzPUNFhMZGtJ1YmqM6l4+Crf4IkImjYrO/mqPwRMh352g23uIaQKFItcQ64I7KMaJxHgAVA==
    
    node-addon-api@^7.0.0:
      version "7.1.1"
      resolved "https://registry.yarnpkg.com/node-addon-api/-/node-addon-api-7.1.1.tgz#1aba6693b0f255258a049d621329329322aad558"
      integrity sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==
    
    node-fetch@^2.6.7:
      version "2.7.0"
      resolved "https://registry.yarnpkg.com/node-fetch/-/node-fetch-2.7.0.tgz#d0f0fa6e3e2dc1d27efcd8ad99d550bda94d187d"
      integrity sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==
      dependencies:
        whatwg-url "^5.0.0"
    
    node-forge@^1:
      version "1.3.1"
      resolved "https://registry.yarnpkg.com/node-forge/-/node-forge-1.3.1.tgz#be8da2af243b2417d5f646a770663a92b7e9ded3"
      integrity sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==
    
    node-gyp-build-optional-packages@5.2.2:
      version "5.2.2"
      resolved "https://registry.yarnpkg.com/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.2.2.tgz#522f50c2d53134d7f3a76cd7255de4ab6c96a3a4"
      integrity sha512-s+w+rBWnpTMwSFbaE0UXsRlg7hU4FjekKU4eyAih5T8nJuNZT1nNsskXpxmeqSK9UzkBl6UgRlnKc8hz8IEqOw==
      dependencies:
        detect-libc "^2.0.1"
    
    node-gyp@^11.0.0:
      version "11.4.1"
      resolved "https://registry.yarnpkg.com/node-gyp/-/node-gyp-11.4.1.tgz#b4ce9597e71d4e59efb3d4cdae2af8338151b2c4"
      integrity sha512-GiVxQ1e4TdZSSVmFDYUn6uUsrEUP68pa8C/xBzCfL/FcLHa4reWrxxTP7tRGhNdviYrNsL5kRolBL5LNYEutCw==
      dependencies:
        env-paths "^2.2.0"
        exponential-backoff "^3.1.1"
        graceful-fs "^4.2.6"
        make-fetch-happen "^14.0.3"
        nopt "^8.0.0"
        proc-log "^5.0.0"
        semver "^7.3.5"
        tar "^7.4.3"
        tinyglobby "^0.2.12"
        which "^5.0.0"
    
    node-releases@^2.0.19:
      version "2.0.19"
      resolved "https://registry.yarnpkg.com/node-releases/-/node-releases-2.0.19.tgz#9e445a52950951ec4d177d843af370b411caf314"
      integrity sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==
    
    nopt@^8.0.0:
      version "8.1.0"
      resolved "https://registry.yarnpkg.com/nopt/-/nopt-8.1.0.tgz#b11d38caf0f8643ce885818518064127f602eae3"
      integrity sha512-ieGu42u/Qsa4TFktmaKEwM6MQH0pOWnaB3htzh0JRtx84+Mebc0cbZYN5bC+6WTZ4+77xrL9Pn5m7CV6VIkV7A==
      dependencies:
        abbrev "^3.0.0"
    
    normalize-path@^3.0.0, normalize-path@~3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-3.0.0.tgz#0dcd69ff23a1c9b11fd0978316644a0388216a65"
      integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==
    
    normalize-range@^0.1.2:
      version "0.1.2"
      resolved "https://registry.yarnpkg.com/normalize-range/-/normalize-range-0.1.2.tgz#2d10c06bdfd312ea9777695a4d28439456b75942"
      integrity sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==
    
    normalize-url@^6.0.1:
      version "6.1.0"
      resolved "https://registry.yarnpkg.com/normalize-url/-/normalize-url-6.1.0.tgz#40d0885b535deffe3f3147bec877d05fe4c5668a"
      integrity sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==
    
    npm-bundled@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/npm-bundled/-/npm-bundled-4.0.0.tgz#f5b983f053fe7c61566cf07241fab2d4e9d513d3"
      integrity sha512-IxaQZDMsqfQ2Lz37VvyyEtKLe8FsRZuysmedy/N06TU1RyVppYKXrO4xIhR0F+7ubIBox6Q7nir6fQI3ej39iA==
      dependencies:
        npm-normalize-package-bin "^4.0.0"
    
    npm-install-checks@^7.1.0:
      version "7.1.1"
      resolved "https://registry.yarnpkg.com/npm-install-checks/-/npm-install-checks-7.1.1.tgz#e9d679fc8a1944c75cdcc96478a22f9d0f763632"
      integrity sha512-u6DCwbow5ynAX5BdiHQ9qvexme4U3qHW3MWe5NqH+NeBm0LbiH6zvGjNNew1fY+AZZUtVHbOPF3j7mJxbUzpXg==
      dependencies:
        semver "^7.1.1"
    
    npm-normalize-package-bin@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/npm-normalize-package-bin/-/npm-normalize-package-bin-4.0.0.tgz#df79e70cd0a113b77c02d1fe243c96b8e618acb1"
      integrity sha512-TZKxPvItzai9kN9H/TkmCtx/ZN/hvr3vUycjlfmH0ootY9yFBzNOpiXAdIn1Iteqsvk4lQn6B5PTrt+n6h8k/w==
    
    npm-package-arg@12.0.2, npm-package-arg@^12.0.0:
      version "12.0.2"
      resolved "https://registry.yarnpkg.com/npm-package-arg/-/npm-package-arg-12.0.2.tgz#3b1e04ebe651cc45028e298664e8c15ce9c0ca40"
      integrity sha512-f1NpFjNI9O4VbKMOlA5QoBq/vSQPORHcTZ2feJpFkTHJ9eQkdlmZEKSjcAhxTGInC7RlEyScT9ui67NaOsjFWA==
      dependencies:
        hosted-git-info "^8.0.0"
        proc-log "^5.0.0"
        semver "^7.3.5"
        validate-npm-package-name "^6.0.0"
    
    npm-packlist@^10.0.0:
      version "10.0.1"
      resolved "https://registry.yarnpkg.com/npm-packlist/-/npm-packlist-10.0.1.tgz#236853e6ebff06e70fedd7a6a054f553afe19023"
      integrity sha512-vaC03b2PqJA6QqmwHi1jNU8fAPXEnnyv4j/W4PVfgm24C4/zZGSVut3z0YUeN0WIFCo1oGOL02+6LbvFK7JL4Q==
      dependencies:
        ignore-walk "^8.0.0"
    
    npm-pick-manifest@10.0.0, npm-pick-manifest@^10.0.0:
      version "10.0.0"
      resolved "https://registry.yarnpkg.com/npm-pick-manifest/-/npm-pick-manifest-10.0.0.tgz#6cc120c6473ceea56dfead500f00735b2b892851"
      integrity sha512-r4fFa4FqYY8xaM7fHecQ9Z2nE9hgNfJR+EmoKv0+chvzWkBcORX3r0FpTByP+CbOVJDladMXnPQGVN8PBLGuTQ==
      dependencies:
        npm-install-checks "^7.1.0"
        npm-normalize-package-bin "^4.0.0"
        npm-package-arg "^12.0.0"
        semver "^7.3.5"
    
    npm-registry-fetch@^18.0.0:
      version "18.0.2"
      resolved "https://registry.yarnpkg.com/npm-registry-fetch/-/npm-registry-fetch-18.0.2.tgz#340432f56b5a8b1af068df91aae0435d2de646b5"
      integrity sha512-LeVMZBBVy+oQb5R6FDV9OlJCcWDU+al10oKpe+nsvcHnG24Z3uM3SvJYKfGJlfGjVU8v9liejCrUR/M5HO5NEQ==
      dependencies:
        "@npmcli/redact" "^3.0.0"
        jsonparse "^1.3.1"
        make-fetch-happen "^14.0.0"
        minipass "^7.0.2"
        minipass-fetch "^4.0.0"
        minizlib "^3.0.1"
        npm-package-arg "^12.0.0"
        proc-log "^5.0.0"
    
    nth-check@^2.0.1:
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/nth-check/-/nth-check-2.1.1.tgz#c9eab428effce36cd6b92c924bdb000ef1f1ed1d"
      integrity sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==
      dependencies:
        boolbase "^1.0.0"
    
    object-assign@^4:
      version "4.1.1"
      resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"
      integrity sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==
    
    object-inspect@^1.13.3:
      version "1.13.4"
      resolved "https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.13.4.tgz#8375265e21bc20d0fa582c22e1b13485d6e00213"
      integrity sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==
    
    obuf@^1.0.0, obuf@^1.1.2:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/obuf/-/obuf-1.1.2.tgz#09bea3343d41859ebd446292d11c9d4db619084e"
      integrity sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==
    
    on-finished@2.4.1, on-finished@^2.4.1:
      version "2.4.1"
      resolved "https://registry.yarnpkg.com/on-finished/-/on-finished-2.4.1.tgz#58c8c44116e54845ad57f14ab10b03533184ac3f"
      integrity sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==
      dependencies:
        ee-first "1.1.1"
    
    on-finished@~2.3.0:
      version "2.3.0"
      resolved "https://registry.yarnpkg.com/on-finished/-/on-finished-2.3.0.tgz#20f1336481b083cd75337992a16971aa2d906947"
      integrity sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==
      dependencies:
        ee-first "1.1.1"
    
    on-headers@~1.1.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/on-headers/-/on-headers-1.1.0.tgz#59da4f91c45f5f989c6e4bcedc5a3b0aed70ff65"
      integrity sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==
    
    once@^1.3.0, once@^1.3.1, once@^1.4.0:
      version "1.4.0"
      resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
      integrity sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==
      dependencies:
        wrappy "1"
    
    onetime@^7.0.0:
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/onetime/-/onetime-7.0.0.tgz#9f16c92d8c9ef5120e3acd9dd9957cceecc1ab60"
      integrity sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==
      dependencies:
        mimic-function "^5.0.0"
    
    open@10.1.2:
      version "10.1.2"
      resolved "https://registry.yarnpkg.com/open/-/open-10.1.2.tgz#d5df40984755c9a9c3c93df8156a12467e882925"
      integrity sha512-cxN6aIDPz6rm8hbebcP7vrQNhvRcveZoJU72Y7vskh4oIm+BZwBECnx5nTmrlres1Qapvx27Qo1Auukpf8PKXw==
      dependencies:
        default-browser "^5.2.1"
        define-lazy-prop "^3.0.0"
        is-inside-container "^1.0.0"
        is-wsl "^3.1.0"
    
    open@^10.0.3:
      version "10.2.0"
      resolved "https://registry.yarnpkg.com/open/-/open-10.2.0.tgz#b9d855be007620e80b6fb05fac98141fe62db73c"
      integrity sha512-YgBpdJHPyQ2UE5x+hlSXcnejzAvD0b22U2OuAP+8OnlJT+PjWPxtgmGqKKc+RgTM63U9gN0YzrYc71R2WT/hTA==
      dependencies:
        default-browser "^5.2.1"
        define-lazy-prop "^3.0.0"
        is-inside-container "^1.0.0"
        wsl-utils "^0.1.0"
    
    optionator@^0.9.3:
      version "0.9.4"
      resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.9.4.tgz#7ea1c1a5d91d764fb282139c88fe11e182a3a734"
      integrity sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==
      dependencies:
        deep-is "^0.1.3"
        fast-levenshtein "^2.0.6"
        levn "^0.4.1"
        prelude-ls "^1.2.1"
        type-check "^0.4.0"
        word-wrap "^1.2.5"
    
    ora@8.2.0:
      version "8.2.0"
      resolved "https://registry.yarnpkg.com/ora/-/ora-8.2.0.tgz#8fbbb7151afe33b540dd153f171ffa8bd38e9861"
      integrity sha512-weP+BZ8MVNnlCm8c0Qdc1WSWq4Qn7I+9CJGm7Qali6g44e/PUzbjNqJX5NJ9ljlNMosfJvg1fKEGILklK9cwnw==
      dependencies:
        chalk "^5.3.0"
        cli-cursor "^5.0.0"
        cli-spinners "^2.9.2"
        is-interactive "^2.0.0"
        is-unicode-supported "^2.0.0"
        log-symbols "^6.0.0"
        stdin-discarder "^0.2.2"
        string-width "^7.2.0"
        strip-ansi "^7.1.0"
    
    ordered-binary@^1.5.3:
      version "1.6.0"
      resolved "https://registry.yarnpkg.com/ordered-binary/-/ordered-binary-1.6.0.tgz#9c490dadc0b1336ca6917d8d41dd474b8c0bff32"
      integrity sha512-IQh2aMfMIDbPjI/8a3Edr+PiOpcsB7yo8NdW7aHWVaoR/pcDldunMvnnwbk/auPGqmKeAdxtZl7MHX/QmPwhvQ==
    
    p-cancelable@^2.0.0:
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/p-cancelable/-/p-cancelable-2.1.1.tgz#aab7fbd416582fa32a3db49859c122487c5ed2cf"
      integrity sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==
    
    p-limit@^2.2.0:
      version "2.3.0"
      resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-2.3.0.tgz#3dd33c647a214fdfffd835933eb086da0dc21db1"
      integrity sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
      dependencies:
        p-try "^2.0.0"
    
    p-limit@^3.0.2:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-3.1.0.tgz#e1daccbe78d0d1388ca18c64fea38e3e57e3706b"
      integrity sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==
      dependencies:
        yocto-queue "^0.1.0"
    
    p-locate@^4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-4.1.0.tgz#a3428bb7088b3a60292f66919278b7c297ad4f07"
      integrity sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==
      dependencies:
        p-limit "^2.2.0"
    
    p-locate@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-5.0.0.tgz#83c8315c6785005e3bd021839411c9e110e6d834"
      integrity sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==
      dependencies:
        p-limit "^3.0.2"
    
    p-map@^7.0.2:
      version "7.0.3"
      resolved "https://registry.yarnpkg.com/p-map/-/p-map-7.0.3.tgz#7ac210a2d36f81ec28b736134810f7ba4418cdb6"
      integrity sha512-VkndIv2fIB99swvQoA65bm+fsmt6UNdGeIB0oxBs+WhAhdh08QA04JXpI7rbB9r08/nkbysKoya9rtDERYOYMA==
    
    p-queue@^7.3.4:
      version "7.4.1"
      resolved "https://registry.yarnpkg.com/p-queue/-/p-queue-7.4.1.tgz#7f86f853048beca8272abdbb7cec1ed2afc0f265"
      integrity sha512-vRpMXmIkYF2/1hLBKisKeVYJZ8S2tZ0zEAmIJgdVKP2nq0nh4qCdf8bgw+ZgKrkh71AOCaqzwbJJk1WtdcF3VA==
      dependencies:
        eventemitter3 "^5.0.1"
        p-timeout "^5.0.2"
    
    p-retry@^6.1.0, p-retry@^6.2.0:
      version "6.2.1"
      resolved "https://registry.yarnpkg.com/p-retry/-/p-retry-6.2.1.tgz#81828f8dc61c6ef5a800585491572cc9892703af"
      integrity sha512-hEt02O4hUct5wtwg4H4KcWgDdm+l1bOaEy/hWzd8xtXB9BqxTWBBhb+2ImAtH4Cv4rPjV76xN3Zumqk3k3AhhQ==
      dependencies:
        "@types/retry" "0.12.2"
        is-network-error "^1.0.0"
        retry "^0.13.1"
    
    p-timeout@^5.0.2:
      version "5.1.0"
      resolved "https://registry.yarnpkg.com/p-timeout/-/p-timeout-5.1.0.tgz#b3c691cf4415138ce2d9cfe071dba11f0fee085b"
      integrity sha512-auFDyzzzGZZZdHz3BtET9VEz0SE/uMEAx7uWfGPucfzEwwe/xH0iVeZibQmANYE/hp9T2+UUZT5m+BKyrDp3Ew==
    
    p-try@^2.0.0:
      version "2.2.0"
      resolved "https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6"
      integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==
    
    package-json-from-dist@^1.0.0:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz#4f1471a010827a86f94cfd9b0727e36d267de505"
      integrity sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==
    
    pacote@21.0.0:
      version "21.0.0"
      resolved "https://registry.yarnpkg.com/pacote/-/pacote-21.0.0.tgz#5fe3878a9f808ca5c455c4c1d8ca46eb13351f7b"
      integrity sha512-lcqexq73AMv6QNLo7SOpz0JJoaGdS3rBFgF122NZVl1bApo2mfu+XzUBU/X/XsiJu+iUmKpekRayqQYAs+PhkA==
      dependencies:
        "@npmcli/git" "^6.0.0"
        "@npmcli/installed-package-contents" "^3.0.0"
        "@npmcli/package-json" "^6.0.0"
        "@npmcli/promise-spawn" "^8.0.0"
        "@npmcli/run-script" "^9.0.0"
        cacache "^19.0.0"
        fs-minipass "^3.0.0"
        minipass "^7.0.2"
        npm-package-arg "^12.0.0"
        npm-packlist "^10.0.0"
        npm-pick-manifest "^10.0.0"
        npm-registry-fetch "^18.0.0"
        proc-log "^5.0.0"
        promise-retry "^2.0.1"
        sigstore "^3.0.0"
        ssri "^12.0.0"
        tar "^6.1.11"
    
    parent-module@^1.0.0:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/parent-module/-/parent-module-1.0.1.tgz#691d2709e78c79fae3a156622452d00762caaaa2"
      integrity sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==
      dependencies:
        callsites "^3.0.0"
    
    parse-json@^5.2.0:
      version "5.2.0"
      resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd"
      integrity sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==
      dependencies:
        "@babel/code-frame" "^7.0.0"
        error-ex "^1.3.1"
        json-parse-even-better-errors "^2.3.0"
        lines-and-columns "^1.1.6"
    
    parse-node-version@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/parse-node-version/-/parse-node-version-1.0.1.tgz#e2b5dbede00e7fa9bc363607f53327e8b073189b"
      integrity sha512-3YHlOa/JgH6Mnpr05jP9eDG254US9ek25LyIxZlDItp2iJtwyaXQb57lBYLdT3MowkUFYEV2XXNAYIPlESvJlA==
    
    parse5-html-rewriting-stream@7.1.0:
      version "7.1.0"
      resolved "https://registry.yarnpkg.com/parse5-html-rewriting-stream/-/parse5-html-rewriting-stream-7.1.0.tgz#ac64eb98ed3681b8b1e514ef22284557a66f2ad9"
      integrity sha512-2ifK6Jb+ONoqOy5f+cYHsqvx1obHQdvIk13Jmt/5ezxP0U9p+fqd+R6O73KblGswyuzBYfetmsfK9ThMgnuPPg==
      dependencies:
        entities "^6.0.0"
        parse5 "^7.0.0"
        parse5-sax-parser "^7.0.0"
    
    parse5-sax-parser@^7.0.0:
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/parse5-sax-parser/-/parse5-sax-parser-7.0.0.tgz#4c05064254f0488676aca75fb39ca069ec96dee5"
      integrity sha512-5A+v2SNsq8T6/mG3ahcz8ZtQ0OUFTatxPbeidoMB7tkJSGDY3tdfl4MHovtLQHkEn5CGxijNWRQHhRQ6IRpXKg==
      dependencies:
        parse5 "^7.0.0"
    
    parse5@^7.0.0:
      version "7.3.0"
      resolved "https://registry.yarnpkg.com/parse5/-/parse5-7.3.0.tgz#d7e224fa72399c7a175099f45fc2ad024b05ec05"
      integrity sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==
      dependencies:
        entities "^6.0.0"
    
    parse5@^8.0.0:
      version "8.0.0"
      resolved "https://registry.yarnpkg.com/parse5/-/parse5-8.0.0.tgz#aceb267f6b15f9b6e6ba9e35bfdd481fc2167b12"
      integrity sha512-9m4m5GSgXjL4AjumKzq1Fgfp3Z8rsvjRNbnkVwfu2ImRqE5D0LnY2QfDen18FSY9C573YU5XxSapdHZTZ2WolA==
      dependencies:
        entities "^6.0.0"
    
    parseurl@~1.3.2, parseurl@~1.3.3:
      version "1.3.3"
      resolved "https://registry.yarnpkg.com/parseurl/-/parseurl-1.3.3.tgz#9da19e7bee8d12dff0513ed5b76957793bc2e8d4"
      integrity sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==
    
    path-exists@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3"
      integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==
    
    path-is-absolute@^1.0.0:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
      integrity sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==
    
    path-key@^3.1.0:
      version "3.1.1"
      resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
      integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
    
    path-parse@^1.0.7:
      version "1.0.7"
      resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735"
      integrity sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==
    
    path-scurry@^1.11.1:
      version "1.11.1"
      resolved "https://registry.yarnpkg.com/path-scurry/-/path-scurry-1.11.1.tgz#7960a668888594a0720b12a911d1a742ab9f11d2"
      integrity sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==
      dependencies:
        lru-cache "^10.2.0"
        minipass "^5.0.0 || ^6.0.2 || ^7.0.0"
    
    path-to-regexp@0.1.12:
      version "0.1.12"
      resolved "https://registry.yarnpkg.com/path-to-regexp/-/path-to-regexp-0.1.12.tgz#d5e1a12e478a976d432ef3c58d534b9923164bb7"
      integrity sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==
    
    path-type@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/path-type/-/path-type-4.0.0.tgz#84ed01c0a7ba380afe09d90a8c180dcd9d03043b"
      integrity sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==
    
    picocolors@^1.1.1:
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/picocolors/-/picocolors-1.1.1.tgz#3d321af3eab939b083c8f929a1d12cda81c26b6b"
      integrity sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==
    
    picomatch@4.0.2:
      version "4.0.2"
      resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-4.0.2.tgz#77c742931e8f3b8820946c76cd0c1f13730d1dab"
      integrity sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==
    
    picomatch@4.0.3, picomatch@^4.0.2:
      version "4.0.3"
      resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-4.0.3.tgz#796c76136d1eead715db1e7bad785dedd695a042"
      integrity sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==
    
    picomatch@^2.0.4, picomatch@^2.2.1, picomatch@^2.3.1:
      version "2.3.1"
      resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.1.tgz#3ba3833733646d9d3e4995946c1365a67fb07a42"
      integrity sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==
    
    pify@^4.0.1:
      version "4.0.1"
      resolved "https://registry.yarnpkg.com/pify/-/pify-4.0.1.tgz#4b2cd25c50d598735c50292224fd8c6df41e3231"
      integrity sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==
    
    piscina@5.1.1:
      version "5.1.1"
      resolved "https://registry.yarnpkg.com/piscina/-/piscina-5.1.1.tgz#7a34e080d0500b3b7a56d0b3f37d8a00ec4d60fe"
      integrity sha512-9rPDIPsCwOivatEZGM8+apgM7AiTDLSnpwMmLaSmdm2PeND8bFJzZLZZxyrJjLH8Xx/MpKoVaKf+vZOWALNHbw==
      optionalDependencies:
        "@napi-rs/nice" "^1.0.1"
    
    pngjs@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/pngjs/-/pngjs-5.0.0.tgz#e79dd2b215767fd9c04561c01236df960bce7fbb"
      integrity sha512-40QW5YalBNfQo5yRYmiw7Yz6TKKVr3h6970B2YE+3fQpsWcrbj1PzJgxeJ19DRQjhMbKPIuMY8rFaXc8moolVw==
    
    postcss-loader@8.1.1:
      version "8.1.1"
      resolved "https://registry.yarnpkg.com/postcss-loader/-/postcss-loader-8.1.1.tgz#2822589e7522927344954acb55bbf26e8b195dfe"
      integrity sha512-0IeqyAsG6tYiDRCYKQJLAmgQr47DX6N7sFSWvQxt6AcupX8DIdmykuk/o/tx0Lze3ErGHJEp5OSRxrelC6+NdQ==
      dependencies:
        cosmiconfig "^9.0.0"
        jiti "^1.20.0"
        semver "^7.5.4"
    
    postcss-media-query-parser@^0.2.3:
      version "0.2.3"
      resolved "https://registry.yarnpkg.com/postcss-media-query-parser/-/postcss-media-query-parser-0.2.3.tgz#27b39c6f4d94f81b1a73b8f76351c609e5cef244"
      integrity sha512-3sOlxmbKcSHMjlUXQZKQ06jOswE7oVkXPxmZdoB1r5l0q6gTFTQSHxNxOrCccElbW7dxNytifNEo8qidX2Vsig==
    
    postcss-modules-extract-imports@^3.1.0:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/postcss-modules-extract-imports/-/postcss-modules-extract-imports-3.1.0.tgz#b4497cb85a9c0c4b5aabeb759bb25e8d89f15002"
      integrity sha512-k3kNe0aNFQDAZGbin48pL2VNidTF0w4/eASDsxlyspobzU3wZQLOGj7L9gfRe0Jo9/4uud09DsjFNH7winGv8Q==
    
    postcss-modules-local-by-default@^4.0.5:
      version "4.2.0"
      resolved "https://registry.yarnpkg.com/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.2.0.tgz#d150f43837831dae25e4085596e84f6f5d6ec368"
      integrity sha512-5kcJm/zk+GJDSfw+V/42fJ5fhjL5YbFDl8nVdXkJPLLW+Vf9mTD5Xe0wqIaDnLuL2U6cDNpTr+UQ+v2HWIBhzw==
      dependencies:
        icss-utils "^5.0.0"
        postcss-selector-parser "^7.0.0"
        postcss-value-parser "^4.1.0"
    
    postcss-modules-scope@^3.2.0:
      version "3.2.1"
      resolved "https://registry.yarnpkg.com/postcss-modules-scope/-/postcss-modules-scope-3.2.1.tgz#1bbccddcb398f1d7a511e0a2d1d047718af4078c"
      integrity sha512-m9jZstCVaqGjTAuny8MdgE88scJnCiQSlSrOWcTQgM2t32UBe+MUmFSO5t7VMSfAf/FJKImAxBav8ooCHJXCJA==
      dependencies:
        postcss-selector-parser "^7.0.0"
    
    postcss-modules-values@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/postcss-modules-values/-/postcss-modules-values-4.0.0.tgz#d7c5e7e68c3bb3c9b27cbf48ca0bb3ffb4602c9c"
      integrity sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==
      dependencies:
        icss-utils "^5.0.0"
    
    postcss-selector-parser@^7.0.0:
      version "7.1.0"
      resolved "https://registry.yarnpkg.com/postcss-selector-parser/-/postcss-selector-parser-7.1.0.tgz#4d6af97eba65d73bc4d84bcb343e865d7dd16262"
      integrity sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==
      dependencies:
        cssesc "^3.0.0"
        util-deprecate "^1.0.2"
    
    postcss-value-parser@^4.1.0, postcss-value-parser@^4.2.0:
      version "4.2.0"
      resolved "https://registry.yarnpkg.com/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz#723c09920836ba6d3e5af019f92bc0971c02e514"
      integrity sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==
    
    postcss@8.5.3:
      version "8.5.3"
      resolved "https://registry.yarnpkg.com/postcss/-/postcss-8.5.3.tgz#1463b6f1c7fb16fe258736cba29a2de35237eafb"
      integrity sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==
      dependencies:
        nanoid "^3.3.8"
        picocolors "^1.1.1"
        source-map-js "^1.2.1"
    
    postcss@^8.2.14, postcss@^8.4.33, postcss@^8.4.49, postcss@^8.5.3:
      version "8.5.6"
      resolved "https://registry.yarnpkg.com/postcss/-/postcss-8.5.6.tgz#2825006615a619b4f62a9e7426cc120b349a8f3c"
      integrity sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==
      dependencies:
        nanoid "^3.3.11"
        picocolors "^1.1.1"
        source-map-js "^1.2.1"
    
    preact@^10.5.13:
      version "10.27.1"
      resolved "https://registry.yarnpkg.com/preact/-/preact-10.27.1.tgz#c391dcad5813b67d9e04655d844d8fdc307d4252"
      integrity sha512-V79raXEWch/rbqoNc7nT9E4ep7lu+mI3+sBmfRD4i1M73R3WLYcCtdI0ibxGVf4eQL8ZIz2nFacqEC+rmnOORQ==
    
    prelude-ls@^1.2.1:
      version "1.2.1"
      resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.2.1.tgz#debc6489d7a6e6b0e7611888cec880337d316396"
      integrity sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==
    
    proc-log@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/proc-log/-/proc-log-5.0.0.tgz#e6c93cf37aef33f835c53485f314f50ea906a9d8"
      integrity sha512-Azwzvl90HaF0aCz1JrDdXQykFakSSNPaPoiZ9fm5qJIMHioDZEi7OAdRwSm6rSoPtY3Qutnm3L7ogmg3dc+wbQ==
    
    process-nextick-args@~2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz#7820d9b16120cc55ca9ae7792680ae7dba6d7fe2"
      integrity sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==
    
    promise-retry@^2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/promise-retry/-/promise-retry-2.0.1.tgz#ff747a13620ab57ba688f5fc67855410c370da22"
      integrity sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==
      dependencies:
        err-code "^2.0.2"
        retry "^0.12.0"
    
    proxy-addr@~2.0.7:
      version "2.0.7"
      resolved "https://registry.yarnpkg.com/proxy-addr/-/proxy-addr-2.0.7.tgz#f19fe69ceab311eeb94b42e70e8c2070f9ba1025"
      integrity sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==
      dependencies:
        forwarded "0.2.0"
        ipaddr.js "1.9.1"
    
    prr@~1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/prr/-/prr-1.0.1.tgz#d3fc114ba06995a45ec6893f484ceb1d78f5f476"
      integrity sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw==
    
    psl@^1.1.33:
      version "1.15.0"
      resolved "https://registry.yarnpkg.com/psl/-/psl-1.15.0.tgz#bdace31896f1d97cec6a79e8224898ce93d974c6"
      integrity sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==
      dependencies:
        punycode "^2.3.1"
    
    pump@^3.0.0:
      version "3.0.3"
      resolved "https://registry.yarnpkg.com/pump/-/pump-3.0.3.tgz#151d979f1a29668dc0025ec589a455b53282268d"
      integrity sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==
      dependencies:
        end-of-stream "^1.1.0"
        once "^1.3.1"
    
    punycode@^1.4.1:
      version "1.4.1"
      resolved "https://registry.yarnpkg.com/punycode/-/punycode-1.4.1.tgz#c0d5a63b2718800ad8e1eb0fa5269c84dd41845e"
      integrity sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ==
    
    punycode@^2.1.0, punycode@^2.1.1, punycode@^2.3.1:
      version "2.3.1"
      resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.3.1.tgz#027422e2faec0b25e1549c3e1bd8309b9133b6e5"
      integrity sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==
    
    qjobs@^1.2.0:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/qjobs/-/qjobs-1.2.0.tgz#c45e9c61800bd087ef88d7e256423bdd49e5d071"
      integrity sha512-8YOJEHtxpySA3fFDyCRxA+UUV+fA+rTWnuWvylOK/NCjhY+b4ocCtmu8TtsWb+mYeU+GCHf/S66KZF/AsteKHg==
    
    qrcode@1.5.4:
      version "1.5.4"
      resolved "https://registry.yarnpkg.com/qrcode/-/qrcode-1.5.4.tgz#5cb81d86eb57c675febb08cf007fff963405da88"
      integrity sha512-1ca71Zgiu6ORjHqFBDpnSMTR2ReToX4l1Au1VFLyVeBTFavzQnv5JxMFr3ukHVKpSrSA2MCk0lNJSykjUfz7Zg==
      dependencies:
        dijkstrajs "^1.0.1"
        pngjs "^5.0.0"
        yargs "^15.3.1"
    
    qs@6.13.0:
      version "6.13.0"
      resolved "https://registry.yarnpkg.com/qs/-/qs-6.13.0.tgz#6ca3bd58439f7e245655798997787b0d88a51906"
      integrity sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==
      dependencies:
        side-channel "^1.0.6"
    
    querystringify@^2.1.1:
      version "2.2.0"
      resolved "https://registry.yarnpkg.com/querystringify/-/querystringify-2.2.0.tgz#3345941b4153cb9d082d8eee4cda2016a9aef7f6"
      integrity sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==
    
    queue-microtask@^1.2.2:
      version "1.2.3"
      resolved "https://registry.yarnpkg.com/queue-microtask/-/queue-microtask-1.2.3.tgz#4929228bbc724dfac43e0efb058caf7b6cfb6243"
      integrity sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==
    
    quick-lru@^5.1.1:
      version "5.1.1"
      resolved "https://registry.yarnpkg.com/quick-lru/-/quick-lru-5.1.1.tgz#366493e6b3e42a3a6885e2e99d18f80fb7a8c932"
      integrity sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==
    
    randombytes@^2.1.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/randombytes/-/randombytes-2.1.0.tgz#df6f84372f0270dc65cdf6291349ab7a473d4f2a"
      integrity sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==
      dependencies:
        safe-buffer "^5.1.0"
    
    range-parser@^1.2.1, range-parser@~1.2.1:
      version "1.2.1"
      resolved "https://registry.yarnpkg.com/range-parser/-/range-parser-1.2.1.tgz#3cf37023d199e1c24d1a55b84800c2f3e6468031"
      integrity sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==
    
    raw-body@2.5.2:
      version "2.5.2"
      resolved "https://registry.yarnpkg.com/raw-body/-/raw-body-2.5.2.tgz#99febd83b90e08975087e8f1f9419a149366b68a"
      integrity sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==
      dependencies:
        bytes "3.1.2"
        http-errors "2.0.0"
        iconv-lite "0.4.24"
        unpipe "1.0.0"
    
    readable-stream@^2.0.1:
      version "2.3.8"
      resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.8.tgz#91125e8042bba1b9887f49345f6277027ce8be9b"
      integrity sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==
      dependencies:
        core-util-is "~1.0.0"
        inherits "~2.0.3"
        isarray "~1.0.0"
        process-nextick-args "~2.0.0"
        safe-buffer "~5.1.1"
        string_decoder "~1.1.1"
        util-deprecate "~1.0.1"
    
    readable-stream@^3.0.6:
      version "3.6.2"
      resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-3.6.2.tgz#56a9b36ea965c00c5a93ef31eb111a0f11056967"
      integrity sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==
      dependencies:
        inherits "^2.0.3"
        string_decoder "^1.1.1"
        util-deprecate "^1.0.1"
    
    readdirp@^4.0.1:
      version "4.1.2"
      resolved "https://registry.yarnpkg.com/readdirp/-/readdirp-4.1.2.tgz#eb85801435fbf2a7ee58f19e0921b068fc69948d"
      integrity sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==
    
    readdirp@~3.6.0:
      version "3.6.0"
      resolved "https://registry.yarnpkg.com/readdirp/-/readdirp-3.6.0.tgz#74a370bd857116e245b29cc97340cd431a02a6c7"
      integrity sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==
      dependencies:
        picomatch "^2.2.1"
    
    reflect-metadata@^0.2.0:
      version "0.2.2"
      resolved "https://registry.yarnpkg.com/reflect-metadata/-/reflect-metadata-0.2.2.tgz#400c845b6cba87a21f2c65c4aeb158f4fa4d9c5b"
      integrity sha512-urBwgfrvVP/eAyXx4hluJivBKzuEbSQs9rKWCrCkbSxNv8mxPcUZKeuoF3Uy4mJl3Lwprp6yy5/39VWigZ4K6Q==
    
    regenerate-unicode-properties@^10.2.0:
      version "10.2.0"
      resolved "https://registry.yarnpkg.com/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.0.tgz#626e39df8c372338ea9b8028d1f99dc3fd9c3db0"
      integrity sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==
      dependencies:
        regenerate "^1.4.2"
    
    regenerate@^1.4.2:
      version "1.4.2"
      resolved "https://registry.yarnpkg.com/regenerate/-/regenerate-1.4.2.tgz#b9346d8827e8f5a32f7ba29637d398b69014848a"
      integrity sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==
    
    regex-parser@^2.2.11:
      version "2.3.1"
      resolved "https://registry.yarnpkg.com/regex-parser/-/regex-parser-2.3.1.tgz#ee3f70e50bdd81a221d505242cb9a9c275a2ad91"
      integrity sha512-yXLRqatcCuKtVHsWrNg0JL3l1zGfdXeEvDa0bdu4tCDQw0RpMDZsqbkyRTUnKMR0tXF627V2oEWjBEaEdqTwtQ==
    
    regexpu-core@^6.2.0:
      version "6.2.0"
      resolved "https://registry.yarnpkg.com/regexpu-core/-/regexpu-core-6.2.0.tgz#0e5190d79e542bf294955dccabae04d3c7d53826"
      integrity sha512-H66BPQMrv+V16t8xtmq+UC0CBpiTBA60V8ibS1QVReIp8T1z8hwFxqcGzm9K6lgsN7sB5edVH8a+ze6Fqm4weA==
      dependencies:
        regenerate "^1.4.2"
        regenerate-unicode-properties "^10.2.0"
        regjsgen "^0.8.0"
        regjsparser "^0.12.0"
        unicode-match-property-ecmascript "^2.0.0"
        unicode-match-property-value-ecmascript "^2.1.0"
    
    regjsgen@^0.8.0:
      version "0.8.0"
      resolved "https://registry.yarnpkg.com/regjsgen/-/regjsgen-0.8.0.tgz#df23ff26e0c5b300a6470cad160a9d090c3a37ab"
      integrity sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==
    
    regjsparser@^0.12.0:
      version "0.12.0"
      resolved "https://registry.yarnpkg.com/regjsparser/-/regjsparser-0.12.0.tgz#0e846df6c6530586429377de56e0475583b088dc"
      integrity sha512-cnE+y8bz4NhMjISKbgeVJtqNbtf5QpjZP+Bslo+UqkIt9QPnX9q095eiRRASJG1/tz6dlNr6Z5NsBiWYokp6EQ==
      dependencies:
        jsesc "~3.0.2"
    
    require-directory@^2.1.1:
      version "2.1.1"
      resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"
      integrity sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==
    
    require-from-string@^2.0.2:
      version "2.0.2"
      resolved "https://registry.yarnpkg.com/require-from-string/-/require-from-string-2.0.2.tgz#89a7fdd938261267318eafe14f9c32e598c36909"
      integrity sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==
    
    require-main-filename@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-2.0.0.tgz#d0b329ecc7cc0f61649f62215be69af54aa8989b"
      integrity sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==
    
    requires-port@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/requires-port/-/requires-port-1.0.0.tgz#925d2601d39ac485e091cf0da5c6e694dc3dcaff"
      integrity sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==
    
    resolve-alpn@^1.0.0:
      version "1.2.1"
      resolved "https://registry.yarnpkg.com/resolve-alpn/-/resolve-alpn-1.2.1.tgz#b7adbdac3546aaaec20b45e7d8265927072726f9"
      integrity sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==
    
    resolve-from@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6"
      integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==
    
    resolve-url-loader@5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/resolve-url-loader/-/resolve-url-loader-5.0.0.tgz#ee3142fb1f1e0d9db9524d539cfa166e9314f795"
      integrity sha512-uZtduh8/8srhBoMx//5bwqjQ+rfYOUq8zC9NrMUGtjBiGTtFJM42s58/36+hTqeqINcnYe08Nj3LkK9lW4N8Xg==
      dependencies:
        adjust-sourcemap-loader "^4.0.0"
        convert-source-map "^1.7.0"
        loader-utils "^2.0.0"
        postcss "^8.2.14"
        source-map "0.6.1"
    
    resolve@1.22.10, resolve@^1.22.10:
      version "1.22.10"
      resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.22.10.tgz#b663e83ffb09bbf2386944736baae803029b8b39"
      integrity sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==
      dependencies:
        is-core-module "^2.16.0"
        path-parse "^1.0.7"
        supports-preserve-symlinks-flag "^1.0.0"
    
    responselike@^2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/responselike/-/responselike-2.0.1.tgz#9a0bc8fdc252f3fb1cca68b016591059ba1422bc"
      integrity sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==
      dependencies:
        lowercase-keys "^2.0.0"
    
    restore-cursor@^5.0.0:
      version "5.1.0"
      resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-5.1.0.tgz#0766d95699efacb14150993f55baf0953ea1ebe7"
      integrity sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==
      dependencies:
        onetime "^7.0.0"
        signal-exit "^4.1.0"
    
    retry@^0.12.0:
      version "0.12.0"
      resolved "https://registry.yarnpkg.com/retry/-/retry-0.12.0.tgz#1b42a6266a21f07421d1b0b54b7dc167b01c013b"
      integrity sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==
    
    retry@^0.13.1:
      version "0.13.1"
      resolved "https://registry.yarnpkg.com/retry/-/retry-0.13.1.tgz#185b1587acf67919d63b357349e03537b2484658"
      integrity sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==
    
    reusify@^1.0.4:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/reusify/-/reusify-1.1.0.tgz#0fe13b9522e1473f51b558ee796e08f11f9b489f"
      integrity sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==
    
    rfdc@^1.3.0, rfdc@^1.4.1:
      version "1.4.1"
      resolved "https://registry.yarnpkg.com/rfdc/-/rfdc-1.4.1.tgz#778f76c4fb731d93414e8f925fbecf64cce7f6ca"
      integrity sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==
    
    rimraf@^3.0.2:
      version "3.0.2"
      resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-3.0.2.tgz#f1a5402ba6220ad52cc1282bac1ae3aa49fd061a"
      integrity sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==
      dependencies:
        glob "^7.1.3"
    
    rollup@4.40.2:
      version "4.40.2"
      resolved "https://registry.yarnpkg.com/rollup/-/rollup-4.40.2.tgz#778e88b7a197542682b3e318581f7697f55f0619"
      integrity sha512-tfUOg6DTP4rhQ3VjOO6B4wyrJnGOX85requAXvqYTHsOgb2TFJdZ3aWpT8W2kPoypSGP7dZUyzxJ9ee4buM5Fg==
      dependencies:
        "@types/estree" "1.0.7"
      optionalDependencies:
        "@rollup/rollup-android-arm-eabi" "4.40.2"
        "@rollup/rollup-android-arm64" "4.40.2"
        "@rollup/rollup-darwin-arm64" "4.40.2"
        "@rollup/rollup-darwin-x64" "4.40.2"
        "@rollup/rollup-freebsd-arm64" "4.40.2"
        "@rollup/rollup-freebsd-x64" "4.40.2"
        "@rollup/rollup-linux-arm-gnueabihf" "4.40.2"
        "@rollup/rollup-linux-arm-musleabihf" "4.40.2"
        "@rollup/rollup-linux-arm64-gnu" "4.40.2"
        "@rollup/rollup-linux-arm64-musl" "4.40.2"
        "@rollup/rollup-linux-loongarch64-gnu" "4.40.2"
        "@rollup/rollup-linux-powerpc64le-gnu" "4.40.2"
        "@rollup/rollup-linux-riscv64-gnu" "4.40.2"
        "@rollup/rollup-linux-riscv64-musl" "4.40.2"
        "@rollup/rollup-linux-s390x-gnu" "4.40.2"
        "@rollup/rollup-linux-x64-gnu" "4.40.2"
        "@rollup/rollup-linux-x64-musl" "4.40.2"
        "@rollup/rollup-win32-arm64-msvc" "4.40.2"
        "@rollup/rollup-win32-ia32-msvc" "4.40.2"
        "@rollup/rollup-win32-x64-msvc" "4.40.2"
        fsevents "~2.3.2"
    
    rollup@^4.34.9:
      version "4.47.1"
      resolved "https://registry.yarnpkg.com/rollup/-/rollup-4.47.1.tgz#c40bce25b7140265dbe5467cd32871f71e9f9f0b"
      integrity sha512-iasGAQoZ5dWDzULEUX3jiW0oB1qyFOepSyDyoU6S/OhVlDIwj5knI5QBa5RRQ0sK7OE0v+8VIi2JuV+G+3tfNg==
      dependencies:
        "@types/estree" "1.0.8"
      optionalDependencies:
        "@rollup/rollup-android-arm-eabi" "4.47.1"
        "@rollup/rollup-android-arm64" "4.47.1"
        "@rollup/rollup-darwin-arm64" "4.47.1"
        "@rollup/rollup-darwin-x64" "4.47.1"
        "@rollup/rollup-freebsd-arm64" "4.47.1"
        "@rollup/rollup-freebsd-x64" "4.47.1"
        "@rollup/rollup-linux-arm-gnueabihf" "4.47.1"
        "@rollup/rollup-linux-arm-musleabihf" "4.47.1"
        "@rollup/rollup-linux-arm64-gnu" "4.47.1"
        "@rollup/rollup-linux-arm64-musl" "4.47.1"
        "@rollup/rollup-linux-loongarch64-gnu" "4.47.1"
        "@rollup/rollup-linux-ppc64-gnu" "4.47.1"
        "@rollup/rollup-linux-riscv64-gnu" "4.47.1"
        "@rollup/rollup-linux-riscv64-musl" "4.47.1"
        "@rollup/rollup-linux-s390x-gnu" "4.47.1"
        "@rollup/rollup-linux-x64-gnu" "4.47.1"
        "@rollup/rollup-linux-x64-musl" "4.47.1"
        "@rollup/rollup-win32-arm64-msvc" "4.47.1"
        "@rollup/rollup-win32-ia32-msvc" "4.47.1"
        "@rollup/rollup-win32-x64-msvc" "4.47.1"
        fsevents "~2.3.2"
    
    run-applescript@^7.0.0:
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/run-applescript/-/run-applescript-7.0.0.tgz#e5a553c2bffd620e169d276c1cd8f1b64778fbeb"
      integrity sha512-9by4Ij99JUr/MCFBUkDKLWK3G9HVXmabKz9U5MlIAIuvuzkiOicRYs8XJLxX+xahD+mLiiCYDqF9dKAgtzKP1A==
    
    run-parallel@^1.1.9:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/run-parallel/-/run-parallel-1.2.0.tgz#66d1368da7bdf921eb9d95bd1a9229e7f21a43ee"
      integrity sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==
      dependencies:
        queue-microtask "^1.2.2"
    
    rxjs@7.8.2, rxjs@~7.8.0:
      version "7.8.2"
      resolved "https://registry.yarnpkg.com/rxjs/-/rxjs-7.8.2.tgz#955bc473ed8af11a002a2be52071bf475638607b"
      integrity sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==
      dependencies:
        tslib "^2.1.0"
    
    safe-buffer@5.2.1, safe-buffer@>=5.1.0, safe-buffer@^5.1.0, safe-buffer@~5.2.0:
      version "5.2.1"
      resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6"
      integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==
    
    safe-buffer@~5.1.0, safe-buffer@~5.1.1:
      version "5.1.2"
      resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d"
      integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==
    
    safe-regex-test@^1.1.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/safe-regex-test/-/safe-regex-test-1.1.0.tgz#7f87dfb67a3150782eaaf18583ff5d1711ac10c1"
      integrity sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==
      dependencies:
        call-bound "^1.0.2"
        es-errors "^1.3.0"
        is-regex "^1.2.1"
    
    "safer-buffer@>= 2.1.2 < 3", "safer-buffer@>= 2.1.2 < 3.0.0":
      version "2.1.2"
      resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
      integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
    
    sass-loader@16.0.5:
      version "16.0.5"
      resolved "https://registry.yarnpkg.com/sass-loader/-/sass-loader-16.0.5.tgz#257bc90119ade066851cafe7f2c3f3504c7cda98"
      integrity sha512-oL+CMBXrj6BZ/zOq4os+UECPL+bWqt6OAC6DWS8Ln8GZRcMDjlJ4JC3FBDuHJdYaFWIdKNIBYmtZtK2MaMkNIw==
      dependencies:
        neo-async "^2.6.2"
    
    sass@1.88.0:
      version "1.88.0"
      resolved "https://registry.yarnpkg.com/sass/-/sass-1.88.0.tgz#cd1495749bebd9e4aca86e93ee60b3904a107789"
      integrity sha512-sF6TWQqjFvr4JILXzG4ucGOLELkESHL+I5QJhh7CNaE+Yge0SI+ehCatsXhJ7ymU1hAFcIS3/PBpjdIbXoyVbg==
      dependencies:
        chokidar "^4.0.0"
        immutable "^5.0.2"
        source-map-js ">=0.6.2 <2.0.0"
      optionalDependencies:
        "@parcel/watcher" "^2.4.1"
    
    sax@^1.2.4:
      version "1.4.1"
      resolved "https://registry.yarnpkg.com/sax/-/sax-1.4.1.tgz#44cc8988377f126304d3b3fc1010c733b929ef0f"
      integrity sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==
    
    schema-utils@^4.0.0, schema-utils@^4.2.0, schema-utils@^4.3.0, schema-utils@^4.3.2:
      version "4.3.2"
      resolved "https://registry.yarnpkg.com/schema-utils/-/schema-utils-4.3.2.tgz#0c10878bf4a73fd2b1dfd14b9462b26788c806ae"
      integrity sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==
      dependencies:
        "@types/json-schema" "^7.0.9"
        ajv "^8.9.0"
        ajv-formats "^2.1.1"
        ajv-keywords "^5.1.0"
    
    select-hose@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/select-hose/-/select-hose-2.0.0.tgz#625d8658f865af43ec962bfc376a37359a4994ca"
      integrity sha512-mEugaLK+YfkijB4fx0e6kImuJdCIt2LxCRcbEYPqRGCs4F2ogyfZU5IAZRdjCP8JPq2AtdNoC/Dux63d9Kiryg==
    
    selfsigned@^2.4.1:
      version "2.4.1"
      resolved "https://registry.yarnpkg.com/selfsigned/-/selfsigned-2.4.1.tgz#560d90565442a3ed35b674034cec4e95dceb4ae0"
      integrity sha512-th5B4L2U+eGLq1TVh7zNRGBapioSORUeymIydxgFpwww9d2qyKvtuPU2jJuHvYAwwqi2Y596QBL3eEqcPEYL8Q==
      dependencies:
        "@types/node-forge" "^1.3.0"
        node-forge "^1"
    
    semver@7.7.2, semver@^7.0.0, semver@^7.1.1, semver@^7.3.5, semver@^7.5.3, semver@^7.5.4, semver@^7.6.0:
      version "7.7.2"
      resolved "https://registry.yarnpkg.com/semver/-/semver-7.7.2.tgz#67d99fdcd35cec21e6f8b87a7fd515a33f982b58"
      integrity sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==
    
    semver@^5.6.0:
      version "5.7.2"
      resolved "https://registry.yarnpkg.com/semver/-/semver-5.7.2.tgz#48d55db737c3287cd4835e17fa13feace1c41ef8"
      integrity sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==
    
    semver@^6.3.0, semver@^6.3.1:
      version "6.3.1"
      resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.1.tgz#556d2ef8689146e46dcea4bfdd095f3434dffcb4"
      integrity sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==
    
    send@0.19.0:
      version "0.19.0"
      resolved "https://registry.yarnpkg.com/send/-/send-0.19.0.tgz#bbc5a388c8ea6c048967049dbeac0e4a3f09d7f8"
      integrity sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==
      dependencies:
        debug "2.6.9"
        depd "2.0.0"
        destroy "1.2.0"
        encodeurl "~1.0.2"
        escape-html "~1.0.3"
        etag "~1.8.1"
        fresh "0.5.2"
        http-errors "2.0.0"
        mime "1.6.0"
        ms "2.1.3"
        on-finished "2.4.1"
        range-parser "~1.2.1"
        statuses "2.0.1"
    
    serialize-javascript@^6.0.2:
      version "6.0.2"
      resolved "https://registry.yarnpkg.com/serialize-javascript/-/serialize-javascript-6.0.2.tgz#defa1e055c83bf6d59ea805d8da862254eb6a6c2"
      integrity sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==
      dependencies:
        randombytes "^2.1.0"
    
    serve-index@^1.9.1:
      version "1.9.1"
      resolved "https://registry.yarnpkg.com/serve-index/-/serve-index-1.9.1.tgz#d3768d69b1e7d82e5ce050fff5b453bea12a9239"
      integrity sha512-pXHfKNP4qujrtteMrSBb0rc8HJ9Ms/GrXwcUtUtD5s4ewDJI8bT3Cz2zTVRMKtri49pLx2e0Ya8ziP5Ya2pZZw==
      dependencies:
        accepts "~1.3.4"
        batch "0.6.1"
        debug "2.6.9"
        escape-html "~1.0.3"
        http-errors "~1.6.2"
        mime-types "~2.1.17"
        parseurl "~1.3.2"
    
    serve-static@1.16.2:
      version "1.16.2"
      resolved "https://registry.yarnpkg.com/serve-static/-/serve-static-1.16.2.tgz#b6a5343da47f6bdd2673848bf45754941e803296"
      integrity sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==
      dependencies:
        encodeurl "~2.0.0"
        escape-html "~1.0.3"
        parseurl "~1.3.3"
        send "0.19.0"
    
    set-blocking@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7"
      integrity sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==
    
    set-cookie-parser@^2.4.8:
      version "2.7.1"
      resolved "https://registry.yarnpkg.com/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz#3016f150072202dfbe90fadee053573cc89d2943"
      integrity sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==
    
    setprototypeof@1.1.0:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/setprototypeof/-/setprototypeof-1.1.0.tgz#d0bd85536887b6fe7c0d818cb962d9d91c54e656"
      integrity sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==
    
    setprototypeof@1.2.0:
      version "1.2.0"
      resolved "https://registry.yarnpkg.com/setprototypeof/-/setprototypeof-1.2.0.tgz#66c9a24a73f9fc28cbe66b09fed3d33dcaf1b424"
      integrity sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==
    
    shallow-clone@^3.0.0:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/shallow-clone/-/shallow-clone-3.0.1.tgz#8f2981ad92531f55035b01fb230769a40e02efa3"
      integrity sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==
      dependencies:
        kind-of "^6.0.2"
    
    shebang-command@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea"
      integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==
      dependencies:
        shebang-regex "^3.0.0"
    
    shebang-regex@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172"
      integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==
    
    shell-quote@^1.8.3:
      version "1.8.3"
      resolved "https://registry.yarnpkg.com/shell-quote/-/shell-quote-1.8.3.tgz#55e40ef33cf5c689902353a3d8cd1a6725f08b4b"
      integrity sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==
    
    should-quote@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/should-quote/-/should-quote-1.0.0.tgz#18e58cb92a3fecb6e163cf92c8158847058589d7"
      integrity sha512-mQN5Meec3CTPmykzwXfDGWDpi75HUD8NT21wRWaJ7oqxpFIhXq80Hiy4ziccUNOwzhWeFkT9/kNSZbaugL9jsA==
    
    side-channel-list@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/side-channel-list/-/side-channel-list-1.0.0.tgz#10cb5984263115d3b7a0e336591e290a830af8ad"
      integrity sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==
      dependencies:
        es-errors "^1.3.0"
        object-inspect "^1.13.3"
    
    side-channel-map@^1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/side-channel-map/-/side-channel-map-1.0.1.tgz#d6bb6b37902c6fef5174e5f533fab4c732a26f42"
      integrity sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==
      dependencies:
        call-bound "^1.0.2"
        es-errors "^1.3.0"
        get-intrinsic "^1.2.5"
        object-inspect "^1.13.3"
    
    side-channel-weakmap@^1.0.2:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz#11dda19d5368e40ce9ec2bdc1fb0ecbc0790ecea"
      integrity sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==
      dependencies:
        call-bound "^1.0.2"
        es-errors "^1.3.0"
        get-intrinsic "^1.2.5"
        object-inspect "^1.13.3"
        side-channel-map "^1.0.1"
    
    side-channel@^1.0.6:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/side-channel/-/side-channel-1.1.0.tgz#c3fcff9c4da932784873335ec9765fa94ff66bc9"
      integrity sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==
      dependencies:
        es-errors "^1.3.0"
        object-inspect "^1.13.3"
        side-channel-list "^1.0.0"
        side-channel-map "^1.0.1"
        side-channel-weakmap "^1.0.2"
    
    signal-exit@^4.0.1, signal-exit@^4.1.0:
      version "4.1.0"
      resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-4.1.0.tgz#952188c1cbd546070e2dd20d0f41c0ae0530cb04"
      integrity sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==
    
    sigstore@^3.0.0:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/sigstore/-/sigstore-3.1.0.tgz#08dc6c0c425263e9fdab85ffdb6477550e2c511d"
      integrity sha512-ZpzWAFHIFqyFE56dXqgX/DkDRZdz+rRcjoIk/RQU4IX0wiCv1l8S7ZrXDHcCc+uaf+6o7w3h2l3g6GYG5TKN9Q==
      dependencies:
        "@sigstore/bundle" "^3.1.0"
        "@sigstore/core" "^2.0.0"
        "@sigstore/protobuf-specs" "^0.4.0"
        "@sigstore/sign" "^3.1.0"
        "@sigstore/tuf" "^3.1.0"
        "@sigstore/verify" "^2.1.0"
    
    slash@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
      integrity sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==
    
    slice-ansi@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-5.0.0.tgz#b73063c57aa96f9cd881654b15294d95d285c42a"
      integrity sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==
      dependencies:
        ansi-styles "^6.0.0"
        is-fullwidth-code-point "^4.0.0"
    
    slice-ansi@^7.1.0:
      version "7.1.0"
      resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-7.1.0.tgz#cd6b4655e298a8d1bdeb04250a433094b347b9a9"
      integrity sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==
      dependencies:
        ansi-styles "^6.2.1"
        is-fullwidth-code-point "^5.0.0"
    
    smart-buffer@^4.2.0:
      version "4.2.0"
      resolved "https://registry.yarnpkg.com/smart-buffer/-/smart-buffer-4.2.0.tgz#6e1d71fa4f18c05f7d0ff216dd16a481d0e8d9ae"
      integrity sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==
    
    socket.io-adapter@~2.5.2:
      version "2.5.5"
      resolved "https://registry.yarnpkg.com/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz#c7a1f9c703d7756844751b6ff9abfc1780664082"
      integrity sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==
      dependencies:
        debug "~4.3.4"
        ws "~8.17.1"
    
    socket.io-parser@~4.2.4:
      version "4.2.4"
      resolved "https://registry.yarnpkg.com/socket.io-parser/-/socket.io-parser-4.2.4.tgz#c806966cf7270601e47469ddeec30fbdfda44c83"
      integrity sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==
      dependencies:
        "@socket.io/component-emitter" "~3.1.0"
        debug "~4.3.1"
    
    socket.io@^4.4.1:
      version "4.8.1"
      resolved "https://registry.yarnpkg.com/socket.io/-/socket.io-4.8.1.tgz#fa0eaff965cc97fdf4245e8d4794618459f7558a"
      integrity sha512-oZ7iUCxph8WYRHHcjBEc9unw3adt5CmSNlppj/5Q4k2RIrhl8Z5yY2Xr4j9zj0+wzVZ0bxmYoGSzKJnRl6A4yg==
      dependencies:
        accepts "~1.3.4"
        base64id "~2.0.0"
        cors "~2.8.5"
        debug "~4.3.2"
        engine.io "~6.6.0"
        socket.io-adapter "~2.5.2"
        socket.io-parser "~4.2.4"
    
    sockjs@^0.3.24:
      version "0.3.24"
      resolved "https://registry.yarnpkg.com/sockjs/-/sockjs-0.3.24.tgz#c9bc8995f33a111bea0395ec30aa3206bdb5ccce"
      integrity sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==
      dependencies:
        faye-websocket "^0.11.3"
        uuid "^8.3.2"
        websocket-driver "^0.7.4"
    
    socks-proxy-agent@^8.0.3:
      version "8.0.5"
      resolved "https://registry.yarnpkg.com/socks-proxy-agent/-/socks-proxy-agent-8.0.5.tgz#b9cdb4e7e998509d7659d689ce7697ac21645bee"
      integrity sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==
      dependencies:
        agent-base "^7.1.2"
        debug "^4.3.4"
        socks "^2.8.3"
    
    socks@^2.8.3:
      version "2.8.7"
      resolved "https://registry.yarnpkg.com/socks/-/socks-2.8.7.tgz#e2fb1d9a603add75050a2067db8c381a0b5669ea"
      integrity sha512-HLpt+uLy/pxB+bum/9DzAgiKS8CX1EvbWxI4zlmgGCExImLdiad2iCwXT5Z4c9c3Eq8rP2318mPW2c+QbtjK8A==
      dependencies:
        ip-address "^10.0.1"
        smart-buffer "^4.2.0"
    
    "source-map-js@>=0.6.2 <2.0.0", source-map-js@^1.0.2, source-map-js@^1.2.1:
      version "1.2.1"
      resolved "https://registry.yarnpkg.com/source-map-js/-/source-map-js-1.2.1.tgz#1ce5650fddd87abc099eda37dcff024c2667ae46"
      integrity sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==
    
    source-map-loader@5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/source-map-loader/-/source-map-loader-5.0.0.tgz#f593a916e1cc54471cfc8851b905c8a845fc7e38"
      integrity sha512-k2Dur7CbSLcAH73sBcIkV5xjPV4SzqO1NJ7+XaQl8if3VODDUj3FNchNGpqgJSKbvUfJuhVdv8K2Eu8/TNl2eA==
      dependencies:
        iconv-lite "^0.6.3"
        source-map-js "^1.0.2"
    
    source-map-support@0.5.21, source-map-support@^0.5.5, source-map-support@~0.5.20:
      version "0.5.21"
      resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.21.tgz#04fe7c7f9e1ed2d662233c28cb2b35b9f63f6e4f"
      integrity sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==
      dependencies:
        buffer-from "^1.0.0"
        source-map "^0.6.0"
    
    source-map@0.6.1, source-map@^0.6.0, source-map@^0.6.1, source-map@~0.6.0:
      version "0.6.1"
      resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263"
      integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==
    
    source-map@0.7.4:
      version "0.7.4"
      resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.7.4.tgz#a9bbe705c9d8846f4e08ff6765acf0f1b0898656"
      integrity sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==
    
    source-map@0.7.6:
      version "0.7.6"
      resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.7.6.tgz#a3658ab87e5b6429c8a1f3ba0083d4c61ca3ef02"
      integrity sha512-i5uvt8C3ikiWeNZSVZNWcfZPItFQOsYTUAOkcUPGd8DqDy1uOUikjt5dG+uRlwyvR108Fb9DOd4GvXfT0N2/uQ==
    
    spdx-correct@^3.0.0:
      version "3.2.0"
      resolved "https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-3.2.0.tgz#4f5ab0668f0059e34f9c00dce331784a12de4e9c"
      integrity sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==
      dependencies:
        spdx-expression-parse "^3.0.0"
        spdx-license-ids "^3.0.0"
    
    spdx-exceptions@^2.1.0:
      version "2.5.0"
      resolved "https://registry.yarnpkg.com/spdx-exceptions/-/spdx-exceptions-2.5.0.tgz#5d607d27fc806f66d7b64a766650fa890f04ed66"
      integrity sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==
    
    spdx-expression-parse@^3.0.0:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz#cf70f50482eefdc98e3ce0a6833e4a53ceeba679"
      integrity sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==
      dependencies:
        spdx-exceptions "^2.1.0"
        spdx-license-ids "^3.0.0"
    
    spdx-license-ids@^3.0.0:
      version "3.0.22"
      resolved "https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-3.0.22.tgz#abf5a08a6f5d7279559b669f47f0a43e8f3464ef"
      integrity sha512-4PRT4nh1EImPbt2jASOKHX7PB7I+e4IWNLvkKFDxNhJlfjbYlleYQh285Z/3mPTHSAK/AvdMmw5BNNuYH8ShgQ==
    
    spdy-transport@^3.0.0:
      version "3.0.0"
      resolved "https://registry.yarnpkg.com/spdy-transport/-/spdy-transport-3.0.0.tgz#00d4863a6400ad75df93361a1608605e5dcdcf31"
      integrity sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==
      dependencies:
        debug "^4.1.0"
        detect-node "^2.0.4"
        hpack.js "^2.1.6"
        obuf "^1.1.2"
        readable-stream "^3.0.6"
        wbuf "^1.7.3"
    
    spdy@^4.0.2:
      version "4.0.2"
      resolved "https://registry.yarnpkg.com/spdy/-/spdy-4.0.2.tgz#b74f466203a3eda452c02492b91fb9e84a27677b"
      integrity sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==
      dependencies:
        debug "^4.1.0"
        handle-thing "^2.0.0"
        http-deceiver "^1.2.7"
        select-hose "^2.0.0"
        spdy-transport "^3.0.0"
    
    ssri@^12.0.0:
      version "12.0.0"
      resolved "https://registry.yarnpkg.com/ssri/-/ssri-12.0.0.tgz#bcb4258417c702472f8191981d3c8a771fee6832"
      integrity sha512-S7iGNosepx9RadX82oimUkvr0Ct7IjJbEbs4mJcTxst8um95J3sDYU1RBEOvdu6oL1Wek2ODI5i4MAw+dZ6cAQ==
      dependencies:
        minipass "^7.0.3"
    
    statuses@2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/statuses/-/statuses-2.0.1.tgz#55cb000ccf1d48728bd23c685a063998cf1a1b63"
      integrity sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==
    
    "statuses@>= 1.4.0 < 2", statuses@~1.5.0:
      version "1.5.0"
      resolved "https://registry.yarnpkg.com/statuses/-/statuses-1.5.0.tgz#161c7dac177659fd9811f43771fa99381478628c"
      integrity sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==
    
    stdin-discarder@^0.2.2:
      version "0.2.2"
      resolved "https://registry.yarnpkg.com/stdin-discarder/-/stdin-discarder-0.2.2.tgz#390037f44c4ae1a1ae535c5fe38dc3aba8d997be"
      integrity sha512-UhDfHmA92YAlNnCfhmq0VeNL5bDbiZGg7sZ2IvPsXubGkiNa9EC+tUTsjBRsYUAz87btI6/1wf4XoVvQ3uRnmQ==
    
    streamroller@^3.1.5:
      version "3.1.5"
      resolved "https://registry.yarnpkg.com/streamroller/-/streamroller-3.1.5.tgz#1263182329a45def1ffaef58d31b15d13d2ee7ff"
      integrity sha512-KFxaM7XT+irxvdqSP1LGLgNWbYN7ay5owZ3r/8t77p+EtSUAfUgtl7be3xtqtOmGUl9K9YPO2ca8133RlTjvKw==
      dependencies:
        date-format "^4.0.14"
        debug "^4.3.4"
        fs-extra "^8.1.0"
    
    "string-width-cjs@npm:string-width@^4.2.0":
      version "4.2.3"
      resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010"
      integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==
      dependencies:
        emoji-regex "^8.0.0"
        is-fullwidth-code-point "^3.0.0"
        strip-ansi "^6.0.1"
    
    string-width@^4.1.0, string-width@^4.2.0, string-width@^4.2.3:
      version "4.2.3"
      resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010"
      integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==
      dependencies:
        emoji-regex "^8.0.0"
        is-fullwidth-code-point "^3.0.0"
        strip-ansi "^6.0.1"
    
    string-width@^5.0.1, string-width@^5.1.2:
      version "5.1.2"
      resolved "https://registry.yarnpkg.com/string-width/-/string-width-5.1.2.tgz#14f8daec6d81e7221d2a357e668cab73bdbca794"
      integrity sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==
      dependencies:
        eastasianwidth "^0.2.0"
        emoji-regex "^9.2.2"
        strip-ansi "^7.0.1"
    
    string-width@^7.0.0, string-width@^7.2.0:
      version "7.2.0"
      resolved "https://registry.yarnpkg.com/string-width/-/string-width-7.2.0.tgz#b5bb8e2165ce275d4d43476dd2700ad9091db6dc"
      integrity sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==
      dependencies:
        emoji-regex "^10.3.0"
        get-east-asian-width "^1.0.0"
        strip-ansi "^7.1.0"
    
    string_decoder@^1.1.1:
      version "1.3.0"
      resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.3.0.tgz#42f114594a46cf1a8e30b0a84f56c78c3edac21e"
      integrity sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==
      dependencies:
        safe-buffer "~5.2.0"
    
    string_decoder@~1.1.1:
      version "1.1.1"
      resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.1.1.tgz#9cf1611ba62685d7030ae9e4ba34149c3af03fc8"
      integrity sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==
      dependencies:
        safe-buffer "~5.1.0"
    
    "strip-ansi-cjs@npm:strip-ansi@^6.0.1":
      version "6.0.1"
      resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9"
      integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==
      dependencies:
        ansi-regex "^5.0.1"
    
    strip-ansi@^6.0.0, strip-ansi@^6.0.1:
      version "6.0.1"
      resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9"
      integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==
      dependencies:
        ansi-regex "^5.0.1"
    
    strip-ansi@^7.0.1, strip-ansi@^7.1.0:
      version "7.1.0"
      resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-7.1.0.tgz#d5b6568ca689d8561370b0707685d22434faff45"
      integrity sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==
      dependencies:
        ansi-regex "^6.0.1"
    
    strip-json-comments@3.1.1, strip-json-comments@^3.1.1:
      version "3.1.1"
      resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.1.1.tgz#31f1281b3832630434831c310c01cccda8cbe006"
      integrity sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==
    
    supports-color@^7.1.0:
      version "7.2.0"
      resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
      integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
      dependencies:
        has-flag "^4.0.0"
    
    supports-color@^8.0.0:
      version "8.1.1"
      resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-8.1.1.tgz#cd6fc17e28500cff56c1b86c0a7fd4a54a73005c"
      integrity sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==
      dependencies:
        has-flag "^4.0.0"
    
    supports-preserve-symlinks-flag@^1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09"
      integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==
    
    tapable@^2.1.1, tapable@^2.2.0, tapable@^2.2.1:
      version "2.2.3"
      resolved "https://registry.yarnpkg.com/tapable/-/tapable-2.2.3.tgz#4b67b635b2d97578a06a2713d2f04800c237e99b"
      integrity sha512-ZL6DDuAlRlLGghwcfmSn9sK3Hr6ArtyudlSAiCqQ6IfE+b+HHbydbYDIG15IfS5do+7XQQBdBiubF/cV2dnDzg==
    
    tar@^6.1.11:
      version "6.2.1"
      resolved "https://registry.yarnpkg.com/tar/-/tar-6.2.1.tgz#717549c541bc3c2af15751bea94b1dd068d4b03a"
      integrity sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==
      dependencies:
        chownr "^2.0.0"
        fs-minipass "^2.0.0"
        minipass "^5.0.0"
        minizlib "^2.1.1"
        mkdirp "^1.0.3"
        yallist "^4.0.0"
    
    tar@^7.4.3:
      version "7.4.3"
      resolved "https://registry.yarnpkg.com/tar/-/tar-7.4.3.tgz#88bbe9286a3fcd900e94592cda7a22b192e80571"
      integrity sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==
      dependencies:
        "@isaacs/fs-minipass" "^4.0.0"
        chownr "^3.0.0"
        minipass "^7.1.2"
        minizlib "^3.0.1"
        mkdirp "^3.0.1"
        yallist "^5.0.0"
    
    terser-webpack-plugin@^5.3.11:
      version "5.3.14"
      resolved "https://registry.yarnpkg.com/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz#9031d48e57ab27567f02ace85c7d690db66c3e06"
      integrity sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==
      dependencies:
        "@jridgewell/trace-mapping" "^0.3.25"
        jest-worker "^27.4.5"
        schema-utils "^4.3.0"
        serialize-javascript "^6.0.2"
        terser "^5.31.1"
    
    terser@5.39.1:
      version "5.39.1"
      resolved "https://registry.yarnpkg.com/terser/-/terser-5.39.1.tgz#1c80e6bde2b362c6f9f3e79e295c228a3882d983"
      integrity sha512-Mm6+uad0ZuDtcV8/4uOZQDQ8RuiC5Pu+iZRedJtF7yA/27sPL7d++In/AJKpWZlU3SYMPPkVfwetn6sgZ66pUA==
      dependencies:
        "@jridgewell/source-map" "^0.3.3"
        acorn "^8.8.2"
        commander "^2.20.0"
        source-map-support "~0.5.20"
    
    terser@^5.31.1:
      version "5.43.1"
      resolved "https://registry.yarnpkg.com/terser/-/terser-5.43.1.tgz#88387f4f9794ff1a29e7ad61fb2932e25b4fdb6d"
      integrity sha512-+6erLbBm0+LROX2sPXlUYx/ux5PyE9K/a92Wrt6oA+WDAoFTdpHE5tCYCI5PNzq2y8df4rA+QgHLJuR4jNymsg==
      dependencies:
        "@jridgewell/source-map" "^0.3.3"
        acorn "^8.14.0"
        commander "^2.20.0"
        source-map-support "~0.5.20"
    
    text-table@^0.2.0:
      version "0.2.0"
      resolved "https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4"
      integrity sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==
    
    thingies@^2.5.0:
      version "2.5.0"
      resolved "https://registry.yarnpkg.com/thingies/-/thingies-2.5.0.tgz#5f7b882c933b85989f8466b528a6247a6881e04f"
      integrity sha512-s+2Bwztg6PhWUD7XMfeYm5qliDdSiZm7M7n8KjTkIsm3l/2lgVRc2/Gx/v+ZX8lT4FMA+i8aQvhcWylldc+ZNw==
    
    thunky@^1.0.2:
      version "1.1.0"
      resolved "https://registry.yarnpkg.com/thunky/-/thunky-1.1.0.tgz#5abaf714a9405db0504732bbccd2cedd9ef9537d"
      integrity sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA==
    
    tinyglobby@0.2.13:
      version "0.2.13"
      resolved "https://registry.yarnpkg.com/tinyglobby/-/tinyglobby-0.2.13.tgz#a0e46515ce6cbcd65331537e57484af5a7b2ff7e"
      integrity sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==
      dependencies:
        fdir "^6.4.4"
        picomatch "^4.0.2"
    
    tinyglobby@^0.2.12, tinyglobby@^0.2.13:
      version "0.2.14"
      resolved "https://registry.yarnpkg.com/tinyglobby/-/tinyglobby-0.2.14.tgz#5280b0cf3f972b050e74ae88406c0a6a58f4079d"
      integrity sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==
      dependencies:
        fdir "^6.4.4"
        picomatch "^4.0.2"
    
    tmp@^0.2.1:
      version "0.2.5"
      resolved "https://registry.yarnpkg.com/tmp/-/tmp-0.2.5.tgz#b06bcd23f0f3c8357b426891726d16015abfd8f8"
      integrity sha512-voyz6MApa1rQGUxT3E+BK7/ROe8itEx7vD8/HEvt4xwXucvQ5G5oeEiHkmHZJuBO21RpOf+YYm9MOivj709jow==
    
    to-regex-range@^5.0.1:
      version "5.0.1"
      resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4"
      integrity sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==
      dependencies:
        is-number "^7.0.0"
    
    toidentifier@1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/toidentifier/-/toidentifier-1.0.1.tgz#3be34321a88a820ed1bd80dfaa33e479fbb8dd35"
      integrity sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==
    
    tough-cookie@^4.0.0:
      version "4.1.4"
      resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-4.1.4.tgz#945f1461b45b5a8c76821c33ea49c3ac192c1b36"
      integrity sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==
      dependencies:
        psl "^1.1.33"
        punycode "^2.1.1"
        universalify "^0.2.0"
        url-parse "^1.5.3"
    
    tr46@~0.0.3:
      version "0.0.3"
      resolved "https://registry.yarnpkg.com/tr46/-/tr46-0.0.3.tgz#8184fd347dac9cdc185992f3a6622e14b9d9ab6a"
      integrity sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==
    
    tree-dump@^1.0.3:
      version "1.0.3"
      resolved "https://registry.yarnpkg.com/tree-dump/-/tree-dump-1.0.3.tgz#2f0e42e77354714418ed7ab44291e435ccdb0f80"
      integrity sha512-il+Cv80yVHFBwokQSfd4bldvr1Md951DpgAGfmhydt04L+YzHgubm2tQ7zueWDcGENKHq0ZvGFR/hjvNXilHEg==
    
    tree-kill@1.2.2:
      version "1.2.2"
      resolved "https://registry.yarnpkg.com/tree-kill/-/tree-kill-1.2.2.tgz#4ca09a9092c88b73a7cdc5e8a01b507b0790a0cc"
      integrity sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==
    
    ts-api-utils@^1.3.0:
      version "1.4.3"
      resolved "https://registry.yarnpkg.com/ts-api-utils/-/ts-api-utils-1.4.3.tgz#bfc2215fe6528fecab2b0fba570a2e8a4263b064"
      integrity sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==
    
    ts-toolbelt@^9.0.0:
      version "9.6.0"
      resolved "https://registry.yarnpkg.com/ts-toolbelt/-/ts-toolbelt-9.6.0.tgz#50a25426cfed500d4a09bd1b3afb6f28879edfd5"
      integrity sha512-nsZd8ZeNUzukXPlJmTBwUAuABDe/9qtVDelJeT/qW0ow3ZS3BsQJtNkan1802aM9Uf68/Y8ljw86Hu0h5IUW3w==
    
    tslib@2.8.1, tslib@^2.0.0, tslib@^2.1.0, tslib@^2.3.0, tslib@^2.5.2:
      version "2.8.1"
      resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.8.1.tgz#612efe4ed235d567e8aba5f2a5fab70280ade83f"
      integrity sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==
    
    tuf-js@^3.0.1:
      version "3.1.0"
      resolved "https://registry.yarnpkg.com/tuf-js/-/tuf-js-3.1.0.tgz#61b847fe9aa86a7d5bda655a4647e026aa73a1be"
      integrity sha512-3T3T04WzowbwV2FDiGXBbr81t64g1MUGGJRgT4x5o97N+8ArdhVCAF9IxFrxuSJmM3E5Asn7nKHkao0ibcZXAg==
      dependencies:
        "@tufjs/models" "3.0.1"
        debug "^4.4.1"
        make-fetch-happen "^14.0.3"
    
    type-check@^0.4.0, type-check@~0.4.0:
      version "0.4.0"
      resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.4.0.tgz#07b8203bfa7056c0657050e3ccd2c37730bab8f1"
      integrity sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==
      dependencies:
        prelude-ls "^1.2.1"
    
    type-fest@^0.20.2:
      version "0.20.2"
      resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.20.2.tgz#1bf207f4b28f91583666cb5fbd327887301cd5f4"
      integrity sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==
    
    type-fest@^0.21.3:
      version "0.21.3"
      resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.21.3.tgz#d260a24b0198436e133fa26a524a6d65fa3b2e37"
      integrity sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==
    
    type-is@~1.6.18:
      version "1.6.18"
      resolved "https://registry.yarnpkg.com/type-is/-/type-is-1.6.18.tgz#4e552cd05df09467dcbc4ef739de89f2cf37c131"
      integrity sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==
      dependencies:
        media-typer "0.3.0"
        mime-types "~2.1.24"
    
    typed-assert@^1.0.8:
      version "1.0.9"
      resolved "https://registry.yarnpkg.com/typed-assert/-/typed-assert-1.0.9.tgz#8af9d4f93432c4970ec717e3006f33f135b06213"
      integrity sha512-KNNZtayBCtmnNmbo5mG47p1XsCyrx6iVqomjcZnec/1Y5GGARaxPs6r49RnSPeUP3YjNYiU9sQHAtY4BBvnZwg==
    
    typescript@~5.8.0:
      version "5.8.3"
      resolved "https://registry.yarnpkg.com/typescript/-/typescript-5.8.3.tgz#92f8a3e5e3cf497356f4178c34cd65a7f5e8440e"
      integrity sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==
    
    ua-parser-js@^0.7.30:
      version "0.7.41"
      resolved "https://registry.yarnpkg.com/ua-parser-js/-/ua-parser-js-0.7.41.tgz#9f6dee58c389e8afababa62a4a2dc22edb69a452"
      integrity sha512-O3oYyCMPYgNNHuO7Jjk3uacJWZF8loBgwrfd/5LE/HyZ3lUIOdniQ7DNXJcIgZbwioZxk0fLfI4EVnetdiX5jg==
    
    undici-types@~6.21.0:
      version "6.21.0"
      resolved "https://registry.yarnpkg.com/undici-types/-/undici-types-6.21.0.tgz#691d00af3909be93a7faa13be61b3a5b50ef12cb"
      integrity sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==
    
    undici-types@~7.10.0:
      version "7.10.0"
      resolved "https://registry.yarnpkg.com/undici-types/-/undici-types-7.10.0.tgz#4ac2e058ce56b462b056e629cc6a02393d3ff350"
      integrity sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==
    
    unicode-canonical-property-names-ecmascript@^2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz#cb3173fe47ca743e228216e4a3ddc4c84d628cc2"
      integrity sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==
    
    unicode-match-property-ecmascript@^2.0.0:
      version "2.0.0"
      resolved "https://registry.yarnpkg.com/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz#54fd16e0ecb167cf04cf1f756bdcc92eba7976c3"
      integrity sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==
      dependencies:
        unicode-canonical-property-names-ecmascript "^2.0.0"
        unicode-property-aliases-ecmascript "^2.0.0"
    
    unicode-match-property-value-ecmascript@^2.1.0:
      version "2.2.0"
      resolved "https://registry.yarnpkg.com/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.0.tgz#a0401aee72714598f739b68b104e4fe3a0cb3c71"
      integrity sha512-4IehN3V/+kkr5YeSSDDQG8QLqO26XpL2XP3GQtqwlT/QYSECAwFztxVHjlbh0+gjJ3XmNLS0zDsbgs9jWKExLg==
    
    unicode-property-aliases-ecmascript@^2.0.0:
      version "2.1.0"
      resolved "https://registry.yarnpkg.com/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz#43d41e3be698bd493ef911077c9b131f827e8ccd"
      integrity sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==
    
    unique-filename@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/unique-filename/-/unique-filename-4.0.0.tgz#a06534d370e7c977a939cd1d11f7f0ab8f1fed13"
      integrity sha512-XSnEewXmQ+veP7xX2dS5Q4yZAvO40cBN2MWkJ7D/6sW4Dg6wYBNwM1Vrnz1FhH5AdeLIlUXRI9e28z1YZi71NQ==
      dependencies:
        unique-slug "^5.0.0"
    
    unique-slug@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/unique-slug/-/unique-slug-5.0.0.tgz#ca72af03ad0dbab4dad8aa683f633878b1accda8"
      integrity sha512-9OdaqO5kwqR+1kVgHAhsp5vPNU0hnxRa26rBFNfNgM7M6pNtgzeBn3s/xbyCQL3dcjzOatcef6UUHpB/6MaETg==
      dependencies:
        imurmurhash "^0.1.4"
    
    universalify@^0.1.0:
      version "0.1.2"
      resolved "https://registry.yarnpkg.com/universalify/-/universalify-0.1.2.tgz#b646f69be3942dabcecc9d6639c80dc105efaa66"
      integrity sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==
    
    universalify@^0.2.0:
      version "0.2.0"
      resolved "https://registry.yarnpkg.com/universalify/-/universalify-0.2.0.tgz#6451760566fa857534745ab1dde952d1b1761be0"
      integrity sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==
    
    unpipe@1.0.0, unpipe@~1.0.0:
      version "1.0.0"
      resolved "https://registry.yarnpkg.com/unpipe/-/unpipe-1.0.0.tgz#b2bf4ee8514aae6165b4817829d21b2ef49904ec"
      integrity sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==
    
    update-browserslist-db@^1.1.3:
      version "1.1.3"
      resolved "https://registry.yarnpkg.com/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz#348377dd245216f9e7060ff50b15a1b740b75420"
      integrity sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==
      dependencies:
        escalade "^3.2.0"
        picocolors "^1.1.1"
    
    uri-js@^4.2.2:
      version "4.4.1"
      resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
      integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
      dependencies:
        punycode "^2.1.0"
    
    url-parse@^1.5.3:
      version "1.5.10"
      resolved "https://registry.yarnpkg.com/url-parse/-/url-parse-1.5.10.tgz#9d3c2f736c1d75dd3bd2be507dcc111f1e2ea9c1"
      integrity sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==
      dependencies:
        querystringify "^2.1.1"
        requires-port "^1.0.0"
    
    util-deprecate@^1.0.1, util-deprecate@^1.0.2, util-deprecate@~1.0.1:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
      integrity sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==
    
    utils-merge@1.0.1:
      version "1.0.1"
      resolved "https://registry.yarnpkg.com/utils-merge/-/utils-merge-1.0.1.tgz#9f95710f50a267947b2ccc124741c1028427e713"
      integrity sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==
    
    uuid@^8.3.2:
      version "8.3.2"
      resolved "https://registry.yarnpkg.com/uuid/-/uuid-8.3.2.tgz#80d5b5ced271bb9af6c445f21a1a04c606cefbe2"
      integrity sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==
    
    validate-npm-package-license@^3.0.4:
      version "3.0.4"
      resolved "https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz#fc91f6b9c7ba15c857f4cb2c5defeec39d4f410a"
      integrity sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==
      dependencies:
        spdx-correct "^3.0.0"
        spdx-expression-parse "^3.0.0"
    
    validate-npm-package-name@^6.0.0:
      version "6.0.2"
      resolved "https://registry.yarnpkg.com/validate-npm-package-name/-/validate-npm-package-name-6.0.2.tgz#4e8d2c4d939975a73dd1b7a65e8f08d44c85df96"
      integrity sha512-IUoow1YUtvoBBC06dXs8bR8B9vuA3aJfmQNKMoaPG/OFsPmoQvw8xh+6Ye25Gx9DQhoEom3Pcu9MKHerm/NpUQ==
    
    vary@^1, vary@~1.1.2:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/vary/-/vary-1.1.2.tgz#2299f02c6ded30d4a5961b0b9f74524a18f634fc"
      integrity sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==
    
    vite@6.3.5:
      version "6.3.5"
      resolved "https://registry.yarnpkg.com/vite/-/vite-6.3.5.tgz#fec73879013c9c0128c8d284504c6d19410d12a3"
      integrity sha512-cZn6NDFE7wdTpINgs++ZJ4N49W2vRp8LCKrn3Ob1kYNtOo21vfDoaV5GzBfLU4MovSAB8uNRm4jgzVQZ+mBzPQ==
      dependencies:
        esbuild "^0.25.0"
        fdir "^6.4.4"
        picomatch "^4.0.2"
        postcss "^8.5.3"
        rollup "^4.34.9"
        tinyglobby "^0.2.13"
      optionalDependencies:
        fsevents "~2.3.3"
    
    void-elements@^2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/void-elements/-/void-elements-2.0.1.tgz#c066afb582bb1cb4128d60ea92392e94d5e9dbec"
      integrity sha512-qZKX4RnBzH2ugr8Lxa7x+0V6XD9Sb/ouARtiasEQCHB1EVU4NXtmHsDDrx1dO4ne5fc3J6EW05BP1Dl0z0iung==
    
    watchpack@2.4.2:
      version "2.4.2"
      resolved "https://registry.yarnpkg.com/watchpack/-/watchpack-2.4.2.tgz#2feeaed67412e7c33184e5a79ca738fbd38564da"
      integrity sha512-TnbFSbcOCcDgjZ4piURLCbJ3nJhznVh9kw6F6iokjiFPl8ONxe9A6nMDVXDiNbrSfLILs6vB07F7wLBrwPYzJw==
      dependencies:
        glob-to-regexp "^0.4.1"
        graceful-fs "^4.1.2"
    
    watchpack@^2.4.1:
      version "2.4.4"
      resolved "https://registry.yarnpkg.com/watchpack/-/watchpack-2.4.4.tgz#473bda72f0850453da6425081ea46fc0d7602947"
      integrity sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==
      dependencies:
        glob-to-regexp "^0.4.1"
        graceful-fs "^4.1.2"
    
    wbuf@^1.1.0, wbuf@^1.7.3:
      version "1.7.3"
      resolved "https://registry.yarnpkg.com/wbuf/-/wbuf-1.7.3.tgz#c1d8d149316d3ea852848895cb6a0bfe887b87df"
      integrity sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==
      dependencies:
        minimalistic-assert "^1.0.0"
    
    weak-lru-cache@^1.2.2:
      version "1.2.2"
      resolved "https://registry.yarnpkg.com/weak-lru-cache/-/weak-lru-cache-1.2.2.tgz#fdbb6741f36bae9540d12f480ce8254060dccd19"
      integrity sha512-DEAoo25RfSYMuTGc9vPJzZcZullwIqRDSI9LOy+fkCJPi6hykCnfKaXTuPBDuXAUcqHXyOgFtHNp/kB2FjYHbw==
    
    webidl-conversions@^3.0.0:
      version "3.0.1"
      resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-3.0.1.tgz#24534275e2a7bc6be7bc86611cc16ae0a5654871"
      integrity sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==
    
    webpack-dev-middleware@7.4.2, webpack-dev-middleware@^7.4.2:
      version "7.4.2"
      resolved "https://registry.yarnpkg.com/webpack-dev-middleware/-/webpack-dev-middleware-7.4.2.tgz#40e265a3d3d26795585cff8207630d3a8ff05877"
      integrity sha512-xOO8n6eggxnwYpy1NlzUKpvrjfJTvae5/D6WOK0S2LSo7vjmo5gCM1DbLUmFqrMTJP+W/0YZNctm7jasWvLuBA==
      dependencies:
        colorette "^2.0.10"
        memfs "^4.6.0"
        mime-types "^2.1.31"
        on-finished "^2.4.1"
        range-parser "^1.2.1"
        schema-utils "^4.0.0"
    
    webpack-dev-server@5.2.1:
      version "5.2.1"
      resolved "https://registry.yarnpkg.com/webpack-dev-server/-/webpack-dev-server-5.2.1.tgz#049072d6e19cbda8cf600b9e364e6662d61218ba"
      integrity sha512-ml/0HIj9NLpVKOMq+SuBPLHcmbG+TGIjXRHsYfZwocUBIqEvws8NnS/V9AFQ5FKP+tgn5adwVwRrTEpGL33QFQ==
      dependencies:
        "@types/bonjour" "^3.5.13"
        "@types/connect-history-api-fallback" "^1.5.4"
        "@types/express" "^4.17.21"
        "@types/express-serve-static-core" "^4.17.21"
        "@types/serve-index" "^1.9.4"
        "@types/serve-static" "^1.15.5"
        "@types/sockjs" "^0.3.36"
        "@types/ws" "^8.5.10"
        ansi-html-community "^0.0.8"
        bonjour-service "^1.2.1"
        chokidar "^3.6.0"
        colorette "^2.0.10"
        compression "^1.7.4"
        connect-history-api-fallback "^2.0.0"
        express "^4.21.2"
        graceful-fs "^4.2.6"
        http-proxy-middleware "^2.0.7"
        ipaddr.js "^2.1.0"
        launch-editor "^2.6.1"
        open "^10.0.3"
        p-retry "^6.2.0"
        schema-utils "^4.2.0"
        selfsigned "^2.4.1"
        serve-index "^1.9.1"
        sockjs "^0.3.24"
        spdy "^4.0.2"
        webpack-dev-middleware "^7.4.2"
        ws "^8.18.0"
    
    webpack-merge@6.0.1:
      version "6.0.1"
      resolved "https://registry.yarnpkg.com/webpack-merge/-/webpack-merge-6.0.1.tgz#50c776868e080574725abc5869bd6e4ef0a16c6a"
      integrity sha512-hXXvrjtx2PLYx4qruKl+kyRSLc52V+cCvMxRjmKwoA+CBbbF5GfIBtR6kCvl0fYGqTUPKB+1ktVmTHqMOzgCBg==
      dependencies:
        clone-deep "^4.0.1"
        flat "^5.0.2"
        wildcard "^2.0.1"
    
    webpack-sources@^3.0.0, webpack-sources@^3.2.3:
      version "3.3.3"
      resolved "https://registry.yarnpkg.com/webpack-sources/-/webpack-sources-3.3.3.tgz#d4bf7f9909675d7a070ff14d0ef2a4f3c982c723"
      integrity sha512-yd1RBzSGanHkitROoPFd6qsrxt+oFhg/129YzheDGqeustzX0vTZJZsSsQjVQC4yzBQ56K55XU8gaNCtIzOnTg==
    
    webpack-subresource-integrity@5.1.0:
      version "5.1.0"
      resolved "https://registry.yarnpkg.com/webpack-subresource-integrity/-/webpack-subresource-integrity-5.1.0.tgz#8b7606b033c6ccac14e684267cb7fb1f5c2a132a"
      integrity sha512-sacXoX+xd8r4WKsy9MvH/q/vBtEHr86cpImXwyg74pFIpERKt6FmB8cXpeuh0ZLgclOlHI4Wcll7+R5L02xk9Q==
      dependencies:
        typed-assert "^1.0.8"
    
    webpack@5.99.8:
      version "5.99.8"
      resolved "https://registry.yarnpkg.com/webpack/-/webpack-5.99.8.tgz#dd31a020b7c092d30c4c6d9a4edb95809e7f5946"
      integrity sha512-lQ3CPiSTpfOnrEGeXDwoq5hIGzSjmwD72GdfVzF7CQAI7t47rJG9eDWvcEkEn3CUQymAElVvDg3YNTlCYj+qUQ==
      dependencies:
        "@types/eslint-scope" "^3.7.7"
        "@types/estree" "^1.0.6"
        "@types/json-schema" "^7.0.15"
        "@webassemblyjs/ast" "^1.14.1"
        "@webassemblyjs/wasm-edit" "^1.14.1"
        "@webassemblyjs/wasm-parser" "^1.14.1"
        acorn "^8.14.0"
        browserslist "^4.24.0"
        chrome-trace-event "^1.0.2"
        enhanced-resolve "^5.17.1"
        es-module-lexer "^1.2.1"
        eslint-scope "5.1.1"
        events "^3.2.0"
        glob-to-regexp "^0.4.1"
        graceful-fs "^4.2.11"
        json-parse-even-better-errors "^2.3.1"
        loader-runner "^4.2.0"
        mime-types "^2.1.27"
        neo-async "^2.6.2"
        schema-utils "^4.3.2"
        tapable "^2.1.1"
        terser-webpack-plugin "^5.3.11"
        watchpack "^2.4.1"
        webpack-sources "^3.2.3"
    
    websocket-driver@>=0.5.1, websocket-driver@^0.7.4:
      version "0.7.4"
      resolved "https://registry.yarnpkg.com/websocket-driver/-/websocket-driver-0.7.4.tgz#89ad5295bbf64b480abcba31e4953aca706f5760"
      integrity sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==
      dependencies:
        http-parser-js ">=0.5.1"
        safe-buffer ">=5.1.0"
        websocket-extensions ">=0.1.1"
    
    websocket-extensions@>=0.1.1:
      version "0.1.4"
      resolved "https://registry.yarnpkg.com/websocket-extensions/-/websocket-extensions-0.1.4.tgz#7f8473bc839dfd87608adb95d7eb075211578a42"
      integrity sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==
    
    whatwg-url@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-5.0.0.tgz#966454e8765462e37644d3626f6742ce8b70965d"
      integrity sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==
      dependencies:
        tr46 "~0.0.3"
        webidl-conversions "^3.0.0"
    
    which-module@^2.0.0:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/which-module/-/which-module-2.0.1.tgz#776b1fe35d90aebe99e8ac15eb24093389a4a409"
      integrity sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==
    
    which@^1.2.1:
      version "1.3.1"
      resolved "https://registry.yarnpkg.com/which/-/which-1.3.1.tgz#a45043d54f5805316da8d62f9f50918d3da70b0a"
      integrity sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==
      dependencies:
        isexe "^2.0.0"
    
    which@^2.0.1:
      version "2.0.2"
      resolved "https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1"
      integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==
      dependencies:
        isexe "^2.0.0"
    
    which@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/which/-/which-5.0.0.tgz#d93f2d93f79834d4363c7d0c23e00d07c466c8d6"
      integrity sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==
      dependencies:
        isexe "^3.1.1"
    
    wildcard@^1.1.0:
      version "1.1.2"
      resolved "https://registry.yarnpkg.com/wildcard/-/wildcard-1.1.2.tgz#a7020453084d8cd2efe70ba9d3696263de1710a5"
      integrity sha512-DXukZJxpHA8LuotRwL0pP1+rS6CS7FF2qStDDE1C7DDg2rLud2PXRMuEDYIPhgEezwnlHNL4c+N6MfMTjCGTng==
    
    wildcard@^2.0.1:
      version "2.0.1"
      resolved "https://registry.yarnpkg.com/wildcard/-/wildcard-2.0.1.tgz#5ab10d02487198954836b6349f74fff961e10f67"
      integrity sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==
    
    word-wrap@^1.2.5:
      version "1.2.5"
      resolved "https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.5.tgz#d2c45c6dd4fbce621a66f136cbe328afd0410b34"
      integrity sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==
    
    "wrap-ansi-cjs@npm:wrap-ansi@^7.0.0":
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43"
      integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==
      dependencies:
        ansi-styles "^4.0.0"
        string-width "^4.1.0"
        strip-ansi "^6.0.0"
    
    wrap-ansi@^6.2.0:
      version "6.2.0"
      resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-6.2.0.tgz#e9393ba07102e6c91a3b221478f0257cd2856e53"
      integrity sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==
      dependencies:
        ansi-styles "^4.0.0"
        string-width "^4.1.0"
        strip-ansi "^6.0.0"
    
    wrap-ansi@^7.0.0:
      version "7.0.0"
      resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43"
      integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==
      dependencies:
        ansi-styles "^4.0.0"
        string-width "^4.1.0"
        strip-ansi "^6.0.0"
    
    wrap-ansi@^8.1.0:
      version "8.1.0"
      resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-8.1.0.tgz#56dc22368ee570face1b49819975d9b9a5ead214"
      integrity sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==
      dependencies:
        ansi-styles "^6.1.0"
        string-width "^5.0.1"
        strip-ansi "^7.0.1"
    
    wrap-ansi@^9.0.0:
      version "9.0.0"
      resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-9.0.0.tgz#1a3dc8b70d85eeb8398ddfb1e4a02cd186e58b3e"
      integrity sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==
      dependencies:
        ansi-styles "^6.2.1"
        string-width "^7.0.0"
        strip-ansi "^7.1.0"
    
    wrappy@1:
      version "1.0.2"
      resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
      integrity sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==
    
    ws@^7.4.5:
      version "7.5.10"
      resolved "https://registry.yarnpkg.com/ws/-/ws-7.5.10.tgz#58b5c20dc281633f6c19113f39b349bd8bd558d9"
      integrity sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==
    
    ws@^8.18.0:
      version "8.18.3"
      resolved "https://registry.yarnpkg.com/ws/-/ws-8.18.3.tgz#b56b88abffde62791c639170400c93dcb0c95472"
      integrity sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==
    
    ws@~8.17.1:
      version "8.17.1"
      resolved "https://registry.yarnpkg.com/ws/-/ws-8.17.1.tgz#9293da530bb548febc95371d90f9c878727d919b"
      integrity sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==
    
    wsl-utils@^0.1.0:
      version "0.1.0"
      resolved "https://registry.yarnpkg.com/wsl-utils/-/wsl-utils-0.1.0.tgz#8783d4df671d4d50365be2ee4c71917a0557baab"
      integrity sha512-h3Fbisa2nKGPxCpm89Hk33lBLsnaGBvctQopaBSOW/uIs6FTe1ATyAnKFJrzVs9vpGdsTe73WF3V4lIsk4Gacw==
      dependencies:
        is-wsl "^3.1.0"
    
    y18n@^4.0.0:
      version "4.0.3"
      resolved "https://registry.yarnpkg.com/y18n/-/y18n-4.0.3.tgz#b5f259c82cd6e336921efd7bfd8bf560de9eeedf"
      integrity sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==
    
    y18n@^5.0.5:
      version "5.0.8"
      resolved "https://registry.yarnpkg.com/y18n/-/y18n-5.0.8.tgz#7f4934d0f7ca8c56f95314939ddcd2dd91ce1d55"
      integrity sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==
    
    yallist@^3.0.2:
      version "3.1.1"
      resolved "https://registry.yarnpkg.com/yallist/-/yallist-3.1.1.tgz#dbb7daf9bfd8bac9ab45ebf602b8cbad0d5d08fd"
      integrity sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==
    
    yallist@^4.0.0:
      version "4.0.0"
      resolved "https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72"
      integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==
    
    yallist@^5.0.0:
      version "5.0.0"
      resolved "https://registry.yarnpkg.com/yallist/-/yallist-5.0.0.tgz#00e2de443639ed0d78fd87de0d27469fbcffb533"
      integrity sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==
    
    yargs-parser@^18.1.2:
      version "18.1.3"
      resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-18.1.3.tgz#be68c4975c6b2abf469236b0c870362fab09a7b0"
      integrity sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==
      dependencies:
        camelcase "^5.0.0"
        decamelize "^1.2.0"
    
    yargs-parser@^20.2.2:
      version "20.2.9"
      resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-20.2.9.tgz#2eb7dc3b0289718fc295f362753845c41a0c94ee"
      integrity sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==
    
    yargs-parser@^21.1.1:
      version "21.1.1"
      resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-21.1.1.tgz#9096bceebf990d21bb31fa9516e0ede294a77d35"
      integrity sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==
    
    yargs-parser@^22.0.0:
      version "22.0.0"
      resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-22.0.0.tgz#87b82094051b0567717346ecd00fd14804b357c8"
      integrity sha512-rwu/ClNdSMpkSrUb+d6BRsSkLUq1fmfsY6TOpYzTwvwkg1/NRG85KBy3kq++A8LKQwX6lsu+aWad+2khvuXrqw==
    
    yargs@17.7.2:
      version "17.7.2"
      resolved "https://registry.yarnpkg.com/yargs/-/yargs-17.7.2.tgz#991df39aca675a192b816e1e0363f9d75d2aa269"
      integrity sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==
      dependencies:
        cliui "^8.0.1"
        escalade "^3.1.1"
        get-caller-file "^2.0.5"
        require-directory "^2.1.1"
        string-width "^4.2.3"
        y18n "^5.0.5"
        yargs-parser "^21.1.1"
    
    yargs@^15.3.1:
      version "15.4.1"
      resolved "https://registry.yarnpkg.com/yargs/-/yargs-15.4.1.tgz#0d87a16de01aee9d8bec2bfbf74f67851730f4f8"
      integrity sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==
      dependencies:
        cliui "^6.0.0"
        decamelize "^1.2.0"
        find-up "^4.1.0"
        get-caller-file "^2.0.1"
        require-directory "^2.1.1"
        require-main-filename "^2.0.0"
        set-blocking "^2.0.0"
        string-width "^4.2.0"
        which-module "^2.0.0"
        y18n "^4.0.0"
        yargs-parser "^18.1.2"
    
    yargs@^16.1.1:
      version "16.2.0"
      resolved "https://registry.yarnpkg.com/yargs/-/yargs-16.2.0.tgz#1c82bf0f6b6a66eafce7ef30e376f49a12477f66"
      integrity sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==
      dependencies:
        cliui "^7.0.2"
        escalade "^3.1.1"
        get-caller-file "^2.0.5"
        require-directory "^2.1.1"
        string-width "^4.2.0"
        y18n "^5.0.5"
        yargs-parser "^20.2.2"
    
    yargs@^18.0.0:
      version "18.0.0"
      resolved "https://registry.yarnpkg.com/yargs/-/yargs-18.0.0.tgz#6c84259806273a746b09f579087b68a3c2d25bd1"
      integrity sha512-4UEqdc2RYGHZc7Doyqkrqiln3p9X2DZVxaGbwhn2pi7MrRagKaOcIKe8L3OxYcbhXLgLFUS3zAYuQjKBQgmuNg==
      dependencies:
        cliui "^9.0.1"
        escalade "^3.1.1"
        get-caller-file "^2.0.5"
        string-width "^7.2.0"
        y18n "^5.0.5"
        yargs-parser "^22.0.0"
    
    yocto-queue@^0.1.0:
      version "0.1.0"
      resolved "https://registry.yarnpkg.com/yocto-queue/-/yocto-queue-0.1.0.tgz#0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b"
      integrity sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==
    
    yoctocolors-cjs@^2.1.2:
      version "2.1.3"
      resolved "https://registry.yarnpkg.com/yoctocolors-cjs/-/yoctocolors-cjs-2.1.3.tgz#7e4964ea8ec422b7a40ac917d3a344cfd2304baa"
      integrity sha512-U/PBtDf35ff0D8X8D0jfdzHYEPFxAI7jJlxZXwCSez5M3190m+QobIfh+sWDWSHMCWWJN2AWamkegn6vr6YBTw==
    
    zone.js@~0.15.0:
      version "0.15.1"
      resolved "https://registry.yarnpkg.com/zone.js/-/zone.js-0.15.1.tgz#1e109adb75f80e9e004ee8e0d4a0a52e0a336481"
      integrity sha512-XE96n56IQpJM7NAoXswY3XRLcWFW83xe0BiAOeMD7K5k5xecOeul3Qcpx6GqEeeHNkW5DWL5zOyTbEfB4eti8w==
    
    ]]></file>
  <file path="angular\web.config"><![CDATA[
    ﻿<?xml version="1.0" encoding="utf-8"?>
    <configuration>
    <system.webServer>
     <rewrite>
      <rules>
        <rule name="Redirect" stopProcessing="true">
          <match url="getEnvConfig" />
          <action type="Redirect" url="dynamic-env.json" />
        </rule>
        <rule name="Angular Routes" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="./index.html" />
        </rule>
      </rules>
     </rewrite>
    </system.webServer>
    </configuration>
    ]]></file>
  <file path="angular\tsconfig.spec.json"><![CDATA[
    /* To learn more about this file see: https://angular.io/config/tsconfig. */
    {
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "./out-tsc/spec",
        "types": [
          "jasmine"
        ]
      },
      "files": [
        "src/test.ts",
        "src/polyfills.ts"
      ],
      "include": [
        "src/**/*.spec.ts",
        "src/**/*.d.ts"
      ]
    }
    
    ]]></file>
  <file path="angular\tsconfig.json"><![CDATA[
    /* To learn more about this file see: https://angular.io/config/tsconfig. */
    {
      "compileOnSave": false,
      "compilerOptions": {
        "baseUrl": "./",
        "outDir": "./dist/out-tsc",
        "sourceMap": true,
        "declaration": false,
        "downlevelIteration": true,
        "experimentalDecorators": true,
        "moduleResolution": "node",
        "importHelpers": true,
        "target": "ES2022",
        "module": "es2020",
        "lib": ["es2018", "dom"],
        "paths": {
          "@angular/*":["node_modules/@angular/*"],
          "@abp/*":["node_modules/@abp/*"],
          "@volo/*":["node_modules/@volo/*"],
          "@volosoft/*":["node_modules/@volosoft/*"],
          "@swimlane/*": ["node_modules/@swimlane/*"],
          "@ngx-validate/core":["node_modules/@ngx-validate/core"],
          "@ng-bootstrap/ng-bootstrap": ["node_modules/@ng-bootstrap/ng-bootstrap"],
        },
        "useDefineForClassFields": false
      },
      "angularCompilerOptions": {
        "enableI18nLegacyMessageIdFormat": false
      }
    }
    
    ]]></file>
  <file path="angular\tsconfig.app.json"><![CDATA[
    /* To learn more about this file see: https://angular.io/config/tsconfig. */
    {
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "./out-tsc/app",
        "types": []
      },
      "files": [
        "src/main.ts",
        "src/polyfills.ts"
      ],
      "include": [
        "src/**/*.d.ts"
      ]
    }
    
    ]]></file>
  <file path="angular\start.ps1"><![CDATA[
    npx yarn
    npx yarn start
    
    ]]></file>
  <file path="angular\README.md"><![CDATA[
    # ExampleAbpApplicationLayer
    
    This is a startup project based on the ABP framework. For more information, visit <a href="https://abp.io/" target="_blank">abp.io</a>
    
    ## Development server
    
    Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.
    
    ## Code scaffolding
    
    Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.
    
    ## Build
    
    Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.
    
    ## Running unit tests
    
    Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).
    
    ## Running end-to-end tests
    
    Run `ng e2e` to execute the end-to-end tests via a platform of your choice.
    
    ## Further help
    
    To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
    
    ## Remote Environment
    
    The application provides a remote environment for production. we use `dynamic-env.json` file to set the environment variables and configured web server's `getEnvConfig` endpoint by default.
    
    See [Environment](https://abp.io/docs/latest/framework/ui/angular/environment) for more information.
    ]]></file>
  <file path="angular\package.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer",
      "version": "0.0.0",
      "scripts": {
        "ng": "ng",
        "start": "ng serve",
        "build": "ng build",
        "build:prod": "ng build --configuration production",
        "watch": "ng build --watch --configuration development",
        "test": "ng test",
        "lint": "ng lint"
      },
      "private": true,
      "dependencies": {
        "@abp/ng.components": "~9.3.1",
        "@abp/ng.core": "~9.3.1",
        "@abp/ng.oauth": "~9.3.1",
        "@abp/ng.setting-management": "~9.3.1",
        "@abp/ng.theme.shared": "~9.3.1",
        "@abp/ng.feature-management": "~9.3.1",
        "@volo/abp.commercial.ng.ui": "~9.3.1",
        "@volo/abp.ng.account": "~9.3.1",
        "@volo/abp.ng.audit-logging": "~9.3.1",
        "@volo/abp.ng.gdpr": "~9.3.1",
        "@volo/abp.ng.chat": "~9.3.1",
        "@volo/abp.ng.identity": "~9.3.1",
        "@volo/abp.ng.openiddictpro": "~9.3.1",
        "@volo/abp.ng.language-management": "~9.3.1",
        "@volo/abp.ng.file-management": "~9.3.1",
        "@volo/abp.ng.saas": "~9.3.1",
        "@volo/abp.ng.text-template-management": "~9.3.1",
        "@volosoft/abp.ng.theme.lepton-x": "~4.3.1",
        "@angular/animations": "~20.0.0",
        "@angular/common": "~20.0.0",
        "@angular/compiler": "~20.0.0",
        "@angular/core": "~20.0.0",
        "@angular/forms": "~20.0.0",
        "@angular/localize": "~20.0.0",
        "@angular/platform-browser-dynamic": "~20.0.0",
        "@angular/platform-browser": "~20.0.0",
        "@angular/router": "~20.0.0",
        "rxjs": "~7.8.0",
        "tslib": "^2.0.0",
        "zone.js": "~0.15.0"
      },
      "devDependencies": {
        "@abp/ng.schematics": "~9.3.1",
        "@angular-devkit/build-angular": "~20.0.0",
        "@angular-eslint/builder": "~20.0.0",
        "@angular-eslint/eslint-plugin": "~20.0.0",
        "@angular-eslint/eslint-plugin-template": "~20.0.0",
        "@angular-eslint/schematics": "~20.0.0",
        "@angular-eslint/template-parser": "~20.0.0",
        "@angular/cli": "~20.0.0",
        "@angular/compiler-cli": "~20.0.0",
        "@angular/language-service": "~20.0.0",
        "@types/jasmine": "~3.6.0",
        "@types/node": "^20.0.0",
        "@typescript-eslint/eslint-plugin": "^7.0.0",
        "@typescript-eslint/parser": "^7.0.0",
        "eslint": "^8.0.0",
        "jasmine-core": "~4.0.0",
        "karma": "~6.3.0",
        "karma-chrome-launcher": "~3.1.0",
        "karma-coverage": "~2.1.0",
        "karma-jasmine": "~4.0.0",
        "karma-jasmine-html-reporter": "^1.0.0",
        "typescript": "~5.8.0"
      }
    }
    
    ]]></file>
  <file path="angular\nginx.conf"><![CDATA[
    server {
        listen       80;
        listen  [::]:80;
        server_name  _;
    
        #access_log  /var/log/nginx/host.access.log  main;
        
    	location / {
            root   /usr/share/nginx/html;        
            index  index.html index.htm;
            try_files $uri $uri/ /index.html =404;		
    	}
    	
    	location /getEnvConfig {
    		default_type 'application/json';
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Content-Type' 'application/json';
    		try_files $uri /dynamic-env.json;
        }
    
        #error_page  404              /404.html;
    
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
    ]]></file>
  <file path="angular\karma.conf.js"><![CDATA[
    // Karma configuration file, see link for more information
    // https://karma-runner.github.io/1.0/config/configuration-file.html
    
    module.exports = function (config) {
      config.set({
        basePath: '',
        frameworks: ['jasmine', '@angular-devkit/build-angular'],
        plugins: [
          require('karma-jasmine'),
          require('karma-chrome-launcher'),
          require('karma-jasmine-html-reporter'),
          require('karma-coverage'),
          require('@angular-devkit/build-angular/plugins/karma')
        ],
        client: {
          jasmine: {
            // you can add configuration options for Jasmine here
            // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
            // for example, you can disable the random execution with `random: false`
            // or set a specific seed with `seed: 4321`
          },
          clearContext: false // leave Jasmine Spec Runner output visible in browser
        },
        jasmineHtmlReporter: {
          suppressAll: true // removes the duplicated traces
        },
        coverageReporter: {
          dir: require('path').join(__dirname, './coverage/ExampleAbpApplicationLayer'),
          subdir: '.',
          reporters: [
            { type: 'html' },
            { type: 'text-summary' }
          ]
        },
        reporters: ['progress', 'kjhtml'],
        port: 9876,
        colors: true,
        logLevel: config.LOG_INFO,
        autoWatch: true,
        browsers: ['Chrome'],
        singleRun: false,
        restartOnFileChange: true
      });
    };
    
    ]]></file>
  <file path="angular\dynamic-env.json"><![CDATA[
    {
    }
    ]]></file>
  <file path="angular\Dockerfile.local"><![CDATA[
    FROM nginx:alpine
    WORKDIR /app
    COPY dist/ExampleAbpApplicationLayer /usr/share/nginx/html
    COPY dynamic-env.json /usr/share/nginx/html
    COPY /nginx.conf  /etc/nginx/conf.d/default.conf
    ]]></file>
  <file path="angular\Dockerfile"><![CDATA[
    FROM node:18-alpine AS build
    
    WORKDIR /app
    COPY package*.json /app/
    
    RUN yarn
    COPY . /app
    
    RUN yarn build:prod
    
    FROM nginx:alpine
    COPY dynamic-env.json /usr/share/nginx/html
    COPY nginx.conf  /etc/nginx/conf.d/default.conf
    
    COPY --from=build /app/dist/ExampleAbpApplicationLayer /usr/share/nginx/html
    
    ]]></file>
  <file path="angular\angular.json"><![CDATA[
    {
      "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
      "cli": {
        "analytics": false,
        "schematicCollections": ["@angular-eslint/schematics"]
      },
      "version": 1,
      "newProjectRoot": "projects",
      "projects": {
        "ExampleAbpApplicationLayer": {
          "projectType": "application",
          "schematics": {
            "@schematics/angular:component": {
              "style": "scss"
            }
          },
          "root": "",
          "sourceRoot": "src",
          "prefix": "app",
          "architect": {
            "build": {
              "builder": "@angular-devkit/build-angular:browser",
              "options": {
                "outputPath": "dist/ExampleAbpApplicationLayer",
                "index": "src/index.html",
                "main": "src/main.ts",
                "polyfills": "src/polyfills.ts",
                "tsConfig": "tsconfig.app.json",
                "inlineStyleLanguage": "scss",
                "allowedCommonJsDependencies": [
                  "@ant-design/colors",
                  "chart.js",
                  "js-sha256",
                  "@uppy/xhr-upload",
                  "@uppy/dashboard",
                  "@uppy/core"
                ],
                "assets": [
                  "src/favicon.ico",
                  "src/assets",
                  {
                    "glob": "web.config",
                    "input": ".",
                    "output": "."
                  },
                  {
                    "glob": "dynamic-env.json",
                    "input": ".",
                    "output": "."
                  }
                ],
                "styles": [
                  {
                    "input": "node_modules/@swimlane/ngx-datatable/index.css",
                    "inject": true,
                    "bundleName": "ngx-datatable-index"
                  },
                  {
                    "input": "node_modules/@swimlane/ngx-datatable/assets/icons.css",
                    "inject": true,
                    "bundleName": "ngx-datatable-icons"
                  },
                  {
                    "input": "node_modules/@swimlane/ngx-datatable/themes/material.css",
                    "inject": true,
                    "bundleName": "ngx-datatable-material"
                  },
                  {
                    "input": "node_modules/@fortawesome/fontawesome-free/css/all.min.css",
                    "inject": true,
                    "bundleName": "fontawesome-all.min"
                  },
                  {
                    "input": "node_modules/@fortawesome/fontawesome-free/css/v4-shims.min.css",
                    "inject": true,
                    "bundleName": "fontawesome-v4-shims.min"
                  },
                  {
                    "input": "node_modules/ng-zorro-antd/tree/style/index.min.css",
                    "inject": false,
                    "bundleName": "ng-zorro-antd-tree"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/font-bundle.css",
                    "inject": false,
                    "bundleName": "font-bundle"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/font-bundle.rtl.css",
                    "inject": false,
                    "bundleName": "font-bundle.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/abp.ng.theme.lepton-x/assets/css/abp-bundle.css",
                    "inject": false,
                    "bundleName": "abp-bundle"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dark.css",
                    "inject": false,
                    "bundleName": "dark"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/light.css",
                    "inject": false,
                    "bundleName": "light"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dim.css",
                    "inject": false,
                    "bundleName": "dim"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dim.css",
                    "inject": false,
                    "bundleName": "bootstrap-dim"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dark.css",
                    "inject": false,
                    "bundleName": "bootstrap-dark"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-light.css",
                    "inject": false,
                    "bundleName": "bootstrap-light"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/ng-bundle.css",
                    "inject": false,
                    "bundleName": "ng-bundle"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/side-menu/layout-bundle.css",
                    "inject": false,
                    "bundleName": "layout-bundle"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dark.rtl.css",
                    "inject": false,
                    "bundleName": "dark.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/light.rtl.css",
                    "inject": false,
                    "bundleName": "light.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dim.rtl.css",
                    "inject": false,
                    "bundleName": "dim.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dim.rtl.css",
                    "inject": false,
                    "bundleName": "bootstrap-dim.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dark.rtl.css",
                    "inject": false,
                    "bundleName": "bootstrap-dark.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-light.rtl.css",
                    "inject": false,
                    "bundleName": "bootstrap-light.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/ng-bundle.rtl.css",
                    "inject": false,
                    "bundleName": "ng-bundle.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/side-menu/layout-bundle.rtl.css",
                    "inject": false,
                    "bundleName": "layout-bundle.rtl"
                  },
                  {
                    "input": "node_modules/@volosoft/abp.ng.theme.lepton-x/assets/css/abp-bundle.rtl.css",
                    "inject": false,
                    "bundleName": "abp-bundle.rtl"
                  },
                  "node_modules/bootstrap-icons/font/bootstrap-icons.css",
                  "src/styles.scss"
                ],
                "scripts": []
              },
              "configurations": {
                "production": {
                  "budgets": [
                    {
                      "type": "initial",
                      "maximumWarning": "2mb",
                      "maximumError": "2.5mb"
                    },
                    {
                      "type": "anyComponentStyle",
                      "maximumWarning": "2kb",
                      "maximumError": "100kb"
                    }
                  ],
                  "fileReplacements": [
                    {
                      "replace": "src/environments/environment.ts",
                      "with": "src/environments/environment.prod.ts"
                    }
                  ],
                  "outputHashing": "all"
                },
                "development": {
                  "buildOptimizer": false,
                  "optimization": false,
                  "vendorChunk": true,
                  "extractLicenses": false,
                  "sourceMap": true,
                  "namedChunks": true
                }
              },
              "defaultConfiguration": "production"
            },
            "serve": {
              "builder": "@angular-devkit/build-angular:dev-server",
              "configurations": {
                "production": {
                  "buildTarget": "ExampleAbpApplicationLayer:build:production"
                },
                "development": {
                  "buildTarget": "ExampleAbpApplicationLayer:build:development"
                }
              },
              "defaultConfiguration": "development"
            },
            "extract-i18n": {
              "builder": "@angular-devkit/build-angular:extract-i18n",
              "options": {
                "buildTarget": "ExampleAbpApplicationLayer:build"
              }
            },
            "test": {
              "builder": "@angular-devkit/build-angular:karma",
              "options": {
                "main": "src/test.ts",
                "polyfills": "src/polyfills.ts",
                "tsConfig": "tsconfig.spec.json",
                "karmaConfig": "karma.conf.js",
                "inlineStyleLanguage": "scss",
                "assets": ["src/favicon.ico", "src/assets"],
                "styles": ["src/styles.scss"],
                "scripts": []
              }
            },
            "lint": {
              "builder": "@angular-eslint/builder:lint",
              "options": {
                "lintFilePatterns": ["src/**/*.ts", "src/**/*.html"]
              }
            }
          }
        }
      }
    }
    
    ]]></file>
  <file path="angular\.prettierrc"><![CDATA[
    {
      "singleQuote": true,
      "printWidth": 100,
      "arrowParens": "avoid"
    }
    
    ]]></file>
  <file path="angular\.gitignore"><![CDATA[
    ﻿# See http://help.github.com/ignore-files/ for more about ignoring files.
    
    /.suite
    # compiled output
    /dist
    /tmp
    /out-tsc
    # Only exists if Bazel was run
    /bazel-out
    
    # dependencies
    /node_modules
    
    # profiling files
    chrome-profiler-events*.json
    
    # IDEs and editors
    /.idea
    .project
    .classpath
    .c9/
    *.launch
    .settings/
    *.sublime-workspace
    
    # IDE - VSCode
    .vscode/*
    !.vscode/settings.json
    !.vscode/tasks.json
    !.vscode/launch.json
    !.vscode/extensions.json
    .history/*
    
    # misc
    /.angular/cache
    /.sass-cache
    /connect.lock
    /coverage
    /libpeerconnection.log
    npm-debug.log
    yarn-error.log
    testem.log
    /typings
    
    # System Files
    .DS_Store
    Thumbs.db
    /.suite/
    
    ]]></file>
  <file path="angular\.eslintrc.json"><![CDATA[
    {
      "root": true,
      "ignorePatterns": [
        "projects/**/*"
      ],
      "overrides": [
        {
          "files": [
            "*.ts"
          ],
          "parserOptions": {
            "project": [
              "tsconfig.json"
            ],
            "createDefaultProgram": true
          },
          "extends": [
            "plugin:@angular-eslint/recommended",
            "plugin:@angular-eslint/template/process-inline-templates"
          ],
          "rules": {
            "@angular-eslint/directive-selector": [
              "error",
              {
                "type": "attribute",
                "prefix": "app",
                "style": "camelCase"
              }
            ],
            "@angular-eslint/component-selector": [
              "error",
              {
                "type": "element",
                "prefix": "app",
                "style": "kebab-case"
              }
            ]
          }
        },
        {
          "files": [
            "*.html"
          ],
          "extends": [
            "plugin:@angular-eslint/template/recommended"
          ],
          "rules": {}
        }
      ]
    }
    
    ]]></file>
  <file path="angular\.editorconfig"><![CDATA[
    # Editor configuration, see https://editorconfig.org
    root = true
    
    [*]
    charset = utf-8
    indent_style = space
    indent_size = 2
    insert_final_newline = true
    trim_trailing_whitespace = true
    
    [*.ts]
    quote_type = single
    
    [*.md]
    max_line_length = off
    trim_trailing_whitespace = false
    
    ]]></file>
  <file path=".suite\module-entity-extension.json"><![CDATA[
    {
      "Modules": [
        {
          "DomainProjectDllFileName": "MySampleModule.MyProject.Domain.dll"
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\web.config"><![CDATA[
    ﻿<?xml version="1.0" encoding="utf-8"?>
    <configuration>
      <location path="." inheritInChildApplications="false">
        <system.webServer>
          <handlers>
            <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
          </handlers>
          <aspNetCore processPath="dotnet" arguments=".\ExampleAbpApplicationLayer.HttpApi.Host.dll" stdoutLogEnabled="false" stdoutLogFile=".\Logs\stdout" hostingModel="inprocess" />
        </system.webServer>
      </location>
      <system.webServer>
        <httpProtocol>
          <customHeaders>
            <remove name="x-powered-by" />
          </customHeaders>
        </httpProtocol>
      </system.webServer>
    </configuration>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Program.cs"><![CDATA[
    ﻿using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using Serilog;
    using Serilog.Events;
    
    namespace ExampleAbpApplicationLayer;
    
    public class Program
    {
        public async static Task<int> Main(string[] args)
        {
            Log.Logger = new LoggerConfiguration()
                .WriteTo.Async(c => c.File("Logs/logs.txt"))
                .WriteTo.Async(c => c.Console())
                .CreateBootstrapLogger();
    
            try
            {
                Log.Information("Starting ExampleAbpApplicationLayer.HttpApi.Host.");
                var builder = WebApplication.CreateBuilder(args);
                builder.Host
                    .AddAppSettingsSecretsJson()
                    .UseAutofac()
                    .UseSerilog((context, services, loggerConfiguration) =>
                    {
                        loggerConfiguration
                        #if DEBUG
                            .MinimumLevel.Debug()
                        #else
                            .MinimumLevel.Information()
                        #endif
                            .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
                            .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Warning)
                            .Enrich.FromLogContext()
                            .WriteTo.Async(c => c.File("Logs/logs.txt"))
                            .WriteTo.Async(c => c.Console())
                            .WriteTo.Async(c => c.AbpStudio(services));
                    });
                await builder.AddApplicationAsync<ExampleAbpApplicationLayerHttpApiHostModule>();
                var app = builder.Build();
                await app.InitializeApplicationAsync();
                await app.RunAsync();
                return 0;
            }
            catch (Exception ex)
            {
                if (ex is HostAbortedException)
                {
                    throw;
                }
    
                Log.Fatal(ex, "Host terminated unexpectedly!");
                return 1;
            }
            finally
            {
                Log.CloseAndFlush();
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\package.json"><![CDATA[
    {
      "version": "1.0.0",
      "name": "my-app",
      "private": true,
      "dependencies": {
        "@volo/account": "~9.3.1",
    		"@volo/abp.aspnetcore.mvc.ui.theme.leptonx": "~4.3.1"
      }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayerHttpApiHostModule.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Security.Cryptography.X509Certificates;
    using Microsoft.AspNetCore.Authentication;
    using Microsoft.AspNetCore.Authentication.Google;
    using Microsoft.AspNetCore.Authentication.MicrosoftAccount;
    using Microsoft.AspNetCore.Authentication.Twitter;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Cors;
    using Microsoft.AspNetCore.HttpOverrides;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using Microsoft.AspNetCore.Extensions.DependencyInjection;
    using OpenIddict.Validation.AspNetCore;
    using OpenIddict.Server.AspNetCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.MultiTenancy;
    using ExampleAbpApplicationLayer.HealthChecks;
    using Microsoft.OpenApi.Models;
    using Volo.Abp;
    using Volo.Abp.Studio;
    using Volo.Abp.Account;
    using Volo.Abp.Account.Web;
    using Volo.Abp.AspNetCore.MultiTenancy;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Autofac;
    using Volo.Abp.Localization;
    using Volo.Abp.Modularity;
    using Volo.Abp.UI.Navigation.Urls;
    using Volo.Abp.VirtualFileSystem;
    using Volo.Abp.AspNetCore.Mvc.UI.Bundling;
    using Volo.Abp.AspNetCore.Mvc.UI.Theme.Shared;
    using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonX;
    using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonX.Bundling;
    using Volo.Abp.LeptonX.Shared;
    using Microsoft.AspNetCore.Hosting;
    using Volo.Abp.AspNetCore.Serilog;
    using Volo.Abp.Identity;
    using Volo.Abp.OpenIddict;
    using Volo.Abp.Swashbuckle;
    using Volo.Abp.Studio.Client.AspNetCore;
    using Volo.Abp.Security.Claims;
    using Volo.Abp.Account.Public.Web.ExternalProviders;
    using Volo.Abp.Account.Public.Web;
    using Volo.Abp.Account.Public.Web.Impersonation;
    using Volo.Saas.Host;
    using Volo.Chat;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerHttpApiModule),
        typeof(AbpStudioClientAspNetCoreModule),
        typeof(AbpAspNetCoreMvcUiLeptonXThemeModule),
        typeof(AbpAutofacModule),
        typeof(AbpAspNetCoreMultiTenancyModule),
        typeof(ExampleAbpApplicationLayerApplicationModule),
        typeof(ExampleAbpApplicationLayerEntityFrameworkCoreModule),
        typeof(AbpAccountPublicWebImpersonationModule),
        typeof(AbpAccountPublicWebOpenIddictModule),
        typeof(ChatSignalRModule),
        typeof(AbpSwashbuckleModule),
        typeof(AbpAspNetCoreSerilogModule)
        )]
    public class ExampleAbpApplicationLayerHttpApiHostModule : AbpModule
    {
        public override void PreConfigureServices(ServiceConfigurationContext context)
        {
            var hostingEnvironment = context.Services.GetHostingEnvironment();
            var configuration = context.Services.GetConfiguration();
    
            PreConfigure<OpenIddictBuilder>(builder =>
            {
                builder.AddValidation(options =>
                {
                    options.AddAudiences("ExampleAbpApplicationLayer");
                    options.UseLocalServer();
                    options.UseAspNetCore();
                });
            });
    
            if (!hostingEnvironment.IsDevelopment())
            {
                PreConfigure<AbpOpenIddictAspNetCoreOptions>(options =>
                {
                    options.AddDevelopmentEncryptionAndSigningCertificate = false;
                });
    
                PreConfigure<OpenIddictServerBuilder>(serverBuilder =>
                {
                    serverBuilder.AddProductionEncryptionAndSigningCertificate("openiddict.pfx", configuration["AuthServer:CertificatePassPhrase"]!);
                    serverBuilder.SetIssuer(new Uri(configuration["AuthServer:Authority"]!));
                });
            }
        }
    
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            var configuration = context.Services.GetConfiguration();
            var hostingEnvironment = context.Services.GetHostingEnvironment();
    
            if (!configuration.GetValue<bool>("App:DisablePII"))
            {
                Microsoft.IdentityModel.Logging.IdentityModelEventSource.ShowPII = true;
                Microsoft.IdentityModel.Logging.IdentityModelEventSource.LogCompleteSecurityArtifact = true;
            }
    
            if (!configuration.GetValue<bool>("AuthServer:RequireHttpsMetadata"))
            {
                Configure<OpenIddictServerAspNetCoreOptions>(options =>
                {
                    options.DisableTransportSecurityRequirement = true;
                });
                
                Configure<ForwardedHeadersOptions>(options =>
                {
                    options.ForwardedHeaders = ForwardedHeaders.XForwardedProto;
                });
            }
    
            ConfigureAuthentication(context);
            ConfigureUrls(configuration);
            ConfigureBundles();
            ConfigureConventionalControllers();
            ConfigureExternalProviders(context);
            ConfigureImpersonation(context, configuration);
            ConfigureHealthChecks(context);
            ConfigureSwagger(context, configuration);
            ConfigureVirtualFileSystem(context);
            ConfigureCors(context, configuration);
            ConfigureTheme();
        }
        
        private void ConfigureTheme()
        {
            Configure<LeptonXThemeOptions>(options =>
            {
                options.DefaultStyle = LeptonXStyleNames.System;
            });
        }
    
        private void ConfigureAuthentication(ServiceConfigurationContext context)
        {
            context.Services.ForwardIdentityAuthenticationForBearer(OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme);
            context.Services.Configure<AbpClaimsPrincipalFactoryOptions>(options =>
            {
                options.IsDynamicClaimsEnabled = true;
            });
        }
    
        private void ConfigureUrls(IConfiguration configuration)
        {
            Configure<AppUrlOptions>(options =>
            {
                options.Applications["MVC"].RootUrl = configuration["App:SelfUrl"];
                options.Applications["Angular"].RootUrl = configuration["App:AngularUrl"];
                options.Applications["Angular"].Urls[AccountUrlNames.PasswordReset] = "account/reset-password";
                options.Applications["Angular"].Urls[AccountUrlNames.EmailConfirmation] = "account/email-confirmation";
                options.RedirectAllowedUrls.AddRange(configuration["App:RedirectAllowedUrls"]?.Split(',') ?? Array.Empty<string>());
            });
        }
    
        private void ConfigureBundles()
        {
            Configure<AbpBundlingOptions>(options =>
            {
                options.StyleBundles.Configure(
                    LeptonXThemeBundles.Styles.Global,
                    bundle =>
                    {
                        bundle.AddFiles("/global-styles.css");
                    }
                );
    
                options.ScriptBundles.Configure(
                    LeptonXThemeBundles.Scripts.Global,
                    bundle =>
                    {
                        bundle.AddFiles("/global-scripts.js");
                    }
                );
            });
        }
    
    
        private void ConfigureVirtualFileSystem(ServiceConfigurationContext context)
        {
            var hostingEnvironment = context.Services.GetHostingEnvironment();
    
            if (hostingEnvironment.IsDevelopment())
            {
                Configure<AbpVirtualFileSystemOptions>(options =>
                {
                    options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerDomainSharedModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Domain.Shared"));
                    options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerDomainModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Domain"));
                    options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerApplicationContractsModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Application.Contracts"));
                    options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerApplicationModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Application"));
                });
            }
        }
    
        private void ConfigureConventionalControllers()
        {
            Configure<AbpAspNetCoreMvcOptions>(options =>
            {
                options.ConventionalControllers.Create(typeof(ExampleAbpApplicationLayerApplicationModule).Assembly);
            });
        }
    
        private static void ConfigureSwagger(ServiceConfigurationContext context, IConfiguration configuration)
        {
            context.Services.AddAbpSwaggerGenWithOidc(
                configuration["AuthServer:Authority"]!,
                ["ExampleAbpApplicationLayer"],
                [AbpSwaggerOidcFlows.AuthorizationCode],
                null,
                options =>
                {
                    options.SwaggerDoc("v1", new OpenApiInfo { Title = "ExampleAbpApplicationLayer API", Version = "v1" });
                    options.DocInclusionPredicate((docName, description) => true);
                    options.CustomSchemaIds(type => type.FullName);
                });
        }
    
        private void ConfigureCors(ServiceConfigurationContext context, IConfiguration configuration)
        {
            context.Services.AddCors(options =>
            {
                options.AddDefaultPolicy(builder =>
                {
                    builder
                        .WithOrigins(
                            configuration["App:CorsOrigins"]?
                                .Split(",", StringSplitOptions.RemoveEmptyEntries)
                                .Select(o => o.Trim().RemovePostFix("/"))
                                .ToArray() ?? Array.Empty<string>()
                        )
                        .WithAbpExposedHeaders()
                        .SetIsOriginAllowedToAllowWildcardSubdomains()
                        .AllowAnyHeader()
                        .AllowAnyMethod()
                        .AllowCredentials();
                });
            });
        }
        
        private void ConfigureExternalProviders(ServiceConfigurationContext context)
        {
            context.Services.AddAuthentication()
                .AddGoogle(GoogleDefaults.AuthenticationScheme, options =>
                {
                    options.ClaimActions.MapJsonKey(AbpClaimTypes.Picture, "picture");
                })
                .WithDynamicOptions<GoogleOptions, GoogleHandler>(
                    GoogleDefaults.AuthenticationScheme,
                    options =>
                    {
                        options.WithProperty(x => x.ClientId);
                        options.WithProperty(x => x.ClientSecret, isSecret: true);
                    }
                )
                .AddMicrosoftAccount(MicrosoftAccountDefaults.AuthenticationScheme, options =>
                {
                    //Personal Microsoft accounts as an example.
                    options.AuthorizationEndpoint = "https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize";
                    options.TokenEndpoint = "https://login.microsoftonline.com/consumers/oauth2/v2.0/token";
    
                    options.ClaimActions.MapCustomJson("picture", _ => "https://graph.microsoft.com/v1.0/me/photo/$value");
                    options.SaveTokens = true;
                })
                .WithDynamicOptions<MicrosoftAccountOptions, MicrosoftAccountHandler>(
                    MicrosoftAccountDefaults.AuthenticationScheme,
                    options =>
                    {
                        options.WithProperty(x => x.ClientId);
                        options.WithProperty(x => x.ClientSecret, isSecret: true);
                    }
                )
                .AddTwitter(TwitterDefaults.AuthenticationScheme, options =>
                {
                    options.ClaimActions.MapJsonKey(AbpClaimTypes.Picture, "profile_image_url_https");
                    options.RetrieveUserDetails = true;
                })
                .WithDynamicOptions<TwitterOptions, TwitterHandler>(
                    TwitterDefaults.AuthenticationScheme,
                    options =>
                    {
                        options.WithProperty(x => x.ConsumerKey);
                        options.WithProperty(x => x.ConsumerSecret, isSecret: true);
                    }
                );
        }
    
        private void ConfigureImpersonation(ServiceConfigurationContext context, IConfiguration configuration)
        {
            context.Services.Configure<AbpAccountOptions>(options =>
            {
                options.TenantAdminUserName = "admin";
                options.ImpersonationTenantPermission = SaasHostPermissions.Tenants.Impersonation;
                options.ImpersonationUserPermission = IdentityPermissions.Users.Impersonation;
            });
        }
    
        private void ConfigureHealthChecks(ServiceConfigurationContext context)
        {
            context.Services.AddExampleAbpApplicationLayerHealthChecks();
        }
    
        public override void OnApplicationInitialization(ApplicationInitializationContext context)
        {
            var app = context.GetApplicationBuilder();
            var env = context.GetEnvironment();
    
            app.UseForwardedHeaders();
    
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
    
            app.UseAbpRequestLocalization();
    
            if (!env.IsDevelopment())
            {
                app.UseErrorPage();
            }
            
            app.Use(async (httpContext, next) =>
            {
                var accessToken = httpContext.Request.Query["access_token"];
    
                var path = httpContext.Request.Path;
                if (!string.IsNullOrEmpty(accessToken) &&
                    (path.StartsWithSegments("/signalr-hubs/chat")))
                {
                    httpContext.Request.Headers["Authorization"] = "Bearer " + accessToken;
                }
    
                await next();
            });
    
            app.UseRouting();
            app.MapAbpStaticAssets();
            app.UseAbpStudioLink();
            app.UseAbpSecurityHeaders();
            app.UseCors();
            app.UseAuthentication();
            app.UseAbpOpenIddictValidation();
    
            if (MultiTenancyConsts.IsEnabled)
            {
                app.UseMultiTenancy();
            }
    
            app.UseUnitOfWork();
            app.UseDynamicClaims();
            app.UseAuthorization();
    
            app.UseSwagger();
            app.UseAbpSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "ExampleAbpApplicationLayer API");
    
                var configuration = context.ServiceProvider.GetRequiredService<IConfiguration>();
                options.OAuthClientId(configuration["AuthServer:SwaggerClientId"]);
            });
            app.UseAuditing();
            app.UseAbpSerilogEnrichers();
            app.UseConfiguredEndpoints();
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayerBrandingProvider.cs"><![CDATA[
    ﻿using Microsoft.Extensions.Localization;
    using ExampleAbpApplicationLayer.Localization;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Ui.Branding;
    
    namespace ExampleAbpApplicationLayer;
    
    [Dependency(ReplaceServices = true)]
    public class ExampleAbpApplicationLayerBrandingProvider : DefaultBrandingProvider
    {
        private IStringLocalizer<ExampleAbpApplicationLayerResource> _localizer;
    
        public ExampleAbpApplicationLayerBrandingProvider(IStringLocalizer<ExampleAbpApplicationLayerResource> localizer)
        {
            _localizer = localizer;
        }
    
        public override string AppName => _localizer["AppName"];
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayer.HttpApi.Host.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk.Web">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
        <PreserveCompilationReferences>true</PreserveCompilationReferences>
      </PropertyGroup>
    
      <PropertyGroup Condition=" '$(RunConfiguration)' == 'ExampleAbpApplicationLayer.HttpApi.Host' " />
    
      <ItemGroup>
        <PackageReference Include="AspNetCore.HealthChecks.UI" Version="9.0.0" />
        <PackageReference Include="AspNetCore.HealthChecks.UI.Client" Version="9.0.0" />
        <PackageReference Include="AspNetCore.HealthChecks.UI.InMemory.Storage" Version="9.0.0" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.5" />
        <PackageReference Include="Serilog.AspNetCore" Version="9.0.0" />
        <PackageReference Include="Serilog.Sinks.Async" Version="2.1.0" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.Google" Version="9.0.5" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.MicrosoftAccount" Version="9.0.5" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.Twitter" Version="9.0.5" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Chat.SignalR" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.AspNetCore.MultiTenancy" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AspNetCore.Serilog" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Swashbuckle" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Account.Pro.Public.Web.OpenIddict" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Public.Web.Impersonation" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonX" Version="4.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Studio.Client.AspNetCore" Version="1.2.1" />
      </ItemGroup>
    
      <ItemGroup Condition="Exists('./openiddict.pfx')">
        <None Remove="openiddict.pfx" />
        <EmbeddedResource Include="openiddict.pfx">
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </EmbeddedResource>
      </ItemGroup>
    
      <ItemGroup>
        <Compile Remove="Logs\**" />
        <Content Remove="Logs\**" />
        <EmbeddedResource Remove="Logs\**" />
        <None Remove="Logs\**" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayer.HttpApi.Host.abppkg"><![CDATA[
    {
      "role": "host.http-api"
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Dockerfile.local"><![CDATA[
    FROM mcr.microsoft.com/dotnet/aspnet:9.0  AS base
    USER $APP_UID
    EXPOSE 8080
    EXPOSE 8081
    
    COPY bin/Release/net9.0/publish/ app/
    WORKDIR /app
    
    FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
    WORKDIR /src
    RUN dotnet dev-certs https -v -ep openiddict.pfx -p 64d11a84-cb9a-4241-aa49-4d2e1146e0b5
    RUN chmod 644 openiddict.pfx
    
    FROM base AS final
    WORKDIR /app
    COPY --from=build /src .
    
    ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.HttpApi.Host.dll"]
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Dockerfile"><![CDATA[
    FROM mcr.microsoft.com/dotnet/aspnet:9.0
    COPY bin/Release/net9.0/publish/ app/
    WORKDIR /app
    ENV ASPNETCORE_URLS=http://+:80
    ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.HttpApi.Host.dll"]
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\appsettings.secrets.json"><![CDATA[
    {
    "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\appsettings.json"><![CDATA[
    {
      "App": {
        "SelfUrl": "https://localhost:44302",
        "AngularUrl": "http://localhost:4200",
        "CorsOrigins": "https://*.ExampleAbpApplicationLayer.com,http://localhost:4200",
        "RedirectAllowedUrls": "http://localhost:4200",
        "DisablePII": false,
        "HealthCheckUrl": "/health-status"
      },
      "ConnectionStrings": {
        "Default": "Server=localhost;Database=ExampleAbpApplicationLayer;Trusted_Connection=True;TrustServerCertificate=true"
      },
      "AuthServer": {
        "Authority": "https://localhost:44302",
        "RequireHttpsMetadata": true,
        "SwaggerClientId": "ExampleAbpApplicationLayer_Swagger",
        "CertificatePassPhrase": "64d11a84-cb9a-4241-aa49-4d2e1146e0b5"
      },
      "StringEncryption": {
        "DefaultPassPhrase": "SpOOeQFpH5eH4TMY"
      }}
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\appsettings.Development.json"><![CDATA[
    {
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\abp.resourcemapping.js"><![CDATA[
    module.exports = {
        aliases: {
    
        },
        clean: [
    
        ],
        mappings: {
    
        }
    };
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayerHttpApiClientModule.cs"><![CDATA[
    ﻿using Microsoft.Extensions.DependencyInjection;
    using Volo.Abp.Account;
    using Volo.Abp.Modularity;
    using Volo.Abp.PermissionManagement;
    using Volo.Abp.SettingManagement;
    using Volo.Abp.VirtualFileSystem;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Identity;
    using Volo.Abp.AuditLogging;
    using Volo.Abp.LanguageManagement;
    using Volo.FileManagement;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Saas.Host;
    using Volo.Abp.Gdpr;
    using Volo.Abp.OpenIddict;
    using Volo.Chat;
    using Volo.Abp.LeptonXTheme.Management;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerApplicationContractsModule),
        typeof(AbpPermissionManagementHttpApiClientModule),
        typeof(AbpFeatureManagementHttpApiClientModule),
        typeof(AbpIdentityHttpApiClientModule),
        typeof(AbpAccountAdminHttpApiClientModule),
        typeof(AbpAccountPublicHttpApiClientModule),
        typeof(SaasHostHttpApiClientModule),
        typeof(AbpAuditLoggingHttpApiClientModule),
        typeof(AbpOpenIddictProHttpApiClientModule),
        typeof(TextTemplateManagementHttpApiClientModule),
        typeof(LanguageManagementHttpApiClientModule),
        typeof(FileManagementHttpApiClientModule),
        typeof(AbpGdprHttpApiClientModule),
        typeof(ChatHttpApiClientModule),
        typeof(LeptonXThemeManagementHttpApiClientModule),
        typeof(AbpSettingManagementHttpApiClientModule)
    )]
    public class ExampleAbpApplicationLayerHttpApiClientModule : AbpModule
    {
        public const string RemoteServiceName = "Default";
    
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            context.Services.AddHttpClientProxies(
                typeof(ExampleAbpApplicationLayerApplicationContractsModule).Assembly,
                RemoteServiceName
            );
    
            Configure<AbpVirtualFileSystemOptions>(options =>
            {
                options.FileSets.AddEmbedded<ExampleAbpApplicationLayerHttpApiClientModule>();
            });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.csproj"><![CDATA[
    ﻿<Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.PermissionManagement.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.HttpApi.Client" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Identity.Pro.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Admin.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Public.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.Host.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.HttpApi.Client" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LeptonXTheme.Management.HttpApi.Client" Version="4.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <EmbeddedResource Include="**\*generate-proxy.json" />
        <Content Remove="**\*generate-proxy.json" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.HttpApi.Client",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Application.Contracts",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.HttpApi.Client",
              "namespace": "Volo.Abp.PermissionManagement",
              "name": "AbpPermissionManagementHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.HttpApi.Client",
              "namespace": "Volo.Abp.FeatureManagement",
              "name": "AbpFeatureManagementHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.HttpApi.Client",
              "namespace": "Volo.Abp.Identity",
              "name": "AbpIdentityHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.HttpApi.Client",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountAdminHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.HttpApi.Client",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountPublicHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.HttpApi.Client",
              "namespace": "Volo.Abp.AuditLogging",
              "name": "AbpAuditLoggingHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.HttpApi.Client",
              "namespace": "Volo.Abp.OpenIddict",
              "name": "AbpOpenIddictProHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.HttpApi.Client",
              "namespace": "Volo.Abp.TextTemplateManagement",
              "name": "TextTemplateManagementHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.HttpApi.Client",
              "namespace": "Volo.Abp.LanguageManagement",
              "name": "LanguageManagementHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.HttpApi.Client",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprHttpApiClientModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.HttpApi.Client",
              "namespace": "Volo.Abp.SettingManagement",
              "name": "AbpSettingManagementHttpApiClientModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerHttpApiClientModule",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.abppkg"><![CDATA[
    {
      "role": "lib.http-api-client"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayerHttpApiModule.cs"><![CDATA[
    ﻿using Localization.Resources.AbpUi;
    using ExampleAbpApplicationLayer.Localization;
    using Volo.Abp.Account;
    using Volo.Abp.SettingManagement;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Identity;
    using Volo.Abp.Modularity;
    using Volo.Abp.PermissionManagement.HttpApi;
    using Volo.Abp.Localization;
    using Volo.Abp.AuditLogging;
    using Volo.Abp.LanguageManagement;
    using Volo.FileManagement;
    using Volo.Saas.Host;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Abp.Gdpr;
    using Volo.Abp.OpenIddict;
    using Volo.Chat;
    using Volo.Abp.LeptonXTheme.Management;
    
    namespace ExampleAbpApplicationLayer;
    
     [DependsOn(
        typeof(ExampleAbpApplicationLayerApplicationContractsModule),
        typeof(AbpPermissionManagementHttpApiModule),
        typeof(AbpSettingManagementHttpApiModule),
        typeof(AbpIdentityHttpApiModule),
        typeof(AbpAccountAdminHttpApiModule),
        typeof(TextTemplateManagementHttpApiModule),
        typeof(AbpAuditLoggingHttpApiModule),
        typeof(AbpOpenIddictProHttpApiModule),
        typeof(LanguageManagementHttpApiModule),
        typeof(FileManagementHttpApiModule),
        typeof(SaasHostHttpApiModule),
        typeof(AbpGdprHttpApiModule),
        typeof(ChatHttpApiModule),
        typeof(AbpAccountPublicHttpApiModule),
        typeof(LeptonXThemeManagementHttpApiModule),
        typeof(AbpFeatureManagementHttpApiModule)
        )]
    public class ExampleAbpApplicationLayerHttpApiModule : AbpModule
    {
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            ConfigureLocalization();
        }
    
        private void ConfigureLocalization()
        {
            Configure<AbpLocalizationOptions>(options =>
            {
                options.Resources
                    .Get<ExampleAbpApplicationLayerResource>()
                    .AddBaseTypes(
                        typeof(AbpUiResource)
                    );
            });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.csproj"><![CDATA[
    ﻿<Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.PermissionManagement.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.HttpApi" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Identity.Pro.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Admin.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.Host.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Public.HttpApi" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LeptonXTheme.Management.HttpApi" Version="4.3.1" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.HttpApi",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Application.Contracts",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.HttpApi",
              "namespace": "Volo.Abp.PermissionManagement.HttpApi",
              "name": "AbpPermissionManagementHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.HttpApi",
              "namespace": "Volo.Abp.SettingManagement",
              "name": "AbpSettingManagementHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.HttpApi",
              "namespace": "Volo.Abp.Identity",
              "name": "AbpIdentityHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.HttpApi",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountAdminHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.HttpApi",
              "namespace": "Volo.Abp.TextTemplateManagement",
              "name": "TextTemplateManagementHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.HttpApi",
              "namespace": "Volo.Abp.AuditLogging",
              "name": "AbpAuditLoggingHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.HttpApi",
              "namespace": "Volo.Abp.OpenIddict",
              "name": "AbpOpenIddictProHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.HttpApi",
              "namespace": "Volo.Abp.LanguageManagement",
              "name": "LanguageManagementHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.HttpApi",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.HttpApi",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountPublicHttpApiModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.HttpApi",
              "namespace": "Volo.Abp.FeatureManagement",
              "name": "AbpFeatureManagementHttpApiModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerHttpApiModule",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.abppkg"><![CDATA[
    {
      "role": "lib.http-api"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.EntityFrameworkCore.SqlServer" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.PermissionManagement.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.BackgroundJobs.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.BlobStoring.Database.EntityFrameworkCore" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Identity.Pro.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.EntityFrameworkCore" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.EntityFrameworkCore" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.5">
          <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
          <PrivateAssets>compile; contentFiles; build; buildMultitargeting; buildTransitive; analyzers; native</PrivateAssets>
        </PackageReference>
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.EntityFrameworkCore",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer.EntityFrameworkCore",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.EntityFrameworkCore",
              "namespace": "Volo.Abp.PermissionManagement.EntityFrameworkCore",
              "name": "AbpPermissionManagementEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.EntityFrameworkCore",
              "namespace": "Volo.Abp.SettingManagement.EntityFrameworkCore",
              "name": "AbpSettingManagementEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore.SqlServer",
              "namespace": "Volo.Abp.EntityFrameworkCore.SqlServer",
              "name": "AbpEntityFrameworkCoreSqlServerModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.BackgroundJobs.EntityFrameworkCore",
              "namespace": "Volo.Abp.BackgroundJobs.EntityFrameworkCore",
              "name": "AbpBackgroundJobsEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.EntityFrameworkCore",
              "namespace": "Volo.Abp.AuditLogging.EntityFrameworkCore",
              "name": "AbpAuditLoggingEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.EntityFrameworkCore",
              "namespace": "Volo.Abp.FeatureManagement.EntityFrameworkCore",
              "name": "AbpFeatureManagementEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.EntityFrameworkCore",
              "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
              "name": "AbpIdentityProEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.EntityFrameworkCore",
              "namespace": "Volo.Abp.OpenIddict.EntityFrameworkCore",
              "name": "AbpOpenIddictProEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.EntityFrameworkCore",
              "namespace": "Volo.Abp.LanguageManagement.EntityFrameworkCore",
              "name": "LanguageManagementEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.EntityFrameworkCore",
              "namespace": "Volo.Abp.TextTemplateManagement.EntityFrameworkCore",
              "name": "TextTemplateManagementEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.EntityFrameworkCore",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprEntityFrameworkCoreModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.BlobStoring.Database.EntityFrameworkCore",
              "namespace": "Volo.Abp.BlobStoring.Database.EntityFrameworkCore",
              "name": "BlobStoringDatabaseEntityFrameworkCoreModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerEntityFrameworkCoreModule",
          "summary": null
        },
        {
          "namespace": "ExampleAbpApplicationLayer.EntityFrameworkCore",
          "connectionStringName": "Default",
          "databaseTables": [],
          "replacedDbContexts": [
            {
              "name": "ISaasDbContext",
              "namespace": "Volo.Saas.EntityFrameworkCore",
              "declaringAssemblyName": "Volo.Saas.EntityFrameworkCore",
              "fullName": "Volo.Saas.EntityFrameworkCore.ISaasDbContext"
            },
            {
              "name": "IIdentityProDbContext",
              "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.EntityFrameworkCore",
              "fullName": "Volo.Abp.Identity.EntityFrameworkCore.IIdentityProDbContext"
            }
          ],
          "modelBuilderExtensionMethods": [],
          "implementingInterfaces": [
            {
              "name": "IInfrastructure<IServiceProvider>",
              "namespace": "Microsoft.EntityFrameworkCore.Infrastructure",
              "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
              "fullName": "Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<IServiceProvider>"
            },
            {
              "name": "IDbContextDependencies",
              "namespace": "Microsoft.EntityFrameworkCore.Internal",
              "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
              "fullName": "Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies"
            },
            {
              "name": "IDbSetCache",
              "namespace": "Microsoft.EntityFrameworkCore.Internal",
              "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
              "fullName": "Microsoft.EntityFrameworkCore.Internal.IDbSetCache"
            },
            {
              "name": "IDbContextPoolable",
              "namespace": "Microsoft.EntityFrameworkCore.Internal",
              "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
              "fullName": "Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable"
            },
            {
              "name": "IResettableService",
              "namespace": "Microsoft.EntityFrameworkCore.Infrastructure",
              "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
              "fullName": "Microsoft.EntityFrameworkCore.Infrastructure.IResettableService"
            },
            {
              "name": "IDisposable",
              "namespace": "System",
              "declaringAssemblyName": "System.Private.CoreLib",
              "fullName": "System.IDisposable"
            },
            {
              "name": "IAsyncDisposable",
              "namespace": "System",
              "declaringAssemblyName": "System.Private.CoreLib",
              "fullName": "System.IAsyncDisposable"
            },
            {
              "name": "IAbpEfCoreDbContext",
              "namespace": "Volo.Abp.EntityFrameworkCore",
              "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore",
              "fullName": "Volo.Abp.EntityFrameworkCore.IAbpEfCoreDbContext"
            },
            {
              "name": "IEfCoreDbContext",
              "namespace": "Volo.Abp.EntityFrameworkCore",
              "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore",
              "fullName": "Volo.Abp.EntityFrameworkCore.IEfCoreDbContext"
            },
            {
              "name": "IAbpEfCoreDbFunctionContext",
              "namespace": "Volo.Abp.EntityFrameworkCore.GlobalFilters",
              "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore",
              "fullName": "Volo.Abp.EntityFrameworkCore.GlobalFilters.IAbpEfCoreDbFunctionContext"
            },
            {
              "name": "ITransientDependency",
              "namespace": "Volo.Abp.DependencyInjection",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.DependencyInjection.ITransientDependency"
            },
            {
              "name": "IIdentityProDbContext",
              "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.EntityFrameworkCore",
              "fullName": "Volo.Abp.Identity.EntityFrameworkCore.IIdentityProDbContext"
            },
            {
              "name": "IIdentityDbContext",
              "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
              "declaringAssemblyName": "Volo.Abp.Identity.EntityFrameworkCore",
              "fullName": "Volo.Abp.Identity.EntityFrameworkCore.IIdentityDbContext"
            }
          ],
          "contentType": "efCoreDbContext",
          "name": "ExampleAbpApplicationLayerDbContext",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.abppkg"><![CDATA[
    {
      "role": "lib.ef"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerModuleExtensionConfigurator.cs"><![CDATA[
    ﻿using System.ComponentModel.DataAnnotations;
    using Volo.Abp.Identity;
    using Volo.Abp.ObjectExtending;
    using Volo.Abp.Threading;
    
    namespace ExampleAbpApplicationLayer;
    
    public static class ExampleAbpApplicationLayerModuleExtensionConfigurator
    {
        private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
    
        public static void Configure()
        {
            OneTimeRunner.Run(() =>
            {
                ConfigureExistingProperties();
                ConfigureExtraProperties();
            });
        }
    
        private static void ConfigureExistingProperties()
        {
            /* You can change max lengths for properties of the
             * entities defined in the modules used by your application.
             *
             * Example: Change user and role name max lengths
    
               AbpUserConsts.MaxNameLength = 99;
               IdentityRoleConsts.MaxNameLength = 99;
    
             * Notice: It is not suggested to change property lengths
             * unless you really need it. Go with the standard values wherever possible.
             *
             * If you are using EF Core, you will need to run the add-migration command after your changes.
             */
        }
    
        private static void ConfigureExtraProperties()
        {
            /* You can configure extra properties for the
             * entities defined in the modules used by your application.
             *
             * This class can be used to define these extra properties
             * with a high level, easy to use API.
             *
             * Example: Add a new property to the user entity of the identity module
    
               ObjectExtensionManager.Instance.Modules()
                  .ConfigureIdentity(identity =>
                  {
                      identity.ConfigureUser(user =>
                      {
                          user.AddOrUpdateProperty<string>( //property type: string
                              "SocialSecurityNumber", //property name
                              property =>
                              {
                                  //validation rules
                                  property.Attributes.Add(new RequiredAttribute());
                                  property.Attributes.Add(new StringLengthAttribute(64) {MinimumLength = 4});
    
                                  //...other configurations for this property
                              }
                          );
                      });
                  });
    
             * See the documentation for more:
             * https://docs.abp.io/en/abp/latest/Module-Entity-Extensions
             */
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerGlobalFeatureConfigurator.cs"><![CDATA[
    ﻿using Volo.Abp.GlobalFeatures;
    using Volo.Abp.Threading;
    
    namespace ExampleAbpApplicationLayer;
    
    public static class ExampleAbpApplicationLayerGlobalFeatureConfigurator
    {
        private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
    
        public static void Configure()
        {
            OneTimeRunner.Run(() =>
            {
                    /* You can configure (enable/disable) global features of the used modules here.
                     * Please refer to the documentation to learn more about the Global Features System:
                     * https://docs.abp.io/en/abp/latest/Global-Features
                     */
                });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerDomainSharedModule.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Localization;
    using Volo.Abp.AuditLogging;
    using Volo.Abp.BackgroundJobs;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Identity;
    using Volo.Abp.Localization;
    using Volo.Abp.Localization.ExceptionHandling;
    using Volo.Abp.Validation.Localization;
    using Volo.Abp.Modularity;
    using Volo.Abp.PermissionManagement;
    using Volo.Abp.SettingManagement;
    using Volo.Abp.VirtualFileSystem;
    using Volo.Abp.OpenIddict;
    using Volo.Abp.BlobStoring.Database;
    using Volo.Abp.LanguageManagement;
    using Volo.FileManagement;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Saas;
    using Volo.Chat;
    using Volo.Abp.Gdpr;
    using Volo.Abp.GlobalFeatures;
    using Volo.Abp.LeptonXTheme.Management;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(AbpAuditLoggingDomainSharedModule),
        typeof(AbpBackgroundJobsDomainSharedModule),
        typeof(AbpFeatureManagementDomainSharedModule),
        typeof(AbpPermissionManagementDomainSharedModule),
        typeof(AbpSettingManagementDomainSharedModule),
        typeof(AbpIdentityProDomainSharedModule),
        typeof(AbpOpenIddictProDomainSharedModule),
        typeof(LanguageManagementDomainSharedModule),
        typeof(FileManagementDomainSharedModule),
        typeof(SaasDomainSharedModule),
        typeof(ChatDomainSharedModule),
        typeof(TextTemplateManagementDomainSharedModule),
        typeof(AbpGdprDomainSharedModule),
        typeof(AbpGlobalFeaturesModule),
        typeof(LeptonXThemeManagementDomainSharedModule),
        typeof(BlobStoringDatabaseDomainSharedModule)
        )]
    public class ExampleAbpApplicationLayerDomainSharedModule : AbpModule
    {
        public override void PreConfigureServices(ServiceConfigurationContext context)
        {
            ExampleAbpApplicationLayerGlobalFeatureConfigurator.Configure();
            ExampleAbpApplicationLayerModuleExtensionConfigurator.Configure();
        }
    
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            Configure<AbpVirtualFileSystemOptions>(options =>
            {
                options.FileSets.AddEmbedded<ExampleAbpApplicationLayerDomainSharedModule>();
            });
    
            Configure<AbpLocalizationOptions>(options =>
            {
                options.Resources
                    .Add<ExampleAbpApplicationLayerResource>("en")
                    .AddBaseTypes(typeof(AbpValidationResource))
                    .AddVirtualJson("/Localization/ExampleAbpApplicationLayer");
    
                options.DefaultResourceType = typeof(ExampleAbpApplicationLayerResource);
                
                options.Languages.Add(new LanguageInfo("en", "en", "English")); 
                options.Languages.Add(new LanguageInfo("ar", "ar", "Arabic")); 
    
            });
            
            Configure<AbpExceptionLocalizationOptions>(options =>
            {
                options.MapCodeNamespace("ExampleAbpApplicationLayer", typeof(ExampleAbpApplicationLayerResource));
            });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerDomainErrorCodes.cs"><![CDATA[
    ﻿namespace ExampleAbpApplicationLayer;
    
    public static class ExampleAbpApplicationLayerDomainErrorCodes
    {
        /* You can add your business exception error codes here, as constants */
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
        <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
      </PropertyGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.BackgroundJobs.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.PermissionManagement.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.BlobStoring.Database.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.GlobalFeatures" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Identity.Pro.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.Domain.Shared" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Domain.Shared" Version="4.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" Version="9.0.5" />
      </ItemGroup>
    
      <ItemGroup>
        <EmbeddedResource Include="Localization\ExampleAbpApplicationLayer\*.json" />
        <Content Remove="Localization\ExampleAbpApplicationLayer\*.json" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.Domain.Shared",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.Domain.Shared",
              "namespace": "Volo.Abp.AuditLogging",
              "name": "AbpAuditLoggingDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.BackgroundJobs.Domain.Shared",
              "namespace": "Volo.Abp.BackgroundJobs",
              "name": "AbpBackgroundJobsDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.Domain.Shared",
              "namespace": "Volo.Abp.FeatureManagement",
              "name": "AbpFeatureManagementDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.Domain.Shared",
              "namespace": "Volo.Abp.PermissionManagement",
              "name": "AbpPermissionManagementDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.Domain.Shared",
              "namespace": "Volo.Abp.SettingManagement",
              "name": "AbpSettingManagementDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.Domain.Shared",
              "namespace": "Volo.Abp.Identity",
              "name": "AbpIdentityProDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Domain.Shared",
              "namespace": "Volo.Abp.OpenIddict",
              "name": "AbpOpenIddictProDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.Domain.Shared",
              "namespace": "Volo.Abp.LanguageManagement",
              "name": "LanguageManagementDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Domain.Shared",
              "namespace": "Volo.Abp.TextTemplateManagement",
              "name": "TextTemplateManagementDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.Domain.Shared",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.GlobalFeatures",
              "namespace": "Volo.Abp.GlobalFeatures",
              "name": "AbpGlobalFeaturesModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.BlobStoring.Database.Domain.Shared",
              "namespace": "Volo.Abp.BlobStoring.Database",
              "name": "BlobStoringDatabaseDomainSharedModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerDomainSharedModule",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.abppkg"><![CDATA[
    {
      "role": "lib.domain-shared"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayerDomainModule.cs"><![CDATA[
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.DependencyInjection.Extensions;
    using ExampleAbpApplicationLayer.Localization;
    using ExampleAbpApplicationLayer.MultiTenancy;
    using Volo.Abp.Localization;
    using Volo.Abp.Modularity;
    using Volo.Abp.MultiTenancy;
    using Volo.Abp.PermissionManagement.Identity;
    using Volo.Abp.SettingManagement;
    using Volo.Abp.BlobStoring.Database;
    using Volo.Abp.Caching;
    using Volo.Abp.OpenIddict;
    using Volo.Abp.PermissionManagement.OpenIddict;
    using Volo.Abp.AuditLogging;
    using Volo.Abp.BackgroundJobs;
    using Volo.Abp.Emailing;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Identity;
    using Volo.Abp.Commercial.SuiteTemplates;
    using Volo.Abp.LanguageManagement;
    using Volo.FileManagement;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Saas;
    using Volo.Abp.Gdpr;
    using Volo.Chat;
    using Volo.Abp.LeptonXTheme.Management;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerDomainSharedModule),
        typeof(AbpAuditLoggingDomainModule),
        typeof(AbpCachingModule),
        typeof(AbpBackgroundJobsDomainModule),
        typeof(AbpFeatureManagementDomainModule),
        typeof(AbpPermissionManagementDomainIdentityModule),
        typeof(AbpPermissionManagementDomainOpenIddictModule),
        typeof(AbpSettingManagementDomainModule),
        typeof(AbpEmailingModule),
        typeof(AbpIdentityProDomainModule),
        typeof(AbpOpenIddictProDomainModule),
        typeof(SaasDomainModule),
        typeof(ChatDomainModule),
        typeof(TextTemplateManagementDomainModule),
        typeof(LanguageManagementDomainModule),
        typeof(FileManagementDomainModule),
        typeof(VoloAbpCommercialSuiteTemplatesModule),
        typeof(AbpGdprDomainModule),
        typeof(LeptonXThemeManagementDomainModule),
        typeof(BlobStoringDatabaseDomainModule)
        )]
    public class ExampleAbpApplicationLayerDomainModule : AbpModule
    {
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            Configure<AbpMultiTenancyOptions>(options =>
            {
                options.IsEnabled = MultiTenancyConsts.IsEnabled;
            });
    
    
    #if DEBUG
            context.Services.Replace(ServiceDescriptor.Singleton<IEmailSender, NullEmailSender>());
    #endif
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayerConsts.cs"><![CDATA[
    ﻿using Volo.Abp.Identity;
    
    namespace ExampleAbpApplicationLayer;
    
    public static class ExampleAbpApplicationLayerConsts
    {
        public const string DbTablePrefix = "App";
        public const string? DbSchema = null;
        public const string AdminEmailDefaultValue = IdentityDataSeedContributor.AdminEmailDefaultValue;
        public const string AdminPasswordDefaultValue = IdentityDataSeedContributor.AdminPasswordDefaultValue;
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj"><![CDATA[
    ﻿<Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Emailing" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Caching" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.PermissionManagement.Domain.Identity" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.PermissionManagement.Domain.OpenIddict" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.BackgroundJobs.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.BlobStoring.Database.Domain" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Identity.Pro.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Commercial.SuiteTemplates" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.Domain" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Domain" Version="4.3.1" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.Domain",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain.Shared",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.Domain",
              "namespace": "Volo.Abp.AuditLogging",
              "name": "AbpAuditLoggingDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Caching",
              "namespace": "Volo.Abp.Caching",
              "name": "AbpCachingModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.BackgroundJobs.Domain",
              "namespace": "Volo.Abp.BackgroundJobs",
              "name": "AbpBackgroundJobsDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.Domain",
              "namespace": "Volo.Abp.FeatureManagement",
              "name": "AbpFeatureManagementDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.Domain.Identity",
              "namespace": "Volo.Abp.PermissionManagement.Identity",
              "name": "AbpPermissionManagementDomainIdentityModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.Domain.OpenIddict",
              "namespace": "Volo.Abp.PermissionManagement.OpenIddict",
              "name": "AbpPermissionManagementDomainOpenIddictModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.Domain",
              "namespace": "Volo.Abp.SettingManagement",
              "name": "AbpSettingManagementDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Emailing",
              "namespace": "Volo.Abp.Emailing",
              "name": "AbpEmailingModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.Domain",
              "namespace": "Volo.Abp.Identity",
              "name": "AbpIdentityProDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Domain",
              "namespace": "Volo.Abp.OpenIddict",
              "name": "AbpOpenIddictProDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Domain",
              "namespace": "Volo.Abp.TextTemplateManagement",
              "name": "TextTemplateManagementDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.Domain",
              "namespace": "Volo.Abp.LanguageManagement",
              "name": "LanguageManagementDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Commercial.SuiteTemplates",
              "namespace": "Volo.Abp.Commercial.SuiteTemplates",
              "name": "VoloAbpCommercialSuiteTemplatesModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.Domain",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprDomainModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.BlobStoring.Database.Domain",
              "namespace": "Volo.Abp.BlobStoring.Database",
              "name": "BlobStoringDatabaseDomainModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerDomainModule",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.abppkg"><![CDATA[
    {
      "role": "lib.domain"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\Program.cs"><![CDATA[
    ﻿using System.Threading.Tasks;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using Microsoft.Extensions.Logging;
    using Serilog;
    using Serilog.Events;
    
    namespace ExampleAbpApplicationLayer.DbMigrator;
    
    class Program
    {
        static async Task Main(string[] args)
        {
            Log.Logger = new LoggerConfiguration()
                .MinimumLevel.Information()
                .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
                .MinimumLevel.Override("Volo.Abp", LogEventLevel.Warning)
    #if DEBUG
                    .MinimumLevel.Override("ExampleAbpApplicationLayer", LogEventLevel.Debug)
    #else
                    .MinimumLevel.Override("ExampleAbpApplicationLayer", LogEventLevel.Information)
    #endif
                    .Enrich.FromLogContext()
                .WriteTo.Async(c => c.File("Logs/logs.txt"))
                .WriteTo.Async(c => c.Console())
                .CreateLogger();
    
            await CreateHostBuilder(args).RunConsoleAsync();
        }
    
        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .AddAppSettingsSecretsJson()
                .ConfigureLogging((context, logging) => logging.ClearProviders())
                .ConfigureServices((hostContext, services) =>
                {
                    services.AddHostedService<DbMigratorHostedService>();
                });
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayerDbMigratorModule.cs"><![CDATA[
    ﻿using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Volo.Abp.Autofac;
    using Volo.Abp.Modularity;
    
    namespace ExampleAbpApplicationLayer.DbMigrator;
    
    [DependsOn(
        typeof(AbpAutofacModule),
        typeof(ExampleAbpApplicationLayerEntityFrameworkCoreModule),
        typeof(ExampleAbpApplicationLayerApplicationContractsModule)
    )]
    public class ExampleAbpApplicationLayerDbMigratorModule : AbpModule
    {
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayer.DbMigrator.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <OutputType>Exe</OutputType>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
      </PropertyGroup>
    
      <ItemGroup>
        <PackageReference Include="Serilog.Extensions.Logging" Version="9.0.0" />
        <PackageReference Include="Serilog.Sinks.Async" Version="2.1.0" />
        <PackageReference Include="Serilog.Sinks.File" Version="6.0.0" />
        <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
        <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.5" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <Compile Remove="Logs\**" />
        <Content Remove="Logs\**" />
    
        <EmbeddedResource Remove="Logs\**" />
        <None Remove="Logs\**" />
      </ItemGroup>
    
      <ItemGroup>
        <None Remove="appsettings.json" />
        <Content Include="appsettings.json">
          <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
        <None Remove="appsettings.secrets.json" />
        <Content Include="appsettings.secrets.json">
          <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayer.DbMigrator.abppkg"><![CDATA[
    {}
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\Dockerfile.local"><![CDATA[
      FROM mcr.microsoft.com/dotnet/aspnet:9.0
      USER $APP_UID
    
      COPY bin/Release/net9.0/publish/ app/
      WORKDIR /app
      ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.DbMigrator.dll"]
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\Dockerfile"><![CDATA[
    FROM mcr.microsoft.com/dotnet/aspnet:9.0
    COPY bin/Release/net9.0/publish/ app/
    WORKDIR /app
    ENV ASPNETCORE_URLS=http://+:80
    ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.DbMigrator.dll"]
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\DbMigratorHostedService.cs"><![CDATA[
    ﻿using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using ExampleAbpApplicationLayer.Data;
    using Serilog;
    using Volo.Abp;
    using Volo.Abp.Data;
    
    namespace ExampleAbpApplicationLayer.DbMigrator;
    
    public class DbMigratorHostedService : IHostedService
    {
        private readonly IHostApplicationLifetime _hostApplicationLifetime;
        private readonly IConfiguration _configuration;
    
        public DbMigratorHostedService(IHostApplicationLifetime hostApplicationLifetime, IConfiguration configuration)
        {
            _hostApplicationLifetime = hostApplicationLifetime;
            _configuration = configuration;
        }
    
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            using (var application = await AbpApplicationFactory.CreateAsync<ExampleAbpApplicationLayerDbMigratorModule>(options =>
            {
               options.Services.ReplaceConfiguration(_configuration);
               options.UseAutofac();
               options.Services.AddLogging(c => c.AddSerilog());
               options.AddDataMigrationEnvironment();
            }))
            {
                await application.InitializeAsync();
    
                await application
                    .ServiceProvider
                    .GetRequiredService<ExampleAbpApplicationLayerDbMigrationService>()
                    .MigrateAsync();
    
                await application.ShutdownAsync();
    
                _hostApplicationLifetime.StopApplication();
            }
        }
    
        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\appsettings.secrets.json"><![CDATA[
    {
      "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.DbMigrator\appsettings.json"><![CDATA[
    {
      "ConnectionStrings": {
        "Default": "Server=localhost;Database=ExampleAbpApplicationLayer;Trusted_Connection=True;TrustServerCertificate=true"
      },
      "OpenIddict": {
        "Applications": {
          "ExampleAbpApplicationLayer_App": {
            "ClientId": "ExampleAbpApplicationLayer_App",
            "RootUrl": "http://localhost:4200"      },
          "ExampleAbpApplicationLayer_Swagger": {
            "ClientId": "ExampleAbpApplicationLayer_Swagger",
            "RootUrl": "https://localhost:44302/"
          }
        }
      }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayerDtoExtensions.cs"><![CDATA[
    using Volo.Abp.Identity;
    using Volo.Abp.ObjectExtending;
    using Volo.Abp.Threading;
    
    namespace ExampleAbpApplicationLayer;
    
    public static class ExampleAbpApplicationLayerDtoExtensions
    {
        private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
    
        public static void Configure()
        {
            OneTimeRunner.Run(() =>
            {
                    /* You can add extension properties to DTOs
                     * defined in the depended modules.
                     *
                     * Example:
                     *
                     * ObjectExtensionManager.Instance
                     *   .AddOrUpdateProperty<IdentityRoleDto, string>("Title");
                     *
                     * See the documentation for more:
                     * https://docs.abp.io/en/abp/latest/Object-Extensions
                     */
            });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayerApplicationContractsModule.cs"><![CDATA[
    ﻿using Volo.Abp.Account;
    using Volo.Abp.Modularity;
    using Volo.Abp.PermissionManagement;
    using Volo.Abp.SettingManagement;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Identity;
    using Volo.Abp.AuditLogging;
    using Volo.Abp.LanguageManagement;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Saas.Host;
    using Volo.Abp.Gdpr;
    using Volo.Abp.OpenIddict;
    using Volo.FileManagement;
        using Volo.Chat;
    using Volo.Abp.LeptonXTheme.Management;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerDomainSharedModule),
        typeof(AbpFeatureManagementApplicationContractsModule),
        typeof(AbpSettingManagementApplicationContractsModule),
        typeof(AbpIdentityApplicationContractsModule),
        typeof(AbpAccountPublicApplicationContractsModule),
        typeof(AbpAccountAdminApplicationContractsModule),
        typeof(SaasHostApplicationContractsModule),
        typeof(AbpAuditLoggingApplicationContractsModule),
        typeof(AbpOpenIddictProApplicationContractsModule),
        typeof(TextTemplateManagementApplicationContractsModule),
        typeof(LanguageManagementApplicationContractsModule),
        typeof(FileManagementApplicationContractsModule),
        typeof(AbpGdprApplicationContractsModule),
        typeof(ChatApplicationContractsModule),
        typeof(LeptonXThemeManagementApplicationContractsModule),
        typeof(AbpPermissionManagementApplicationContractsModule)
    )]
    public class ExampleAbpApplicationLayerApplicationContractsModule : AbpModule
    {
        public override void PreConfigureServices(ServiceConfigurationContext context)
        {
            ExampleAbpApplicationLayerDtoExtensions.Configure();
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj"><![CDATA[
    ﻿<Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj" />
      </ItemGroup>
      
      <ItemGroup>
        <PackageReference Include="Volo.Abp.PermissionManagement.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Identity.Pro.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Public.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Admin.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.Host.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.Application.Contracts" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Application.Contracts" Version="4.3.1" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.Application.Contracts",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain.Shared",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerDomainSharedModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.Application.Contracts",
              "namespace": "Volo.Abp.FeatureManagement",
              "name": "AbpFeatureManagementApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.Application.Contracts",
              "namespace": "Volo.Abp.SettingManagement",
              "name": "AbpSettingManagementApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.Application.Contracts",
              "namespace": "Volo.Abp.Identity",
              "name": "AbpIdentityApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.Application.Contracts",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountPublicApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.Application.Contracts",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountAdminApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.Application.Contracts",
              "namespace": "Volo.Abp.AuditLogging",
              "name": "AbpAuditLoggingApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Application.Contracts",
              "namespace": "Volo.Abp.OpenIddict",
              "name": "AbpOpenIddictProApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Application.Contracts",
              "namespace": "Volo.Abp.TextTemplateManagement",
              "name": "TextTemplateManagementApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.Application.Contracts",
              "namespace": "Volo.Abp.LanguageManagement",
              "name": "LanguageManagementApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.Application.Contracts",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.Application.Contracts",
              "namespace": "Volo.Abp.PermissionManagement",
              "name": "AbpPermissionManagementApplicationContractsModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerApplicationContractsModule",
          "summary": null
        },
        {
          "displayName": "Dashboard",
          "isEnabled": true,
          "contentType": "permission",
          "name": "ExampleAbpApplicationLayer.Dashboard.Tenant",
          "summary": null
        },
        {
          "displayName": "Dashboard",
          "isEnabled": true,
          "contentType": "permission",
          "name": "ExampleAbpApplicationLayer.Dashboard.Host",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.abppkg"><![CDATA[
    {
      "role": "lib.application-contracts"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayerAppService.cs"><![CDATA[
    ﻿using ExampleAbpApplicationLayer.Localization;
    using Volo.Abp.Application.Services;
    
    namespace ExampleAbpApplicationLayer;
    
    /* Inherit your application services from this class.
     */
    public abstract class ExampleAbpApplicationLayerAppService : ApplicationService
    {
        protected ExampleAbpApplicationLayerAppService()
        {
            LocalizationResource = typeof(ExampleAbpApplicationLayerResource);
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayerApplicationModule.cs"><![CDATA[
    ﻿using Volo.Abp.PermissionManagement;
    using Volo.Abp.SettingManagement;
    using Volo.Abp.Account;
    using Volo.Abp.Identity;
    using Volo.Abp.AutoMapper;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Modularity;
    using Volo.Abp.AuditLogging;
    using Volo.Abp.Gdpr;
    using Volo.Abp.LanguageManagement;
    using Volo.FileManagement;
    using Volo.Abp.OpenIddict;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Saas.Host;
    using Volo.Chat;
    using Volo.Abp.LeptonXTheme.Management;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerDomainModule),
        typeof(ExampleAbpApplicationLayerApplicationContractsModule),
        typeof(AbpPermissionManagementApplicationModule),
        typeof(AbpFeatureManagementApplicationModule),
        typeof(AbpIdentityApplicationModule),
        typeof(AbpAccountPublicApplicationModule),
        typeof(AbpAccountAdminApplicationModule),
        typeof(SaasHostApplicationModule),
        typeof(ChatApplicationModule),
        typeof(AbpAuditLoggingApplicationModule),
        typeof(TextTemplateManagementApplicationModule),
        typeof(AbpOpenIddictProApplicationModule),
        typeof(LanguageManagementApplicationModule),
        typeof(FileManagementApplicationModule),
        typeof(AbpGdprApplicationModule),
        typeof(LeptonXThemeManagementApplicationModule),
        typeof(AbpSettingManagementApplicationModule)
        )]
    public class ExampleAbpApplicationLayerApplicationModule : AbpModule
    {
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            Configure<AbpAutoMapperOptions>(options =>
            {
                options.AddMaps<ExampleAbpApplicationLayerApplicationModule>();
            });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayerApplicationAutoMapperProfile.cs"><![CDATA[
    using ExampleAbpApplicationLayer.OrderItems;
    using ExampleAbpApplicationLayer.Orders;
    using System;
    using ExampleAbpApplicationLayer.Shared;
    using ExampleAbpApplicationLayer.Products;
    using Volo.Abp.AutoMapper;
    using AutoMapper;
    
    namespace ExampleAbpApplicationLayer;
    
    public class ExampleAbpApplicationLayerApplicationAutoMapperProfile : Profile
    {
        public ExampleAbpApplicationLayerApplicationAutoMapperProfile()
        {
            /* You can configure your AutoMapper mapping configuration here.
             * Alternatively, you can split your mapping configurations
             * into multiple profile classes for a better organization. */
    
            CreateMap<Product, ProductDto>();
            CreateMap<Product, ProductExcelDto>();
    
            CreateMap<Order, OrderDto>();
            CreateMap<Order, OrderExcelDto>();
    
            CreateMap<OrderItem, OrderItemDto>();
            CreateMap<OrderItemWithNavigationProperties, OrderItemWithNavigationPropertiesDto>();
            CreateMap<Product, LookupDto<Guid>>().ForMember(dest => dest.DisplayName, opt => opt.MapFrom(src => src.Name));
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj"><![CDATA[
    ﻿<Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="MiniExcel" Version="1.41.1" />
        <PackageReference Include="Volo.Abp.PermissionManagement.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.FeatureManagement.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.SettingManagement.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Public.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Account.Pro.Admin.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Identity.Pro.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Chat.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Saas.Host.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.AuditLogging.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.OpenIddict.Pro.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LanguageManagement.Application" Version="9.3.1" />
        <PackageReference Include="Volo.FileManagement.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TextTemplateManagement.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Gdpr.Application" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Application" Version="4.3.1" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.abppkg.analyze.json"><![CDATA[
    {
      "name": "ExampleAbpApplicationLayer.Application",
      "hash": "",
      "contents": [
        {
          "namespace": "ExampleAbpApplicationLayer",
          "dependsOnModules": [
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerDomainModule"
            },
            {
              "declaringAssemblyName": "ExampleAbpApplicationLayer.Application.Contracts",
              "namespace": "ExampleAbpApplicationLayer",
              "name": "ExampleAbpApplicationLayerApplicationContractsModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.PermissionManagement.Application",
              "namespace": "Volo.Abp.PermissionManagement",
              "name": "AbpPermissionManagementApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.FeatureManagement.Application",
              "namespace": "Volo.Abp.FeatureManagement",
              "name": "AbpFeatureManagementApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Identity.Pro.Application",
              "namespace": "Volo.Abp.Identity",
              "name": "AbpIdentityApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.Application",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountPublicApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.Application",
              "namespace": "Volo.Abp.Account",
              "name": "AbpAccountAdminApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.AuditLogging.Application",
              "namespace": "Volo.Abp.AuditLogging",
              "name": "AbpAuditLoggingApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Application",
              "namespace": "Volo.Abp.TextTemplateManagement",
              "name": "TextTemplateManagementApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Application",
              "namespace": "Volo.Abp.OpenIddict",
              "name": "AbpOpenIddictProApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.LanguageManagement.Application",
              "namespace": "Volo.Abp.LanguageManagement",
              "name": "LanguageManagementApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.Gdpr.Application",
              "namespace": "Volo.Abp.Gdpr",
              "name": "AbpGdprApplicationModule"
            },
            {
              "declaringAssemblyName": "Volo.Abp.SettingManagement.Application",
              "namespace": "Volo.Abp.SettingManagement",
              "name": "AbpSettingManagementApplicationModule"
            }
          ],
          "implementingInterfaces": [
            {
              "name": "IAbpModule",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IAbpModule"
            },
            {
              "name": "IOnPreApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
            },
            {
              "name": "IOnApplicationInitialization",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationInitialization"
            },
            {
              "name": "IOnPostApplicationInitialization",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
            },
            {
              "name": "IOnApplicationShutdown",
              "namespace": "Volo.Abp",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.IOnApplicationShutdown"
            },
            {
              "name": "IPreConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
            },
            {
              "name": "IPostConfigureServices",
              "namespace": "Volo.Abp.Modularity",
              "declaringAssemblyName": "Volo.Abp.Core",
              "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
            }
          ],
          "contentType": "abpModule",
          "name": "ExampleAbpApplicationLayerApplicationModule",
          "summary": null
        }
      ]
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.abppkg"><![CDATA[
    {
      "role": "lib.application"
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestDataBuilder.cs"><![CDATA[
    ﻿using System.Threading.Tasks;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.MultiTenancy;
    
    namespace ExampleAbpApplicationLayer;
    
    public class ExampleAbpApplicationLayerTestDataSeedContributor : IDataSeedContributor, ITransientDependency
    {
        private readonly ICurrentTenant _currentTenant;
    
        public ExampleAbpApplicationLayerTestDataSeedContributor(ICurrentTenant currentTenant)
        {
            _currentTenant = currentTenant;
        }
    
        public Task SeedAsync(DataSeedContext context)
        {
            /* Seed additional test data... */
    
            using (_currentTenant.Change(context?.TenantId))
            {
                return Task.CompletedTask;
            }
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestConsts.cs"><![CDATA[
    ﻿namespace ExampleAbpApplicationLayer;
    
    public static class ExampleAbpApplicationLayerTestConsts
    {
        public const string CollectionDefinitionName = "ExampleAbpApplicationLayer collection";
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestBaseModule.cs"><![CDATA[
    ﻿using Microsoft.Extensions.DependencyInjection;
    using Volo.Abp;
    using Volo.Abp.Authorization;
    using Volo.Abp.Autofac;
    using Volo.Abp.BackgroundJobs;
    using Volo.Abp.Data;
    using Volo.Abp.Modularity;
    using Volo.Abp.Threading;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(AbpAutofacModule),
        typeof(AbpTestBaseModule),
        typeof(AbpAuthorizationModule),
        typeof(AbpBackgroundJobsAbstractionsModule)
    )]
    public class ExampleAbpApplicationLayerTestBaseModule : AbpModule
    {
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            Configure<AbpBackgroundJobOptions>(options =>
            {
                options.IsJobExecutionEnabled = false;
            });
    
            context.Services.AddAlwaysAllowAuthorization();
        }
    
        public override void OnApplicationInitialization(ApplicationInitializationContext context)
        {
            SeedTestData(context);
        }
    
        private static void SeedTestData(ApplicationInitializationContext context)
        {
            AsyncHelper.RunSync(async () =>
            {
                using (var scope = context.ServiceProvider.CreateScope())
                {
                    await scope.ServiceProvider
                        .GetRequiredService<IDataSeeder>()
                        .SeedAsync();
                }
            });
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestBase.cs"><![CDATA[
    ﻿using System;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Volo.Abp;
    using Volo.Abp.Modularity;
    using Volo.Abp.Uow;
    using Volo.Abp.Testing;
    
    namespace ExampleAbpApplicationLayer;
    
    public abstract class ExampleAbpApplicationLayerTestBase<TStartupModule> : AbpIntegratedTest<TStartupModule>
        where TStartupModule : IAbpModule
    {
        protected override void SetAbpApplicationCreationOptions(AbpApplicationCreationOptions options)
        {
            options.UseAutofac();
        }
    
        protected override void BeforeAddApplication(IServiceCollection services)
        {
            var builder = new ConfigurationBuilder();
            builder.AddJsonFile("appsettings.json", false);
            builder.AddJsonFile("appsettings.secrets.json", true);
            services.ReplaceConfiguration(builder.Build());
        }
    
        protected virtual Task WithUnitOfWorkAsync(Func<Task> func)
        {
            return WithUnitOfWorkAsync(new AbpUnitOfWorkOptions(), func);
        }
    
        protected virtual async Task WithUnitOfWorkAsync(AbpUnitOfWorkOptions options, Func<Task> action)
        {
            using (var scope = ServiceProvider.CreateScope())
            {
                var uowManager = scope.ServiceProvider.GetRequiredService<IUnitOfWorkManager>();
    
                using (var uow = uowManager.Begin(options))
                {
                    await action();
    
                    await uow.CompleteAsync();
                }
            }
        }
    
        protected virtual Task<TResult> WithUnitOfWorkAsync<TResult>(Func<Task<TResult>> func)
        {
            return WithUnitOfWorkAsync(new AbpUnitOfWorkOptions(), func);
        }
    
        protected virtual async Task<TResult> WithUnitOfWorkAsync<TResult>(AbpUnitOfWorkOptions options, Func<Task<TResult>> func)
        {
            using (var scope = ServiceProvider.CreateScope())
            {
                var uowManager = scope.ServiceProvider.GetRequiredService<IUnitOfWorkManager>();
    
                using (var uow = uowManager.Begin(options))
                {
                    var result = await func();
                    await uow.CompleteAsync();
                    return result;
                }
            }
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <None Remove="appsettings.json" />
        <Content Include="appsettings.json">
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
          <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
          <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        </Content>
        <None Remove="appsettings.secrets.json" />
        <Content Include="appsettings.secrets.json">
          <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.TestBase" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Authorization" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.BackgroundJobs.Abstractions" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
        <PackageReference Include="NSubstitute" Version="5.3.0" />
        <PackageReference Include="NSubstitute.Analyzers.CSharp" Version="1.0.17">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Shouldly" Version="4.2.1" />
        <PackageReference Include="xunit" Version="2.9.3" />
        <PackageReference Include="xunit.extensibility.execution" Version="2.9.3" />
        <PackageReference Include="xunit.runner.visualstudio" Version="3.0.1" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.abppkg"><![CDATA[
    {
      "role": "lib.test"
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\appsettings.secrets.json"><![CDATA[
    {
      "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\appsettings.json"><![CDATA[
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\Program.cs"><![CDATA[
    ﻿using System;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp;
    
    class Program
    {
        static async Task Main(string[] args)
        {
            using (var application = await AbpApplicationFactory.CreateAsync<ExampleAbpApplicationLayerConsoleApiClientModule>(options =>
            {
               var builder = new ConfigurationBuilder();
               builder.AddJsonFile("appsettings.json", false);
               builder.AddJsonFile("appsettings.secrets.json", true);
               options.Services.ReplaceConfiguration(builder.Build());
               options.UseAutofac();
            }))
            {
                await application.InitializeAsync();
    
                var demo = application.ServiceProvider.GetRequiredService<ClientDemoService>();
                await demo.RunAsync();
    
                Console.WriteLine("Press ENTER to stop application...");
                Console.ReadLine();
    
                await application.ShutdownAsync();
            }
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayerConsoleApiClientModule.cs"><![CDATA[
    ﻿using System;
    using Microsoft.Extensions.DependencyInjection;
    using Polly;
    using Volo.Abp.Autofac;
    using Volo.Abp.Http.Client;
    using Volo.Abp.Http.Client.IdentityModel;
    using Volo.Abp.Modularity;
    
    namespace ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp;
    
    [DependsOn(
        typeof(AbpAutofacModule),
        typeof(ExampleAbpApplicationLayerHttpApiClientModule),
        typeof(AbpHttpClientIdentityModelModule)
        )]
    public class ExampleAbpApplicationLayerConsoleApiClientModule : AbpModule
    {
        public override void PreConfigureServices(ServiceConfigurationContext context)
        {
            PreConfigure<AbpHttpClientBuilderOptions>(options =>
            {
                options.ProxyClientBuildActions.Add((remoteServiceName, clientBuilder) =>
                {
                    clientBuilder.AddTransientHttpErrorPolicy(
                        policyBuilder => policyBuilder.WaitAndRetryAsync(3, i => TimeSpan.FromSeconds(Math.Pow(2, i)))
                    );
                });
            });
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <PropertyGroup>
        <OutputType>Exe</OutputType>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
      </PropertyGroup>
    
      <ItemGroup>
        <None Remove="appsettings.json" />
        <Content Include="appsettings.json">
          <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
        <None Remove="appsettings.secrets.json" />
        <Content Include="appsettings.secrets.json">
          <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
      </ItemGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
        <PackageReference Include="Volo.Abp.Http.Client.IdentityModel" Version="9.3.1" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.5" />
        <PackageReference Include="Microsoft.Extensions.Http.Polly" Version="9.0.5" />
      </ItemGroup>
    
      <ItemGroup>
        <None Remove="**\*.abppkg" />
        <None Remove="**\*.abppkg.analyze.json" />
        <Content Remove="$(UserProfile)\.nuget\packages\*\*\contentFiles\any\*\*.abppkg*" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.abppkg"><![CDATA[
    {
      "role": "lib.test"
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ClientDemoService.cs"><![CDATA[
    ﻿using System;
    using System.Threading.Tasks;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Identity;
    using Volo.Abp.Account;
    
    namespace ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp;
    
    public class ClientDemoService : ITransientDependency
    {
        private readonly IProfileAppService _profileAppService;
        private readonly IIdentityUserAppService _identityUserAppService;
    
        public ClientDemoService(
            IProfileAppService profileAppService,
            IIdentityUserAppService identityUserAppService)
        {
            _profileAppService = profileAppService;
            _identityUserAppService = identityUserAppService;
        }
    
        public async Task RunAsync()
        {
            var profileDto = await _profileAppService.GetAsync();
            Console.WriteLine($"UserName : {profileDto.UserName}");
            Console.WriteLine($"Email    : {profileDto.Email}");
            Console.WriteLine($"Name     : {profileDto.Name}");
            Console.WriteLine($"Surname  : {profileDto.Surname}");
            Console.WriteLine();
    
            var resultDto = await _identityUserAppService.GetListAsync(new GetIdentityUsersInput());
            Console.WriteLine($"Total users: {resultDto.TotalCount}");
            foreach (var identityUserDto in resultDto.Items)
            {
                Console.WriteLine($"- [{identityUserDto.Id}] {identityUserDto.Name}");
            }
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\appsettings.secrets.json"><![CDATA[
    {
        "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\appsettings.json"><![CDATA[
    {
      "RemoteServices": {
        "Default": {
          "BaseUrl": "https://localhost:44302/"
        }
      },
      "IdentityClients": {
        "Default": {
          "GrantType": "password",
          "ClientId": "ExampleAbpApplicationLayer_App",
          "UserName": "admin",
          "UserPassword": "1q2w3E*",
          "Authority": "https://localhost:44302/",
          "Scope": "ExampleAbpApplicationLayer"
        }
      }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Volo.Abp.EntityFrameworkCore.Sqlite" Version="9.3.1" />
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.abppkg"><![CDATA[
    {
      "role": "lib.test"
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayerDomainTestModule.cs"><![CDATA[
    ﻿using Volo.Abp.Modularity;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerDomainModule),
        typeof(ExampleAbpApplicationLayerTestBaseModule)
    )]
    public class ExampleAbpApplicationLayerDomainTestModule : AbpModule
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayerDomainTestBase.cs"><![CDATA[
    ﻿using Volo.Abp.Modularity;
    
    namespace ExampleAbpApplicationLayer;
    
    /* Inherit from this class for your domain layer tests. */
    public abstract class ExampleAbpApplicationLayerDomainTestBase<TStartupModule> : ExampleAbpApplicationLayerTestBase<TStartupModule>
        where TStartupModule : IAbpModule
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.abppkg"><![CDATA[
    {
      "role": "lib.test"
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayerApplicationTestModule.cs"><![CDATA[
    ﻿using Volo.Abp.Modularity;
    
    namespace ExampleAbpApplicationLayer;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerApplicationModule),
        typeof(ExampleAbpApplicationLayerDomainTestModule)
    )]
    public class ExampleAbpApplicationLayerApplicationTestModule : AbpModule
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayerApplicationTestBase.cs"><![CDATA[
    ﻿using Volo.Abp.Modularity;
    
    namespace ExampleAbpApplicationLayer;
    
    public abstract class ExampleAbpApplicationLayerApplicationTestBase<TStartupModule> : ExampleAbpApplicationLayerTestBase<TStartupModule>
        where TStartupModule : IAbpModule
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.csproj"><![CDATA[
    <Project Sdk="Microsoft.NET.Sdk">
    
      <Import Project="..\..\common.props" />
    
      <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
      </PropertyGroup>
    
      <ItemGroup>
        <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj" />
        <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.csproj" />
      </ItemGroup>
    
      <ItemGroup>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
      </ItemGroup>
    
    </Project>
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.abppkg"><![CDATA[
    {
      "role": "lib.test"
    }
    ]]></file>
  <file path="etc\helm\uninstall.ps1"><![CDATA[
    param (
    	$Namespace="exampleabpapplicationlayer-local",
        $ReleaseName="exampleabpapplicationlayer-local",
        $User = ""
    )
    
    if([string]::IsNullOrEmpty($User) -eq $false)
    {
        $Namespace += '-' + $User
        $ReleaseName += '-' + $User
    }
    
    helm uninstall ${ReleaseName} --namespace ${Namespace}
    ]]></file>
  <file path="etc\helm\README.md"><![CDATA[
    ﻿# Local Kubernetes Guide
    
    This guide explains how to deploy your microservice template into your local Kubernetes cluster.
    
    ## Pre-requirements
    
    * [Docker for Desktop](https://www.docker.com/products/docker-desktop/) with Kubernetes enabled
    * [Helm](https://helm.sh/docs/intro/install/) for running helm charts
    * Install NGINX ingress using helm:
    ```powershell
    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --version=4.0.19 ingress-nginx ingress-nginx/ingress-nginx
    ```
    ## Configuring HTTPS for Local K8s
    
    You can run the solution on staging environment in your local Kubernetes cluster with HTTPS. There are various ways to create a self-signed certificate.
    
    ### Installing mkcert
    This guide will be using `mkcert` for creating self-signed certificates. Follow the [installation guide](https://github.com/FiloSottile/mkcert#installation) to install mkcert.
    
    ### Creating mkcert Root CA
    Use the command to create root (local) certificate authority for your certificates:
    ```powershell
    mkcert -install
    ```
    
    > **Note:** All the certificates created by mkcert certificate creation will be trusted by the local machine
    ### Run mkcert
    
    Use the `create-tls-secrets.ps1` PowerShell script to create self-signed certificates for your domains and the tls secret for Kubernetes.
    
    ## Building Images
    
    Run `build-all-images.ps1` to build all Docker images for the solution. Do this whenever you change the solution code. If you only change a single project, you can use `build-image.ps1` to build only that image, for a faster build. See `build-all-images.ps1` file's content to learn how to use `build-image.ps1` for a single project.
    
    > Note that you can also use ABP Studio to build one or all the images.
    
    ## Install Charts
    
    Run `install.ps1` to install or upgrade the helm charts to the Kubernetes cluster.
    
    > Note that you can also use ABP Studio to install/uninstall charts.
    
    ## Add Entries to the Hosts File
    
    Ensure that the following entries are added to the `C:\Windows\System32\drivers\etc\hosts` file:
    
    ```
    127.0.0.1 exampleabpapplicationlayer-local-web
    127.0.0.1 exampleabpapplicationlayer-local-webgateway
    127.0.0.1 exampleabpapplicationlayer-local-authserver
    ```
    
    > Note that ABP Studio automatically adds these entries to your `hosts` file when you *Connect* to your Kubernetes cluster using ABP Studio's Kubernetes integration.
    
    ## Browse
    
    Now, you can browse the URL: `https://exampleabpapplicationlayer-local-web`
    
    ## Uninstall Charts
    
    Run `uninstall.ps1` to uninstall the helm charts from the Kubernetes cluster.
    
    
    ]]></file>
  <file path="etc\helm\install.ps1"><![CDATA[
    param (
    	$ChartName="exampleabpapplicationlayer",
    	$Namespace="exampleabpapplicationlayer-local",
    	$ReleaseName="exampleabpapplicationlayer-local",
    	$DotnetEnvironment="Staging",
        $User = ""
    )
    
    # Create values.localdev.yaml if not exists
    $localDevFilePath = Join-Path $PSScriptRoot "exampleabpapplicationlayer/values.localdev.yaml"
    if (!(Test-Path $localDevFilePath)) {
    	New-Item -ItemType File -Path $localDevFilePath | Out-Null
    }
    
    $FinalReleaseName = $ReleaseName
    if([string]::IsNullOrEmpty($User) -eq $false)
    {
        $Namespace += '-' + $User
        $FinalReleaseName += '-' + $User
    }
    
    # Install (or upgrade) the Helm chart
    helm upgrade --install ${FinalReleaseName} ${ChartName} --namespace ${Namespace} --create-namespace --set global.dotnetEnvironment=${DotnetEnvironment} -f "exampleabpapplicationlayer/values.localdev.yaml" -f "$ChartName/values.${ReleaseName}.yaml"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer-local.pem"><![CDATA[
    -----BEGIN CERTIFICATE-----
    MIIElDCCAvygAwIBAgIRAO3K5F1bvpnm90UChAwQG7swDQYJKoZIhvcNAQELBQAw
    bTEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMSEwHwYDVQQLDBhBTlNJ
    My1MQVBcQW5zaUBBbnNpMy1MQVAxKDAmBgNVBAMMH21rY2VydCBBTlNJMy1MQVBc
    QW5zaUBBbnNpMy1MQVAwHhcNMjUwODIzMDIxMzEzWhcNMjcxMTIzMDIxMzEzWjBM
    MScwJQYDVQQKEx5ta2NlcnQgZGV2ZWxvcG1lbnQgY2VydGlmaWNhdGUxITAfBgNV
    BAsMGEFOU0kzLUxBUFxBbnNpQEFuc2kzLUxBUDCCASIwDQYJKoZIhvcNAQEBBQAD
    ggEPADCCAQoCggEBAKoXD+sp2FO5f65hUXLAl54SWD+e2zIQNRFZzQMUWQKQj1rL
    XvqSqKUvaPDAwJIZW6P+Od+elYVXG36nFMfIA3OZTAhBGYJ5XWTmaaw1iSkMnJQ9
    jFTq/dtaXq/Wiw5h7eBnQWEmr50Ryq/XOGjHu5hixIc3aASBGfshE0dllTHDcgYO
    pKZAjadBVGK/0GYbLdRwigYVltFStGaVB8wRB89hlaMy+kNf/jqgL4rXqF2CJJAG
    UxZqpIFE49jGAesnqCyzIRkeg87901zd4qKadxfFciRkNp4mGBZ9e9aNttSvy+kB
    F0MJpBWd7XwtBZyLoWnTuv7RXGH6uBbyPtX50Y8CAwEAAaOBzzCBzDAOBgNVHQ8B
    Af8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwHwYDVR0jBBgwFoAUDNA7yE/W
    XFC4YItDtTUlUCjIEzswgYMGA1UdEQR8MHqCIGV4YW1wbGVhYnBhcHBsaWNhdGlv
    bmxheWVyLWxvY2FsgihleGFtcGxlYWJwYXBwbGljYXRpb25sYXllci1sb2NhbC1h
    bmd1bGFygixleGFtcGxlYWJwYXBwbGljYXRpb25sYXllci1sb2NhbC1odHRwYXBp
    aG9zdDANBgkqhkiG9w0BAQsFAAOCAYEAi9KWMSiYJ35U2dxnOOY1A3wwC+ZgBe9/
    sbK2i0kjX5IWfG7NFdewx5zrRwLw/2P18MqW5KtMagbgOyfewsU/hd5eYGgcpnJU
    UmxDqVhi2ofl9Unbv+TBDCpx/+ebzJh3YXCAxbf51wk8e9k/kDQIeAqLGDxsolk8
    l27DDtd3GIvF/t84iwnHwgDzzyOJemio2Q+UPt0zfrPQg2e/lqPpPwddSPa3BnPs
    vcMwEoZLIlfyO/TzyRz+uRaz7xEDNeP8K4uZe4UPoMPuH4mhkeGQl4x1MApUDoRj
    f+VvvhPK+CLz82X/EfHVP3biUn7f3AVjyE9g3/RxLCbqqoG1dwW4ZH+eIuGRBJ43
    T4kIZdkYXJ9MFybTl5QHsQJsTi5iN074UHjRNk2Z+yhZlOYofChy2Sjpo6p8Ycgm
    oiACML0rk5fRr3Y6tHHwL4/W7x9LlCgsZVRJHSsEHGa5/EdAFut7qq0gwq0vljmP
    S+RA573olPloshjJvCDVpY0yda3m4SzO
    -----END CERTIFICATE-----
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer-local-key.pem"><![CDATA[
    -----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqFw/rKdhTuX+u
    YVFywJeeElg/ntsyEDURWc0DFFkCkI9ay176kqilL2jwwMCSGVuj/jnfnpWFVxt+
    pxTHyANzmUwIQRmCeV1k5mmsNYkpDJyUPYxU6v3bWl6v1osOYe3gZ0FhJq+dEcqv
    1zhox7uYYsSHN2gEgRn7IRNHZZUxw3IGDqSmQI2nQVRiv9BmGy3UcIoGFZbRUrRm
    lQfMEQfPYZWjMvpDX/46oC+K16hdgiSQBlMWaqSBROPYxgHrJ6gssyEZHoPO/dNc
    3eKimncXxXIkZDaeJhgWfXvWjbbUr8vpARdDCaQVne18LQWci6Fp07r+0Vxh+rgW
    8j7V+dGPAgMBAAECggEAbn8C8WPCzElSwCcqsWCaXq9OMy5w+an7v6TWAW0jkf31
    kydRMXk7I+yTwOuHbqIYnYXXdQVh3zjCfNnwLwUp8Nwiv64C83cCjDz/Y0d4Lnmp
    8se1NalfdzPTFWpL9fD6hvCtUX6/UUuwn+EyHSe8H/fx8mG1Kk/wX+uRya0dajCd
    3BjHsdVgGTYbWJ70T6ACrtFclwqgD69EAyeZ44NdI5d34ZzKve3voubpC78oAa+B
    Q4hTUA2AFxysPWIeOmvSL6u6ZzSayH7PSh4RC0ADZfc7fCgKe52+TLndDu+FfDix
    GoOsbxN2O7CL1nVAP75lU/9MtLqjIqADwHAan778aQKBgQDVxcpZzNOuna2CTjKg
    qq6EqqEkdBHEleudRib6KfbhMB6b6hUMj5OPEI5mM5E9r33AAZ06rR76BjgakO8a
    Pfd9HRTcYJyg7nGl3UrapEB/QfogaYwpySstgn0dgHy4hMCoTJ6JgAXJtXhiSVXE
    32UnFOLTkKofBbnJxLRv8LCtfQKBgQDLsE03gIelrTlJag810E+4ARWZ5HHZ2sRh
    8WGR9v89OAvVjIVkA6JPcnlH+ZxRmc+IleGMDKrtgMN+H/QhTp3eyMAgcfhDO8pA
    GMNpApWNXtramwhOU6QSfr0gmMUsioXgABk5/cYfX3Zm/SB8aT3+c4fuqeVESqvE
    JmJTAywY+wKBgQCmo4MkUz2jvXg2vlxK0CIweo4Yy33aP3+mXrwdgD7ZtVf29Bcq
    bnV5LU/DrWkHq9gbp2Z4CeG+xsBPPTGVxD47QkMzswAFlznyMLmcDDPWv4iKYZyI
    Ki/FTxXWvIT8lUdVKjzfNHPOk+5et4nraLUCLQ7QGtHyUtVLylFZfUdMRQKBgCZr
    yQTxH6UmuamZcekKtB7XRYXTy432cBixeWAZISghDEppyTeGX/VweGQVN2FFDBqN
    ew/5y7wlD7sYt+oYdDrzzxnPpa649nuEsEd8j00tWUbm+3ga2tYKRg6CAp9WOc54
    9kk0D00XqrPeh2QwTdtTW46vSWnKVAAZ5W4XKRhFAoGARs/s82+753Re362m0eTR
    kQ9ixr71ta9tb4P+KqLKGsxUvHEAGZO+yFMG25TMp33JcprKYe2hiat0VQD5tE9l
    gHaoDmi3pFkcbiBDmdgUM/7dWPYS98KaxzLPHdgh5Dpz6fpsYXjKYWtKva0qmwcY
    BIcsFiRYPzmCD6NjQesgSwU=
    -----END PRIVATE KEY-----
    
    ]]></file>
  <file path="etc\helm\create-tls-secrets.ps1"><![CDATA[
    ﻿param (
        $Namespace="exampleabpapplicationlayer-local",
        $User = ""
    )
    
    $BaseNamespace = $Namespace
    if([string]::IsNullOrEmpty($User) -eq $false)
    {
        $Namespace += '-' + $User
    }
    
    mkcert --cert-file "${Namespace}.pem" --key-file "${Namespace}-key.pem" "${Namespace}"  "${Namespace}-angular"  "${Namespace}-httpapihost"   
    kubectl create namespace ${Namespace}
    kubectl create secret tls -n ${Namespace} ${BaseNamespace}-tls --cert=./${Namespace}.pem --key=./${Namespace}-key.pem
    ]]></file>
  <file path="etc\helm\build-image.ps1"><![CDATA[
    param (
        $ProjectPath,
        $ImageName,
        $Version="auto",
        $ProjectType="dotnet"
    )
    
    if ($Version -eq 'auto') {
        $Version = Get-Date -Format "yyyyMMdd.HHmmss"
    }
    
    $currentFolder = $PSScriptRoot
    $relativeProjectFolder = [System.IO.Path]::GetExtension($ProjectPath) -eq "" ? $ProjectPath : [System.IO.Path]::GetDirectoryName($ProjectPath)
    $projectFolder = Join-Path $currentFolder $relativeProjectFolder
    
    Set-Location $projectFolder
    
    try
    {
        $projectFileName = [System.IO.Path]::GetFileName($ProjectPath)
    
        if($ProjectType -eq "dotnet")
        {
            Write-Host "Publishing Dotnet Project: ${projectFileName}" -ForegroundColor Green -BackgroundColor Black
            dotnet publish -c Release
    
            if (-Not $?) {
                Write-Error "Publishing Dotnet Project failed: $projectFileName"
                exit $LASTEXITCODE
            }
        }
    
        Write-Host "Building Docker Image: ${ImageName}" -ForegroundColor Green -BackgroundColor Black
        $Env:DOCKER_SCAN_SUGGEST="false"
        docker build . -f Dockerfile -t ${ImageName}:${Version}
    
        # BEGIN: UPDATE values.localdev.yaml
    
        $splitImageName = $ImageName -split '/'
        $subChartName = $splitImageName[1]
    
        # Full path of the values.localdev.yaml file
        $localDevFilePath = Join-Path $PSScriptRoot "exampleabpapplicationlayer/values.localdev.yaml"
    
        # If the values.localdev.yaml file does not exist, create it first
        if (!(Test-Path $localDevFilePath)) {
            New-Item -ItemType File -Path $localDevFilePath | Out-Null
        }
    
        # Content to write to the file.
        $chartSectionContent = @"
    ${subChartName}:
      image:
        tag: "${Version}"
    "@
    
        # Read the existing content from the file
        $existingContent = Get-Content -Path $localDevFilePath -Raw
    
        # Check if the existing content contains the service name, and replace it if found.
        if ($existingContent -match "${subChartName}:") {
            $existingContent = $existingContent -replace "(?s)${subChartName}:.*?tag:.*", $chartSectionContent.Trim()
        } else {
            $existingContent += $chartSectionContent
        }
    
        # Write the updated content to the file.
        Set-Content -Path $localDevFilePath -Value $existingContent
    
        # END: UPDATE values.localdev.yaml
    }
    finally
    {
        Set-Location $currentFolder    
    }
    ]]></file>
  <file path="etc\helm\build-all-images.ps1"><![CDATA[
    ./build-image.ps1 -ProjectPath "../../src/ExampleAbpApplicationLayer.DbMigrator/ExampleAbpApplicationLayer.DbMigrator.csproj" -ImageName exampleabpapplicationlayer/dbmigrator
    ./build-image.ps1 -ProjectPath "../../src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.csproj" -ImageName exampleabpapplicationlayer/httpapihost
    ./build-image.ps1 -ProjectPath "../../angular" -ImageName exampleabpapplicationlayer/angular -ProjectType "angular"
    
    ]]></file>
  <file path="etc\helm\.gitignore"><![CDATA[
    exampleabpapplicationlayer/values.localdev.yaml
    ]]></file>
  <file path="etc\docker-compose\stop-docker.sh"><![CDATA[
    #!/bin/bash
    docker-compose down
    ]]></file>
  <file path="etc\docker-compose\stop-docker.ps1"><![CDATA[
    docker-compose down
    ]]></file>
  <file path="etc\docker-compose\run-docker.sh"><![CDATA[
    #!/bin/bash
    
    if [[ ! -d certs ]]
    then
        mkdir certs
        cd certs/
        if [[ ! -f localhost.pfx ]]
        then
            dotnet dev-certs https -v -ep localhost.pfx -p 1d011f9a-235f-4ab3-be3f-a8f7b6bd06d2 -t
        fi
        cd ../
    fi
    
    docker-compose up -d
    
    ]]></file>
  <file path="etc\docker-compose\run-docker.ps1"><![CDATA[
    $currentFolder = $PSScriptRoot
    
    $certsFolder = Join-Path $currentFolder "certs"
    
    If(!(Test-Path -Path $certsFolder))
    {
        New-Item -ItemType Directory -Force -Path $certsFolder
        if(!(Test-Path -Path (Join-Path $certsFolder "localhost.pfx") -PathType Leaf)){
            Set-Location $certsFolder
            dotnet dev-certs https -v -ep localhost.pfx -p 1d011f9a-235f-4ab3-be3f-a8f7b6bd06d2 -t        
        }
    }
    
    Set-Location $currentFolder
    docker-compose up -d
    ]]></file>
  <file path="etc\docker-compose\README.md"><![CDATA[
    ## How to deploy on docker
    The application provides the related `Dockerfiles` and `docker-compose` file with scripts. You can build the docker images and run them using docker-compose. The necessary database, DbMigrator, and the application will be running on docker with health checks in an isolated docker network.
    
    ### Creating the docker images
    Navigate to _etc/docker-compose_ folder and run the `build-images-locally.ps1` script. You can examine the script to set **image tag** for your images. It is `latest` by default.
    
    ### Running the docker images using docker-compose
    Navigate to _etc/docker-compose_ folder and run the `run-docker.ps1` script. The script will generate developer certificates (if it doesn't exist already) with `dotnet dev-certs` command to use HTTPS. Then, the script runs the provided docker-compose file on detached mode.
    
    > Not: Developer certificate is only valid for **localhost** domain. If you want to deploy to a real DNS in a production environment, use LetsEncrypt or similar tools.
    
    ]]></file>
  <file path="etc\docker-compose\dynamic-env.json"><![CDATA[
    {
      "production": true,
      "application": {
        "baseUrl":"http://localhost:4200",
        "name": "ExampleAbpApplicationLayer",
        "logoUrl": ""
      },
      "oAuthConfig": {
        "issuer": "https://localhost:44302/",
        "redirectUri": "http://localhost:4200",
        "clientId": "ExampleAbpApplicationLayer_App",
        "responseType": "code",
        "scope": "offline_access openid profile email phone ExampleAbpApplicationLayer"
      },
      "apis": {
        "default": {
          "url": "https://localhost:44302",
          "rootNamespace": "ExampleAbpApplicationLayer"
        },
        "AbpAccountPublic": {
          "url": "https://localhost:44302",
          "rootNamespace": "AbpAccountPublic"
        }
      }
    }
    ]]></file>
  <file path="etc\docker-compose\docker-compose.yml"><![CDATA[
    services:
      exampleabpapplicationlayer-angular:
        image: exampleabpapplicationlayer-angular:latest
        container_name: exampleabpapplicationlayer-angular
        build:
          context: ../../
          dockerfile: angular/Dockerfile.local
        ports:
          - "4200:80"
        depends_on:
          - exampleabpapplicationlayer-api
        volumes:
          - ./dynamic-env.json://usr/share/nginx/html/dynamic-env.json
        networks:
          - abp-network
    
      exampleabpapplicationlayer-api:
        image: exampleabpapplicationlayer-api:latest
        container_name: exampleabpapplicationlayer-api
        hostname: exampleabpapplicationlayer-api
        build:
          context: ../../
          dockerfile: src/ExampleAbpApplicationLayer.HttpApi.Host/Dockerfile.local
        environment:
          - ASPNETCORE_URLS=https://+:8081;http://+:8080;
          - Kestrel__Certificates__Default__Path=/app/certs/localhost.pfx
          - Kestrel__Certificates__Default__Password=1d011f9a-235f-4ab3-be3f-a8f7b6bd06d2
          - App__SelfUrl=https://localhost:44359
          - App__AngularUrl=http://localhost:4200
          - App_CorsOrigins=http://localhost:4200
          - App__HealthCheckUrl=http://exampleabpapplicationlayer-api:8080/health-status
          - AuthServer__RequireHttpsMetadata=false
          - AuthServer__Authority=https://localhost:44302
          - App__RedirectAllowedUrls=http://localhost:4200
          - ConnectionStrings__Default=Data Source=sql-server;Initial Catalog=ExampleAbpApplicationLayer;User Id=sa;Password=myPassw0rd;MultipleActiveResultSets=true;TrustServerCertificate=True;
        ports:
          - "44302:8081"
        depends_on:
          sql-server:
            condition: service_healthy
        restart: on-failure    
        volumes:
          - ./certs:/app/certs
        networks:
          - abp-network
      
    
      db-migrator:
        image: exampleabpapplicationlayer-db-migrator:latest
        container_name: db-migrator
        build:
          context: ../../
          dockerfile: src/ExampleAbpApplicationLayer.DbMigrator/Dockerfile.local
        environment:
          - OpenIddict__Applications__ExampleAbpApplicationLayer_App__RootUrl=http://localhost:4200
          - OpenIddict__Applications__ExampleAbpApplicationLayer_Swagger__RootUrl=https://localhost:44302
          - ConnectionStrings__Default=Data Source=sql-server;Initial Catalog=ExampleAbpApplicationLayer;User Id=sa;Password=myPassw0rd;MultipleActiveResultSets=true;TrustServerCertificate=True;
        restart: on-failure
        depends_on:
          sql-server:
            condition: service_healthy
        networks:
          - abp-network    
      
      sql-server:
        container_name: sql-server
        image: mcr.microsoft.com/azure-sql-edge:1.0.7
        ports:
          - "1434:1433"
        environment:
          SA_PASSWORD: "myPassw0rd"
          ACCEPT_EULA: "Y"
        volumes:
          - sqldata:/var/opt/mssql
        networks:
          - abp-network
        healthcheck:
          test: /opt/mssql-tools/bin/sqlcmd -S sql-server -U sa -P "myPassw0rd" -Q "SELECT 1" -C -b -o /dev/null
          interval: 10s
          timeout: 3s
          retries: 10
          start_period: 10s
    volumes:
      sqldata:
        name: exampleabpapplicationlayer_sqldata
    networks:
      abp-network:
        name: exampleabpapplicationlayer-network
        driver: bridge
    
    ]]></file>
  <file path="etc\docker-compose\build-images-locally.ps1"><![CDATA[
    param ($version='latest')
    
    $currentFolder = $PSScriptRoot
    $slnFolder = Join-Path $currentFolder "../../"
    
    Write-Host "********* BUILDING DbMigrator *********" -ForegroundColor Green
    $dbMigratorFolder = Join-Path $slnFolder "src/ExampleAbpApplicationLayer.DbMigrator"
    Set-Location $dbMigratorFolder
    dotnet publish -c Release
    docker build -f Dockerfile.local -t exampleabpapplicationlayer-db-migrator:$version .
    
    
    
    Write-Host "********* BUILDING Angular Application *********" -ForegroundColor Green
    $angularAppFolder = Join-Path $slnFolder "./angular"
    Set-Location $angularAppFolder
    npx yarn
    npm run build:prod
    docker build -f Dockerfile.local -t exampleabpapplicationlayer-angular:$version .
    
    Write-Host "********* BUILDING Api.Host Application *********" -ForegroundColor Green
    $hostFolder = Join-Path $slnFolder "src/ExampleAbpApplicationLayer.HttpApi.Host"
    Set-Location $hostFolder
    dotnet publish -c Release
    docker build -f Dockerfile.local -t exampleabpapplicationlayer-api:$version .
    
    
    
    
    
    
    ### ALL COMPLETED
    Write-Host "COMPLETED" -ForegroundColor Green
    Set-Location $currentFolder
    ]]></file>
  <file path="angular\src\test.ts"><![CDATA[
    // This file is required by karma.conf.js and loads recursively all the .spec and framework files
    
    import { getTestBed } from '@angular/core/testing';
    import {
      BrowserDynamicTestingModule,
      platformBrowserDynamicTesting,
    } from '@angular/platform-browser-dynamic/testing';
    import 'zone.js/testing';
    
    // First, initialize the Angular testing environment.
    getTestBed().initTestEnvironment(
      BrowserDynamicTestingModule,
      platformBrowserDynamicTesting(), {
        teardown: { destroyAfterEach: false }
    }
    );
    
    ]]></file>
  <file path="angular\src\styles.scss"><![CDATA[
    /* You can add global styles to this file, and also import other style files */
    
    
    :root .lpx-theme-dark {
      .abp-support {
        background-image: url('/assets/images/getting-started/abp-support-white.svg');
      }
      .abp-community {
        background-image: url('/assets/images/getting-started/abp-community-white.svg');
      }
      .abp-blog {
        background-image: url('/assets/images/getting-started/abp-blog-white.svg');
      }
      .logo-x {
        background-image: url('/assets/images/getting-started/x-white.svg');
      }
    }
    
    
    :root {
      --lpx-theme-light-bg: url('/assets/images/login/login-bg-img-light.svg');
      --lpx-theme-dim-bg: url('/assets/images/login/login-bg-img-dim.svg');
      --lpx-theme-dark-bg: url('/assets/images/login/login-bg-img-dark.svg');
    
      --lpx-logo-url: var(--lpx-logo-icon, url('/assets/images/logo/icon.svg'));
      --lpx-logo: var(--lpx-logo-icon);
    
      .abp-logo {
        background-repeat: no-repeat;
      }
    
      .abp-support {
        width: 178px;
        height: 30px;
        background-image: url('/assets/images/getting-started/abp-support.svg');
      }
    
      .abp-community {
        width: 215px;
        height: 30px;
        background-image: url('/assets/images/getting-started/abp-community.svg');
      }
    
      .abp-blog {
        width: 142px;
        height: 30px;
        background-image: url('/assets/images/getting-started/abp-blog.svg');
      }
    
      .logo-x {
        width: 20px;
        height: 20px;
        background-image: url('/assets/images/getting-started/x.svg');
      }
    }
    
    ]]></file>
  <file path="angular\src\polyfills.ts"><![CDATA[
    /**
     * This file includes polyfills needed by Angular and is loaded before the app.
     * You can add your own extra polyfills to this file.
     *
     * This file is divided into 2 sections:
     *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
     *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
     *      file.
     *
     * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
     * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
     * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
     *
     * Learn more in https://angular.io/guide/browser-support
     */
    /***************************************************************************************************
     * BROWSER POLYFILLS
     */
    /**
     * By default, zone.js will patch all possible macroTask and DomEvents
     * user can disable parts of macroTask/DomEvents patch by setting following flags
     * because those flags need to be set before `zone.js` being loaded, and webpack
     * will put import in the top of bundle, so user need to create a separate file
     * in this directory (for example: zone-flags.ts), and put the following flags
     * into that file, and then add the following code before importing zone.js.
     * import './zone-flags';
     *
     * The flags allowed in zone-flags.ts are listed here.
     *
     * The following flags will work for all browsers.
     *
     * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
     * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
     * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
     *
     *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
     *  with the following flag, it will bypass `zone.js` patch for IE/Edge
     *
     *  (window as any).__Zone_enable_cross_context_check = true;
     *
     */
    /***************************************************************************************************
     * Zone JS is required by default for Angular itself.
     */
    import 'zone.js'; // Included with Angular CLI.
    
    /***************************************************************************************************
     * APPLICATION IMPORTS
     */
    
    /******************************************************************
     * Load `$localize` - used if i18n tags appear in Angular templates.
     */
     import '@angular/localize/init';
    ]]></file>
  <file path="angular\src\main.ts"><![CDATA[
    import { enableProdMode } from '@angular/core';
    import { bootstrapApplication } from '@angular/platform-browser';
    
    import { AppComponent } from './app/app.component';
    import { appConfig } from './app/app.config';
    import { environment } from './environments/environment';
    
    if (environment.production) {
      enableProdMode();
    }
    
    bootstrapApplication(AppComponent, appConfig).catch(err => console.error(err));
    
    ]]></file>
  <file path="angular\src\index.html"><![CDATA[
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>ExampleAbpApplicationLayer</title>
        <base href="/" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/x-icon" href="favicon.ico" />
        <style>
          #lp-page-loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            user-select: none;
            z-index: 9999999;
            background: #7e8082;
            transition: background 0.3s ease-out;
          }
    
          #lp-page-loader:after {
            content: '';
            display: block;
            position: absolute;
            left: calc(50% - 20px);
            top: calc(50% - 20px);
            width: 40px;
            height: 40px;
            border: 4px solid #fff;
            opacity: 0.7;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
          }
    
          @keyframes spin {
            from {
              transform: rotate(0deg);
            }
    
            to {
              transform: rotate(360deg);
            }
          }
        </style>
      </head>
      <body>
        <app-root></app-root>
        <div id="lp-page-loader"></div>
      </body>
    </html>
    
    ]]></file>
  <file path="angular\e2e\tsconfig.json"><![CDATA[
    {
      "extends": "../tsconfig.json",
      "compilerOptions": {
        "outDir": "../out-tsc/e2e",
        "module": "commonjs",
        "target": "es2018",
        "types": [
          "jasmine",
          "jasminewd2",
          "node"
        ]
      }
    }
    
    ]]></file>
  <file path="angular\e2e\protractor.conf.js"><![CDATA[
    // @ts-check
    // Protractor configuration file, see link for more information
    // https://github.com/angular/protractor/blob/master/lib/config.ts
    
    const { SpecReporter } = require('jasmine-spec-reporter');
    
    /**
     * @type { import("protractor").Config }
     */
    exports.config = {
      allScriptsTimeout: 11000,
      specs: [
        './src/**/*.e2e-spec.ts'
      ],
      capabilities: {
        browserName: 'chrome'
      },
      directConnect: true,
      baseUrl: 'http://localhost:4200/',
      framework: 'jasmine',
      jasmineNodeOpts: {
        showColors: true,
        defaultTimeoutInterval: 30000,
        print: function() {}
      },
      onPrepare() {
        require('ts-node').register({
          project: require('path').join(__dirname, './tsconfig.json')
        });
        jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));
      }
    };
    ]]></file>
  <file path="angular\.vscode\extensions.json"><![CDATA[
    {
      "recommendations": [
        "angular.ng-template",
        "esbenp.prettier-vscode",
        "ms-vscode.vscode-typescript-tslint-plugin",
        "visualstudioexptteam.vscodeintellicode",
        "christian-kohler.path-intellisense",
        "christian-kohler.npm-intellisense",
        "Mikael.Angular-BeastCode",
        "xabikos.JavaScriptSnippets",
        "msjsdiag.debugger-for-chrome",
        "donjayamanne.githistory",
        "oderwat.indent-rainbow"
      ]
    }
    
    ]]></file>
  <file path=".suite\entities\Product.json"><![CDATA[
    {
      "Id": "42cd0707-142b-45e7-af5a-3bea1befd7e3",
      "Name": "Product",
      "OriginalName": "Product",
      "NamePlural": "Products",
      "DatabaseTableName": "Products",
      "Namespace": "Products",
      "Type": 1,
      "MasterEntityName": null,
      "MasterEntity": null,
      "BaseClass": "FullAuditedAggregateRoot",
      "PageTitle": "Products",
      "MenuIcon": "file-alt",
      "PrimaryKeyType": "Guid",
      "PreserveCustomCode": true,
      "IsMultiTenant": true,
      "CheckConcurrency": true,
      "BulkDeleteEnabled": true,
      "ShouldCreateUserInterface": true,
      "ShouldCreateBackend": true,
      "ShouldExportExcel": true,
      "ShouldAddMigration": true,
      "ShouldUpdateDatabase": false,
      "CreateTests": true,
      "Properties": [
        {
          "Id": "59c6ebe4-048b-487a-aebd-cb669f682e58",
          "Name": "Name",
          "Type": "string",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": null,
          "IsNullable": false,
          "IsRequired": true,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "e6a712db-6d00-4429-bce4-4655379d7c62",
          "Name": "Desc",
          "Type": "string",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": null,
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": false,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": false,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "5851438c-2b6d-4721-9f07-354e4c5ce1c8",
          "Name": "Price",
          "Type": "float",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": "0",
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "1ab295a0-1b47-4323-a4e0-3d0ff88e301b",
          "Name": "IsActive",
          "Type": "bool",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": "true",
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        }
      ],
      "NavigationProperties": [],
      "NavigationConnections": [],
      "ChildEntities": [],
      "PhysicalFileName": "Product.json"
    }
    ]]></file>
  <file path=".suite\entities\OrderItem.json"><![CDATA[
    {
      "Id": "4e63f026-1218-4131-8892-99fbbf105565",
      "Name": "OrderItem",
      "OriginalName": "OrderItem",
      "NamePlural": "OrderItems",
      "DatabaseTableName": "OrderItems",
      "Namespace": "OrderItems",
      "Type": 2,
      "MasterEntityName": "Order.cs",
      "MasterEntity": {
        "Id": "5ae7091c-e271-4e74-a469-a4f63e0d8118",
        "Name": "Order",
        "OriginalName": "Order",
        "NamePlural": "Orders",
        "DatabaseTableName": "Orders",
        "Namespace": "Orders",
        "Type": 1,
        "MasterEntityName": null,
        "MasterEntity": null,
        "BaseClass": "FullAuditedAggregateRoot",
        "PageTitle": "Orders",
        "MenuIcon": "file-alt",
        "PrimaryKeyType": "Guid",
        "PreserveCustomCode": true,
        "IsMultiTenant": true,
        "CheckConcurrency": true,
        "BulkDeleteEnabled": false,
        "ShouldCreateUserInterface": true,
        "ShouldCreateBackend": true,
        "ShouldExportExcel": true,
        "ShouldAddMigration": true,
        "ShouldUpdateDatabase": false,
        "CreateTests": true,
        "Properties": [
          {
            "Id": "8510c2c8-974c-4391-a1b6-4068243e248e",
            "Name": "OrderDate",
            "Type": "DateTime",
            "EnumType": "",
            "EnumNamespace": "",
            "EnumAngularImport": "shared/enums",
            "EnumFilePath": null,
            "DefaultValue": null,
            "IsNullable": false,
            "IsRequired": false,
            "IsFilterable": true,
            "AllowEmptyStrings": false,
            "IsTextArea": false,
            "MinLength": null,
            "MaxLength": null,
            "SortOrder": 0,
            "SortType": 0,
            "Regex": "",
            "EmailValidation": false,
            "ShowOnList": true,
            "ShowOnCreateModal": true,
            "ShowOnEditModal": true,
            "ReadonlyOnEditModal": false,
            "EnumValues": null,
            "IsSelected": true,
            "MaxFileSize": null,
            "OrdinalIndex": 0
          },
          {
            "Id": "22eed0de-9129-4767-9a76-96eea378e280",
            "Name": "TotalAmount",
            "Type": "float",
            "EnumType": "",
            "EnumNamespace": "",
            "EnumAngularImport": "shared/enums",
            "EnumFilePath": null,
            "DefaultValue": "0",
            "IsNullable": false,
            "IsRequired": false,
            "IsFilterable": true,
            "AllowEmptyStrings": false,
            "IsTextArea": false,
            "MinLength": null,
            "MaxLength": null,
            "SortOrder": 0,
            "SortType": 0,
            "Regex": "",
            "EmailValidation": false,
            "ShowOnList": true,
            "ShowOnCreateModal": true,
            "ShowOnEditModal": true,
            "ReadonlyOnEditModal": false,
            "EnumValues": null,
            "IsSelected": true,
            "MaxFileSize": null,
            "OrdinalIndex": 0
          },
          {
            "Id": "44c5862c-ae78-4593-9602-cf13aeca3d60",
            "Name": "Status",
            "Type": "enum",
            "EnumType": "OrderStatus",
            "EnumNamespace": "ExampleAbpApplicationLayer.Enums.Orders",
            "EnumAngularImport": "shared/enums/order-status",
            "EnumFilePath": "/src/ExampleAbpApplicationLayer.Domain.Shared/Enum/Orders/OrderStatus.cs",
            "DefaultValue": null,
            "IsNullable": false,
            "IsRequired": false,
            "IsFilterable": true,
            "AllowEmptyStrings": false,
            "IsTextArea": false,
            "MinLength": null,
            "MaxLength": null,
            "SortOrder": 0,
            "SortType": 0,
            "Regex": "",
            "EmailValidation": false,
            "ShowOnList": true,
            "ShowOnCreateModal": true,
            "ShowOnEditModal": true,
            "ReadonlyOnEditModal": false,
            "EnumValues": {
              "Initialized": 0,
              "Paid": 1,
              "Processing": 2,
              "Ordered": 3,
              "Shipped": 4,
              "Arrived": 5,
              "Delivered": 6,
              "Cancelled": 7,
              "NotPaid": 8
            },
            "IsSelected": true,
            "MaxFileSize": null,
            "OrdinalIndex": 0
          }
        ],
        "NavigationProperties": [],
        "NavigationConnections": [],
        "ChildEntities": [],
        "PhysicalFileName": "Order.json"
      },
      "BaseClass": "FullAuditedEntity",
      "PageTitle": "OrderItems",
      "MenuIcon": "<none>",
      "PrimaryKeyType": "Guid",
      "PreserveCustomCode": true,
      "IsMultiTenant": true,
      "CheckConcurrency": false,
      "BulkDeleteEnabled": false,
      "ShouldCreateUserInterface": false,
      "ShouldCreateBackend": true,
      "ShouldExportExcel": false,
      "ShouldAddMigration": true,
      "ShouldUpdateDatabase": false,
      "CreateTests": false,
      "Properties": [
        {
          "Id": "c0d25a75-6f71-4cce-a812-2a460d96012c",
          "Name": "Qty",
          "Type": "int",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": "1",
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "db2ff822-2339-4a77-ab47-48b722490e3e",
          "Name": "Price",
          "Type": "float",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": "0",
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "feca3529-fbf3-4481-ac79-fd289724a559",
          "Name": "TotalPrice",
          "Type": "float",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": null,
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "40259171-cb2b-4448-9675-8b5f2db5d780",
          "Name": "ProductName",
          "Type": "string",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": null,
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": false,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        }
      ],
      "NavigationProperties": [
        {
          "EntityNameWithDuplicationNumber": "Product",
          "EntitySetNameWithDuplicationNumber": "Products",
          "ReferencePropertyName": "Product",
          "UiPickType": "Dropdown",
          "IsRequired": true,
          "IncludeEntitiesFromModules": false,
          "FromAbpModule": false,
          "Name": "ProductId",
          "DisplayProperty": "Name",
          "Namespace": "ExampleAbpApplicationLayer.Products",
          "EntityName": "Product",
          "EntitySetName": "Products",
          "DtoNamespace": "ExampleAbpApplicationLayer.Products",
          "DtoEntityName": "ProductDto",
          "Type": "Guid",
          "IsFilterable": true
        }
      ],
      "NavigationConnections": [],
      "ChildEntities": [],
      "PhysicalFileName": "OrderItem.json"
    }
    ]]></file>
  <file path=".suite\entities\Order.json"><![CDATA[
    {
      "Id": "5ae7091c-e271-4e74-a469-a4f63e0d8118",
      "Name": "Order",
      "OriginalName": "Order",
      "NamePlural": "Orders",
      "DatabaseTableName": "Orders",
      "Namespace": "Orders",
      "Type": 1,
      "MasterEntityName": null,
      "MasterEntity": null,
      "BaseClass": "FullAuditedAggregateRoot",
      "PageTitle": "Orders",
      "MenuIcon": "file-alt",
      "PrimaryKeyType": "Guid",
      "PreserveCustomCode": true,
      "IsMultiTenant": true,
      "CheckConcurrency": true,
      "BulkDeleteEnabled": false,
      "ShouldCreateUserInterface": true,
      "ShouldCreateBackend": true,
      "ShouldExportExcel": true,
      "ShouldAddMigration": true,
      "ShouldUpdateDatabase": false,
      "CreateTests": true,
      "Properties": [
        {
          "Id": "8510c2c8-974c-4391-a1b6-4068243e248e",
          "Name": "OrderDate",
          "Type": "DateTime",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": null,
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "22eed0de-9129-4767-9a76-96eea378e280",
          "Name": "TotalAmount",
          "Type": "float",
          "EnumType": "",
          "EnumNamespace": "",
          "EnumAngularImport": "shared/enums",
          "EnumFilePath": null,
          "DefaultValue": "0",
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": null,
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        },
        {
          "Id": "44c5862c-ae78-4593-9602-cf13aeca3d60",
          "Name": "Status",
          "Type": "enum",
          "EnumType": "OrderStatus",
          "EnumNamespace": "ExampleAbpApplicationLayer.Enums.Orders",
          "EnumAngularImport": "shared/enums/order-status",
          "EnumFilePath": "/src/ExampleAbpApplicationLayer.Domain.Shared/Enum/Orders/OrderStatus.cs",
          "DefaultValue": null,
          "IsNullable": false,
          "IsRequired": false,
          "IsFilterable": true,
          "AllowEmptyStrings": false,
          "IsTextArea": false,
          "MinLength": null,
          "MaxLength": null,
          "SortOrder": 0,
          "SortType": 0,
          "Regex": "",
          "EmailValidation": false,
          "ShowOnList": true,
          "ShowOnCreateModal": true,
          "ShowOnEditModal": true,
          "ReadonlyOnEditModal": false,
          "EnumValues": {
            "Initialized": 0,
            "Paid": 1,
            "Processing": 2,
            "Ordered": 3,
            "Shipped": 4,
            "Arrived": 5,
            "Delivered": 6,
            "Cancelled": 7,
            "NotPaid": 8
          },
          "IsSelected": true,
          "MaxFileSize": null,
          "OrdinalIndex": 0
        }
      ],
      "NavigationProperties": [],
      "NavigationConnections": [],
      "ChildEntities": [
        {
          "Id": "4e63f026-1218-4131-8892-99fbbf105565",
          "Name": "OrderItem",
          "OriginalName": "OrderItem",
          "NamePlural": "OrderItems",
          "DatabaseTableName": "OrderItems",
          "Namespace": "OrderItems",
          "Type": 2,
          "MasterEntityName": "Order.cs",
          "MasterEntity": {
            "Id": "5ae7091c-e271-4e74-a469-a4f63e0d8118",
            "Name": "Order",
            "OriginalName": "Order",
            "NamePlural": "Orders",
            "DatabaseTableName": "Orders",
            "Namespace": "Orders",
            "Type": 1,
            "MasterEntityName": null,
            "MasterEntity": null,
            "BaseClass": "FullAuditedAggregateRoot",
            "PageTitle": "Orders",
            "MenuIcon": "file-alt",
            "PrimaryKeyType": "Guid",
            "PreserveCustomCode": true,
            "IsMultiTenant": true,
            "CheckConcurrency": true,
            "BulkDeleteEnabled": false,
            "ShouldCreateUserInterface": true,
            "ShouldCreateBackend": true,
            "ShouldExportExcel": true,
            "ShouldAddMigration": true,
            "ShouldUpdateDatabase": false,
            "CreateTests": true,
            "Properties": [
              {
                "Id": "8510c2c8-974c-4391-a1b6-4068243e248e",
                "Name": "OrderDate",
                "Type": "DateTime",
                "EnumType": "",
                "EnumNamespace": "",
                "EnumAngularImport": "shared/enums",
                "EnumFilePath": null,
                "DefaultValue": null,
                "IsNullable": false,
                "IsRequired": false,
                "IsFilterable": true,
                "AllowEmptyStrings": false,
                "IsTextArea": false,
                "MinLength": null,
                "MaxLength": null,
                "SortOrder": 0,
                "SortType": 0,
                "Regex": "",
                "EmailValidation": false,
                "ShowOnList": true,
                "ShowOnCreateModal": true,
                "ShowOnEditModal": true,
                "ReadonlyOnEditModal": false,
                "EnumValues": null,
                "IsSelected": true,
                "MaxFileSize": null,
                "OrdinalIndex": 0
              },
              {
                "Id": "22eed0de-9129-4767-9a76-96eea378e280",
                "Name": "TotalAmount",
                "Type": "float",
                "EnumType": "",
                "EnumNamespace": "",
                "EnumAngularImport": "shared/enums",
                "EnumFilePath": null,
                "DefaultValue": "0",
                "IsNullable": false,
                "IsRequired": false,
                "IsFilterable": true,
                "AllowEmptyStrings": false,
                "IsTextArea": false,
                "MinLength": null,
                "MaxLength": null,
                "SortOrder": 0,
                "SortType": 0,
                "Regex": "",
                "EmailValidation": false,
                "ShowOnList": true,
                "ShowOnCreateModal": true,
                "ShowOnEditModal": true,
                "ReadonlyOnEditModal": false,
                "EnumValues": null,
                "IsSelected": true,
                "MaxFileSize": null,
                "OrdinalIndex": 0
              },
              {
                "Id": "44c5862c-ae78-4593-9602-cf13aeca3d60",
                "Name": "Status",
                "Type": "enum",
                "EnumType": "OrderStatus",
                "EnumNamespace": "ExampleAbpApplicationLayer.Enums.Orders",
                "EnumAngularImport": "shared/enums/order-status",
                "EnumFilePath": "/src/ExampleAbpApplicationLayer.Domain.Shared/Enum/Orders/OrderStatus.cs",
                "DefaultValue": null,
                "IsNullable": false,
                "IsRequired": false,
                "IsFilterable": true,
                "AllowEmptyStrings": false,
                "IsTextArea": false,
                "MinLength": null,
                "MaxLength": null,
                "SortOrder": 0,
                "SortType": 0,
                "Regex": "",
                "EmailValidation": false,
                "ShowOnList": true,
                "ShowOnCreateModal": true,
                "ShowOnEditModal": true,
                "ReadonlyOnEditModal": false,
                "EnumValues": {
                  "Initialized": 0,
                  "Paid": 1,
                  "Processing": 2,
                  "Ordered": 3,
                  "Shipped": 4,
                  "Arrived": 5,
                  "Delivered": 6,
                  "Cancelled": 7,
                  "NotPaid": 8
                },
                "IsSelected": true,
                "MaxFileSize": null,
                "OrdinalIndex": 0
              }
            ],
            "NavigationProperties": [],
            "NavigationConnections": [],
            "ChildEntities": [],
            "PhysicalFileName": "Order.json"
          },
          "BaseClass": "FullAuditedEntity",
          "PageTitle": "OrderItems",
          "MenuIcon": "<none>",
          "PrimaryKeyType": "Guid",
          "PreserveCustomCode": true,
          "IsMultiTenant": true,
          "CheckConcurrency": false,
          "BulkDeleteEnabled": false,
          "ShouldCreateUserInterface": false,
          "ShouldCreateBackend": true,
          "ShouldExportExcel": false,
          "ShouldAddMigration": true,
          "ShouldUpdateDatabase": false,
          "CreateTests": false,
          "Properties": [
            {
              "Id": "c0d25a75-6f71-4cce-a812-2a460d96012c",
              "Name": "Qty",
              "Type": "int",
              "EnumType": "",
              "EnumNamespace": "",
              "EnumAngularImport": "shared/enums",
              "EnumFilePath": null,
              "DefaultValue": "1",
              "IsNullable": false,
              "IsRequired": false,
              "IsFilterable": true,
              "AllowEmptyStrings": false,
              "IsTextArea": false,
              "MinLength": null,
              "MaxLength": null,
              "SortOrder": 0,
              "SortType": 0,
              "Regex": "",
              "EmailValidation": false,
              "ShowOnList": true,
              "ShowOnCreateModal": true,
              "ShowOnEditModal": true,
              "ReadonlyOnEditModal": false,
              "EnumValues": null,
              "IsSelected": true,
              "MaxFileSize": null,
              "OrdinalIndex": 0
            },
            {
              "Id": "db2ff822-2339-4a77-ab47-48b722490e3e",
              "Name": "Price",
              "Type": "float",
              "EnumType": "",
              "EnumNamespace": "",
              "EnumAngularImport": "shared/enums",
              "EnumFilePath": null,
              "DefaultValue": "0",
              "IsNullable": false,
              "IsRequired": false,
              "IsFilterable": true,
              "AllowEmptyStrings": false,
              "IsTextArea": false,
              "MinLength": null,
              "MaxLength": null,
              "SortOrder": 0,
              "SortType": 0,
              "Regex": "",
              "EmailValidation": false,
              "ShowOnList": true,
              "ShowOnCreateModal": true,
              "ShowOnEditModal": true,
              "ReadonlyOnEditModal": false,
              "EnumValues": null,
              "IsSelected": true,
              "MaxFileSize": null,
              "OrdinalIndex": 0
            },
            {
              "Id": "feca3529-fbf3-4481-ac79-fd289724a559",
              "Name": "TotalPrice",
              "Type": "float",
              "EnumType": "",
              "EnumNamespace": "",
              "EnumAngularImport": "shared/enums",
              "EnumFilePath": null,
              "DefaultValue": null,
              "IsNullable": false,
              "IsRequired": false,
              "IsFilterable": true,
              "AllowEmptyStrings": false,
              "IsTextArea": false,
              "MinLength": null,
              "MaxLength": null,
              "SortOrder": 0,
              "SortType": 0,
              "Regex": "",
              "EmailValidation": false,
              "ShowOnList": true,
              "ShowOnCreateModal": true,
              "ShowOnEditModal": true,
              "ReadonlyOnEditModal": false,
              "EnumValues": null,
              "IsSelected": true,
              "MaxFileSize": null,
              "OrdinalIndex": 0
            },
            {
              "Id": "40259171-cb2b-4448-9675-8b5f2db5d780",
              "Name": "ProductName",
              "Type": "string",
              "EnumType": "",
              "EnumNamespace": "",
              "EnumAngularImport": "shared/enums",
              "EnumFilePath": null,
              "DefaultValue": null,
              "IsNullable": false,
              "IsRequired": false,
              "IsFilterable": false,
              "AllowEmptyStrings": false,
              "IsTextArea": false,
              "MinLength": null,
              "MaxLength": null,
              "SortOrder": 0,
              "SortType": 0,
              "Regex": "",
              "EmailValidation": false,
              "ShowOnList": true,
              "ShowOnCreateModal": true,
              "ShowOnEditModal": true,
              "ReadonlyOnEditModal": false,
              "EnumValues": null,
              "IsSelected": true,
              "MaxFileSize": null,
              "OrdinalIndex": 0
            }
          ],
          "NavigationProperties": [
            {
              "EntityNameWithDuplicationNumber": "Product",
              "EntitySetNameWithDuplicationNumber": "Products",
              "ReferencePropertyName": "Product",
              "UiPickType": "Dropdown",
              "IsRequired": true,
              "IncludeEntitiesFromModules": false,
              "FromAbpModule": false,
              "Name": "ProductId",
              "DisplayProperty": "Name",
              "Namespace": "ExampleAbpApplicationLayer.Products",
              "EntityName": "Product",
              "EntitySetName": "Products",
              "DtoNamespace": "ExampleAbpApplicationLayer.Products",
              "DtoEntityName": "ProductDto",
              "Type": "Guid",
              "IsFilterable": true
            }
          ],
          "NavigationConnections": [],
          "ChildEntities": [],
          "PhysicalFileName": "OrderItem.json"
        }
      ],
      "PhysicalFileName": "Order.json"
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\wwwroot\global-styles.css"><![CDATA[
    :root {
        --lpx-theme-light-bg: url('/LeptonX/images/login-pages/login-bg-img-light.svg');
        --lpx-theme-dim-bg: url('/LeptonX/images/login-pages/login-bg-img-dim.svg');
        --lpx-theme-dark-bg: url('/LeptonX/images/login-pages/login-bg-img-dark.svg');
    }
    
    :root {
        --lpx-logo: url('/images/logo/leptonx/icon.svg');
        --lpx-logo-icon: url('/images/logo/leptonx/icon.svg');
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\wwwroot\global-scripts.js"><![CDATA[
    /* Your Global Scripts */
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Properties\launchSettings.json"><![CDATA[
    {
      "iisSettings": {
        "windowsAuthentication": false,
        "anonymousAuthentication": true,
        "iisExpress": {
          "applicationUrl": "https://localhost:44302",
          "sslPort": 44302
        }
      },
      "profiles": {
        "IIS Express": {
          "commandName": "IISExpress",
          "launchBrowser": true,
          "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
          }
        },
        "ExampleAbpApplicationLayer.HttpApi.Host": {
          "commandName": "Project",
          "launchBrowser": true,
          "applicationUrl": "https://localhost:44302",
          "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
          }
        }
      }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\HealthChecks\HealthChecksBuilderExtensions.cs"><![CDATA[
    ﻿using System;
    using HealthChecks.UI.Client;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Diagnostics.HealthChecks;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Routing;
    using Microsoft.Extensions.DependencyInjection;
    
    namespace ExampleAbpApplicationLayer.HealthChecks;
    
    public static class HealthChecksBuilderExtensions
    {
        public static void AddExampleAbpApplicationLayerHealthChecks(this IServiceCollection services)
        {
            // Add your health checks here
            var healthChecksBuilder = services.AddHealthChecks();
            healthChecksBuilder.AddCheck<ExampleAbpApplicationLayerDatabaseCheck>("ExampleAbpApplicationLayer DbContext Check", tags: new string[] { "database" });
    
            services.ConfigureHealthCheckEndpoint("/health-status");
    
            var configuration = services.GetConfiguration();
            var healthCheckUrl = configuration["App:HealthCheckUrl"];
    
            if (string.IsNullOrEmpty(healthCheckUrl))
            {
                healthCheckUrl = "/health-status";
            }
    
            var healthChecksUiBuilder = services.AddHealthChecksUI(settings =>
            {
                settings.AddHealthCheckEndpoint("ExampleAbpApplicationLayer Health Status", configuration["App:HealthUiCheckUrl"] ?? healthCheckUrl);
            });
    
            // Set your HealthCheck UI Storage here
            healthChecksUiBuilder.AddInMemoryStorage();
    
            services.MapHealthChecksUiEndpoints(options =>
            {
                options.UIPath = "/health-ui";
                options.ApiPath = "/health-api";
            });
        }
    
        private static IServiceCollection ConfigureHealthCheckEndpoint(this IServiceCollection services, string path)
        {
            services.Configure<AbpEndpointRouterOptions>(options =>
            {
                options.EndpointConfigureActions.Add(endpointContext =>
                {
                    endpointContext.Endpoints.MapHealthChecks(
                        new PathString(path.EnsureStartsWith('/')),
                        new HealthCheckOptions
                        {
                            Predicate = _ => true,
                            ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse,
                            AllowCachingResponses = false,
                        });
                });
            });
    
            return services;
        }
    
        private static IServiceCollection MapHealthChecksUiEndpoints(this IServiceCollection services, Action<global::HealthChecks.UI.Configuration.Options>? setupOption = null)
        {
            services.Configure<AbpEndpointRouterOptions>(routerOptions =>
            {
                routerOptions.EndpointConfigureActions.Add(endpointContext =>
                {
                    endpointContext.Endpoints.MapHealthChecksUI(setupOption);
                });
            });
    
            return services;
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\HealthChecks\ExampleAbpApplicationLayerDatabaseCheck.cs"><![CDATA[
    ﻿using System;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Diagnostics.HealthChecks;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Identity;
    
    namespace ExampleAbpApplicationLayer.HealthChecks;
    
    public class ExampleAbpApplicationLayerDatabaseCheck : IHealthCheck, ITransientDependency
    {
        protected readonly IIdentityRoleRepository IdentityRoleRepository;
    
        public ExampleAbpApplicationLayerDatabaseCheck(IIdentityRoleRepository identityRoleRepository)
        {
            IdentityRoleRepository = identityRoleRepository;
        }
    
        public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
        {
            try
            {
                await IdentityRoleRepository.GetListAsync(sorting: nameof(IdentityRole.Id), maxResultCount: 1, cancellationToken: cancellationToken);
    
                return HealthCheckResult.Healthy($"Could connect to database and get record.");
            }
            catch (Exception e)
            {
                return HealthCheckResult.Unhealthy($"Error when trying to get database record. ", e);
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Pages\_ViewImports.cshtml"><![CDATA[
    ﻿@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
    @addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI
    @addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI.Bootstrap
    @addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI.Bundling
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Pages\Index.cshtml.cs"><![CDATA[
    using System.Collections.Generic;
    using System.Globalization;
    using System.Threading.Tasks;
    using Volo.Abp.AspNetCore.Mvc.UI.RazorPages;
    using Volo.Abp.Localization;
    using Volo.Abp.OpenIddict.Applications;
    
    namespace ExampleAbpApplicationLayer.Pages;
    
    public class IndexModel : AbpPageModel
    {
        public List<OpenIddictApplication>? Applications { get; protected set; }
    
        public IReadOnlyList<LanguageInfo>? Languages { get; protected set; }
    
        public string? CurrentLanguage { get; protected set; }
    
        protected IOpenIddictApplicationRepository OpenIdApplicationRepository { get; }
    
        protected ILanguageProvider LanguageProvider { get; }
    
        public IndexModel(IOpenIddictApplicationRepository openIdApplicationmRepository, ILanguageProvider languageProvider)
        {
            OpenIdApplicationRepository = openIdApplicationmRepository;
            LanguageProvider = languageProvider;
        }
    
        public async Task OnGetAsync()
        {
            Applications = await OpenIdApplicationRepository.GetListAsync();
    
            Languages = await LanguageProvider.GetLanguagesAsync();
            CurrentLanguage = CultureInfo.CurrentCulture.DisplayName;
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi.Host\Pages\Index.cshtml"><![CDATA[
    ﻿@page
    @using Microsoft.AspNetCore.Mvc.Localization
    @using Microsoft.AspNetCore.Http.Extensions
    @using ExampleAbpApplicationLayer.Localization
    @using ExampleAbpApplicationLayer.Pages
    @using Volo.Abp.Account.Localization
    @using Volo.Abp.Users
    @using Volo.Abp.AspNetCore.Mvc.UI.Theming
    @using Volo.Abp.Ui.Branding
    @model IndexModel
    @inject IHtmlLocalizer<ExampleAbpApplicationLayerResource> L
    @inject IHtmlLocalizer<AccountResource> AccountLocalizer
    @inject ICurrentUser CurrentUser
    @inject IBrandingProvider BrandingProvider
    @inject ITheme Theme
    @{
        Layout = Theme.GetEmptyLayout();
    }
    
    <div class="d-flex align-items-center" style="min-height: 100vh;">
        <div class="container">
            <abp-row>
    
                <div class="col mx-auto account-column">
                    <div class="account-brand p-4 text-center mb-1">
    
                        @if (!BrandingProvider.LogoUrl.IsNullOrEmpty())
                        {
                            <a class="navbar-brand" href="~/" alt="@BrandingProvider.AppName"></a>
                        }
                        else
                        {
                            <h1>@BrandingProvider.AppName</h1>
                        }
                    </div>
                    <abp-card class="border rounded">
    
                        <abp-card-body>
    
                            <div class="container">
                                <abp-row>
                                    <abp-column size="_9">
    
                                        <div class="mr-auto p-2 float-start">
                                            @if (CurrentUser.IsAuthenticated)
                                            {
                                                <div>
                                                    <div>
                                                        <a abp-button="Outline_Primary" asp-controller="Manage" asp-action="Index" asp-area="Account" class="me-2">@AccountLocalizer["MyAccount"]</a>
                                                        <a abp-button="Primary" asp-controller="Logout" asp-action="Index" asp-area="Account">@L["Logout"]</a>
                                                    </div>
                                                </div>
    
                                            }
                                            else
                                            {
                                                <div class="text-center">
                                                    <a abp-button="Primary" asp-controller="Login" asp-action="Index" asp-area="Account">@L["Login"]</a>
                                                </div>
                                            }
                                        </div>
                                    </abp-column>
                                    <abp-column size="_3">
                                        <div class="ml-auto p-2 float-end">
                                            <abp-dropdown>
                                                @if (Model.CurrentLanguage != null)
                                                {
                                                    <abp-dropdown-button text="@Model.CurrentLanguage"/>
                                                }
    
                                                @if (Model.Languages != null)
                                                {
                                                    <abp-dropdown-menu>
                                                        @foreach (var language in Model.Languages)
                                                        {
                                                            var languageUrl = Url.Content($"~/Abp/Languages/Switch?culture={language.CultureName}&uiCulture={language.UiCultureName}&returnUrl={System.Net.WebUtility.UrlEncode(Request.GetEncodedPathAndQuery())}");
                                                            <abp-dropdown-item href="@languageUrl">@language.DisplayName</abp-dropdown-item>
                                                        }
                                                    </abp-dropdown-menu>
                                                }
                                            </abp-dropdown>
                                        </div>
                                    </abp-column>
    
                                </abp-row>
                                <hr class="m-4" />
    
                                <abp-row>
                                    @if (Model.Applications != null)
                                    {
                                        @foreach (var application in Model.Applications)
                                        {
                                            <abp-column size-md="_4" class="mb-2">
                                                <a href="@application.ClientUri" style="text-decoration:none">
                                                    <abp-card>
                                                        <abp-card-body>
                                                            @if (!application.LogoUri.IsNullOrEmpty())
                                                            {
                                                                var logoUri = application.LogoUri;
                                                                if(application.LogoUri.StartsWith('/'))
                                                                {
                                                                    logoUri = @Url.Content(application.LogoUri.EnsureStartsWith('~'));
                                                                }
    
                                                                <div class="mx-auto">
                                                                    <img src="@logoUri" style="height:64px" class="mb-3" />
                                                                </div>
                                                            }
                                                            <h4>@application.DisplayName</h4>
                                                            <span class="text-muted">@application.ClientUri</span>
                                                        </abp-card-body>
                                                    </abp-card>
                                                </a>
                                            </abp-column>
                                        }
                                    }
                                </abp-row>
                            </div>
    
                        </abp-card-body>
    
                    </abp-card>
                </div>
    
            </abp-row>
        </div>
    </div>
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\ExampleAbpApplicationLayerController.cs"><![CDATA[
    ﻿using ExampleAbpApplicationLayer.Localization;
    using Volo.Abp.AspNetCore.Mvc;
    
    namespace ExampleAbpApplicationLayer.Controllers;
    
    /* Inherit your controllers from this class.
     */
    public abstract class ExampleAbpApplicationLayerController : AbpControllerBase
    {
        protected ExampleAbpApplicationLayerController()
        {
            LocalizationResource = typeof(ExampleAbpApplicationLayerResource);
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Properties\AssemblyInfo.cs"><![CDATA[
    ﻿using System.Runtime.CompilerServices;
    [assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.EntityFrameworkCore.Tests")]
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Products\EfCoreProductRepository.Extended.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public class EfCoreProductRepository : EfCoreProductRepositoryBase, IProductRepository
        {
            public EfCoreProductRepository(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
                : base(dbContextProvider)
            {
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Products\EfCoreProductRepository.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class EfCoreProductRepositoryBase : EfCoreRepository<ExampleAbpApplicationLayerDbContext, Product, Guid>
        {
            public EfCoreProductRepositoryBase(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
                : base(dbContextProvider)
            {
    
            }
    
            public virtual async Task DeleteAllAsync(
                string? filterText = null,
                            string? name = null,
                float? priceMin = null,
                float? priceMax = null,
                bool? isActive = null,
                CancellationToken cancellationToken = default)
            {
    
                var query = await GetQueryableAsync();
    
                query = ApplyFilter(query, filterText, name, priceMin, priceMax, isActive);
    
                var ids = query.Select(x => x.Id);
                await DeleteManyAsync(ids, cancellationToken: GetCancellationToken(cancellationToken));
            }
    
            public virtual async Task<List<Product>> GetListAsync(
                string? filterText = null,
                string? name = null,
                float? priceMin = null,
                float? priceMax = null,
                bool? isActive = null,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default)
            {
                var query = ApplyFilter((await GetQueryableAsync()), filterText, name, priceMin, priceMax, isActive);
                query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? ProductConsts.GetDefaultSorting(false) : sorting);
                return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
            }
    
            public virtual async Task<long> GetCountAsync(
                string? filterText = null,
                string? name = null,
                float? priceMin = null,
                float? priceMax = null,
                bool? isActive = null,
                CancellationToken cancellationToken = default)
            {
                var query = ApplyFilter((await GetDbSetAsync()), filterText, name, priceMin, priceMax, isActive);
                return await query.LongCountAsync(GetCancellationToken(cancellationToken));
            }
    
            protected virtual IQueryable<Product> ApplyFilter(
                IQueryable<Product> query,
                string? filterText = null,
                string? name = null,
                float? priceMin = null,
                float? priceMax = null,
                bool? isActive = null)
            {
                return query
                        .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => e.Name!.Contains(filterText!))
                        .WhereIf(!string.IsNullOrWhiteSpace(name), e => e.Name.Contains(name))
                        .WhereIf(priceMin.HasValue, e => e.Price >= priceMin!.Value)
                        .WhereIf(priceMax.HasValue, e => e.Price <= priceMax!.Value)
                        .WhereIf(isActive.HasValue, e => e.IsActive == isActive);
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\OrderItems\EfCoreOrderItemRepository.Extended.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class EfCoreOrderItemRepository : EfCoreOrderItemRepositoryBase, IOrderItemRepository
        {
            public EfCoreOrderItemRepository(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
                : base(dbContextProvider)
            {
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\OrderItems\EfCoreOrderItemRepository.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class EfCoreOrderItemRepositoryBase : EfCoreRepository<ExampleAbpApplicationLayerDbContext, OrderItem, Guid>
        {
            public EfCoreOrderItemRepositoryBase(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
                : base(dbContextProvider)
            {
    
            }
    
            public virtual async Task<List<OrderItem>> GetListByOrderIdAsync(
               Guid orderId,
               string? sorting = null,
               int maxResultCount = int.MaxValue,
               int skipCount = 0,
               CancellationToken cancellationToken = default)
            {
                var query = (await GetQueryableAsync()).Where(x => x.OrderId == orderId);
                query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(false) : sorting);
                return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
            }
    
            public virtual async Task<long> GetCountByOrderIdAsync(Guid orderId, CancellationToken cancellationToken = default)
            {
                return await (await GetQueryableAsync()).Where(x => x.OrderId == orderId).CountAsync(cancellationToken);
            }
    
            public virtual async Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesByOrderIdAsync(
        Guid orderId,
        string? sorting = null,
        int maxResultCount = int.MaxValue,
        int skipCount = 0,
        CancellationToken cancellationToken = default)
            {
                var query = await GetQueryForNavigationPropertiesAsync();
                query = query.Where(x => x.OrderItem.OrderId == orderId);
                query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(true) : sorting);
                return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
            }
    
            public virtual async Task<OrderItemWithNavigationProperties> GetWithNavigationPropertiesAsync(Guid id, CancellationToken cancellationToken = default)
            {
                var dbContext = await GetDbContextAsync();
    
                return (await GetDbSetAsync()).Where(b => b.Id == id)
                    .Select(orderItem => new OrderItemWithNavigationProperties
                    {
                        OrderItem = orderItem,
                        Product = dbContext.Set<Product>().FirstOrDefault(c => c.Id == orderItem.ProductId)
                    }).FirstOrDefault();
            }
    
            public virtual async Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
                string? filterText = null,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null,
                Guid? productId = null,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default)
            {
                var query = await GetQueryForNavigationPropertiesAsync();
                query = ApplyFilter(query, filterText, qtyMin, qtyMax, priceMin, priceMax, totalPriceMin, totalPriceMax, productId);
                query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(true) : sorting);
                return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
            }
    
            protected virtual async Task<IQueryable<OrderItemWithNavigationProperties>> GetQueryForNavigationPropertiesAsync()
            {
                return from orderItem in (await GetDbSetAsync())
                       join product in (await GetDbContextAsync()).Set<Product>() on orderItem.ProductId equals product.Id into products
                       from product in products.DefaultIfEmpty()
                       select new OrderItemWithNavigationProperties
                       {
                           OrderItem = orderItem,
                           Product = product
                       };
            }
    
            protected virtual IQueryable<OrderItemWithNavigationProperties> ApplyFilter(
                IQueryable<OrderItemWithNavigationProperties> query,
                string? filterText,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null,
                Guid? productId = null)
            {
                return query
                    .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => e.OrderItem.ProductName!.Contains(filterText!))
                        .WhereIf(qtyMin.HasValue, e => e.OrderItem.Qty >= qtyMin!.Value)
                        .WhereIf(qtyMax.HasValue, e => e.OrderItem.Qty <= qtyMax!.Value)
                        .WhereIf(priceMin.HasValue, e => e.OrderItem.Price >= priceMin!.Value)
                        .WhereIf(priceMax.HasValue, e => e.OrderItem.Price <= priceMax!.Value)
                        .WhereIf(totalPriceMin.HasValue, e => e.OrderItem.TotalPrice >= totalPriceMin!.Value)
                        .WhereIf(totalPriceMax.HasValue, e => e.OrderItem.TotalPrice <= totalPriceMax!.Value)
                        .WhereIf(productId != null && productId != Guid.Empty, e => e.Product != null && e.Product.Id == productId);
            }
    
            public virtual async Task<List<OrderItem>> GetListAsync(
                string? filterText = null,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default)
            {
                var query = ApplyFilter((await GetQueryableAsync()), filterText, qtyMin, qtyMax, priceMin, priceMax, totalPriceMin, totalPriceMax);
                query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(false) : sorting);
                return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
            }
    
            public virtual async Task<long> GetCountAsync(
                string? filterText = null,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null,
                Guid? productId = null,
                CancellationToken cancellationToken = default)
            {
                var query = await GetQueryForNavigationPropertiesAsync();
                query = ApplyFilter(query, filterText, qtyMin, qtyMax, priceMin, priceMax, totalPriceMin, totalPriceMax, productId);
                return await query.LongCountAsync(GetCancellationToken(cancellationToken));
            }
    
            protected virtual IQueryable<OrderItem> ApplyFilter(
                IQueryable<OrderItem> query,
                string? filterText = null,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null)
            {
                return query
                        .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => e.ProductName!.Contains(filterText!))
                        .WhereIf(qtyMin.HasValue, e => e.Qty >= qtyMin!.Value)
                        .WhereIf(qtyMax.HasValue, e => e.Qty <= qtyMax!.Value)
                        .WhereIf(priceMin.HasValue, e => e.Price >= priceMin!.Value)
                        .WhereIf(priceMax.HasValue, e => e.Price <= priceMax!.Value)
                        .WhereIf(totalPriceMin.HasValue, e => e.TotalPrice >= totalPriceMin!.Value)
                        .WhereIf(totalPriceMax.HasValue, e => e.TotalPrice <= totalPriceMax!.Value);
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\ExampleAbpApplicationLayerDbContextModelSnapshot.cs"><![CDATA[
    ﻿// <auto-generated />
    using System;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
    using Volo.Abp.EntityFrameworkCore;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        [DbContext(typeof(ExampleAbpApplicationLayerDbContext))]
        partial class ExampleAbpApplicationLayerDbContextModelSnapshot : ModelSnapshot
        {
            protected override void BuildModel(ModelBuilder modelBuilder)
            {
    #pragma warning disable 612, 618
                modelBuilder
                    .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                    .HasAnnotation("ProductVersion", "9.0.5")
                    .HasAnnotation("Relational:MaxIdentifierLength", 128);
    
                SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.OrderItems.OrderItem", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid>("OrderId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<float>("Price")
                            .HasColumnType("real")
                            .HasColumnName("Price");
    
                        b.Property<Guid>("ProductId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ProductName")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ProductName");
    
                        b.Property<int>("Qty")
                            .HasColumnType("int")
                            .HasColumnName("Qty");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<float>("TotalPrice")
                            .HasColumnType("real")
                            .HasColumnName("TotalPrice");
    
                        b.HasKey("Id");
    
                        b.HasIndex("OrderId");
    
                        b.HasIndex("ProductId");
    
                        b.ToTable("AppOrderItems", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Orders.Order", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTime>("OrderDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("OrderDate");
    
                        b.Property<int>("Status")
                            .HasColumnType("int")
                            .HasColumnName("Status");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<float>("TotalAmount")
                            .HasColumnType("real")
                            .HasColumnName("TotalAmount");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppOrders", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Products.Product", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Desc")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Desc");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Name");
    
                        b.Property<float>("Price")
                            .HasColumnType("real")
                            .HasColumnName("Price");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppProducts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)")
                            .HasColumnName("ApplicationName");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("BrowserInfo");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientId");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientIpAddress");
    
                        b.Property<string>("ClientName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ClientName");
    
                        b.Property<string>("Comments")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Comments");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("CorrelationId");
    
                        b.Property<string>("Exceptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("HttpMethod")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("HttpMethod");
    
                        b.Property<int?>("HttpStatusCode")
                            .HasColumnType("int")
                            .HasColumnName("HttpStatusCode");
    
                        b.Property<Guid?>("ImpersonatorTenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorTenantId");
    
                        b.Property<string>("ImpersonatorTenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ImpersonatorTenantName");
    
                        b.Property<Guid?>("ImpersonatorUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorUserId");
    
                        b.Property<string>("ImpersonatorUserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ImpersonatorUserName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("TenantName");
    
                        b.Property<string>("Url")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Url");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ExecutionTime");
    
                        b.HasIndex("TenantId", "UserId", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ExecutionTime");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("MethodName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("MethodName");
    
                        b.Property<string>("Parameters")
                            .HasMaxLength(2000)
                            .HasColumnType("nvarchar(2000)")
                            .HasColumnName("Parameters");
    
                        b.Property<string>("ServiceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ServiceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogActions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogExcelFile", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("FileName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("FileName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpAuditLogExcelFiles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<DateTime>("ChangeTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ChangeTime");
    
                        b.Property<byte>("ChangeType")
                            .HasColumnType("tinyint")
                            .HasColumnName("ChangeType");
    
                        b.Property<string>("EntityId")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityId");
    
                        b.Property<Guid?>("EntityTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("EntityTypeFullName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityTypeFullName");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");
    
                        b.ToTable("AbpEntityChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("EntityChangeId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("NewValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("NewValue");
    
                        b.Property<string>("OriginalValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("OriginalValue");
    
                        b.Property<string>("PropertyName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("PropertyName");
    
                        b.Property<string>("PropertyTypeFullName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("PropertyTypeFullName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("EntityChangeId");
    
                        b.ToTable("AbpEntityPropertyChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAbandoned")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false);
    
                        b.Property<string>("JobArgs")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("JobName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime?>("LastTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime>("NextTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("Priority")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("tinyint")
                            .HasDefaultValue((byte)15);
    
                        b.Property<short>("TryCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("smallint")
                            .HasDefaultValue((short)0);
    
                        b.HasKey("Id");
    
                        b.HasIndex("IsAbandoned", "NextTryTime");
    
                        b.ToTable("AbpBackgroundJobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<Guid>("ContainerId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<byte[]>("Content")
                            .HasMaxLength(2147483647)
                            .HasColumnType("varbinary(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ContainerId");
    
                        b.HasIndex("TenantId", "ContainerId", "Name");
    
                        b.ToTable("AbpBlobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name");
    
                        b.ToTable("AbpBlobContainers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("AllowedProviders")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsAvailableToHost")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ValueType")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatures", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatureGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpFeatureValues", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Data")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Data");
    
                        b.Property<string>("Provider")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Provider");
    
                        b.Property<Guid>("RequestId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RequestId");
    
                        b.ToTable("GdprInfo", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime>("ReadyTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadyTime");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("GdprRequests", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Regex")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("RegexDescription")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("Required")
                            .HasColumnType("bit");
    
                        b.Property<int>("ValueType")
                            .HasColumnType("int");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpClaimTypes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("SourceTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TargetTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                            .IsUnique()
                            .HasFilter("[SourceTenantId] IS NOT NULL AND [TargetTenantId] IS NOT NULL");
    
                        b.ToTable("AbpLinkUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDefault")
                            .HasColumnType("bit")
                            .HasColumnName("IsDefault");
    
                        b.Property<bool>("IsPublic")
                            .HasColumnType("bit")
                            .HasColumnName("IsPublic");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit")
                            .HasColumnName("IsStatic");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("AbpRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RoleId");
    
                        b.ToTable("AbpRoleClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Action")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Identity")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Action");
    
                        b.HasIndex("TenantId", "ApplicationName");
    
                        b.HasIndex("TenantId", "Identity");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSecurityLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Device")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("DeviceInfo")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("IpAddresses")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<DateTime?>("LastAccessed")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("SessionId")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime>("SignedIn")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Device");
    
                        b.HasIndex("SessionId");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSessions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("AccessFailedCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("int")
                            .HasDefaultValue(0)
                            .HasColumnName("AccessFailedCount");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsExternal")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsExternal");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<bool>("LockoutEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("LockoutEnabled");
    
                        b.Property<DateTimeOffset?>("LockoutEnd")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedEmail")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedEmail");
    
                        b.Property<string>("NormalizedUserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedUserName");
    
                        b.Property<string>("PasswordHash")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("PasswordHash");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("SecurityStamp")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("SecurityStamp");
    
                        b.Property<bool>("ShouldChangePasswordOnNextLogin")
                            .HasColumnType("bit");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<bool>("TwoFactorEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("TwoFactorEnabled");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Email");
    
                        b.HasIndex("NormalizedEmail");
    
                        b.HasIndex("NormalizedUserName");
    
                        b.HasIndex("UserName");
    
                        b.ToTable("AbpUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("AbpUserClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("EndTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("StartTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpUserDelegations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderDisplayName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(196)
                            .HasColumnType("nvarchar(196)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "LoginProvider");
    
                        b.HasIndex("LoginProvider", "ProviderKey");
    
                        b.ToTable("AbpUserLogins", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "UserId");
    
                        b.HasIndex("UserId", "OrganizationUnitId");
    
                        b.ToTable("AbpUserOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "RoleId");
    
                        b.HasIndex("RoleId", "UserId");
    
                        b.ToTable("AbpUserRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Name")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("UserId", "LoginProvider", "Name");
    
                        b.ToTable("AbpUserTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Code")
                            .IsRequired()
                            .HasMaxLength(95)
                            .HasColumnType("nvarchar(95)")
                            .HasColumnName("Code");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Code");
    
                        b.HasIndex("ParentId");
    
                        b.ToTable("AbpOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "RoleId");
    
                        b.HasIndex("RoleId", "OrganizationUnitId");
    
                        b.ToTable("AbpOrganizationUnitRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationResourceRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("BaseResources")
                            .HasMaxLength(1280)
                            .HasColumnType("nvarchar(1280)")
                            .HasColumnName("BaseResources");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("DefaultCulture")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("DefaultCulture");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("Name");
    
                        b.Property<string>("SupportedCultures")
                            .HasMaxLength(640)
                            .HasColumnType("nvarchar(640)")
                            .HasColumnName("SupportedCultures");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationResources", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationTextRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ResourceName", "CultureName")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.Language", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(32)
                            .HasColumnType("nvarchar(32)")
                            .HasColumnName("DisplayName");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit")
                            .HasColumnName("IsEnabled");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("UiCultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("UiCultureName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("CultureName");
    
                        b.ToTable("AbpLanguages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.LanguageText", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("Name");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(65536)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ResourceName", "CultureName");
    
                        b.ToTable("AbpLanguageTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("ClientSecret")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ClientType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ConsentType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<string>("JsonWebKeySet")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("LogoUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Permissions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("PostLogoutRedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("RedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Requirements")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Settings")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ClientId");
    
                        b.ToTable("OpenIddictApplications", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Scopes")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictAuthorizations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Description")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Descriptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .HasMaxLength(200)
                            .HasColumnType("nvarchar(200)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Resources")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.ToTable("OpenIddictScopes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("AuthorizationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime?>("ExpirationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Payload")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("RedemptionDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ReferenceId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuthorizationId");
    
                        b.HasIndex("ReferenceId");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit");
    
                        b.Property<byte>("MultiTenancySide")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("StateCheckers")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[TenantId] IS NOT NULL");
    
                        b.ToTable("AbpPermissionGrants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissionGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpSettings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsEncrypted")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsInherited")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpSettingDefinitions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateContent", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Content")
                            .IsRequired()
                            .HasMaxLength(65535)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpTextTemplateContents", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("DefinitionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("FileContent")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("FileName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DefinitionId");
    
                        b.ToTable("AbpTextTemplateDefinitionContentRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultCultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<string>("DisplayName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsInlineLocalized")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsLayout")
                            .HasColumnType("bit");
    
                        b.Property<string>("Layout")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("LocalizationResourceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("RenderEngine")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpTextTemplateDefinitionRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Conversations.Conversation", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LastMessage")
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("LastMessage");
    
                        b.Property<DateTime>("LastMessageDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastMessageDate");
    
                        b.Property<byte>("LastMessageSide")
                            .HasColumnType("tinyint")
                            .HasColumnName("LastMessageSide");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<int>("UnreadMessageCount")
                            .HasColumnType("int")
                            .HasColumnName("UnreadMessageCount");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("ChatConversations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.Message", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAllRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsAllRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Text")
                            .IsRequired()
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Text");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("ChatMessageId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ChatMessageId");
    
                        b.Property<bool>("IsRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<byte>("Side")
                            .HasColumnType("tinyint")
                            .HasColumnName("Side");
    
                        b.Property<Guid?>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ChatMessageId");
    
                        b.HasIndex("UserId");
    
                        b.HasIndex("UserId", "TargetUserId");
    
                        b.ToTable("ChatUserMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Users.ChatUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ParentId");
    
                        b.HasIndex("TenantId", "ParentId", "Name");
    
                        b.ToTable("FmDirectoryDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DirectoryId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("MimeType")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<long>("Size")
                            .HasColumnType("bigint");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DirectoryId");
    
                        b.HasIndex("TenantId", "DirectoryId", "Name");
    
                        b.ToTable("FmFileDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Editions.Edition", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("PlanId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DisplayName");
    
                        b.ToTable("SaasEditions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime?>("ActivationEndDate")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("ActivationState")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<DateTime?>("EditionEndDateUtc")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("EditionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("NormalizedName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("SaasTenants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.Property<Guid>("TenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)")
                            .HasColumnName("Value");
    
                        b.HasKey("TenantId", "Name");
    
                        b.ToTable("SaasTenantConnectionStrings", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.OrderItems.OrderItem", b =>
                    {
                        b.HasOne("ExampleAbpApplicationLayer.Orders.Order", null)
                            .WithMany("OrderItems")
                            .HasForeignKey("OrderId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("ExampleAbpApplicationLayer.Products.Product", null)
                            .WithMany()
                            .HasForeignKey("ProductId")
                            .OnDelete(DeleteBehavior.NoAction)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("Actions")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("EntityChanges")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                            .WithMany("PropertyChanges")
                            .HasForeignKey("EntityChangeId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.HasOne("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", null)
                            .WithMany()
                            .HasForeignKey("ContainerId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.HasOne("Volo.Abp.Gdpr.GdprRequest", null)
                            .WithMany("Infos")
                            .HasForeignKey("RequestId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany("Claims")
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Claims")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Logins")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("OrganizationUnits")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Roles")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Tokens")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany("Roles")
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
    
                        b.HasOne("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", null)
                            .WithMany()
                            .HasForeignKey("AuthorizationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.HasOne("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", null)
                            .WithMany()
                            .HasForeignKey("DefinitionId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.HasOne("Volo.Chat.Messages.Message", null)
                            .WithMany()
                            .HasForeignKey("ChatMessageId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("DirectoryId");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.HasOne("Volo.Saas.Tenants.Tenant", null)
                            .WithMany("ConnectionStrings")
                            .HasForeignKey("TenantId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Orders.Order", b =>
                    {
                        b.Navigation("OrderItems");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Navigation("Actions");
    
                        b.Navigation("EntityChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Navigation("PropertyChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Navigation("Infos");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Navigation("Claims");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Navigation("Claims");
    
                        b.Navigation("Logins");
    
                        b.Navigation("OrganizationUnits");
    
                        b.Navigation("Roles");
    
                        b.Navigation("Tokens");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Navigation("Roles");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Navigation("ConnectionStrings");
                    });
    #pragma warning restore 612, 618
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823024639_Added_OrderItem.Designer.cs"><![CDATA[
    ﻿// <auto-generated />
    using System;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Migrations;
    using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
    using Volo.Abp.EntityFrameworkCore;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        [DbContext(typeof(ExampleAbpApplicationLayerDbContext))]
        [Migration("20250823024639_Added_OrderItem")]
        partial class Added_OrderItem
        {
            /// <inheritdoc />
            protected override void BuildTargetModel(ModelBuilder modelBuilder)
            {
    #pragma warning disable 612, 618
                modelBuilder
                    .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                    .HasAnnotation("ProductVersion", "9.0.5")
                    .HasAnnotation("Relational:MaxIdentifierLength", 128);
    
                SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.OrderItems.OrderItem", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid>("OrderId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<float>("Price")
                            .HasColumnType("real")
                            .HasColumnName("Price");
    
                        b.Property<Guid>("ProductId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ProductName")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ProductName");
    
                        b.Property<int>("Qty")
                            .HasColumnType("int")
                            .HasColumnName("Qty");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<float>("TotalPrice")
                            .HasColumnType("real")
                            .HasColumnName("TotalPrice");
    
                        b.HasKey("Id");
    
                        b.HasIndex("OrderId");
    
                        b.HasIndex("ProductId");
    
                        b.ToTable("AppOrderItems", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Orders.Order", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTime>("OrderDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("OrderDate");
    
                        b.Property<int>("Status")
                            .HasColumnType("int")
                            .HasColumnName("Status");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<float>("TotalAmount")
                            .HasColumnType("real")
                            .HasColumnName("TotalAmount");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppOrders", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Products.Product", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Desc")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Desc");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Name");
    
                        b.Property<float>("Price")
                            .HasColumnType("real")
                            .HasColumnName("Price");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppProducts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)")
                            .HasColumnName("ApplicationName");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("BrowserInfo");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientId");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientIpAddress");
    
                        b.Property<string>("ClientName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ClientName");
    
                        b.Property<string>("Comments")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Comments");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("CorrelationId");
    
                        b.Property<string>("Exceptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("HttpMethod")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("HttpMethod");
    
                        b.Property<int?>("HttpStatusCode")
                            .HasColumnType("int")
                            .HasColumnName("HttpStatusCode");
    
                        b.Property<Guid?>("ImpersonatorTenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorTenantId");
    
                        b.Property<string>("ImpersonatorTenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ImpersonatorTenantName");
    
                        b.Property<Guid?>("ImpersonatorUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorUserId");
    
                        b.Property<string>("ImpersonatorUserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ImpersonatorUserName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("TenantName");
    
                        b.Property<string>("Url")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Url");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ExecutionTime");
    
                        b.HasIndex("TenantId", "UserId", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ExecutionTime");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("MethodName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("MethodName");
    
                        b.Property<string>("Parameters")
                            .HasMaxLength(2000)
                            .HasColumnType("nvarchar(2000)")
                            .HasColumnName("Parameters");
    
                        b.Property<string>("ServiceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ServiceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogActions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogExcelFile", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("FileName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("FileName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpAuditLogExcelFiles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<DateTime>("ChangeTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ChangeTime");
    
                        b.Property<byte>("ChangeType")
                            .HasColumnType("tinyint")
                            .HasColumnName("ChangeType");
    
                        b.Property<string>("EntityId")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityId");
    
                        b.Property<Guid?>("EntityTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("EntityTypeFullName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityTypeFullName");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");
    
                        b.ToTable("AbpEntityChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("EntityChangeId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("NewValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("NewValue");
    
                        b.Property<string>("OriginalValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("OriginalValue");
    
                        b.Property<string>("PropertyName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("PropertyName");
    
                        b.Property<string>("PropertyTypeFullName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("PropertyTypeFullName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("EntityChangeId");
    
                        b.ToTable("AbpEntityPropertyChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAbandoned")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false);
    
                        b.Property<string>("JobArgs")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("JobName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime?>("LastTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime>("NextTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("Priority")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("tinyint")
                            .HasDefaultValue((byte)15);
    
                        b.Property<short>("TryCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("smallint")
                            .HasDefaultValue((short)0);
    
                        b.HasKey("Id");
    
                        b.HasIndex("IsAbandoned", "NextTryTime");
    
                        b.ToTable("AbpBackgroundJobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<Guid>("ContainerId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<byte[]>("Content")
                            .HasMaxLength(2147483647)
                            .HasColumnType("varbinary(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ContainerId");
    
                        b.HasIndex("TenantId", "ContainerId", "Name");
    
                        b.ToTable("AbpBlobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name");
    
                        b.ToTable("AbpBlobContainers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("AllowedProviders")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsAvailableToHost")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ValueType")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatures", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatureGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpFeatureValues", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Data")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Data");
    
                        b.Property<string>("Provider")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Provider");
    
                        b.Property<Guid>("RequestId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RequestId");
    
                        b.ToTable("GdprInfo", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime>("ReadyTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadyTime");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("GdprRequests", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Regex")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("RegexDescription")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("Required")
                            .HasColumnType("bit");
    
                        b.Property<int>("ValueType")
                            .HasColumnType("int");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpClaimTypes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("SourceTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TargetTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                            .IsUnique()
                            .HasFilter("[SourceTenantId] IS NOT NULL AND [TargetTenantId] IS NOT NULL");
    
                        b.ToTable("AbpLinkUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDefault")
                            .HasColumnType("bit")
                            .HasColumnName("IsDefault");
    
                        b.Property<bool>("IsPublic")
                            .HasColumnType("bit")
                            .HasColumnName("IsPublic");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit")
                            .HasColumnName("IsStatic");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("AbpRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RoleId");
    
                        b.ToTable("AbpRoleClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Action")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Identity")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Action");
    
                        b.HasIndex("TenantId", "ApplicationName");
    
                        b.HasIndex("TenantId", "Identity");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSecurityLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Device")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("DeviceInfo")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("IpAddresses")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<DateTime?>("LastAccessed")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("SessionId")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime>("SignedIn")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Device");
    
                        b.HasIndex("SessionId");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSessions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("AccessFailedCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("int")
                            .HasDefaultValue(0)
                            .HasColumnName("AccessFailedCount");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsExternal")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsExternal");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<bool>("LockoutEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("LockoutEnabled");
    
                        b.Property<DateTimeOffset?>("LockoutEnd")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedEmail")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedEmail");
    
                        b.Property<string>("NormalizedUserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedUserName");
    
                        b.Property<string>("PasswordHash")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("PasswordHash");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("SecurityStamp")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("SecurityStamp");
    
                        b.Property<bool>("ShouldChangePasswordOnNextLogin")
                            .HasColumnType("bit");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<bool>("TwoFactorEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("TwoFactorEnabled");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Email");
    
                        b.HasIndex("NormalizedEmail");
    
                        b.HasIndex("NormalizedUserName");
    
                        b.HasIndex("UserName");
    
                        b.ToTable("AbpUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("AbpUserClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("EndTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("StartTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpUserDelegations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderDisplayName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(196)
                            .HasColumnType("nvarchar(196)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "LoginProvider");
    
                        b.HasIndex("LoginProvider", "ProviderKey");
    
                        b.ToTable("AbpUserLogins", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "UserId");
    
                        b.HasIndex("UserId", "OrganizationUnitId");
    
                        b.ToTable("AbpUserOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "RoleId");
    
                        b.HasIndex("RoleId", "UserId");
    
                        b.ToTable("AbpUserRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Name")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("UserId", "LoginProvider", "Name");
    
                        b.ToTable("AbpUserTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Code")
                            .IsRequired()
                            .HasMaxLength(95)
                            .HasColumnType("nvarchar(95)")
                            .HasColumnName("Code");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Code");
    
                        b.HasIndex("ParentId");
    
                        b.ToTable("AbpOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "RoleId");
    
                        b.HasIndex("RoleId", "OrganizationUnitId");
    
                        b.ToTable("AbpOrganizationUnitRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationResourceRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("BaseResources")
                            .HasMaxLength(1280)
                            .HasColumnType("nvarchar(1280)")
                            .HasColumnName("BaseResources");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("DefaultCulture")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("DefaultCulture");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("Name");
    
                        b.Property<string>("SupportedCultures")
                            .HasMaxLength(640)
                            .HasColumnType("nvarchar(640)")
                            .HasColumnName("SupportedCultures");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationResources", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationTextRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ResourceName", "CultureName")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.Language", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(32)
                            .HasColumnType("nvarchar(32)")
                            .HasColumnName("DisplayName");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit")
                            .HasColumnName("IsEnabled");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("UiCultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("UiCultureName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("CultureName");
    
                        b.ToTable("AbpLanguages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.LanguageText", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("Name");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(65536)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ResourceName", "CultureName");
    
                        b.ToTable("AbpLanguageTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("ClientSecret")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ClientType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ConsentType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<string>("JsonWebKeySet")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("LogoUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Permissions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("PostLogoutRedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("RedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Requirements")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Settings")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ClientId");
    
                        b.ToTable("OpenIddictApplications", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Scopes")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictAuthorizations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Description")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Descriptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .HasMaxLength(200)
                            .HasColumnType("nvarchar(200)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Resources")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.ToTable("OpenIddictScopes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("AuthorizationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime?>("ExpirationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Payload")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("RedemptionDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ReferenceId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuthorizationId");
    
                        b.HasIndex("ReferenceId");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit");
    
                        b.Property<byte>("MultiTenancySide")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("StateCheckers")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[TenantId] IS NOT NULL");
    
                        b.ToTable("AbpPermissionGrants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissionGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpSettings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsEncrypted")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsInherited")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpSettingDefinitions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateContent", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Content")
                            .IsRequired()
                            .HasMaxLength(65535)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpTextTemplateContents", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("DefinitionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("FileContent")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("FileName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DefinitionId");
    
                        b.ToTable("AbpTextTemplateDefinitionContentRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultCultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<string>("DisplayName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsInlineLocalized")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsLayout")
                            .HasColumnType("bit");
    
                        b.Property<string>("Layout")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("LocalizationResourceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("RenderEngine")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpTextTemplateDefinitionRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Conversations.Conversation", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LastMessage")
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("LastMessage");
    
                        b.Property<DateTime>("LastMessageDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastMessageDate");
    
                        b.Property<byte>("LastMessageSide")
                            .HasColumnType("tinyint")
                            .HasColumnName("LastMessageSide");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<int>("UnreadMessageCount")
                            .HasColumnType("int")
                            .HasColumnName("UnreadMessageCount");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("ChatConversations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.Message", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAllRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsAllRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Text")
                            .IsRequired()
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Text");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("ChatMessageId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ChatMessageId");
    
                        b.Property<bool>("IsRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<byte>("Side")
                            .HasColumnType("tinyint")
                            .HasColumnName("Side");
    
                        b.Property<Guid?>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ChatMessageId");
    
                        b.HasIndex("UserId");
    
                        b.HasIndex("UserId", "TargetUserId");
    
                        b.ToTable("ChatUserMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Users.ChatUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ParentId");
    
                        b.HasIndex("TenantId", "ParentId", "Name");
    
                        b.ToTable("FmDirectoryDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DirectoryId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("MimeType")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<long>("Size")
                            .HasColumnType("bigint");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DirectoryId");
    
                        b.HasIndex("TenantId", "DirectoryId", "Name");
    
                        b.ToTable("FmFileDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Editions.Edition", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("PlanId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DisplayName");
    
                        b.ToTable("SaasEditions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime?>("ActivationEndDate")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("ActivationState")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<DateTime?>("EditionEndDateUtc")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("EditionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("NormalizedName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("SaasTenants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.Property<Guid>("TenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)")
                            .HasColumnName("Value");
    
                        b.HasKey("TenantId", "Name");
    
                        b.ToTable("SaasTenantConnectionStrings", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.OrderItems.OrderItem", b =>
                    {
                        b.HasOne("ExampleAbpApplicationLayer.Orders.Order", null)
                            .WithMany("OrderItems")
                            .HasForeignKey("OrderId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("ExampleAbpApplicationLayer.Products.Product", null)
                            .WithMany()
                            .HasForeignKey("ProductId")
                            .OnDelete(DeleteBehavior.NoAction)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("Actions")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("EntityChanges")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                            .WithMany("PropertyChanges")
                            .HasForeignKey("EntityChangeId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.HasOne("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", null)
                            .WithMany()
                            .HasForeignKey("ContainerId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.HasOne("Volo.Abp.Gdpr.GdprRequest", null)
                            .WithMany("Infos")
                            .HasForeignKey("RequestId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany("Claims")
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Claims")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Logins")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("OrganizationUnits")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Roles")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Tokens")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany("Roles")
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
    
                        b.HasOne("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", null)
                            .WithMany()
                            .HasForeignKey("AuthorizationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.HasOne("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", null)
                            .WithMany()
                            .HasForeignKey("DefinitionId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.HasOne("Volo.Chat.Messages.Message", null)
                            .WithMany()
                            .HasForeignKey("ChatMessageId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("DirectoryId");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.HasOne("Volo.Saas.Tenants.Tenant", null)
                            .WithMany("ConnectionStrings")
                            .HasForeignKey("TenantId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Orders.Order", b =>
                    {
                        b.Navigation("OrderItems");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Navigation("Actions");
    
                        b.Navigation("EntityChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Navigation("PropertyChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Navigation("Infos");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Navigation("Claims");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Navigation("Claims");
    
                        b.Navigation("Logins");
    
                        b.Navigation("OrganizationUnits");
    
                        b.Navigation("Roles");
    
                        b.Navigation("Tokens");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Navigation("Roles");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Navigation("ConnectionStrings");
                    });
    #pragma warning restore 612, 618
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823024639_Added_OrderItem.cs"><![CDATA[
    ﻿using System;
    using Microsoft.EntityFrameworkCore.Migrations;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        /// <inheritdoc />
        public partial class Added_OrderItem : Migration
        {
            /// <inheritdoc />
            protected override void Up(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.CreateTable(
                    name: "AppOrderItems",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        OrderId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Qty = table.Column<int>(type: "int", nullable: false),
                        Price = table.Column<float>(type: "real", nullable: false),
                        TotalPrice = table.Column<float>(type: "real", nullable: false),
                        ProductName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        ProductId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AppOrderItems", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AppOrderItems_AppOrders_OrderId",
                            column: x => x.OrderId,
                            principalTable: "AppOrders",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_AppOrderItems_AppProducts_ProductId",
                            column: x => x.ProductId,
                            principalTable: "AppProducts",
                            principalColumn: "Id");
                    });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AppOrderItems_OrderId",
                    table: "AppOrderItems",
                    column: "OrderId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AppOrderItems_ProductId",
                    table: "AppOrderItems",
                    column: "ProductId");
            }
    
            /// <inheritdoc />
            protected override void Down(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.DropTable(
                    name: "AppOrderItems");
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823023023_Added_Order.Designer.cs"><![CDATA[
    ﻿// <auto-generated />
    using System;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Migrations;
    using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
    using Volo.Abp.EntityFrameworkCore;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        [DbContext(typeof(ExampleAbpApplicationLayerDbContext))]
        [Migration("20250823023023_Added_Order")]
        partial class Added_Order
        {
            /// <inheritdoc />
            protected override void BuildTargetModel(ModelBuilder modelBuilder)
            {
    #pragma warning disable 612, 618
                modelBuilder
                    .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                    .HasAnnotation("ProductVersion", "9.0.5")
                    .HasAnnotation("Relational:MaxIdentifierLength", 128);
    
                SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Orders.Order", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTime>("OrderDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("OrderDate");
    
                        b.Property<int>("Status")
                            .HasColumnType("int")
                            .HasColumnName("Status");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<float>("TotalAmount")
                            .HasColumnType("real")
                            .HasColumnName("TotalAmount");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppOrders", (string)null);
                    });
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Products.Product", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Desc")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Desc");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Name");
    
                        b.Property<float>("Price")
                            .HasColumnType("real")
                            .HasColumnName("Price");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppProducts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)")
                            .HasColumnName("ApplicationName");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("BrowserInfo");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientId");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientIpAddress");
    
                        b.Property<string>("ClientName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ClientName");
    
                        b.Property<string>("Comments")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Comments");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("CorrelationId");
    
                        b.Property<string>("Exceptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("HttpMethod")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("HttpMethod");
    
                        b.Property<int?>("HttpStatusCode")
                            .HasColumnType("int")
                            .HasColumnName("HttpStatusCode");
    
                        b.Property<Guid?>("ImpersonatorTenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorTenantId");
    
                        b.Property<string>("ImpersonatorTenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ImpersonatorTenantName");
    
                        b.Property<Guid?>("ImpersonatorUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorUserId");
    
                        b.Property<string>("ImpersonatorUserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ImpersonatorUserName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("TenantName");
    
                        b.Property<string>("Url")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Url");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ExecutionTime");
    
                        b.HasIndex("TenantId", "UserId", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ExecutionTime");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("MethodName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("MethodName");
    
                        b.Property<string>("Parameters")
                            .HasMaxLength(2000)
                            .HasColumnType("nvarchar(2000)")
                            .HasColumnName("Parameters");
    
                        b.Property<string>("ServiceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ServiceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogActions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogExcelFile", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("FileName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("FileName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpAuditLogExcelFiles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<DateTime>("ChangeTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ChangeTime");
    
                        b.Property<byte>("ChangeType")
                            .HasColumnType("tinyint")
                            .HasColumnName("ChangeType");
    
                        b.Property<string>("EntityId")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityId");
    
                        b.Property<Guid?>("EntityTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("EntityTypeFullName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityTypeFullName");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");
    
                        b.ToTable("AbpEntityChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("EntityChangeId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("NewValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("NewValue");
    
                        b.Property<string>("OriginalValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("OriginalValue");
    
                        b.Property<string>("PropertyName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("PropertyName");
    
                        b.Property<string>("PropertyTypeFullName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("PropertyTypeFullName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("EntityChangeId");
    
                        b.ToTable("AbpEntityPropertyChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAbandoned")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false);
    
                        b.Property<string>("JobArgs")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("JobName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime?>("LastTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime>("NextTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("Priority")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("tinyint")
                            .HasDefaultValue((byte)15);
    
                        b.Property<short>("TryCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("smallint")
                            .HasDefaultValue((short)0);
    
                        b.HasKey("Id");
    
                        b.HasIndex("IsAbandoned", "NextTryTime");
    
                        b.ToTable("AbpBackgroundJobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<Guid>("ContainerId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<byte[]>("Content")
                            .HasMaxLength(2147483647)
                            .HasColumnType("varbinary(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ContainerId");
    
                        b.HasIndex("TenantId", "ContainerId", "Name");
    
                        b.ToTable("AbpBlobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name");
    
                        b.ToTable("AbpBlobContainers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("AllowedProviders")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsAvailableToHost")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ValueType")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatures", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatureGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpFeatureValues", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Data")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Data");
    
                        b.Property<string>("Provider")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Provider");
    
                        b.Property<Guid>("RequestId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RequestId");
    
                        b.ToTable("GdprInfo", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime>("ReadyTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadyTime");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("GdprRequests", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Regex")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("RegexDescription")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("Required")
                            .HasColumnType("bit");
    
                        b.Property<int>("ValueType")
                            .HasColumnType("int");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpClaimTypes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("SourceTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TargetTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                            .IsUnique()
                            .HasFilter("[SourceTenantId] IS NOT NULL AND [TargetTenantId] IS NOT NULL");
    
                        b.ToTable("AbpLinkUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDefault")
                            .HasColumnType("bit")
                            .HasColumnName("IsDefault");
    
                        b.Property<bool>("IsPublic")
                            .HasColumnType("bit")
                            .HasColumnName("IsPublic");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit")
                            .HasColumnName("IsStatic");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("AbpRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RoleId");
    
                        b.ToTable("AbpRoleClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Action")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Identity")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Action");
    
                        b.HasIndex("TenantId", "ApplicationName");
    
                        b.HasIndex("TenantId", "Identity");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSecurityLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Device")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("DeviceInfo")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("IpAddresses")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<DateTime?>("LastAccessed")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("SessionId")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime>("SignedIn")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Device");
    
                        b.HasIndex("SessionId");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSessions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("AccessFailedCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("int")
                            .HasDefaultValue(0)
                            .HasColumnName("AccessFailedCount");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsExternal")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsExternal");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<bool>("LockoutEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("LockoutEnabled");
    
                        b.Property<DateTimeOffset?>("LockoutEnd")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedEmail")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedEmail");
    
                        b.Property<string>("NormalizedUserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedUserName");
    
                        b.Property<string>("PasswordHash")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("PasswordHash");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("SecurityStamp")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("SecurityStamp");
    
                        b.Property<bool>("ShouldChangePasswordOnNextLogin")
                            .HasColumnType("bit");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<bool>("TwoFactorEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("TwoFactorEnabled");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Email");
    
                        b.HasIndex("NormalizedEmail");
    
                        b.HasIndex("NormalizedUserName");
    
                        b.HasIndex("UserName");
    
                        b.ToTable("AbpUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("AbpUserClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("EndTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("StartTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpUserDelegations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderDisplayName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(196)
                            .HasColumnType("nvarchar(196)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "LoginProvider");
    
                        b.HasIndex("LoginProvider", "ProviderKey");
    
                        b.ToTable("AbpUserLogins", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "UserId");
    
                        b.HasIndex("UserId", "OrganizationUnitId");
    
                        b.ToTable("AbpUserOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "RoleId");
    
                        b.HasIndex("RoleId", "UserId");
    
                        b.ToTable("AbpUserRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Name")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("UserId", "LoginProvider", "Name");
    
                        b.ToTable("AbpUserTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Code")
                            .IsRequired()
                            .HasMaxLength(95)
                            .HasColumnType("nvarchar(95)")
                            .HasColumnName("Code");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Code");
    
                        b.HasIndex("ParentId");
    
                        b.ToTable("AbpOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "RoleId");
    
                        b.HasIndex("RoleId", "OrganizationUnitId");
    
                        b.ToTable("AbpOrganizationUnitRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationResourceRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("BaseResources")
                            .HasMaxLength(1280)
                            .HasColumnType("nvarchar(1280)")
                            .HasColumnName("BaseResources");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("DefaultCulture")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("DefaultCulture");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("Name");
    
                        b.Property<string>("SupportedCultures")
                            .HasMaxLength(640)
                            .HasColumnType("nvarchar(640)")
                            .HasColumnName("SupportedCultures");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationResources", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationTextRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ResourceName", "CultureName")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.Language", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(32)
                            .HasColumnType("nvarchar(32)")
                            .HasColumnName("DisplayName");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit")
                            .HasColumnName("IsEnabled");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("UiCultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("UiCultureName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("CultureName");
    
                        b.ToTable("AbpLanguages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.LanguageText", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("Name");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(65536)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ResourceName", "CultureName");
    
                        b.ToTable("AbpLanguageTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("ClientSecret")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ClientType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ConsentType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<string>("JsonWebKeySet")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("LogoUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Permissions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("PostLogoutRedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("RedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Requirements")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Settings")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ClientId");
    
                        b.ToTable("OpenIddictApplications", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Scopes")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictAuthorizations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Description")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Descriptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .HasMaxLength(200)
                            .HasColumnType("nvarchar(200)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Resources")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.ToTable("OpenIddictScopes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("AuthorizationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime?>("ExpirationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Payload")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("RedemptionDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ReferenceId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuthorizationId");
    
                        b.HasIndex("ReferenceId");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit");
    
                        b.Property<byte>("MultiTenancySide")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("StateCheckers")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[TenantId] IS NOT NULL");
    
                        b.ToTable("AbpPermissionGrants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissionGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpSettings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsEncrypted")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsInherited")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpSettingDefinitions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateContent", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Content")
                            .IsRequired()
                            .HasMaxLength(65535)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpTextTemplateContents", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("DefinitionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("FileContent")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("FileName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DefinitionId");
    
                        b.ToTable("AbpTextTemplateDefinitionContentRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultCultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<string>("DisplayName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsInlineLocalized")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsLayout")
                            .HasColumnType("bit");
    
                        b.Property<string>("Layout")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("LocalizationResourceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("RenderEngine")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpTextTemplateDefinitionRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Conversations.Conversation", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LastMessage")
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("LastMessage");
    
                        b.Property<DateTime>("LastMessageDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastMessageDate");
    
                        b.Property<byte>("LastMessageSide")
                            .HasColumnType("tinyint")
                            .HasColumnName("LastMessageSide");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<int>("UnreadMessageCount")
                            .HasColumnType("int")
                            .HasColumnName("UnreadMessageCount");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("ChatConversations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.Message", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAllRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsAllRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Text")
                            .IsRequired()
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Text");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("ChatMessageId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ChatMessageId");
    
                        b.Property<bool>("IsRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<byte>("Side")
                            .HasColumnType("tinyint")
                            .HasColumnName("Side");
    
                        b.Property<Guid?>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ChatMessageId");
    
                        b.HasIndex("UserId");
    
                        b.HasIndex("UserId", "TargetUserId");
    
                        b.ToTable("ChatUserMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Users.ChatUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ParentId");
    
                        b.HasIndex("TenantId", "ParentId", "Name");
    
                        b.ToTable("FmDirectoryDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DirectoryId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("MimeType")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<long>("Size")
                            .HasColumnType("bigint");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DirectoryId");
    
                        b.HasIndex("TenantId", "DirectoryId", "Name");
    
                        b.ToTable("FmFileDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Editions.Edition", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("PlanId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DisplayName");
    
                        b.ToTable("SaasEditions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime?>("ActivationEndDate")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("ActivationState")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<DateTime?>("EditionEndDateUtc")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("EditionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("NormalizedName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("SaasTenants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.Property<Guid>("TenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)")
                            .HasColumnName("Value");
    
                        b.HasKey("TenantId", "Name");
    
                        b.ToTable("SaasTenantConnectionStrings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("Actions")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("EntityChanges")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                            .WithMany("PropertyChanges")
                            .HasForeignKey("EntityChangeId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.HasOne("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", null)
                            .WithMany()
                            .HasForeignKey("ContainerId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.HasOne("Volo.Abp.Gdpr.GdprRequest", null)
                            .WithMany("Infos")
                            .HasForeignKey("RequestId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany("Claims")
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Claims")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Logins")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("OrganizationUnits")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Roles")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Tokens")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany("Roles")
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
    
                        b.HasOne("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", null)
                            .WithMany()
                            .HasForeignKey("AuthorizationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.HasOne("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", null)
                            .WithMany()
                            .HasForeignKey("DefinitionId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.HasOne("Volo.Chat.Messages.Message", null)
                            .WithMany()
                            .HasForeignKey("ChatMessageId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("DirectoryId");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.HasOne("Volo.Saas.Tenants.Tenant", null)
                            .WithMany("ConnectionStrings")
                            .HasForeignKey("TenantId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Navigation("Actions");
    
                        b.Navigation("EntityChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Navigation("PropertyChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Navigation("Infos");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Navigation("Claims");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Navigation("Claims");
    
                        b.Navigation("Logins");
    
                        b.Navigation("OrganizationUnits");
    
                        b.Navigation("Roles");
    
                        b.Navigation("Tokens");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Navigation("Roles");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Navigation("ConnectionStrings");
                    });
    #pragma warning restore 612, 618
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823023023_Added_Order.cs"><![CDATA[
    ﻿using System;
    using Microsoft.EntityFrameworkCore.Migrations;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        /// <inheritdoc />
        public partial class Added_Order : Migration
        {
            /// <inheritdoc />
            protected override void Up(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.CreateTable(
                    name: "AppOrders",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        OrderDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                        TotalAmount = table.Column<float>(type: "real", nullable: false),
                        Status = table.Column<int>(type: "int", nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AppOrders", x => x.Id);
                    });
            }
    
            /// <inheritdoc />
            protected override void Down(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.DropTable(
                    name: "AppOrders");
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823022433_Added_Product.Designer.cs"><![CDATA[
    ﻿// <auto-generated />
    using System;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Migrations;
    using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
    using Volo.Abp.EntityFrameworkCore;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        [DbContext(typeof(ExampleAbpApplicationLayerDbContext))]
        [Migration("20250823022433_Added_Product")]
        partial class Added_Product
        {
            /// <inheritdoc />
            protected override void BuildTargetModel(ModelBuilder modelBuilder)
            {
    #pragma warning disable 612, 618
                modelBuilder
                    .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                    .HasAnnotation("ProductVersion", "9.0.5")
                    .HasAnnotation("Relational:MaxIdentifierLength", 128);
    
                SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
    
                modelBuilder.Entity("ExampleAbpApplicationLayer.Products.Product", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Desc")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Desc");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Name");
    
                        b.Property<float>("Price")
                            .HasColumnType("real")
                            .HasColumnName("Price");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AppProducts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)")
                            .HasColumnName("ApplicationName");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("BrowserInfo");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientId");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientIpAddress");
    
                        b.Property<string>("ClientName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ClientName");
    
                        b.Property<string>("Comments")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Comments");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("CorrelationId");
    
                        b.Property<string>("Exceptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("HttpMethod")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("HttpMethod");
    
                        b.Property<int?>("HttpStatusCode")
                            .HasColumnType("int")
                            .HasColumnName("HttpStatusCode");
    
                        b.Property<Guid?>("ImpersonatorTenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorTenantId");
    
                        b.Property<string>("ImpersonatorTenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ImpersonatorTenantName");
    
                        b.Property<Guid?>("ImpersonatorUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorUserId");
    
                        b.Property<string>("ImpersonatorUserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ImpersonatorUserName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("TenantName");
    
                        b.Property<string>("Url")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Url");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ExecutionTime");
    
                        b.HasIndex("TenantId", "UserId", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ExecutionTime");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("MethodName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("MethodName");
    
                        b.Property<string>("Parameters")
                            .HasMaxLength(2000)
                            .HasColumnType("nvarchar(2000)")
                            .HasColumnName("Parameters");
    
                        b.Property<string>("ServiceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ServiceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogActions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogExcelFile", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("FileName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("FileName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpAuditLogExcelFiles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<DateTime>("ChangeTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ChangeTime");
    
                        b.Property<byte>("ChangeType")
                            .HasColumnType("tinyint")
                            .HasColumnName("ChangeType");
    
                        b.Property<string>("EntityId")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityId");
    
                        b.Property<Guid?>("EntityTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("EntityTypeFullName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityTypeFullName");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");
    
                        b.ToTable("AbpEntityChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("EntityChangeId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("NewValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("NewValue");
    
                        b.Property<string>("OriginalValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("OriginalValue");
    
                        b.Property<string>("PropertyName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("PropertyName");
    
                        b.Property<string>("PropertyTypeFullName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("PropertyTypeFullName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("EntityChangeId");
    
                        b.ToTable("AbpEntityPropertyChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAbandoned")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false);
    
                        b.Property<string>("JobArgs")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("JobName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime?>("LastTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime>("NextTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("Priority")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("tinyint")
                            .HasDefaultValue((byte)15);
    
                        b.Property<short>("TryCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("smallint")
                            .HasDefaultValue((short)0);
    
                        b.HasKey("Id");
    
                        b.HasIndex("IsAbandoned", "NextTryTime");
    
                        b.ToTable("AbpBackgroundJobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<Guid>("ContainerId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<byte[]>("Content")
                            .HasMaxLength(2147483647)
                            .HasColumnType("varbinary(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ContainerId");
    
                        b.HasIndex("TenantId", "ContainerId", "Name");
    
                        b.ToTable("AbpBlobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name");
    
                        b.ToTable("AbpBlobContainers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("AllowedProviders")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsAvailableToHost")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ValueType")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatures", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatureGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpFeatureValues", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Data")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Data");
    
                        b.Property<string>("Provider")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Provider");
    
                        b.Property<Guid>("RequestId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RequestId");
    
                        b.ToTable("GdprInfo", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime>("ReadyTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadyTime");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("GdprRequests", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Regex")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("RegexDescription")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("Required")
                            .HasColumnType("bit");
    
                        b.Property<int>("ValueType")
                            .HasColumnType("int");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpClaimTypes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("SourceTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TargetTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                            .IsUnique()
                            .HasFilter("[SourceTenantId] IS NOT NULL AND [TargetTenantId] IS NOT NULL");
    
                        b.ToTable("AbpLinkUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDefault")
                            .HasColumnType("bit")
                            .HasColumnName("IsDefault");
    
                        b.Property<bool>("IsPublic")
                            .HasColumnType("bit")
                            .HasColumnName("IsPublic");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit")
                            .HasColumnName("IsStatic");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("AbpRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RoleId");
    
                        b.ToTable("AbpRoleClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Action")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Identity")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Action");
    
                        b.HasIndex("TenantId", "ApplicationName");
    
                        b.HasIndex("TenantId", "Identity");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSecurityLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Device")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("DeviceInfo")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("IpAddresses")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<DateTime?>("LastAccessed")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("SessionId")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime>("SignedIn")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Device");
    
                        b.HasIndex("SessionId");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSessions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("AccessFailedCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("int")
                            .HasDefaultValue(0)
                            .HasColumnName("AccessFailedCount");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsExternal")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsExternal");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<bool>("LockoutEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("LockoutEnabled");
    
                        b.Property<DateTimeOffset?>("LockoutEnd")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedEmail")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedEmail");
    
                        b.Property<string>("NormalizedUserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedUserName");
    
                        b.Property<string>("PasswordHash")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("PasswordHash");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("SecurityStamp")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("SecurityStamp");
    
                        b.Property<bool>("ShouldChangePasswordOnNextLogin")
                            .HasColumnType("bit");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<bool>("TwoFactorEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("TwoFactorEnabled");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Email");
    
                        b.HasIndex("NormalizedEmail");
    
                        b.HasIndex("NormalizedUserName");
    
                        b.HasIndex("UserName");
    
                        b.ToTable("AbpUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("AbpUserClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("EndTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("StartTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpUserDelegations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderDisplayName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(196)
                            .HasColumnType("nvarchar(196)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "LoginProvider");
    
                        b.HasIndex("LoginProvider", "ProviderKey");
    
                        b.ToTable("AbpUserLogins", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "UserId");
    
                        b.HasIndex("UserId", "OrganizationUnitId");
    
                        b.ToTable("AbpUserOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "RoleId");
    
                        b.HasIndex("RoleId", "UserId");
    
                        b.ToTable("AbpUserRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Name")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("UserId", "LoginProvider", "Name");
    
                        b.ToTable("AbpUserTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Code")
                            .IsRequired()
                            .HasMaxLength(95)
                            .HasColumnType("nvarchar(95)")
                            .HasColumnName("Code");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Code");
    
                        b.HasIndex("ParentId");
    
                        b.ToTable("AbpOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "RoleId");
    
                        b.HasIndex("RoleId", "OrganizationUnitId");
    
                        b.ToTable("AbpOrganizationUnitRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationResourceRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("BaseResources")
                            .HasMaxLength(1280)
                            .HasColumnType("nvarchar(1280)")
                            .HasColumnName("BaseResources");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("DefaultCulture")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("DefaultCulture");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("Name");
    
                        b.Property<string>("SupportedCultures")
                            .HasMaxLength(640)
                            .HasColumnType("nvarchar(640)")
                            .HasColumnName("SupportedCultures");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationResources", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationTextRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ResourceName", "CultureName")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.Language", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(32)
                            .HasColumnType("nvarchar(32)")
                            .HasColumnName("DisplayName");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit")
                            .HasColumnName("IsEnabled");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("UiCultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("UiCultureName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("CultureName");
    
                        b.ToTable("AbpLanguages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.LanguageText", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("Name");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(65536)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ResourceName", "CultureName");
    
                        b.ToTable("AbpLanguageTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("ClientSecret")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ClientType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ConsentType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<string>("JsonWebKeySet")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("LogoUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Permissions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("PostLogoutRedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("RedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Requirements")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Settings")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ClientId");
    
                        b.ToTable("OpenIddictApplications", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Scopes")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictAuthorizations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Description")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Descriptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .HasMaxLength(200)
                            .HasColumnType("nvarchar(200)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Resources")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.ToTable("OpenIddictScopes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("AuthorizationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime?>("ExpirationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Payload")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("RedemptionDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ReferenceId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuthorizationId");
    
                        b.HasIndex("ReferenceId");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit");
    
                        b.Property<byte>("MultiTenancySide")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("StateCheckers")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[TenantId] IS NOT NULL");
    
                        b.ToTable("AbpPermissionGrants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissionGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpSettings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsEncrypted")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsInherited")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpSettingDefinitions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateContent", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Content")
                            .IsRequired()
                            .HasMaxLength(65535)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpTextTemplateContents", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("DefinitionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("FileContent")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("FileName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DefinitionId");
    
                        b.ToTable("AbpTextTemplateDefinitionContentRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultCultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<string>("DisplayName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsInlineLocalized")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsLayout")
                            .HasColumnType("bit");
    
                        b.Property<string>("Layout")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("LocalizationResourceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("RenderEngine")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpTextTemplateDefinitionRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Conversations.Conversation", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LastMessage")
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("LastMessage");
    
                        b.Property<DateTime>("LastMessageDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastMessageDate");
    
                        b.Property<byte>("LastMessageSide")
                            .HasColumnType("tinyint")
                            .HasColumnName("LastMessageSide");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<int>("UnreadMessageCount")
                            .HasColumnType("int")
                            .HasColumnName("UnreadMessageCount");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("ChatConversations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.Message", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAllRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsAllRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Text")
                            .IsRequired()
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Text");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("ChatMessageId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ChatMessageId");
    
                        b.Property<bool>("IsRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<byte>("Side")
                            .HasColumnType("tinyint")
                            .HasColumnName("Side");
    
                        b.Property<Guid?>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ChatMessageId");
    
                        b.HasIndex("UserId");
    
                        b.HasIndex("UserId", "TargetUserId");
    
                        b.ToTable("ChatUserMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Users.ChatUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ParentId");
    
                        b.HasIndex("TenantId", "ParentId", "Name");
    
                        b.ToTable("FmDirectoryDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DirectoryId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("MimeType")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<long>("Size")
                            .HasColumnType("bigint");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DirectoryId");
    
                        b.HasIndex("TenantId", "DirectoryId", "Name");
    
                        b.ToTable("FmFileDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Editions.Edition", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("PlanId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DisplayName");
    
                        b.ToTable("SaasEditions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime?>("ActivationEndDate")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("ActivationState")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<DateTime?>("EditionEndDateUtc")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("EditionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("NormalizedName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("SaasTenants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.Property<Guid>("TenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)")
                            .HasColumnName("Value");
    
                        b.HasKey("TenantId", "Name");
    
                        b.ToTable("SaasTenantConnectionStrings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("Actions")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("EntityChanges")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                            .WithMany("PropertyChanges")
                            .HasForeignKey("EntityChangeId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.HasOne("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", null)
                            .WithMany()
                            .HasForeignKey("ContainerId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.HasOne("Volo.Abp.Gdpr.GdprRequest", null)
                            .WithMany("Infos")
                            .HasForeignKey("RequestId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany("Claims")
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Claims")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Logins")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("OrganizationUnits")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Roles")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Tokens")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany("Roles")
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
    
                        b.HasOne("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", null)
                            .WithMany()
                            .HasForeignKey("AuthorizationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.HasOne("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", null)
                            .WithMany()
                            .HasForeignKey("DefinitionId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.HasOne("Volo.Chat.Messages.Message", null)
                            .WithMany()
                            .HasForeignKey("ChatMessageId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("DirectoryId");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.HasOne("Volo.Saas.Tenants.Tenant", null)
                            .WithMany("ConnectionStrings")
                            .HasForeignKey("TenantId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Navigation("Actions");
    
                        b.Navigation("EntityChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Navigation("PropertyChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Navigation("Infos");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Navigation("Claims");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Navigation("Claims");
    
                        b.Navigation("Logins");
    
                        b.Navigation("OrganizationUnits");
    
                        b.Navigation("Roles");
    
                        b.Navigation("Tokens");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Navigation("Roles");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Navigation("ConnectionStrings");
                    });
    #pragma warning restore 612, 618
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823022433_Added_Product.cs"><![CDATA[
    ﻿using System;
    using Microsoft.EntityFrameworkCore.Migrations;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        /// <inheritdoc />
        public partial class Added_Product : Migration
        {
            /// <inheritdoc />
            protected override void Up(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.CreateTable(
                    name: "AppProducts",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        Desc = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Price = table.Column<float>(type: "real", nullable: false),
                        IsActive = table.Column<bool>(type: "bit", nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AppProducts", x => x.Id);
                    });
            }
    
            /// <inheritdoc />
            protected override void Down(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.DropTable(
                    name: "AppProducts");
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823021323_Initial.Designer.cs"><![CDATA[
    ﻿// <auto-generated />
    using System;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Migrations;
    using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
    using Volo.Abp.EntityFrameworkCore;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        [DbContext(typeof(ExampleAbpApplicationLayerDbContext))]
        [Migration("20250823021323_Initial")]
        partial class Initial
        {
            /// <inheritdoc />
            protected override void BuildTargetModel(ModelBuilder modelBuilder)
            {
    #pragma warning disable 612, 618
                modelBuilder
                    .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                    .HasAnnotation("ProductVersion", "9.0.5")
                    .HasAnnotation("Relational:MaxIdentifierLength", 128);
    
                SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)")
                            .HasColumnName("ApplicationName");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("BrowserInfo");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientId");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ClientIpAddress");
    
                        b.Property<string>("ClientName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ClientName");
    
                        b.Property<string>("Comments")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Comments");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("CorrelationId");
    
                        b.Property<string>("Exceptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("HttpMethod")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("HttpMethod");
    
                        b.Property<int?>("HttpStatusCode")
                            .HasColumnType("int")
                            .HasColumnName("HttpStatusCode");
    
                        b.Property<Guid?>("ImpersonatorTenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorTenantId");
    
                        b.Property<string>("ImpersonatorTenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("ImpersonatorTenantName");
    
                        b.Property<Guid?>("ImpersonatorUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ImpersonatorUserId");
    
                        b.Property<string>("ImpersonatorUserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ImpersonatorUserName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("TenantName");
    
                        b.Property<string>("Url")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Url");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ExecutionTime");
    
                        b.HasIndex("TenantId", "UserId", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<int>("ExecutionDuration")
                            .HasColumnType("int")
                            .HasColumnName("ExecutionDuration");
    
                        b.Property<DateTime>("ExecutionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ExecutionTime");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("MethodName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("MethodName");
    
                        b.Property<string>("Parameters")
                            .HasMaxLength(2000)
                            .HasColumnType("nvarchar(2000)")
                            .HasColumnName("Parameters");
    
                        b.Property<string>("ServiceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("ServiceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");
    
                        b.ToTable("AbpAuditLogActions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogExcelFile", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("FileName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("FileName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpAuditLogExcelFiles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("AuditLogId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("AuditLogId");
    
                        b.Property<DateTime>("ChangeTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ChangeTime");
    
                        b.Property<byte>("ChangeType")
                            .HasColumnType("tinyint")
                            .HasColumnName("ChangeType");
    
                        b.Property<string>("EntityId")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityId");
    
                        b.Property<Guid?>("EntityTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("EntityTypeFullName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("EntityTypeFullName");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuditLogId");
    
                        b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");
    
                        b.ToTable("AbpEntityChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("EntityChangeId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("NewValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("NewValue");
    
                        b.Property<string>("OriginalValue")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("OriginalValue");
    
                        b.Property<string>("PropertyName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("PropertyName");
    
                        b.Property<string>("PropertyTypeFullName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("PropertyTypeFullName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("EntityChangeId");
    
                        b.ToTable("AbpEntityPropertyChanges", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAbandoned")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false);
    
                        b.Property<string>("JobArgs")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("JobName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime?>("LastTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime>("NextTryTime")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("Priority")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("tinyint")
                            .HasDefaultValue((byte)15);
    
                        b.Property<short>("TryCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("smallint")
                            .HasDefaultValue((short)0);
    
                        b.HasKey("Id");
    
                        b.HasIndex("IsAbandoned", "NextTryTime");
    
                        b.ToTable("AbpBackgroundJobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<Guid>("ContainerId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<byte[]>("Content")
                            .HasMaxLength(2147483647)
                            .HasColumnType("varbinary(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ContainerId");
    
                        b.HasIndex("TenantId", "ContainerId", "Name");
    
                        b.ToTable("AbpBlobs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name");
    
                        b.ToTable("AbpBlobContainers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("AllowedProviders")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsAvailableToHost")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ValueType")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatures", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpFeatureGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpFeatureValues", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Data")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Data");
    
                        b.Property<string>("Provider")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Provider");
    
                        b.Property<Guid>("RequestId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RequestId");
    
                        b.ToTable("GdprInfo", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime>("ReadyTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadyTime");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("GdprRequests", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("Description")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Regex")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("RegexDescription")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("Required")
                            .HasColumnType("bit");
    
                        b.Property<int>("ValueType")
                            .HasColumnType("int");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpClaimTypes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("SourceTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TargetTenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                            .IsUnique()
                            .HasFilter("[SourceTenantId] IS NOT NULL AND [TargetTenantId] IS NOT NULL");
    
                        b.ToTable("AbpLinkUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDefault")
                            .HasColumnType("bit")
                            .HasColumnName("IsDefault");
    
                        b.Property<bool>("IsPublic")
                            .HasColumnType("bit")
                            .HasColumnName("IsPublic");
    
                        b.Property<bool>("IsStatic")
                            .HasColumnType("bit")
                            .HasColumnName("IsStatic");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("AbpRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("RoleId");
    
                        b.ToTable("AbpRoleClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Action")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("ApplicationName")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<string>("BrowserInfo")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ClientIpAddress")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("CorrelationId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Identity")
                            .HasMaxLength(96)
                            .HasColumnType("nvarchar(96)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("TenantName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("UserName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Action");
    
                        b.HasIndex("TenantId", "ApplicationName");
    
                        b.HasIndex("TenantId", "Identity");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSecurityLogs", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Device")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("DeviceInfo")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("IpAddresses")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<DateTime?>("LastAccessed")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("SessionId")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<DateTime>("SignedIn")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Device");
    
                        b.HasIndex("SessionId");
    
                        b.HasIndex("TenantId", "UserId");
    
                        b.ToTable("AbpSessions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("AccessFailedCount")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("int")
                            .HasDefaultValue(0)
                            .HasColumnName("AccessFailedCount");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsExternal")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsExternal");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<bool>("LockoutEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("LockoutEnabled");
    
                        b.Property<DateTimeOffset?>("LockoutEnd")
                            .HasColumnType("datetimeoffset");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedEmail")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedEmail");
    
                        b.Property<string>("NormalizedUserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("NormalizedUserName");
    
                        b.Property<string>("PasswordHash")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("PasswordHash");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("SecurityStamp")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("SecurityStamp");
    
                        b.Property<bool>("ShouldChangePasswordOnNextLogin")
                            .HasColumnType("bit");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<bool>("TwoFactorEnabled")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("TwoFactorEnabled");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Email");
    
                        b.HasIndex("NormalizedEmail");
    
                        b.HasIndex("NormalizedUserName");
    
                        b.HasIndex("UserName");
    
                        b.ToTable("AbpUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ClaimType")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ClaimValue")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("AbpUserClaims", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("EndTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("SourceUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("StartTime")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpUserDelegations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderDisplayName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(196)
                            .HasColumnType("nvarchar(196)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "LoginProvider");
    
                        b.HasIndex("LoginProvider", "ProviderKey");
    
                        b.ToTable("AbpUserLogins", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "UserId");
    
                        b.HasIndex("UserId", "OrganizationUnitId");
    
                        b.ToTable("AbpUserOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("UserId", "RoleId");
    
                        b.HasIndex("RoleId", "UserId");
    
                        b.ToTable("AbpUserRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LoginProvider")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Name")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("UserId", "LoginProvider", "Name");
    
                        b.ToTable("AbpUserTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Code")
                            .IsRequired()
                            .HasMaxLength(95)
                            .HasColumnType("nvarchar(95)")
                            .HasColumnName("Code");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Code");
    
                        b.HasIndex("ParentId");
    
                        b.ToTable("AbpOrganizationUnits", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.Property<Guid>("OrganizationUnitId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("RoleId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("OrganizationUnitId", "RoleId");
    
                        b.HasIndex("RoleId", "OrganizationUnitId");
    
                        b.ToTable("AbpOrganizationUnitRoles", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationResourceRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("BaseResources")
                            .HasMaxLength(1280)
                            .HasColumnType("nvarchar(1280)")
                            .HasColumnName("BaseResources");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("DefaultCulture")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("DefaultCulture");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("Name");
    
                        b.Property<string>("SupportedCultures")
                            .HasMaxLength(640)
                            .HasColumnType("nvarchar(640)")
                            .HasColumnName("SupportedCultures");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationResources", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.External.LocalizationTextRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1048576)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ResourceName", "CultureName")
                            .IsUnique();
    
                        b.ToTable("AbpLocalizationTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.Language", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(32)
                            .HasColumnType("nvarchar(32)")
                            .HasColumnName("DisplayName");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit")
                            .HasColumnName("IsEnabled");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("UiCultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("UiCultureName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("CultureName");
    
                        b.ToTable("AbpLanguages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.LanguageManagement.LanguageText", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .IsRequired()
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)")
                            .HasColumnName("CultureName");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)")
                            .HasColumnName("Name");
    
                        b.Property<string>("ResourceName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("ResourceName");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(65536)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Value");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "ResourceName", "CultureName");
    
                        b.ToTable("AbpLanguageTexts", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ApplicationType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("ClientSecret")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ClientType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("ClientUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("ConsentType")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<string>("JsonWebKeySet")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("LogoUri")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Permissions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("PostLogoutRedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("RedirectUris")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Requirements")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Settings")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ClientId");
    
                        b.ToTable("OpenIddictApplications", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Scopes")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictAuthorizations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("Description")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Descriptions")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayName")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("DisplayNames")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .HasMaxLength(200)
                            .HasColumnType("nvarchar(200)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Resources")
                            .HasColumnType("nvarchar(max)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.ToTable("OpenIddictScopes", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("ApplicationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("AuthorizationId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime?>("CreationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<DateTime?>("ExpirationDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Payload")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("Properties")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime?>("RedemptionDate")
                            .HasColumnType("datetime2");
    
                        b.Property<string>("ReferenceId")
                            .HasMaxLength(100)
                            .HasColumnType("nvarchar(100)");
    
                        b.Property<string>("Status")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.Property<string>("Subject")
                            .HasMaxLength(400)
                            .HasColumnType("nvarchar(400)");
    
                        b.Property<string>("Type")
                            .HasMaxLength(50)
                            .HasColumnType("nvarchar(50)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("AuthorizationId");
    
                        b.HasIndex("ReferenceId");
    
                        b.HasIndex("ApplicationId", "Status", "Subject", "Type");
    
                        b.ToTable("OpenIddictTokens", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("GroupName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<bool>("IsEnabled")
                            .HasColumnType("bit");
    
                        b.Property<byte>("MultiTenancySide")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ParentName")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("StateCheckers")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("GroupName");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[TenantId] IS NOT NULL");
    
                        b.ToTable("AbpPermissionGrants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpPermissionGroups", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("ProviderKey")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("ProviderName")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name", "ProviderName", "ProviderKey")
                            .IsUnique()
                            .HasFilter("[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                        b.ToTable("AbpSettings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultValue")
                            .HasMaxLength(2048)
                            .HasColumnType("nvarchar(2048)");
    
                        b.Property<string>("Description")
                            .HasMaxLength(512)
                            .HasColumnType("nvarchar(512)");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsEncrypted")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsInherited")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsVisibleToClients")
                            .HasColumnType("bit");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Providers")
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpSettingDefinitions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateContent", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Content")
                            .IsRequired()
                            .HasMaxLength(65535)
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("CultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.ToTable("AbpTextTemplateContents", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("DefinitionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("FileContent")
                            .HasColumnType("nvarchar(max)");
    
                        b.Property<string>("FileName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DefinitionId");
    
                        b.ToTable("AbpTextTemplateDefinitionContentRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("DefaultCultureName")
                            .HasMaxLength(10)
                            .HasColumnType("nvarchar(10)");
    
                        b.Property<string>("DisplayName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("ExtraProperties")
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsInlineLocalized")
                            .HasColumnType("bit");
    
                        b.Property<bool>("IsLayout")
                            .HasColumnType("bit");
    
                        b.Property<string>("Layout")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("LocalizationResourceName")
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("RenderEngine")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name")
                            .IsUnique();
    
                        b.ToTable("AbpTextTemplateDefinitionRecords", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Conversations.Conversation", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("LastMessage")
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("LastMessage");
    
                        b.Property<DateTime>("LastMessageDate")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastMessageDate");
    
                        b.Property<byte>("LastMessageSide")
                            .HasColumnType("tinyint")
                            .HasColumnName("LastMessageSide");
    
                        b.Property<Guid>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<int>("UnreadMessageCount")
                            .HasColumnType("int")
                            .HasColumnName("UnreadMessageCount");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("UserId");
    
                        b.ToTable("ChatConversations", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.Message", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsAllRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsAllRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("Text")
                            .IsRequired()
                            .HasMaxLength(4096)
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("Text");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid>("ChatMessageId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("ChatMessageId");
    
                        b.Property<bool>("IsRead")
                            .HasColumnType("bit")
                            .HasColumnName("IsRead");
    
                        b.Property<DateTime?>("ReadTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("ReadTime");
    
                        b.Property<byte>("Side")
                            .HasColumnType("tinyint")
                            .HasColumnName("Side");
    
                        b.Property<Guid?>("TargetUserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TargetUserId");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<Guid>("UserId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("UserId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ChatMessageId");
    
                        b.HasIndex("UserId");
    
                        b.HasIndex("UserId", "TargetUserId");
    
                        b.ToTable("ChatUserMessages", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Chat.Users.ChatUser", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<string>("Email")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("Email");
    
                        b.Property<bool>("EmailConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("EmailConfirmed");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsActive")
                            .HasColumnType("bit")
                            .HasColumnName("IsActive");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("PhoneNumber")
                            .HasMaxLength(16)
                            .HasColumnType("nvarchar(16)")
                            .HasColumnName("PhoneNumber");
    
                        b.Property<bool>("PhoneNumberConfirmed")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("PhoneNumberConfirmed");
    
                        b.Property<string>("Surname")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Surname");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.Property<string>("UserName")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("nvarchar(256)")
                            .HasColumnName("UserName");
    
                        b.HasKey("Id");
    
                        b.ToTable("ChatUsers", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<Guid?>("ParentId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("ParentId");
    
                        b.HasIndex("TenantId", "ParentId", "Name");
    
                        b.ToTable("FmDirectoryDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.Property<Guid>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DirectoryId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("MimeType")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(255)
                            .HasColumnType("nvarchar(255)");
    
                        b.Property<long>("Size")
                            .HasColumnType("bigint");
    
                        b.Property<Guid?>("TenantId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("TenantId");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DirectoryId");
    
                        b.HasIndex("TenantId", "DirectoryId", "Name");
    
                        b.ToTable("FmFileDescriptors", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Editions.Edition", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<string>("DisplayName")
                            .IsRequired()
                            .HasMaxLength(128)
                            .HasColumnType("nvarchar(128)")
                            .HasColumnName("DisplayName");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<Guid?>("PlanId")
                            .HasColumnType("uniqueidentifier");
    
                        b.HasKey("Id");
    
                        b.HasIndex("DisplayName");
    
                        b.ToTable("SaasEditions", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Property<Guid>("Id")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<DateTime?>("ActivationEndDate")
                            .HasColumnType("datetime2");
    
                        b.Property<byte>("ActivationState")
                            .HasColumnType("tinyint");
    
                        b.Property<string>("ConcurrencyStamp")
                            .IsConcurrencyToken()
                            .IsRequired()
                            .HasMaxLength(40)
                            .HasColumnType("nvarchar(40)")
                            .HasColumnName("ConcurrencyStamp");
    
                        b.Property<DateTime>("CreationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("CreationTime");
    
                        b.Property<Guid?>("CreatorId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("CreatorId");
    
                        b.Property<Guid?>("DeleterId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("DeleterId");
    
                        b.Property<DateTime?>("DeletionTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("DeletionTime");
    
                        b.Property<DateTime?>("EditionEndDateUtc")
                            .HasColumnType("datetime2");
    
                        b.Property<Guid?>("EditionId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<int>("EntityVersion")
                            .HasColumnType("int");
    
                        b.Property<string>("ExtraProperties")
                            .IsRequired()
                            .HasColumnType("nvarchar(max)")
                            .HasColumnName("ExtraProperties");
    
                        b.Property<bool>("IsDeleted")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bit")
                            .HasDefaultValue(false)
                            .HasColumnName("IsDeleted");
    
                        b.Property<DateTime?>("LastModificationTime")
                            .HasColumnType("datetime2")
                            .HasColumnName("LastModificationTime");
    
                        b.Property<Guid?>("LastModifierId")
                            .HasColumnType("uniqueidentifier")
                            .HasColumnName("LastModifierId");
    
                        b.Property<string>("Name")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("NormalizedName")
                            .IsRequired()
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("NormalizedName");
    
                        b.HasKey("Id");
    
                        b.HasIndex("Name");
    
                        b.HasIndex("NormalizedName");
    
                        b.ToTable("SaasTenants", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.Property<Guid>("TenantId")
                            .HasColumnType("uniqueidentifier");
    
                        b.Property<string>("Name")
                            .HasMaxLength(64)
                            .HasColumnType("nvarchar(64)")
                            .HasColumnName("Name");
    
                        b.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(1024)
                            .HasColumnType("nvarchar(1024)")
                            .HasColumnName("Value");
    
                        b.HasKey("TenantId", "Name");
    
                        b.ToTable("SaasTenantConnectionStrings", (string)null);
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("Actions")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                            .WithMany("EntityChanges")
                            .HasForeignKey("AuditLogId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                    {
                        b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                            .WithMany("PropertyChanges")
                            .HasForeignKey("EntityChangeId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                    {
                        b.HasOne("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", null)
                            .WithMany()
                            .HasForeignKey("ContainerId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprInfo", b =>
                    {
                        b.HasOne("Volo.Abp.Gdpr.GdprRequest", null)
                            .WithMany("Infos")
                            .HasForeignKey("RequestId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany("Claims")
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Claims")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Logins")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("OrganizationUnits")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Roles")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                            .WithMany("Tokens")
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                    {
                        b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                            .WithMany("Roles")
                            .HasForeignKey("OrganizationUnitId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
    
                        b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                            .WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                    {
                        b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                            .WithMany()
                            .HasForeignKey("ApplicationId");
    
                        b.HasOne("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", null)
                            .WithMany()
                            .HasForeignKey("AuthorizationId");
                    });
    
                modelBuilder.Entity("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionContentRecord", b =>
                    {
                        b.HasOne("Volo.Abp.TextTemplateManagement.TextTemplates.TextTemplateDefinitionRecord", null)
                            .WithMany()
                            .HasForeignKey("DefinitionId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Chat.Messages.UserMessage", b =>
                    {
                        b.HasOne("Volo.Chat.Messages.Message", null)
                            .WithMany()
                            .HasForeignKey("ChatMessageId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Directories.DirectoryDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("ParentId");
                    });
    
                modelBuilder.Entity("Volo.FileManagement.Files.FileDescriptor", b =>
                    {
                        b.HasOne("Volo.FileManagement.Directories.DirectoryDescriptor", null)
                            .WithMany()
                            .HasForeignKey("DirectoryId");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.TenantConnectionString", b =>
                    {
                        b.HasOne("Volo.Saas.Tenants.Tenant", null)
                            .WithMany("ConnectionStrings")
                            .HasForeignKey("TenantId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                    {
                        b.Navigation("Actions");
    
                        b.Navigation("EntityChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                    {
                        b.Navigation("PropertyChanges");
                    });
    
                modelBuilder.Entity("Volo.Abp.Gdpr.GdprRequest", b =>
                    {
                        b.Navigation("Infos");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                    {
                        b.Navigation("Claims");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                    {
                        b.Navigation("Claims");
    
                        b.Navigation("Logins");
    
                        b.Navigation("OrganizationUnits");
    
                        b.Navigation("Roles");
    
                        b.Navigation("Tokens");
                    });
    
                modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                    {
                        b.Navigation("Roles");
                    });
    
                modelBuilder.Entity("Volo.Saas.Tenants.Tenant", b =>
                    {
                        b.Navigation("ConnectionStrings");
                    });
    #pragma warning restore 612, 618
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Migrations\20250823021323_Initial.cs"><![CDATA[
    ﻿using System;
    using Microsoft.EntityFrameworkCore.Migrations;
    
    #nullable disable
    
    namespace ExampleAbpApplicationLayer.Migrations
    {
        /// <inheritdoc />
        public partial class Initial : Migration
        {
            /// <inheritdoc />
            protected override void Up(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.CreateTable(
                    name: "AbpAuditLogExcelFiles",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        FileName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpAuditLogExcelFiles", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpAuditLogs",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ApplicationName = table.Column<string>(type: "nvarchar(96)", maxLength: 96, nullable: true),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        TenantName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ImpersonatorUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ImpersonatorUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        ImpersonatorTenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ImpersonatorTenantName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ExecutionTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ExecutionDuration = table.Column<int>(type: "int", nullable: false),
                        ClientIpAddress = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ClientName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        ClientId = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        CorrelationId = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        BrowserInfo = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                        HttpMethod = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                        Url = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        Exceptions = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Comments = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        HttpStatusCode = table.Column<int>(type: "int", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpAuditLogs", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpBackgroundJobs",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ApplicationName = table.Column<string>(type: "nvarchar(96)", maxLength: 96, nullable: true),
                        JobName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        JobArgs = table.Column<string>(type: "nvarchar(max)", maxLength: 1048576, nullable: false),
                        TryCount = table.Column<short>(type: "smallint", nullable: false, defaultValue: (short)0),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        NextTryTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        LastTryTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        IsAbandoned = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        Priority = table.Column<byte>(type: "tinyint", nullable: false, defaultValue: (byte)15),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpBackgroundJobs", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpBlobContainers",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpBlobContainers", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpClaimTypes",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Required = table.Column<bool>(type: "bit", nullable: false),
                        IsStatic = table.Column<bool>(type: "bit", nullable: false),
                        Regex = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                        RegexDescription = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        Description = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        ValueType = table.Column<int>(type: "int", nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpClaimTypes", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpFeatureGroups",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpFeatureGroups", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpFeatures",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        GroupName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        ParentName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        DisplayName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Description = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        DefaultValue = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        IsVisibleToClients = table.Column<bool>(type: "bit", nullable: false),
                        IsAvailableToHost = table.Column<bool>(type: "bit", nullable: false),
                        AllowedProviders = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        ValueType = table.Column<string>(type: "nvarchar(2048)", maxLength: 2048, nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpFeatures", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpFeatureValues",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        Value = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        ProviderName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ProviderKey = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpFeatureValues", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpLanguages",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        CultureName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                        UiCultureName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(32)", maxLength: 32, nullable: false),
                        IsEnabled = table.Column<bool>(type: "bit", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpLanguages", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpLanguageTexts",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ResourceName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        CultureName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                        Name = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: false),
                        Value = table.Column<string>(type: "nvarchar(max)", maxLength: 65536, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpLanguageTexts", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpLinkUsers",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        SourceUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        SourceTenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        TargetUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TargetTenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpLinkUsers", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpLocalizationResources",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        DefaultCulture = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                        BaseResources = table.Column<string>(type: "nvarchar(1280)", maxLength: 1280, nullable: true),
                        SupportedCultures = table.Column<string>(type: "nvarchar(640)", maxLength: 640, nullable: true),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpLocalizationResources", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpLocalizationTexts",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ResourceName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        CultureName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                        Value = table.Column<string>(type: "nvarchar(max)", maxLength: 1048576, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpLocalizationTexts", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpOrganizationUnits",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ParentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Code = table.Column<string>(type: "nvarchar(95)", maxLength: 95, nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        EntityVersion = table.Column<int>(type: "int", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpOrganizationUnits", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpOrganizationUnits_AbpOrganizationUnits_ParentId",
                            column: x => x.ParentId,
                            principalTable: "AbpOrganizationUnits",
                            principalColumn: "Id");
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpPermissionGrants",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        ProviderName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        ProviderKey = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpPermissionGrants", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpPermissionGroups",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpPermissionGroups", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpPermissions",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        GroupName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        ParentName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        DisplayName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        IsEnabled = table.Column<bool>(type: "bit", nullable: false),
                        MultiTenancySide = table.Column<byte>(type: "tinyint", nullable: false),
                        Providers = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        StateCheckers = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpPermissions", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpRoles",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        IsDefault = table.Column<bool>(type: "bit", nullable: false),
                        IsStatic = table.Column<bool>(type: "bit", nullable: false),
                        IsPublic = table.Column<bool>(type: "bit", nullable: false),
                        EntityVersion = table.Column<int>(type: "int", nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpRoles", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpSecurityLogs",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ApplicationName = table.Column<string>(type: "nvarchar(96)", maxLength: 96, nullable: true),
                        Identity = table.Column<string>(type: "nvarchar(96)", maxLength: 96, nullable: true),
                        Action = table.Column<string>(type: "nvarchar(96)", maxLength: 96, nullable: true),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        TenantName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ClientId = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        CorrelationId = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ClientIpAddress = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        BrowserInfo = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpSecurityLogs", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpSessions",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        SessionId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        Device = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        DeviceInfo = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ClientId = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        IpAddresses = table.Column<string>(type: "nvarchar(2048)", maxLength: 2048, nullable: true),
                        SignedIn = table.Column<DateTime>(type: "datetime2", nullable: false),
                        LastAccessed = table.Column<DateTime>(type: "datetime2", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpSessions", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpSettingDefinitions",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Description = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                        DefaultValue = table.Column<string>(type: "nvarchar(2048)", maxLength: 2048, nullable: true),
                        IsVisibleToClients = table.Column<bool>(type: "bit", nullable: false),
                        Providers = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: true),
                        IsInherited = table.Column<bool>(type: "bit", nullable: false),
                        IsEncrypted = table.Column<bool>(type: "bit", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpSettingDefinitions", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpSettings",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        Value = table.Column<string>(type: "nvarchar(2048)", maxLength: 2048, nullable: false),
                        ProviderName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ProviderKey = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpSettings", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpTextTemplateContents",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        CultureName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                        Content = table.Column<string>(type: "nvarchar(max)", maxLength: 65535, nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpTextTemplateContents", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpTextTemplateDefinitionRecords",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        IsLayout = table.Column<bool>(type: "bit", nullable: false),
                        Layout = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        LocalizationResourceName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        IsInlineLocalized = table.Column<bool>(type: "bit", nullable: false),
                        DefaultCultureName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                        RenderEngine = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpTextTemplateDefinitionRecords", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUserDelegations",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        SourceUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TargetUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        StartTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        EndTime = table.Column<DateTime>(type: "datetime2", nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUserDelegations", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUsers",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Name = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        Surname = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        EmailConfirmed = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        PasswordHash = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        SecurityStamp = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        IsExternal = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        PhoneNumber = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                        PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        IsActive = table.Column<bool>(type: "bit", nullable: false),
                        TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                        LockoutEnabled = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        AccessFailedCount = table.Column<int>(type: "int", nullable: false, defaultValue: 0),
                        ShouldChangePasswordOnNextLogin = table.Column<bool>(type: "bit", nullable: false),
                        EntityVersion = table.Column<int>(type: "int", nullable: false),
                        LastPasswordChangeTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUsers", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "ChatConversations",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TargetUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        LastMessageSide = table.Column<byte>(type: "tinyint", nullable: false),
                        LastMessage = table.Column<string>(type: "nvarchar(max)", maxLength: 4096, nullable: true),
                        LastMessageDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                        UnreadMessageCount = table.Column<int>(type: "int", nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_ChatConversations", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "ChatMessages",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Text = table.Column<string>(type: "nvarchar(max)", maxLength: 4096, nullable: false),
                        IsAllRead = table.Column<bool>(type: "bit", nullable: false),
                        ReadTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_ChatMessages", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "ChatUsers",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Name = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        Surname = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: true),
                        IsActive = table.Column<bool>(type: "bit", nullable: false),
                        EmailConfirmed = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        PhoneNumber = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                        PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_ChatUsers", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "FmDirectoryDescriptors",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                        ParentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_FmDirectoryDescriptors", x => x.Id);
                        table.ForeignKey(
                            name: "FK_FmDirectoryDescriptors_FmDirectoryDescriptors_ParentId",
                            column: x => x.ParentId,
                            principalTable: "FmDirectoryDescriptors",
                            principalColumn: "Id");
                    });
    
                migrationBuilder.CreateTable(
                    name: "GdprRequests",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ReadyTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_GdprRequests", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "OpenIddictApplications",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ApplicationType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        ClientId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                        ClientSecret = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        ClientType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        ConsentType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        DisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        DisplayNames = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        JsonWebKeySet = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Permissions = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        PostLogoutRedirectUris = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Properties = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        RedirectUris = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Requirements = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Settings = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        ClientUri = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        LogoUri = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_OpenIddictApplications", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "OpenIddictScopes",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Descriptions = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        DisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        DisplayNames = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                        Properties = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Resources = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_OpenIddictScopes", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "SaasEditions",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        DisplayName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        PlanId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        EntityVersion = table.Column<int>(type: "int", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_SaasEditions", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "SaasTenants",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        NormalizedName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        EditionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        EditionEndDateUtc = table.Column<DateTime>(type: "datetime2", nullable: true),
                        ActivationState = table.Column<byte>(type: "tinyint", nullable: false),
                        ActivationEndDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                        EntityVersion = table.Column<int>(type: "int", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                        DeleterId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DeletionTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_SaasTenants", x => x.Id);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpAuditLogActions",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        AuditLogId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ServiceName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                        MethodName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        Parameters = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                        ExecutionTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ExecutionDuration = table.Column<int>(type: "int", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpAuditLogActions", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpAuditLogActions_AbpAuditLogs_AuditLogId",
                            column: x => x.AuditLogId,
                            principalTable: "AbpAuditLogs",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpEntityChanges",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        AuditLogId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ChangeTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        ChangeType = table.Column<byte>(type: "tinyint", nullable: false),
                        EntityTenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        EntityId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                        EntityTypeFullName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpEntityChanges", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpEntityChanges_AbpAuditLogs_AuditLogId",
                            column: x => x.AuditLogId,
                            principalTable: "AbpAuditLogs",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpBlobs",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ContainerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        Content = table.Column<byte[]>(type: "varbinary(max)", maxLength: 2147483647, nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpBlobs", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpBlobs_AbpBlobContainers_ContainerId",
                            column: x => x.ContainerId,
                            principalTable: "AbpBlobContainers",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpOrganizationUnitRoles",
                    columns: table => new
                    {
                        RoleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        OrganizationUnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpOrganizationUnitRoles", x => new { x.OrganizationUnitId, x.RoleId });
                        table.ForeignKey(
                            name: "FK_AbpOrganizationUnitRoles_AbpOrganizationUnits_OrganizationUnitId",
                            column: x => x.OrganizationUnitId,
                            principalTable: "AbpOrganizationUnits",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_AbpOrganizationUnitRoles_AbpRoles_RoleId",
                            column: x => x.RoleId,
                            principalTable: "AbpRoles",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpRoleClaims",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        RoleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ClaimType = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        ClaimValue = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpRoleClaims", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpRoleClaims_AbpRoles_RoleId",
                            column: x => x.RoleId,
                            principalTable: "AbpRoles",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpTextTemplateDefinitionContentRecords",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        DefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        FileName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        FileContent = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpTextTemplateDefinitionContentRecords", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpTextTemplateDefinitionContentRecords_AbpTextTemplateDefinitionRecords_DefinitionId",
                            column: x => x.DefinitionId,
                            principalTable: "AbpTextTemplateDefinitionRecords",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUserClaims",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ClaimType = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                        ClaimValue = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUserClaims", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpUserClaims_AbpUsers_UserId",
                            column: x => x.UserId,
                            principalTable: "AbpUsers",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUserLogins",
                    columns: table => new
                    {
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        LoginProvider = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ProviderKey = table.Column<string>(type: "nvarchar(196)", maxLength: 196, nullable: false),
                        ProviderDisplayName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUserLogins", x => new { x.UserId, x.LoginProvider });
                        table.ForeignKey(
                            name: "FK_AbpUserLogins_AbpUsers_UserId",
                            column: x => x.UserId,
                            principalTable: "AbpUsers",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUserOrganizationUnits",
                    columns: table => new
                    {
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        OrganizationUnitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUserOrganizationUnits", x => new { x.OrganizationUnitId, x.UserId });
                        table.ForeignKey(
                            name: "FK_AbpUserOrganizationUnits_AbpOrganizationUnits_OrganizationUnitId",
                            column: x => x.OrganizationUnitId,
                            principalTable: "AbpOrganizationUnits",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_AbpUserOrganizationUnits_AbpUsers_UserId",
                            column: x => x.UserId,
                            principalTable: "AbpUsers",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUserRoles",
                    columns: table => new
                    {
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        RoleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUserRoles", x => new { x.UserId, x.RoleId });
                        table.ForeignKey(
                            name: "FK_AbpUserRoles_AbpRoles_RoleId",
                            column: x => x.RoleId,
                            principalTable: "AbpRoles",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                        table.ForeignKey(
                            name: "FK_AbpUserRoles_AbpUsers_UserId",
                            column: x => x.UserId,
                            principalTable: "AbpUsers",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpUserTokens",
                    columns: table => new
                    {
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        LoginProvider = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                        table.ForeignKey(
                            name: "FK_AbpUserTokens_AbpUsers_UserId",
                            column: x => x.UserId,
                            principalTable: "AbpUsers",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "ChatUserMessages",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        ChatMessageId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TargetUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Side = table.Column<byte>(type: "tinyint", nullable: false),
                        IsRead = table.Column<bool>(type: "bit", nullable: false),
                        ReadTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_ChatUserMessages", x => x.Id);
                        table.ForeignKey(
                            name: "FK_ChatUserMessages_ChatMessages_ChatMessageId",
                            column: x => x.ChatMessageId,
                            principalTable: "ChatMessages",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "FmFileDescriptors",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        DirectoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                        MimeType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        Size = table.Column<long>(type: "bigint", nullable: false),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                        CreationTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                        CreatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        LastModificationTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                        LastModifierId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_FmFileDescriptors", x => x.Id);
                        table.ForeignKey(
                            name: "FK_FmFileDescriptors_FmDirectoryDescriptors_DirectoryId",
                            column: x => x.DirectoryId,
                            principalTable: "FmDirectoryDescriptors",
                            principalColumn: "Id");
                    });
    
                migrationBuilder.CreateTable(
                    name: "GdprInfo",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        RequestId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Data = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        Provider = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_GdprInfo", x => x.Id);
                        table.ForeignKey(
                            name: "FK_GdprInfo_GdprRequests_RequestId",
                            column: x => x.RequestId,
                            principalTable: "GdprRequests",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "OpenIddictAuthorizations",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        CreationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                        Properties = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Scopes = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Status = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        Subject = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: true),
                        Type = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_OpenIddictAuthorizations", x => x.Id);
                        table.ForeignKey(
                            name: "FK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId",
                            column: x => x.ApplicationId,
                            principalTable: "OpenIddictApplications",
                            principalColumn: "Id");
                    });
    
                migrationBuilder.CreateTable(
                    name: "SaasTenantConnectionStrings",
                    columns: table => new
                    {
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        Name = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false),
                        Value = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_SaasTenantConnectionStrings", x => new { x.TenantId, x.Name });
                        table.ForeignKey(
                            name: "FK_SaasTenantConnectionStrings_SaasTenants_TenantId",
                            column: x => x.TenantId,
                            principalTable: "SaasTenants",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "AbpEntityPropertyChanges",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        TenantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        EntityChangeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        NewValue = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                        OriginalValue = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                        PropertyName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                        PropertyTypeFullName = table.Column<string>(type: "nvarchar(64)", maxLength: 64, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_AbpEntityPropertyChanges", x => x.Id);
                        table.ForeignKey(
                            name: "FK_AbpEntityPropertyChanges_AbpEntityChanges_EntityChangeId",
                            column: x => x.EntityChangeId,
                            principalTable: "AbpEntityChanges",
                            principalColumn: "Id",
                            onDelete: ReferentialAction.Cascade);
                    });
    
                migrationBuilder.CreateTable(
                    name: "OpenIddictTokens",
                    columns: table => new
                    {
                        Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                        ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        AuthorizationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                        CreationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                        ExpirationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                        Payload = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        Properties = table.Column<string>(type: "nvarchar(max)", nullable: true),
                        RedemptionDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                        ReferenceId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                        Status = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        Subject = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: true),
                        Type = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                        ExtraProperties = table.Column<string>(type: "nvarchar(max)", nullable: false),
                        ConcurrencyStamp = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false)
                    },
                    constraints: table =>
                    {
                        table.PrimaryKey("PK_OpenIddictTokens", x => x.Id);
                        table.ForeignKey(
                            name: "FK_OpenIddictTokens_OpenIddictApplications_ApplicationId",
                            column: x => x.ApplicationId,
                            principalTable: "OpenIddictApplications",
                            principalColumn: "Id");
                        table.ForeignKey(
                            name: "FK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId",
                            column: x => x.AuthorizationId,
                            principalTable: "OpenIddictAuthorizations",
                            principalColumn: "Id");
                    });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpAuditLogActions_AuditLogId",
                    table: "AbpAuditLogActions",
                    column: "AuditLogId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpAuditLogActions_TenantId_ServiceName_MethodName_ExecutionTime",
                    table: "AbpAuditLogActions",
                    columns: new[] { "TenantId", "ServiceName", "MethodName", "ExecutionTime" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpAuditLogs_TenantId_ExecutionTime",
                    table: "AbpAuditLogs",
                    columns: new[] { "TenantId", "ExecutionTime" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpAuditLogs_TenantId_UserId_ExecutionTime",
                    table: "AbpAuditLogs",
                    columns: new[] { "TenantId", "UserId", "ExecutionTime" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpBackgroundJobs_IsAbandoned_NextTryTime",
                    table: "AbpBackgroundJobs",
                    columns: new[] { "IsAbandoned", "NextTryTime" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpBlobContainers_TenantId_Name",
                    table: "AbpBlobContainers",
                    columns: new[] { "TenantId", "Name" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpBlobs_ContainerId",
                    table: "AbpBlobs",
                    column: "ContainerId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpBlobs_TenantId_ContainerId_Name",
                    table: "AbpBlobs",
                    columns: new[] { "TenantId", "ContainerId", "Name" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpEntityChanges_AuditLogId",
                    table: "AbpEntityChanges",
                    column: "AuditLogId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpEntityChanges_TenantId_EntityTypeFullName_EntityId",
                    table: "AbpEntityChanges",
                    columns: new[] { "TenantId", "EntityTypeFullName", "EntityId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpEntityPropertyChanges_EntityChangeId",
                    table: "AbpEntityPropertyChanges",
                    column: "EntityChangeId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpFeatureGroups_Name",
                    table: "AbpFeatureGroups",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpFeatures_GroupName",
                    table: "AbpFeatures",
                    column: "GroupName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpFeatures_Name",
                    table: "AbpFeatures",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpFeatureValues_Name_ProviderName_ProviderKey",
                    table: "AbpFeatureValues",
                    columns: new[] { "Name", "ProviderName", "ProviderKey" },
                    unique: true,
                    filter: "[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpLanguages_CultureName",
                    table: "AbpLanguages",
                    column: "CultureName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpLanguageTexts_TenantId_ResourceName_CultureName",
                    table: "AbpLanguageTexts",
                    columns: new[] { "TenantId", "ResourceName", "CultureName" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpLinkUsers_SourceUserId_SourceTenantId_TargetUserId_TargetTenantId",
                    table: "AbpLinkUsers",
                    columns: new[] { "SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId" },
                    unique: true,
                    filter: "[SourceTenantId] IS NOT NULL AND [TargetTenantId] IS NOT NULL");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpLocalizationResources_Name",
                    table: "AbpLocalizationResources",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpLocalizationTexts_ResourceName_CultureName",
                    table: "AbpLocalizationTexts",
                    columns: new[] { "ResourceName", "CultureName" },
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpOrganizationUnitRoles_RoleId_OrganizationUnitId",
                    table: "AbpOrganizationUnitRoles",
                    columns: new[] { "RoleId", "OrganizationUnitId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpOrganizationUnits_Code",
                    table: "AbpOrganizationUnits",
                    column: "Code");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpOrganizationUnits_ParentId",
                    table: "AbpOrganizationUnits",
                    column: "ParentId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpPermissionGrants_TenantId_Name_ProviderName_ProviderKey",
                    table: "AbpPermissionGrants",
                    columns: new[] { "TenantId", "Name", "ProviderName", "ProviderKey" },
                    unique: true,
                    filter: "[TenantId] IS NOT NULL");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpPermissionGroups_Name",
                    table: "AbpPermissionGroups",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpPermissions_GroupName",
                    table: "AbpPermissions",
                    column: "GroupName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpPermissions_Name",
                    table: "AbpPermissions",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpRoleClaims_RoleId",
                    table: "AbpRoleClaims",
                    column: "RoleId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpRoles_NormalizedName",
                    table: "AbpRoles",
                    column: "NormalizedName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSecurityLogs_TenantId_Action",
                    table: "AbpSecurityLogs",
                    columns: new[] { "TenantId", "Action" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSecurityLogs_TenantId_ApplicationName",
                    table: "AbpSecurityLogs",
                    columns: new[] { "TenantId", "ApplicationName" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSecurityLogs_TenantId_Identity",
                    table: "AbpSecurityLogs",
                    columns: new[] { "TenantId", "Identity" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSecurityLogs_TenantId_UserId",
                    table: "AbpSecurityLogs",
                    columns: new[] { "TenantId", "UserId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSessions_Device",
                    table: "AbpSessions",
                    column: "Device");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSessions_SessionId",
                    table: "AbpSessions",
                    column: "SessionId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSessions_TenantId_UserId",
                    table: "AbpSessions",
                    columns: new[] { "TenantId", "UserId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSettingDefinitions_Name",
                    table: "AbpSettingDefinitions",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpSettings_Name_ProviderName_ProviderKey",
                    table: "AbpSettings",
                    columns: new[] { "Name", "ProviderName", "ProviderKey" },
                    unique: true,
                    filter: "[ProviderName] IS NOT NULL AND [ProviderKey] IS NOT NULL");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpTextTemplateDefinitionContentRecords_DefinitionId",
                    table: "AbpTextTemplateDefinitionContentRecords",
                    column: "DefinitionId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpTextTemplateDefinitionRecords_Name",
                    table: "AbpTextTemplateDefinitionRecords",
                    column: "Name",
                    unique: true);
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUserClaims_UserId",
                    table: "AbpUserClaims",
                    column: "UserId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUserLogins_LoginProvider_ProviderKey",
                    table: "AbpUserLogins",
                    columns: new[] { "LoginProvider", "ProviderKey" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUserOrganizationUnits_UserId_OrganizationUnitId",
                    table: "AbpUserOrganizationUnits",
                    columns: new[] { "UserId", "OrganizationUnitId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUserRoles_RoleId_UserId",
                    table: "AbpUserRoles",
                    columns: new[] { "RoleId", "UserId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUsers_Email",
                    table: "AbpUsers",
                    column: "Email");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUsers_NormalizedEmail",
                    table: "AbpUsers",
                    column: "NormalizedEmail");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUsers_NormalizedUserName",
                    table: "AbpUsers",
                    column: "NormalizedUserName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_AbpUsers_UserName",
                    table: "AbpUsers",
                    column: "UserName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_ChatConversations_UserId",
                    table: "ChatConversations",
                    column: "UserId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_ChatUserMessages_ChatMessageId",
                    table: "ChatUserMessages",
                    column: "ChatMessageId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_ChatUserMessages_UserId",
                    table: "ChatUserMessages",
                    column: "UserId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_ChatUserMessages_UserId_TargetUserId",
                    table: "ChatUserMessages",
                    columns: new[] { "UserId", "TargetUserId" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_FmDirectoryDescriptors_ParentId",
                    table: "FmDirectoryDescriptors",
                    column: "ParentId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_FmDirectoryDescriptors_TenantId_ParentId_Name",
                    table: "FmDirectoryDescriptors",
                    columns: new[] { "TenantId", "ParentId", "Name" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_FmFileDescriptors_DirectoryId",
                    table: "FmFileDescriptors",
                    column: "DirectoryId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_FmFileDescriptors_TenantId_DirectoryId_Name",
                    table: "FmFileDescriptors",
                    columns: new[] { "TenantId", "DirectoryId", "Name" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_GdprInfo_RequestId",
                    table: "GdprInfo",
                    column: "RequestId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_GdprRequests_UserId",
                    table: "GdprRequests",
                    column: "UserId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_OpenIddictApplications_ClientId",
                    table: "OpenIddictApplications",
                    column: "ClientId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type",
                    table: "OpenIddictAuthorizations",
                    columns: new[] { "ApplicationId", "Status", "Subject", "Type" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_OpenIddictScopes_Name",
                    table: "OpenIddictScopes",
                    column: "Name");
    
                migrationBuilder.CreateIndex(
                    name: "IX_OpenIddictTokens_ApplicationId_Status_Subject_Type",
                    table: "OpenIddictTokens",
                    columns: new[] { "ApplicationId", "Status", "Subject", "Type" });
    
                migrationBuilder.CreateIndex(
                    name: "IX_OpenIddictTokens_AuthorizationId",
                    table: "OpenIddictTokens",
                    column: "AuthorizationId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_OpenIddictTokens_ReferenceId",
                    table: "OpenIddictTokens",
                    column: "ReferenceId");
    
                migrationBuilder.CreateIndex(
                    name: "IX_SaasEditions_DisplayName",
                    table: "SaasEditions",
                    column: "DisplayName");
    
                migrationBuilder.CreateIndex(
                    name: "IX_SaasTenants_Name",
                    table: "SaasTenants",
                    column: "Name");
    
                migrationBuilder.CreateIndex(
                    name: "IX_SaasTenants_NormalizedName",
                    table: "SaasTenants",
                    column: "NormalizedName");
            }
    
            /// <inheritdoc />
            protected override void Down(MigrationBuilder migrationBuilder)
            {
                migrationBuilder.DropTable(
                    name: "AbpAuditLogActions");
    
                migrationBuilder.DropTable(
                    name: "AbpAuditLogExcelFiles");
    
                migrationBuilder.DropTable(
                    name: "AbpBackgroundJobs");
    
                migrationBuilder.DropTable(
                    name: "AbpBlobs");
    
                migrationBuilder.DropTable(
                    name: "AbpClaimTypes");
    
                migrationBuilder.DropTable(
                    name: "AbpEntityPropertyChanges");
    
                migrationBuilder.DropTable(
                    name: "AbpFeatureGroups");
    
                migrationBuilder.DropTable(
                    name: "AbpFeatures");
    
                migrationBuilder.DropTable(
                    name: "AbpFeatureValues");
    
                migrationBuilder.DropTable(
                    name: "AbpLanguages");
    
                migrationBuilder.DropTable(
                    name: "AbpLanguageTexts");
    
                migrationBuilder.DropTable(
                    name: "AbpLinkUsers");
    
                migrationBuilder.DropTable(
                    name: "AbpLocalizationResources");
    
                migrationBuilder.DropTable(
                    name: "AbpLocalizationTexts");
    
                migrationBuilder.DropTable(
                    name: "AbpOrganizationUnitRoles");
    
                migrationBuilder.DropTable(
                    name: "AbpPermissionGrants");
    
                migrationBuilder.DropTable(
                    name: "AbpPermissionGroups");
    
                migrationBuilder.DropTable(
                    name: "AbpPermissions");
    
                migrationBuilder.DropTable(
                    name: "AbpRoleClaims");
    
                migrationBuilder.DropTable(
                    name: "AbpSecurityLogs");
    
                migrationBuilder.DropTable(
                    name: "AbpSessions");
    
                migrationBuilder.DropTable(
                    name: "AbpSettingDefinitions");
    
                migrationBuilder.DropTable(
                    name: "AbpSettings");
    
                migrationBuilder.DropTable(
                    name: "AbpTextTemplateContents");
    
                migrationBuilder.DropTable(
                    name: "AbpTextTemplateDefinitionContentRecords");
    
                migrationBuilder.DropTable(
                    name: "AbpUserClaims");
    
                migrationBuilder.DropTable(
                    name: "AbpUserDelegations");
    
                migrationBuilder.DropTable(
                    name: "AbpUserLogins");
    
                migrationBuilder.DropTable(
                    name: "AbpUserOrganizationUnits");
    
                migrationBuilder.DropTable(
                    name: "AbpUserRoles");
    
                migrationBuilder.DropTable(
                    name: "AbpUserTokens");
    
                migrationBuilder.DropTable(
                    name: "ChatConversations");
    
                migrationBuilder.DropTable(
                    name: "ChatUserMessages");
    
                migrationBuilder.DropTable(
                    name: "ChatUsers");
    
                migrationBuilder.DropTable(
                    name: "FmFileDescriptors");
    
                migrationBuilder.DropTable(
                    name: "GdprInfo");
    
                migrationBuilder.DropTable(
                    name: "OpenIddictScopes");
    
                migrationBuilder.DropTable(
                    name: "OpenIddictTokens");
    
                migrationBuilder.DropTable(
                    name: "SaasEditions");
    
                migrationBuilder.DropTable(
                    name: "SaasTenantConnectionStrings");
    
                migrationBuilder.DropTable(
                    name: "AbpBlobContainers");
    
                migrationBuilder.DropTable(
                    name: "AbpEntityChanges");
    
                migrationBuilder.DropTable(
                    name: "AbpTextTemplateDefinitionRecords");
    
                migrationBuilder.DropTable(
                    name: "AbpOrganizationUnits");
    
                migrationBuilder.DropTable(
                    name: "AbpRoles");
    
                migrationBuilder.DropTable(
                    name: "AbpUsers");
    
                migrationBuilder.DropTable(
                    name: "ChatMessages");
    
                migrationBuilder.DropTable(
                    name: "FmDirectoryDescriptors");
    
                migrationBuilder.DropTable(
                    name: "GdprRequests");
    
                migrationBuilder.DropTable(
                    name: "OpenIddictAuthorizations");
    
                migrationBuilder.DropTable(
                    name: "SaasTenants");
    
                migrationBuilder.DropTable(
                    name: "AbpAuditLogs");
    
                migrationBuilder.DropTable(
                    name: "OpenIddictApplications");
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Orders\EfCoreOrderRepository.Extended.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class EfCoreOrderRepository : EfCoreOrderRepositoryBase, IOrderRepository
        {
            public EfCoreOrderRepository(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
                : base(dbContextProvider)
            {
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\Orders\EfCoreOrderRepository.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Dynamic.Core;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class EfCoreOrderRepositoryBase : EfCoreRepository<ExampleAbpApplicationLayerDbContext, Order, Guid>
        {
            public EfCoreOrderRepositoryBase(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
                : base(dbContextProvider)
            {
    
            }
    
            public virtual async Task<List<Order>> GetListAsync(
                string? filterText = null,
                DateTime? orderDateMin = null,
                DateTime? orderDateMax = null,
                float? totalAmountMin = null,
                float? totalAmountMax = null,
                OrderStatus? status = null,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default)
            {
                var query = ApplyFilter((await GetQueryableAsync()), filterText, orderDateMin, orderDateMax, totalAmountMin, totalAmountMax, status);
                query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderConsts.GetDefaultSorting(false) : sorting);
                return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
            }
    
            public virtual async Task<long> GetCountAsync(
                string? filterText = null,
                DateTime? orderDateMin = null,
                DateTime? orderDateMax = null,
                float? totalAmountMin = null,
                float? totalAmountMax = null,
                OrderStatus? status = null,
                CancellationToken cancellationToken = default)
            {
                var query = ApplyFilter((await GetDbSetAsync()), filterText, orderDateMin, orderDateMax, totalAmountMin, totalAmountMax, status);
                return await query.LongCountAsync(GetCancellationToken(cancellationToken));
            }
    
            protected virtual IQueryable<Order> ApplyFilter(
                IQueryable<Order> query,
                string? filterText = null,
                DateTime? orderDateMin = null,
                DateTime? orderDateMax = null,
                float? totalAmountMin = null,
                float? totalAmountMax = null,
                OrderStatus? status = null)
            {
                return query
                        .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => true)
                        .WhereIf(orderDateMin.HasValue, e => e.OrderDate >= orderDateMin!.Value)
                        .WhereIf(orderDateMax.HasValue, e => e.OrderDate <= orderDateMax!.Value)
                        .WhereIf(totalAmountMin.HasValue, e => e.TotalAmount >= totalAmountMin!.Value)
                        .WhereIf(totalAmountMax.HasValue, e => e.TotalAmount <= totalAmountMax!.Value)
                        .WhereIf(status.HasValue, e => e.Status == status);
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreModule.cs"><![CDATA[
    using ExampleAbpApplicationLayer.OrderItems;
    
    using ExampleAbpApplicationLayer.Orders;
    
    using ExampleAbpApplicationLayer.Products;
    
    using System;
    using Microsoft.Extensions.DependencyInjection;
    using Volo.Abp.Uow;
    using Volo.Abp.AuditLogging.EntityFrameworkCore;
    using Volo.Abp.BackgroundJobs.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore.SqlServer;
    using Volo.Abp.FeatureManagement.EntityFrameworkCore;
    using Volo.Abp.Identity.EntityFrameworkCore;
    using Volo.Abp.OpenIddict.EntityFrameworkCore;
    using Volo.Abp.Modularity;
    using Volo.Abp.PermissionManagement.EntityFrameworkCore;
    using Volo.Abp.SettingManagement.EntityFrameworkCore;
    using Volo.Abp.BlobStoring.Database.EntityFrameworkCore;
    using Volo.Abp.LanguageManagement.EntityFrameworkCore;
    using Volo.FileManagement.EntityFrameworkCore;
    using Volo.Abp.TextTemplateManagement.EntityFrameworkCore;
    using Volo.Saas.EntityFrameworkCore;
    using Volo.Abp.Gdpr;
    using Volo.Chat.EntityFrameworkCore;
    using Volo.Abp.Studio;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerDomainModule),
        typeof(AbpPermissionManagementEntityFrameworkCoreModule),
        typeof(AbpSettingManagementEntityFrameworkCoreModule),
        typeof(AbpEntityFrameworkCoreSqlServerModule),
        typeof(AbpBackgroundJobsEntityFrameworkCoreModule),
        typeof(AbpAuditLoggingEntityFrameworkCoreModule),
        typeof(AbpFeatureManagementEntityFrameworkCoreModule),
        typeof(AbpIdentityProEntityFrameworkCoreModule),
        typeof(AbpOpenIddictProEntityFrameworkCoreModule),
        typeof(LanguageManagementEntityFrameworkCoreModule),
        typeof(FileManagementEntityFrameworkCoreModule),
        typeof(SaasEntityFrameworkCoreModule),
        typeof(ChatEntityFrameworkCoreModule),
        typeof(TextTemplateManagementEntityFrameworkCoreModule),
        typeof(AbpGdprEntityFrameworkCoreModule),
        typeof(BlobStoringDatabaseEntityFrameworkCoreModule)
        )]
    public class ExampleAbpApplicationLayerEntityFrameworkCoreModule : AbpModule
    {
        public override void PreConfigureServices(ServiceConfigurationContext context)
        {
    
            ExampleAbpApplicationLayerEfCoreEntityExtensionMappings.Configure();
        }
    
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            context.Services.AddAbpDbContext<ExampleAbpApplicationLayerDbContext>(options =>
            {
                /* Remove "includeAllEntities: true" to create
                 * default repositories only for aggregate roots */
                options.AddDefaultRepositories(includeAllEntities: true);
                options.AddRepository<Product, Products.EfCoreProductRepository>();
    
                options.AddRepository<Order, Orders.EfCoreOrderRepository>();
    
                options.AddRepository<OrderItem, OrderItems.EfCoreOrderItemRepository>();
    
            });
    
            if (AbpStudioAnalyzeHelper.IsInAnalyzeMode)
            {
                return;
            }
    
            Configure<AbpDbContextOptions>(options =>
            {
                /* The main point to change your DBMS.
                 * See also ExampleAbpApplicationLayerDbContextFactory for EF Core tooling. */
    
                options.UseSqlServer();
    
            });
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerEfCoreEntityExtensionMappings.cs"><![CDATA[
    ﻿using Microsoft.EntityFrameworkCore;
    using Volo.Abp.Identity;
    using Volo.Abp.ObjectExtending;
    using Volo.Abp.Threading;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    public static class ExampleAbpApplicationLayerEfCoreEntityExtensionMappings
    {
        private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
    
        public static void Configure()
        {
            ExampleAbpApplicationLayerGlobalFeatureConfigurator.Configure();
            ExampleAbpApplicationLayerModuleExtensionConfigurator.Configure();
    
            OneTimeRunner.Run(() =>
            {
                    /* You can configure extra properties for the
                     * entities defined in the modules used by your application.
                     *
                     * This class can be used to map these extra properties to table fields in the database.
                     *
                     * USE THIS CLASS ONLY TO CONFIGURE EF CORE RELATED MAPPING.
                     * USE ExampleAbpApplicationLayerModuleExtensionConfigurator CLASS (in the Domain.Shared project)
                     * FOR A HIGH LEVEL API TO DEFINE EXTRA PROPERTIES TO ENTITIES OF THE USED MODULES
                     *
                     * Example: Map a property to a table field:
    
                         ObjectExtensionManager.Instance
                             .MapEfCoreProperty<IdentityUser, string>(
                                 "MyProperty",
                                 (entityBuilder, propertyBuilder) =>
                                 {
                                     propertyBuilder.HasMaxLength(128);
                                 }
                             );
    
                     * See the documentation for more:
                     * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities
                     */
            });
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerDbContextFactory.cs"><![CDATA[
    ﻿using System;
    using System.IO;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Design;
    using Microsoft.Extensions.Configuration;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    /* This class is needed for EF Core console commands
     * (like Add-Migration and Update-Database commands) */
    public class ExampleAbpApplicationLayerDbContextFactory : IDesignTimeDbContextFactory<ExampleAbpApplicationLayerDbContext>
    {
        public ExampleAbpApplicationLayerDbContext CreateDbContext(string[] args)
        {
            var configuration = BuildConfiguration();
            
            ExampleAbpApplicationLayerEfCoreEntityExtensionMappings.Configure();
    
            var builder = new DbContextOptionsBuilder<ExampleAbpApplicationLayerDbContext>()
                .UseSqlServer(configuration.GetConnectionString("Default"));
            
            return new ExampleAbpApplicationLayerDbContext(builder.Options);
        }
    
        private static IConfigurationRoot BuildConfiguration()
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Path.Combine(Directory.GetCurrentDirectory(), "../ExampleAbpApplicationLayer.DbMigrator/"))
                .AddJsonFile("appsettings.json", optional: false);
    
            return builder.Build();
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerDbContext.cs"><![CDATA[
    using ExampleAbpApplicationLayer.OrderItems;
    using ExampleAbpApplicationLayer.Orders;
    using ExampleAbpApplicationLayer.Products;
    using Microsoft.EntityFrameworkCore;
    using Volo.Abp.AuditLogging.EntityFrameworkCore;
    using Volo.Abp.BackgroundJobs.EntityFrameworkCore;
    using Volo.Abp.BlobStoring.Database.EntityFrameworkCore;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore.Modeling;
    using Volo.Abp.FeatureManagement.EntityFrameworkCore;
    using Volo.Abp.Identity;
    using Volo.Abp.Identity.EntityFrameworkCore;
    using Volo.Abp.PermissionManagement.EntityFrameworkCore;
    using Volo.Abp.SettingManagement.EntityFrameworkCore;
    using Volo.Abp.OpenIddict.EntityFrameworkCore;
    using Volo.Abp.LanguageManagement.EntityFrameworkCore;
    using Volo.FileManagement.EntityFrameworkCore;
    using Volo.Chat.EntityFrameworkCore;
    using Volo.Abp.TextTemplateManagement.EntityFrameworkCore;
    using Volo.Saas.EntityFrameworkCore;
    using Volo.Saas.Editions;
    using Volo.Saas.Tenants;
    using Volo.Abp.Gdpr;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    [ReplaceDbContext(typeof(IIdentityProDbContext))]
    [ReplaceDbContext(typeof(ISaasDbContext))]
    [ConnectionStringName("Default")]
    public class ExampleAbpApplicationLayerDbContext :
        AbpDbContext<ExampleAbpApplicationLayerDbContext>,
        ISaasDbContext,
        IIdentityProDbContext
    {
        public DbSet<OrderItem> OrderItems { get; set; } = null!;
        public DbSet<Order> Orders { get; set; } = null!;
        public DbSet<Product> Products { get; set; } = null!;
        /* Add DbSet properties for your Aggregate Roots / Entities here. */
    
        #region Entities from the modules
    
        /* Notice: We only implemented IIdentityProDbContext and ISaasDbContext
         * and replaced them for this DbContext. This allows you to perform JOIN
         * queries for the entities of these modules over the repositories easily. You
         * typically don't need that for other modules. But, if you need, you can
         * implement the DbContext interface of the needed module and use ReplaceDbContext
         * attribute just like IIdentityProDbContext and ISaasDbContext.
         *
         * More info: Replacing a DbContext of a module ensures that the related module
         * uses this DbContext on runtime. Otherwise, it will use its own DbContext class.
         */
    
        // Identity
        public DbSet<IdentityUser> Users { get; set; }
        public DbSet<IdentityRole> Roles { get; set; }
        public DbSet<IdentityClaimType> ClaimTypes { get; set; }
        public DbSet<OrganizationUnit> OrganizationUnits { get; set; }
        public DbSet<IdentitySecurityLog> SecurityLogs { get; set; }
        public DbSet<IdentityLinkUser> LinkUsers { get; set; }
        public DbSet<IdentityUserDelegation> UserDelegations { get; set; }
        public DbSet<IdentitySession> Sessions { get; set; }
    
        // SaaS
        public DbSet<Tenant> Tenants { get; set; }
        public DbSet<Edition> Editions { get; set; }
        public DbSet<TenantConnectionString> TenantConnectionStrings { get; set; }
    
        #endregion
    
        public ExampleAbpApplicationLayerDbContext(DbContextOptions<ExampleAbpApplicationLayerDbContext> options)
            : base(options)
        {
    
        }
    
        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
    
            /* Include modules to your migration db context */
    
            builder.ConfigurePermissionManagement();
            builder.ConfigureSettingManagement();
            builder.ConfigureBackgroundJobs();
            builder.ConfigureAuditLogging();
            builder.ConfigureFeatureManagement();
            builder.ConfigureIdentityPro();
            builder.ConfigureOpenIddictPro();
            builder.ConfigureLanguageManagement();
            builder.ConfigureFileManagement();
            builder.ConfigureSaas();
            builder.ConfigureChat();
            builder.ConfigureTextTemplateManagement();
            builder.ConfigureGdpr();
            builder.ConfigureBlobStoring();
    
            /* Configure your own tables/entities inside here */
    
            //builder.Entity<YourEntity>(b =>
            //{
            //    b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "YourEntities", ExampleAbpApplicationLayerConsts.DbSchema);
            //    b.ConfigureByConvention(); //auto configure for the base class props
            //    //...
            //});
    
            builder.Entity<Order>(b =>
                    {
                        b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "Orders", ExampleAbpApplicationLayerConsts.DbSchema);
                        b.ConfigureByConvention();
                        b.Property(x => x.TenantId).HasColumnName(nameof(Order.TenantId));
                        b.Property(x => x.OrderDate).HasColumnName(nameof(Order.OrderDate));
                        b.Property(x => x.TotalAmount).HasColumnName(nameof(Order.TotalAmount));
                        b.Property(x => x.Status).HasColumnName(nameof(Order.Status));
                        b.HasMany(x => x.OrderItems).WithOne().HasForeignKey(x => x.OrderId).IsRequired().OnDelete(DeleteBehavior.Cascade);
                    });
            builder.Entity<OrderItem>(b =>
                    {
                        b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "OrderItems", ExampleAbpApplicationLayerConsts.DbSchema);
                        b.ConfigureByConvention();
                        b.Property(x => x.TenantId).HasColumnName(nameof(OrderItem.TenantId));
                        b.Property(x => x.Qty).HasColumnName(nameof(OrderItem.Qty));
                        b.Property(x => x.Price).HasColumnName(nameof(OrderItem.Price));
                        b.Property(x => x.TotalPrice).HasColumnName(nameof(OrderItem.TotalPrice));
                        b.Property(x => x.ProductName).HasColumnName(nameof(OrderItem.ProductName));
                        b.HasOne<Product>().WithMany().IsRequired().HasForeignKey(x => x.ProductId).OnDelete(DeleteBehavior.NoAction);
                        b.HasOne<Order>().WithMany(x => x.OrderItems).HasForeignKey(x => x.OrderId).IsRequired().OnDelete(DeleteBehavior.Cascade);
                    });
            builder.Entity<Product>(b =>
                    {
                        b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "Products", ExampleAbpApplicationLayerConsts.DbSchema);
                        b.ConfigureByConvention();
                        b.Property(x => x.TenantId).HasColumnName(nameof(Product.TenantId));
                        b.Property(x => x.Name).HasColumnName(nameof(Product.Name)).IsRequired();
                        b.Property(x => x.Desc).HasColumnName(nameof(Product.Desc));
                        b.Property(x => x.Price).HasColumnName(nameof(Product.Price));
                        b.Property(x => x.IsActive).HasColumnName(nameof(Product.IsActive));
                    });
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\EntityFrameworkCoreExampleAbpApplicationLayerDbSchemaMigrator.cs"><![CDATA[
    ﻿using System;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.DependencyInjection;
    using ExampleAbpApplicationLayer.Data;
    using Volo.Abp.DependencyInjection;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    public class EntityFrameworkCoreExampleAbpApplicationLayerDbSchemaMigrator
        : IExampleAbpApplicationLayerDbSchemaMigrator, ITransientDependency
    {
        private readonly IServiceProvider _serviceProvider;
    
        public EntityFrameworkCoreExampleAbpApplicationLayerDbSchemaMigrator(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }
    
        public async Task MigrateAsync()
        {
            /* We intentionally resolving the ExampleAbpApplicationLayerDbContext
             * from IServiceProvider (instead of directly injecting it)
             * to properly get the connection string of the current tenant in the
             * current scope.
             */
    
            await _serviceProvider
                .GetRequiredService<ExampleAbpApplicationLayerDbContext>()
                .Database
                .MigrateAsync();
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\Products\ProductConsts.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public static class ProductConsts
        {
            private const string DefaultSorting = "{0}CreationTime desc";
    
            public static string GetDefaultSorting(bool withEntityName)
            {
                return string.Format(DefaultSorting, withEntityName ? "Product." : string.Empty);
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\OrderItems\OrderItemConsts.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public static class OrderItemConsts
        {
            private const string DefaultSorting = "{0}CreationTime desc";
    
            public static string GetDefaultSorting(bool withEntityName)
            {
                return string.Format(DefaultSorting, withEntityName ? "OrderItem." : string.Empty);
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\Orders\OrderConsts.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Orders
    {
        public static class OrderConsts
        {
            private const string DefaultSorting = "{0}CreationTime desc";
    
            public static string GetDefaultSorting(bool withEntityName)
            {
                return string.Format(DefaultSorting, withEntityName ? "Order." : string.Empty);
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\Localization\ExampleAbpApplicationLayerResource.cs"><![CDATA[
    ﻿using Volo.Abp.Localization;
    
    namespace ExampleAbpApplicationLayer.Localization;
    
    [LocalizationResourceName("ExampleAbpApplicationLayer")]
    public class ExampleAbpApplicationLayerResource
    {
    
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\MultiTenancy\MultiTenancyConsts.cs"><![CDATA[
    ﻿namespace ExampleAbpApplicationLayer.MultiTenancy;
    
    public static class MultiTenancyConsts
    {
        /* Enable/disable multi-tenancy easily in a single point.
         * If you will never need to multi-tenancy, you can remove
         * related modules and code parts, including this file.
         */
        public const bool IsEnabled = true;
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Settings\ExampleAbpApplicationLayerSettings.cs"><![CDATA[
    ﻿namespace ExampleAbpApplicationLayer.Settings;
    
    public static class ExampleAbpApplicationLayerSettings
    {
        private const string Prefix = "ExampleAbpApplicationLayer";
    
        //Add your own setting names here. Example:
        //public const string MySetting1 = Prefix + ".MySetting1";
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Settings\ExampleAbpApplicationLayerSettingDefinitionProvider.cs"><![CDATA[
    ﻿using Volo.Abp.Settings;
    
    namespace ExampleAbpApplicationLayer.Settings;
    
    public class ExampleAbpApplicationLayerSettingDefinitionProvider : SettingDefinitionProvider
    {
        public override void Define(ISettingDefinitionContext context)
        {
            //Define your own settings here. Example:
            //context.Add(new SettingDefinition(ExampleAbpApplicationLayerSettings.MySetting1));
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Properties\AssemblyInfo.cs"><![CDATA[
    ﻿using System.Runtime.CompilerServices;
    [assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.Domain.Tests")]
    [assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.TestBase")]
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\OrderManager.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using Volo.Abp.Domain.Services;
    using Volo.Abp.Domain.Repositories;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrderManager : OrderManagerBase
        {
            //<suite-custom-code-autogenerated>
            public OrderManager(IOrderRepository orderRepository)
                : base(orderRepository)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\OrderManager.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using JetBrains.Annotations;
    using Volo.Abp;
    using Volo.Abp.Domain.Repositories;
    using Volo.Abp.Domain.Services;
    using Volo.Abp.Data;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderManagerBase : DomainService
        {
            protected IOrderRepository _orderRepository;
    
            public OrderManagerBase(IOrderRepository orderRepository)
            {
                _orderRepository = orderRepository;
            }
    
            public virtual async Task<Order> CreateAsync(
            DateTime orderDate, float totalAmount, OrderStatus status)
            {
                Check.NotNull(orderDate, nameof(orderDate));
                Check.NotNull(status, nameof(status));
    
                var order = new Order(
                 GuidGenerator.Create(),
                 orderDate, totalAmount, status
                 );
    
                return await _orderRepository.InsertAsync(order);
            }
    
            public virtual async Task<Order> UpdateAsync(
                Guid id,
                DateTime orderDate, float totalAmount, OrderStatus status, [CanBeNull] string? concurrencyStamp = null
            )
            {
                Check.NotNull(orderDate, nameof(orderDate));
                Check.NotNull(status, nameof(status));
    
                var order = await _orderRepository.GetAsync(id);
    
                order.OrderDate = orderDate;
                order.TotalAmount = totalAmount;
                order.Status = status;
    
                order.SetConcurrencyStampIfNotNull(concurrencyStamp);
                return await _orderRepository.UpdateAsync(order);
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\OrderDeletedEventHandler.cs"><![CDATA[
    using ExampleAbpApplicationLayer.OrderItems;
    
    using System.Threading.Tasks;
    using Volo.Abp;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Domain.Entities.Events;
    using Volo.Abp.EventBus;
    
    namespace ExampleAbpApplicationLayer.Orders;
    
    public class OrderDeletedEventHandler : ILocalEventHandler<EntityDeletedEventData<Order>>, ITransientDependency
    {
        private readonly IOrderItemRepository _orderItemRepository;
    
        public OrderDeletedEventHandler(IOrderItemRepository orderItemRepository)
        {
            _orderItemRepository = orderItemRepository;
    
        }
    
        public async Task HandleEventAsync(EntityDeletedEventData<Order> eventData)
        {
            if (eventData.Entity is not ISoftDelete softDeletedEntity)
            {
                return;
            }
    
            if (!softDeletedEntity.IsDeleted)
            {
                return;
            }
    
            try
            {
                await _orderItemRepository.DeleteManyAsync(await _orderItemRepository.GetListByOrderIdAsync(eventData.Entity.Id));
    
            }
            catch
            {
                //...
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\Order.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Volo.Abp.Domain.Entities;
    using Volo.Abp.Domain.Entities.Auditing;
    using Volo.Abp.MultiTenancy;
    using JetBrains.Annotations;
    
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class Order : OrderBase
        {
            //<suite-custom-code-autogenerated>
            protected Order()
            {
    
            }
    
            public Order(Guid id, DateTime orderDate, float totalAmount, OrderStatus status)
                : base(id, orderDate, totalAmount, status)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\Order.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Volo.Abp.Domain.Entities;
    using Volo.Abp.Domain.Entities.Auditing;
    using Volo.Abp.MultiTenancy;
    using JetBrains.Annotations;
    
    using ExampleAbpApplicationLayer.OrderItems;
    
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderBase : FullAuditedAggregateRoot<Guid>, IMultiTenant
        {
            public virtual Guid? TenantId { get; set; }
    
            public virtual DateTime OrderDate { get; set; }
    
            public virtual float TotalAmount { get; set; }
    
            public virtual OrderStatus Status { get; set; }
    
            public ICollection<OrderItem> OrderItems { get; private set; }
    
            protected OrderBase()
            {
    
            }
    
            public OrderBase(Guid id, DateTime orderDate, float totalAmount, OrderStatus status)
            {
    
                Id = id;
                OrderDate = orderDate;
                TotalAmount = totalAmount;
                Status = status;
                OrderItems = new Collection<OrderItem>();
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\IOrderRepository.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Orders
    {
        public partial interface IOrderRepository
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Orders\IOrderRepository.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Volo.Abp.Domain.Repositories;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public partial interface IOrderRepository : IRepository<Order, Guid>
        {
            Task<List<Order>> GetListAsync(
                string? filterText = null,
                DateTime? orderDateMin = null,
                DateTime? orderDateMax = null,
                float? totalAmountMin = null,
                float? totalAmountMax = null,
                OrderStatus? status = null,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default
            );
    
            Task<long> GetCountAsync(
                string? filterText = null,
                DateTime? orderDateMin = null,
                DateTime? orderDateMax = null,
                float? totalAmountMin = null,
                float? totalAmountMax = null,
                OrderStatus? status = null,
                CancellationToken cancellationToken = default);
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Saas\SaasDataSeedContributor.cs"><![CDATA[
    ﻿using System.Threading.Tasks;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.MultiTenancy;
    using Volo.Abp.Uow;
    using Volo.Saas.Editions;
    
    namespace ExampleAbpApplicationLayer.Saas;
    
    public class SaasDataSeedContributor : IDataSeedContributor, ITransientDependency
    {
        private readonly IEditionDataSeeder _editionDataSeeder;
        private readonly ICurrentTenant _currentTenant;
    
        public SaasDataSeedContributor(IEditionDataSeeder editionDataSeeder, ICurrentTenant currentTenant)
        {
            _editionDataSeeder = editionDataSeeder;
            _currentTenant = currentTenant;
        }
    
        [UnitOfWork]
        public virtual async Task SeedAsync(DataSeedContext context)
        {
            using (_currentTenant.Change(context?.TenantId))
            {
                await _editionDataSeeder.CreateStandardEditionsAsync();
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Products\ProductManager.Extended.cs"><![CDATA[
    using System;
    using Volo.Abp.Domain.Services;
    using Volo.Abp.Domain.Repositories;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductManager : ProductManagerBase
        {
            //<suite-custom-code-autogenerated>
            public ProductManager(IProductRepository productRepository)
                : base(productRepository)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Products\ProductManager.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using JetBrains.Annotations;
    using Volo.Abp;
    using Volo.Abp.Domain.Repositories;
    using Volo.Abp.Domain.Services;
    using Volo.Abp.Data;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductManagerBase : DomainService
        {
            protected IProductRepository _productRepository;
    
            public ProductManagerBase(IProductRepository productRepository)
            {
                _productRepository = productRepository;
            }
    
            public virtual async Task<Product> CreateAsync(
            string name, float price, bool isActive, string? desc = null)
            {
                Check.NotNullOrWhiteSpace(name, nameof(name));
    
                var product = new Product(
                 GuidGenerator.Create(),
                 name, price, isActive, desc
                 );
    
                return await _productRepository.InsertAsync(product);
            }
    
            public virtual async Task<Product> UpdateAsync(
                Guid id,
                string name, float price, bool isActive, string? desc = null, [CanBeNull] string? concurrencyStamp = null
            )
            {
                Check.NotNullOrWhiteSpace(name, nameof(name));
    
                var product = await _productRepository.GetAsync(id);
    
                product.Name = name;
                product.Price = price;
                product.IsActive = isActive;
                product.Desc = desc;
    
                product.SetConcurrencyStampIfNotNull(concurrencyStamp);
                return await _productRepository.UpdateAsync(product);
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Products\Product.Extended.cs"><![CDATA[
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Volo.Abp.Domain.Entities;
    using Volo.Abp.Domain.Entities.Auditing;
    using Volo.Abp.MultiTenancy;
    using JetBrains.Annotations;
    
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public class Product : ProductBase
        {
            //<suite-custom-code-autogenerated>
            protected Product()
            {
    
            }
    
            public Product(Guid id, string name, float price, bool isActive, string? desc = null)
                : base(id, name, price, isActive, desc)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Products\Product.cs"><![CDATA[
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Volo.Abp.Domain.Entities;
    using Volo.Abp.Domain.Entities.Auditing;
    using Volo.Abp.MultiTenancy;
    using JetBrains.Annotations;
    
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductBase : FullAuditedAggregateRoot<Guid>, IMultiTenant
        {
            public virtual Guid? TenantId { get; set; }
    
            [NotNull]
            public virtual string Name { get; set; }
    
            [CanBeNull]
            public virtual string? Desc { get; set; }
    
            public virtual float Price { get; set; }
    
            public virtual bool IsActive { get; set; }
    
            protected ProductBase()
            {
    
            }
    
            public ProductBase(Guid id, string name, float price, bool isActive, string? desc = null)
            {
    
                Id = id;
                Check.NotNull(name, nameof(name));
                Name = name;
                Price = price;
                IsActive = isActive;
                Desc = desc;
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Products\IProductRepository.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public partial interface IProductRepository
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Products\IProductRepository.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Volo.Abp.Domain.Repositories;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public partial interface IProductRepository : IRepository<Product, Guid>
        {
    
            Task DeleteAllAsync(
                string? filterText = null,
                string? name = null,
                float? priceMin = null,
                float? priceMax = null,
                bool? isActive = null,
                CancellationToken cancellationToken = default);
            Task<List<Product>> GetListAsync(
                        string? filterText = null,
                        string? name = null,
                        float? priceMin = null,
                        float? priceMax = null,
                        bool? isActive = null,
                        string? sorting = null,
                        int maxResultCount = int.MaxValue,
                        int skipCount = 0,
                        CancellationToken cancellationToken = default
                    );
    
            Task<long> GetCountAsync(
                string? filterText = null,
                string? name = null,
                float? priceMin = null,
                float? priceMax = null,
                bool? isActive = null,
                CancellationToken cancellationToken = default);
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OpenIddict\OpenIddictDataSeedContributor.cs"><![CDATA[
    ﻿using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text.Json;
    using System.Threading.Tasks;
    using JetBrains.Annotations;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Localization;
    using OpenIddict.Abstractions;
    using Volo.Abp;
    using Volo.Abp.Authorization.Permissions;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.OpenIddict.Applications;
    using Volo.Abp.OpenIddict.Scopes;
    using Volo.Abp.PermissionManagement;
    using Volo.Abp.Uow;
    
    namespace ExampleAbpApplicationLayer.OpenIddict;
    
    /* Creates initial data that is needed to property run the application
     * and make client-to-server communication possible.
     */
    public class OpenIddictDataSeedContributor : IDataSeedContributor, ITransientDependency
    {
        private readonly IConfiguration _configuration;
        private readonly IOpenIddictApplicationRepository _openIddictApplicationRepository;
        private readonly IAbpApplicationManager _applicationManager;
        private readonly IOpenIddictScopeRepository _openIddictScopeRepository;
        private readonly IOpenIddictScopeManager _scopeManager;
        private readonly IPermissionDataSeeder _permissionDataSeeder;
        private readonly IStringLocalizer<OpenIddictResponse> L;
    
        public OpenIddictDataSeedContributor(
            IConfiguration configuration,
            IOpenIddictApplicationRepository openIddictApplicationRepository,
            IAbpApplicationManager applicationManager,
            IOpenIddictScopeRepository openIddictScopeRepository,
            IOpenIddictScopeManager scopeManager,
            IPermissionDataSeeder permissionDataSeeder,
            IStringLocalizer<OpenIddictResponse> l)
        {
            _configuration = configuration;
            _openIddictApplicationRepository = openIddictApplicationRepository;
            _applicationManager = applicationManager;
            _openIddictScopeRepository = openIddictScopeRepository;
            _scopeManager = scopeManager;
            _permissionDataSeeder = permissionDataSeeder;
            L = l;
        }
    
        [UnitOfWork]
        public virtual async Task SeedAsync(DataSeedContext context)
        {
            await CreateScopesAsync();
            await CreateApplicationsAsync();
        }
    
        private async Task CreateScopesAsync()
        {
            if (await _openIddictScopeRepository.FindByNameAsync("ExampleAbpApplicationLayer") == null)
            {
                await _scopeManager.CreateAsync(new OpenIddictScopeDescriptor {
                    Name = "ExampleAbpApplicationLayer", DisplayName = "ExampleAbpApplicationLayer API", Resources = { "ExampleAbpApplicationLayer" }
                });
            }
        }
    
        private async Task CreateApplicationsAsync()
        {
            var commonScopes = new List<string> {
                OpenIddictConstants.Permissions.Scopes.Address,
                OpenIddictConstants.Permissions.Scopes.Email,
                OpenIddictConstants.Permissions.Scopes.Phone,
                OpenIddictConstants.Permissions.Scopes.Profile,
                OpenIddictConstants.Permissions.Scopes.Roles,
                "ExampleAbpApplicationLayer"
            };
    
            var configurationSection = _configuration.GetSection("OpenIddict:Applications");
    
    
            //Console Test / Angular Client
            var consoleAndAngularClientId = configurationSection["ExampleAbpApplicationLayer_App:ClientId"];
            if (!consoleAndAngularClientId.IsNullOrWhiteSpace())
            {
                var consoleAndAngularClientRootUrl = configurationSection["ExampleAbpApplicationLayer_App:RootUrl"]?.TrimEnd('/');
                await CreateApplicationAsync(
                    applicationType: OpenIddictConstants.ApplicationTypes.Web,
                    name: consoleAndAngularClientId!,
                    type: OpenIddictConstants.ClientTypes.Public,
                    consentType: OpenIddictConstants.ConsentTypes.Implicit,
                    displayName: "Console Test / Angular Application",
                    secret: null,
                    grantTypes: new List<string> {
                        OpenIddictConstants.GrantTypes.AuthorizationCode,
                        OpenIddictConstants.GrantTypes.Password,
                        OpenIddictConstants.GrantTypes.ClientCredentials,
                        OpenIddictConstants.GrantTypes.RefreshToken,
                        "LinkLogin",
                        "Impersonation"
                    },
                    scopes: commonScopes,
                    redirectUris: new List<string> { consoleAndAngularClientRootUrl },
                    postLogoutRedirectUris: new List<string> { consoleAndAngularClientRootUrl },
                    clientUri: consoleAndAngularClientRootUrl,
                    logoUri: "/images/clients/angular.svg"
                );
            }
    
            
            
    
    
    
    
            // Swagger Client
            var swaggerClientId = configurationSection["ExampleAbpApplicationLayer_Swagger:ClientId"];
            if (!swaggerClientId.IsNullOrWhiteSpace())
            {
                var swaggerRootUrl = configurationSection["ExampleAbpApplicationLayer_Swagger:RootUrl"]?.TrimEnd('/');
    
                await CreateApplicationAsync(
                    applicationType: OpenIddictConstants.ApplicationTypes.Web,
                    name: swaggerClientId!,
                    type: OpenIddictConstants.ClientTypes.Public,
                    consentType: OpenIddictConstants.ConsentTypes.Implicit,
                    displayName: "Swagger Application",
                    secret: null,
                    grantTypes: new List<string> { OpenIddictConstants.GrantTypes.AuthorizationCode, },
                    scopes: commonScopes,
                    redirectUris: new List<string> { $"{swaggerRootUrl}/swagger/oauth2-redirect.html" },
                    clientUri: swaggerRootUrl.EnsureEndsWith('/') + "swagger",
                    logoUri: "/images/clients/swagger.svg"
                );
            }
    
    
        }
    
        private async Task CreateApplicationAsync(
            [NotNull] string applicationType,
            [NotNull] string name,
            [NotNull] string type,
            [NotNull] string consentType,
            string displayName,
            string? secret,
            List<string> grantTypes,
            List<string> scopes,
            List<string>? redirectUris = null,
            List<string>? postLogoutRedirectUris = null,
            List<string>? permissions = null,
            string? clientUri = null,
            string? logoUri = null)
        {
            if (!string.IsNullOrEmpty(secret) && string.Equals(type, OpenIddictConstants.ClientTypes.Public,
                    StringComparison.OrdinalIgnoreCase))
            {
                throw new BusinessException(L["NoClientSecretCanBeSetForPublicApplications"]);
            }
    
            if (string.IsNullOrEmpty(secret) && string.Equals(type, OpenIddictConstants.ClientTypes.Confidential,
                    StringComparison.OrdinalIgnoreCase))
            {
                throw new BusinessException(L["TheClientSecretIsRequiredForConfidentialApplications"]);
            }
    
            var client = await _openIddictApplicationRepository.FindByClientIdAsync(name);
    
            var application = new AbpApplicationDescriptor {
                ApplicationType = applicationType,
                ClientId = name,
                ClientType = type,
                ClientSecret = secret,
                ConsentType = consentType,
                DisplayName = displayName,
                ClientUri = clientUri,
                LogoUri = logoUri,
            };
    
            Check.NotNullOrEmpty(grantTypes, nameof(grantTypes));
            Check.NotNullOrEmpty(scopes, nameof(scopes));
    
            if (new[] { OpenIddictConstants.GrantTypes.AuthorizationCode, OpenIddictConstants.GrantTypes.Implicit }.All(
                    grantTypes.Contains))
            {
                application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeIdToken);
    
                if (string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeIdTokenToken);
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeToken);
                }
            }
    
            if (!redirectUris.IsNullOrEmpty() || !postLogoutRedirectUris.IsNullOrEmpty())
            {
                application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.EndSession);
            }
    
            var buildInGrantTypes = new[] {
                OpenIddictConstants.GrantTypes.Implicit, OpenIddictConstants.GrantTypes.Password,
                OpenIddictConstants.GrantTypes.AuthorizationCode, OpenIddictConstants.GrantTypes.ClientCredentials,
                OpenIddictConstants.GrantTypes.DeviceCode, OpenIddictConstants.GrantTypes.RefreshToken
            };
    
            foreach (var grantType in grantTypes)
            {
                if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode);
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.Code);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode ||
                    grantType == OpenIddictConstants.GrantTypes.Implicit)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Authorization);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode ||
                    grantType == OpenIddictConstants.GrantTypes.ClientCredentials ||
                    grantType == OpenIddictConstants.GrantTypes.Password ||
                    grantType == OpenIddictConstants.GrantTypes.RefreshToken ||
                    grantType == OpenIddictConstants.GrantTypes.DeviceCode)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Token);
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Revocation);
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Introspection);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.ClientCredentials)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.ClientCredentials);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.Implicit)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.Implicit);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.Password)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.Password);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.RefreshToken)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.RefreshToken);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.DeviceCode)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.DeviceCode);
                    application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.DeviceAuthorization);
                }
    
                if (grantType == OpenIddictConstants.GrantTypes.Implicit)
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.IdToken);
                    if (string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
                    {
                        application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.IdTokenToken);
                        application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.Token);
                    }
                }
    
                if (!buildInGrantTypes.Contains(grantType))
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Prefixes.GrantType + grantType);
                }
            }
    
            var buildInScopes = new[] {
                OpenIddictConstants.Permissions.Scopes.Address, OpenIddictConstants.Permissions.Scopes.Email,
                OpenIddictConstants.Permissions.Scopes.Phone, OpenIddictConstants.Permissions.Scopes.Profile,
                OpenIddictConstants.Permissions.Scopes.Roles
            };
    
            foreach (var scope in scopes)
            {
                if (buildInScopes.Contains(scope))
                {
                    application.Permissions.Add(scope);
                }
                else
                {
                    application.Permissions.Add(OpenIddictConstants.Permissions.Prefixes.Scope + scope);
                }
            }
    
            if (!redirectUris.IsNullOrEmpty())
            {
                foreach (var redirectUri in redirectUris!.Where(redirectUri => !redirectUri.IsNullOrWhiteSpace()))
                {
                    if (!Uri.TryCreate(redirectUri, UriKind.Absolute, out var uri) || !uri.IsWellFormedOriginalString())
                    {
                        throw new BusinessException(L["InvalidRedirectUri", redirectUri]);
                    }
    
                    if (application.RedirectUris.All(x => x != uri))
                    {
                        application.RedirectUris.Add(uri);
                    }
                }
                
            }
            
            if (!postLogoutRedirectUris.IsNullOrEmpty())
            {
                foreach (var postLogoutRedirectUri in postLogoutRedirectUris!.Where(postLogoutRedirectUri => !postLogoutRedirectUri.IsNullOrWhiteSpace()))
                {
                    if (!Uri.TryCreate(postLogoutRedirectUri, UriKind.Absolute, out var uri) ||
                        !uri.IsWellFormedOriginalString())
                    {
                        throw new BusinessException(L["InvalidPostLogoutRedirectUri", postLogoutRedirectUri]);
                    }
    
                    if (application.PostLogoutRedirectUris.All(x => x != uri))
                    {
                        application.PostLogoutRedirectUris.Add(uri);
                    }
                }
            }
    
            if (permissions != null)
            {
                await _permissionDataSeeder.SeedAsync(
                    ClientPermissionValueProvider.ProviderName,
                    name,
                    permissions,
                    null
                );
            }
    
            if (client == null)
            {
                await _applicationManager.CreateAsync(application);
                return;
            }
    
            if (!HasSameRedirectUris(client, application))
            {
                client.RedirectUris = JsonSerializer.Serialize(application.RedirectUris.Select(q => q.ToString().RemovePostFix("/")));
                client.PostLogoutRedirectUris = JsonSerializer.Serialize(application.PostLogoutRedirectUris.Select(q => q.ToString().RemovePostFix("/")));
    
                await _applicationManager.UpdateAsync(client.ToModel());
            }
    
            if (!HasSameScopes(client, application))
            {
                client.Permissions = JsonSerializer.Serialize(application.Permissions.Select(q => q.ToString()));
                await _applicationManager.UpdateAsync(client.ToModel());
            }
        }
    
        private bool HasSameRedirectUris(OpenIddictApplication existingClient, AbpApplicationDescriptor application)
        {
            return existingClient.RedirectUris == JsonSerializer.Serialize(application.RedirectUris.Select(q => q.ToString().RemovePostFix("/")));
        }
    
        private bool HasSameScopes(OpenIddictApplication existingClient, AbpApplicationDescriptor application)
        {
            return existingClient.Permissions == JsonSerializer.Serialize(application.Permissions.Select(q => q.ToString().TrimEnd('/')));
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemWithNavigationProperties.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemWithNavigationProperties : OrderItemWithNavigationPropertiesBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemWithNavigationProperties.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    
    using System;
    using System.Collections.Generic;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemWithNavigationPropertiesBase
        {
            public OrderItem OrderItem { get; set; } = null!;
    
            public Product Product { get; set; } = null!;
            
    
            
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemManager.Extended.cs"><![CDATA[
    using System;
    using Volo.Abp.Domain.Services;
    using Volo.Abp.Domain.Repositories;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemManager : OrderItemManagerBase
        {
            //<suite-custom-code-autogenerated>
            public OrderItemManager(IOrderItemRepository orderItemRepository)
                : base(orderItemRepository)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemManager.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using JetBrains.Annotations;
    using Volo.Abp;
    using Volo.Abp.Domain.Repositories;
    using Volo.Abp.Domain.Services;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemManagerBase : DomainService
        {
            protected IOrderItemRepository _orderItemRepository;
    
            public OrderItemManagerBase(IOrderItemRepository orderItemRepository)
            {
                _orderItemRepository = orderItemRepository;
            }
    
            public virtual async Task<OrderItem> CreateAsync(
            Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null)
            {
                Check.NotNull(productId, nameof(productId));
    
                var orderItem = new OrderItem(
                 GuidGenerator.Create(),
                 orderId, productId, qty, price, totalPrice, productName
                 );
    
                return await _orderItemRepository.InsertAsync(orderItem);
            }
    
            public virtual async Task<OrderItem> UpdateAsync(
                Guid id,
                Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null
            )
            {
                Check.NotNull(productId, nameof(productId));
    
                var orderItem = await _orderItemRepository.GetAsync(id);
    
                orderItem.OrderId = orderId;
                orderItem.ProductId = productId;
                orderItem.Qty = qty;
                orderItem.Price = price;
                orderItem.TotalPrice = totalPrice;
                orderItem.ProductName = productName;
    
                return await _orderItemRepository.UpdateAsync(orderItem);
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItem.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Volo.Abp.Domain.Entities;
    using Volo.Abp.Domain.Entities.Auditing;
    using Volo.Abp.MultiTenancy;
    using JetBrains.Annotations;
    
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItem : OrderItemBase
        {
            //<suite-custom-code-autogenerated>
            protected OrderItem()
            {
    
            }
    
            public OrderItem(Guid id, Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null)
                : base(id, orderId, productId, qty, price, totalPrice, productName)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItem.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Volo.Abp.Domain.Entities;
    using Volo.Abp.Domain.Entities.Auditing;
    using Volo.Abp.MultiTenancy;
    using JetBrains.Annotations;
    
    using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemBase : FullAuditedEntity<Guid>, IMultiTenant
        {
            public virtual Guid OrderId { get; set; }
    
            public virtual Guid? TenantId { get; set; }
    
            public virtual int Qty { get; set; }
    
            public virtual float Price { get; set; }
    
            public virtual float TotalPrice { get; set; }
    
            [CanBeNull]
            public virtual string? ProductName { get; set; }
            public Guid ProductId { get; set; }
    
            protected OrderItemBase()
            {
    
            }
    
            public OrderItemBase(Guid id, Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null)
            {
    
                Id = id;
                OrderId = orderId;
                Qty = qty;
                Price = price;
                TotalPrice = totalPrice;
                ProductName = productName;
                ProductId = productId;
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\IOrderItemRepository.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public partial interface IOrderItemRepository
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\OrderItems\IOrderItemRepository.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Volo.Abp.Domain.Repositories;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public partial interface IOrderItemRepository : IRepository<OrderItem, Guid>
        {
            Task<List<OrderItem>> GetListByOrderIdAsync(
        Guid orderId,
        string? sorting = null,
        int maxResultCount = int.MaxValue,
        int skipCount = 0,
        CancellationToken cancellationToken = default
    );
    
            Task<long> GetCountByOrderIdAsync(Guid orderId, CancellationToken cancellationToken = default);
    
            Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesByOrderIdAsync(
                Guid orderId,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default
            );
    
            Task<OrderItemWithNavigationProperties> GetWithNavigationPropertiesAsync(
                Guid id,
                CancellationToken cancellationToken = default
            );
    
            Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
                string? filterText = null,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null,
                Guid? productId = null,
                string? sorting = null,
                int maxResultCount = int.MaxValue,
                int skipCount = 0,
                CancellationToken cancellationToken = default
            );
    
            Task<List<OrderItem>> GetListAsync(
                        string? filterText = null,
                        int? qtyMin = null,
                        int? qtyMax = null,
                        float? priceMin = null,
                        float? priceMax = null,
                        float? totalPriceMin = null,
                        float? totalPriceMax = null,
                        string? sorting = null,
                        int maxResultCount = int.MaxValue,
                        int skipCount = 0,
                        CancellationToken cancellationToken = default
                    );
    
            Task<long> GetCountAsync(
                string? filterText = null,
                int? qtyMin = null,
                int? qtyMax = null,
                float? priceMin = null,
                float? priceMax = null,
                float? totalPriceMin = null,
                float? totalPriceMax = null,
                Guid? productId = null,
                CancellationToken cancellationToken = default);
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Identity\ChangeIdentityPasswordPolicySettingDefinitionProvider.cs"><![CDATA[
    using Volo.Abp.Identity.Settings;
    using Volo.Abp.Settings;
    
    namespace ExampleAbpApplicationLayer.Identity;
    
    public class ChangeIdentityPasswordPolicySettingDefinitionProvider : SettingDefinitionProvider
    {
        public override void Define(ISettingDefinitionContext context)
        {
            var requireNonAlphanumeric = context.GetOrNull(IdentitySettingNames.Password.RequireNonAlphanumeric);
            if (requireNonAlphanumeric != null)
            {
                requireNonAlphanumeric.DefaultValue = false.ToString();
            }
    
            var requireLowercase = context.GetOrNull(IdentitySettingNames.Password.RequireLowercase);
            if (requireLowercase != null)
            {
                requireLowercase.DefaultValue = false.ToString();
            }
    
            var requireUppercase = context.GetOrNull(IdentitySettingNames.Password.RequireUppercase);
            if (requireUppercase != null)
            {
                requireUppercase.DefaultValue = false.ToString();
            }
    
            var requireDigit = context.GetOrNull(IdentitySettingNames.Password.RequireDigit);
            if (requireDigit != null)
            {
                requireDigit.DefaultValue = false.ToString();
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Features\ChatServiceFeatureProvider.cs"><![CDATA[
    ﻿using Volo.Abp.Features;
    using Volo.Chat;
    using System.Linq;
    
    namespace ExampleAbpApplicationLayer.ChatService.Features;
    
    public class ChatServiceFeatureProvider : FeatureDefinitionProvider 
    {
        public override void Define(IFeatureDefinitionContext context)
        {
            context
                .GetGroupOrNull(ChatFeatures.GroupName)!
                .Features
                .FirstOrDefault(f => f.Name == ChatFeatures.Enable)!
                .DefaultValue = "true";
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Data\NullExampleAbpApplicationLayerDbSchemaMigrator.cs"><![CDATA[
    ﻿using System.Threading.Tasks;
    using Volo.Abp.DependencyInjection;
    
    namespace ExampleAbpApplicationLayer.Data;
    
    /* This is used if database provider does't define
     * IExampleAbpApplicationLayerDbSchemaMigrator implementation.
     */
    public class NullExampleAbpApplicationLayerDbSchemaMigrator : IExampleAbpApplicationLayerDbSchemaMigrator, ITransientDependency
    {
        public Task MigrateAsync()
        {
            return Task.CompletedTask;
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Data\IExampleAbpApplicationLayerDbSchemaMigrator.cs"><![CDATA[
    ﻿using System.Threading.Tasks;
    
    namespace ExampleAbpApplicationLayer.Data;
    
    public interface IExampleAbpApplicationLayerDbSchemaMigrator
    {
        Task MigrateAsync();
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Data\ExampleAbpApplicationLayerTenantDatabaseMigrationHandler.cs"><![CDATA[
    ﻿using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Logging;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.EventBus.Distributed;
    using Volo.Abp.Identity;
    using Volo.Abp.MultiTenancy;
    using Volo.Abp.Uow;
    
    namespace ExampleAbpApplicationLayer.Data;
    
    public class ExampleAbpApplicationLayerTenantDatabaseMigrationHandler :
        IDistributedEventHandler<TenantCreatedEto>,
        IDistributedEventHandler<TenantConnectionStringUpdatedEto>,
        IDistributedEventHandler<ApplyDatabaseMigrationsEto>,
        ITransientDependency
    {
        private readonly IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> _dbSchemaMigrators;
        private readonly ICurrentTenant _currentTenant;
        private readonly IUnitOfWorkManager _unitOfWorkManager;
        private readonly IDataSeeder _dataSeeder;
        private readonly ITenantStore _tenantStore;
        private readonly ILogger<ExampleAbpApplicationLayerTenantDatabaseMigrationHandler> _logger;
    
        public ExampleAbpApplicationLayerTenantDatabaseMigrationHandler(
            IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> dbSchemaMigrators,
            ICurrentTenant currentTenant,
            IUnitOfWorkManager unitOfWorkManager,
            IDataSeeder dataSeeder,
            ITenantStore tenantStore,
            ILogger<ExampleAbpApplicationLayerTenantDatabaseMigrationHandler> logger)
        {
            _dbSchemaMigrators = dbSchemaMigrators;
            _currentTenant = currentTenant;
            _unitOfWorkManager = unitOfWorkManager;
            _dataSeeder = dataSeeder;
            _tenantStore = tenantStore;
            _logger = logger;
        }
    
        public async Task HandleEventAsync(TenantCreatedEto eventData)
        {
            await MigrateAndSeedForTenantAsync(
                eventData.Id,
                eventData.Properties.GetOrDefault("AdminEmail") ?? ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue,
                eventData.Properties.GetOrDefault("AdminPassword") ?? ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue
            );
        }
    
        public async Task HandleEventAsync(TenantConnectionStringUpdatedEto eventData)
        {
            if (eventData.ConnectionStringName != ConnectionStrings.DefaultConnectionStringName ||
                eventData.NewValue.IsNullOrWhiteSpace())
            {
                return;
            }
    
            await MigrateAndSeedForTenantAsync(
                eventData.Id,
                ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue,
                ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue
            );
    
            /* You may want to move your data from the old database to the new database!
             * It is up to you. If you don't make it, new database will be empty
             * (and tenant's admin password is reset to 1q2w3E*).
             */
        }
    
        public async Task HandleEventAsync(ApplyDatabaseMigrationsEto eventData)
        {
            if (eventData.TenantId == null)
            {
                return;
            }
    
            await MigrateAndSeedForTenantAsync(
                eventData.TenantId.Value,
                ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue,
                ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue
            );
        }
    
        private async Task MigrateAndSeedForTenantAsync(
            Guid tenantId,
            string adminEmail,
            string adminPassword)
        {
            try
            {
                using (_currentTenant.Change(tenantId))
                {
                    // Create database tables if needed
                    using (var uow = _unitOfWorkManager.Begin(requiresNew: true, isTransactional: false))
                    {
                        var tenantConfiguration = await _tenantStore.FindAsync(tenantId);
                        if (tenantConfiguration?.ConnectionStrings != null &&
                            !tenantConfiguration.ConnectionStrings.Default.IsNullOrWhiteSpace())
                        {
                            foreach (var migrator in _dbSchemaMigrators)
                            {
                                await migrator.MigrateAsync();
                            }
                        }
    
                        await uow.CompleteAsync();
                    }
    
                    // Seed data
                    using (var uow = _unitOfWorkManager.Begin(requiresNew: true, isTransactional: true))
                    {
                        await _dataSeeder.SeedAsync(
                            new DataSeedContext(tenantId)
                                .WithProperty(IdentityDataSeedContributor.AdminEmailPropertyName, adminEmail)
                                .WithProperty(IdentityDataSeedContributor.AdminPasswordPropertyName, adminPassword)
                        );
    
                        await uow.CompleteAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogException(ex);
            }
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain\Data\ExampleAbpApplicationLayerDbMigrationService.cs"><![CDATA[
    ﻿using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Logging.Abstractions;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Identity;
    using Volo.Abp.MultiTenancy;
    using ExampleAbpApplicationLayer.MultiTenancy;
    using Volo.Saas.Tenants;
    
    namespace ExampleAbpApplicationLayer.Data;
    
    public class ExampleAbpApplicationLayerDbMigrationService : ITransientDependency
    {
        public ILogger<ExampleAbpApplicationLayerDbMigrationService> Logger { get; set; }
    
        private readonly IDataSeeder _dataSeeder;
        private readonly IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> _dbSchemaMigrators;
        private readonly ITenantRepository _tenantRepository;
        private readonly ICurrentTenant _currentTenant;
    
        public ExampleAbpApplicationLayerDbMigrationService(
            IDataSeeder dataSeeder,
            ITenantRepository tenantRepository,
            ICurrentTenant currentTenant,
            IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> dbSchemaMigrators)
        {
            _dataSeeder = dataSeeder;
            _tenantRepository = tenantRepository;
            _currentTenant = currentTenant;
            _dbSchemaMigrators = dbSchemaMigrators;
    
            Logger = NullLogger<ExampleAbpApplicationLayerDbMigrationService>.Instance;
        }
    
        public async Task MigrateAsync()
        {
            var initialMigrationAdded = AddInitialMigrationIfNotExist();
    
            if (initialMigrationAdded)
            {
                return;
            }
    
            Logger.LogInformation("Started database migrations...");
    
            await MigrateDatabaseSchemaAsync();
            await SeedDataAsync();
    
            Logger.LogInformation($"Successfully completed host database migrations.");
    
            if (MultiTenancyConsts.IsEnabled)
            {
                
                var tenants = await _tenantRepository.GetListAsync(includeDetails: true);
    
                var migratedDatabaseSchemas = new HashSet<string>();
                foreach (var tenant in tenants)
                {
                    using (_currentTenant.Change(tenant.Id))
                    {
                        if (tenant.ConnectionStrings.Any())
                        {
                            var tenantConnectionStrings = tenant.ConnectionStrings
                                .Select(x => x.Value)
                                .ToList();
    
                            if (!migratedDatabaseSchemas.IsSupersetOf(tenantConnectionStrings))
                            {
                                await MigrateDatabaseSchemaAsync(tenant);
    
                                migratedDatabaseSchemas.AddIfNotContains(tenantConnectionStrings);
                            }
                        }
    
                        await SeedDataAsync(tenant);
                    }
    
                    Logger.LogInformation($"Successfully completed {tenant.Name} tenant database migrations.");
                }
    
                Logger.LogInformation("Successfully completed all database migrations.");
            }
            Logger.LogInformation("You can safely end this process...");
        }
    
        private async Task MigrateDatabaseSchemaAsync(Tenant? tenant = null)
        {
            Logger.LogInformation(
                $"Migrating schema for {(tenant == null ? "host" : tenant.Name + " tenant")} database...");
            
            foreach (var migrator in _dbSchemaMigrators)
            {
                await migrator.MigrateAsync();
            }
        }
    
        private async Task SeedDataAsync(Tenant? tenant = null)
        {
            Logger.LogInformation($"Executing {(tenant == null ? "host" : tenant.Name + " tenant")} database seed...");
            
            await _dataSeeder.SeedAsync(new DataSeedContext(tenant?.Id)
                .WithProperty(IdentityDataSeedContributor.AdminEmailPropertyName,
                    ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue)
                .WithProperty(IdentityDataSeedContributor.AdminPasswordPropertyName,
                    ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue)
            );
        }
    
        private bool AddInitialMigrationIfNotExist()
        {
            try
            {
                if (!DbMigrationsProjectExists())
                {
                    return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
    
            try
            {
                if (!MigrationsFolderExists())
                {
                    AddInitialMigration();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                Logger.LogWarning("Couldn't determinate if any migrations exist : " + e.Message);
                return false;
            }
        }
    
        private bool DbMigrationsProjectExists()
        {
            var dbMigrationsProjectFolder = GetEntityFrameworkCoreProjectFolderPath();
    
            return dbMigrationsProjectFolder != null;
        }
    
        private bool MigrationsFolderExists()
        {
            var dbMigrationsProjectFolder = GetEntityFrameworkCoreProjectFolderPath();
    
            return dbMigrationsProjectFolder != null && Directory.Exists(Path.Combine(dbMigrationsProjectFolder, "Migrations"));
        }
    
        private void AddInitialMigration()
        {
            Logger.LogInformation("Creating initial migration...");
    
            string argumentPrefix;
            string fileName;
    
            if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            {
                argumentPrefix = "-c";
                fileName = "/bin/bash";
            }
            else
            {
                argumentPrefix = "/C";
                fileName = "cmd.exe";
            }
    
            var procStartInfo = new ProcessStartInfo(fileName,
                $"{argumentPrefix} \"abp create-migration-and-run-migrator \"{GetEntityFrameworkCoreProjectFolderPath()}\"\""
            );
    
            try
            {
                Process.Start(procStartInfo);
            }
            catch (Exception)
            {
                throw new Exception("Couldn't run ABP CLI...");
            }
        }
    
        private string? GetEntityFrameworkCoreProjectFolderPath()
        {
            var slnDirectoryPath = GetSolutionDirectoryPath();
    
            if (slnDirectoryPath == null)
            {
                throw new Exception("Solution folder not found!");
            }
    
            var srcDirectoryPath = Path.Combine(slnDirectoryPath, "src");
    
            return Directory.GetDirectories(srcDirectoryPath)
                .FirstOrDefault(d => d.EndsWith(".EntityFrameworkCore"));
        }
    
        private string? GetSolutionDirectoryPath()
        {
            var currentDirectory = new DirectoryInfo(Directory.GetCurrentDirectory());
    
            while (currentDirectory != null && Directory.GetParent(currentDirectory.FullName) != null)
            {
                currentDirectory = Directory.GetParent(currentDirectory.FullName);
    
                if (currentDirectory != null && Directory.GetFiles(currentDirectory.FullName).FirstOrDefault(f => f.EndsWith(".sln")) != null)
                {
                    return currentDirectory.FullName;
                }
            }
    
            return null;
        }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupRequestDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Shared
    {
        public class LookupRequestDto : LookupRequestDtoBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupRequestDto.cs"><![CDATA[
    using Volo.Abp.Application.Dtos;
    
    namespace ExampleAbpApplicationLayer.Shared
    {
        public abstract class LookupRequestDtoBase : PagedResultRequestDto
        {
            public string? Filter { get; set; }
    
            public LookupRequestDtoBase()
            {
                MaxResultCount = MaxMaxResultCount;
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Shared
    {
        public class LookupDto<TKey> : LookupDtoBase<TKey>
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupDto.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Shared
    {
        public abstract class LookupDtoBase<TKey>
        {
            public TKey Id { get; set; }
    
            public string DisplayName { get; set; } = null!;
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Shared\DownloadTokenResultDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Shared;
    
    public class DownloadTokenResultDto : DownloadTokenResultDtoBase
    {
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Shared\DownloadTokenResultDto.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Shared;
    
    public abstract class DownloadTokenResultDtoBase
    {
        public string Token { get; set; } = null!;
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductUpdateDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductUpdateDto : ProductUpdateDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductUpdateDto.cs"><![CDATA[
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    using Volo.Abp.Domain.Entities;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductUpdateDtoBase : IHasConcurrencyStamp
        {
            [Required]
            public string Name { get; set; } = null!;
            public string? Desc { get; set; }
            public float Price { get; set; }
            public bool IsActive { get; set; }
    
            public string ConcurrencyStamp { get; set; } = null!;
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductExcelDto : ProductExcelDtoBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDto.cs"><![CDATA[
    using System;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductExcelDtoBase
        {
            public string Name { get; set; } = null!;
            public float Price { get; set; }
            public bool IsActive { get; set; }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDownloadDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductExcelDownloadDto : ProductExcelDownloadDtoBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDownloadDto.cs"><![CDATA[
    using Volo.Abp.Application.Dtos;
    using System;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductExcelDownloadDtoBase
        {
            public string DownloadToken { get; set; } = null!;
    
            public string? FilterText { get; set; }
    
            public string? Name { get; set; }
            public float? PriceMin { get; set; }
            public float? PriceMax { get; set; }
            public bool? IsActive { get; set; }
    
            public ProductExcelDownloadDtoBase()
            {
    
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductDto : ProductDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductDto.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Domain.Entities;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductDtoBase : FullAuditedEntityDto<Guid>, IHasConcurrencyStamp
        {
            public string Name { get; set; } = null!;
            public string? Desc { get; set; }
            public float Price { get; set; }
            public bool IsActive { get; set; }
    
            public string ConcurrencyStamp { get; set; } = null!;
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductCreateDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductCreateDto : ProductCreateDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductCreateDto.cs"><![CDATA[
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductCreateDtoBase
        {
            [Required]
            public string Name { get; set; } = null!;
            public string? Desc { get; set; }
            public float Price { get; set; } = 0f;
            public bool IsActive { get; set; } = true;
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\IProductsAppService.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public partial interface IProductsAppService
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\IProductsAppService.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Content;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public partial interface IProductsAppService : IApplicationService
        {
    
            Task<PagedResultDto<ProductDto>> GetListAsync(GetProductsInput input);
    
            Task<ProductDto> GetAsync(Guid id);
    
            Task DeleteAsync(Guid id);
    
            Task<ProductDto> CreateAsync(ProductCreateDto input);
    
            Task<ProductDto> UpdateAsync(Guid id, ProductUpdateDto input);
    
            Task<IRemoteStreamContent> GetListAsExcelFileAsync(ProductExcelDownloadDto input);
            Task DeleteByIdsAsync(List<Guid> productIds);
    
            Task DeleteAllAsync(GetProductsInput input);
            Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync();
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\GetProductsInput.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Products
    {
        public class GetProductsInput : GetProductsInputBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Products\GetProductsInput.cs"><![CDATA[
    using Volo.Abp.Application.Dtos;
    using System;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class GetProductsInputBase : PagedAndSortedResultRequestDto
        {
            public string? FilterText { get; set; }
    
            public string? Name { get; set; }
            public float? PriceMin { get; set; }
            public float? PriceMax { get; set; }
            public bool? IsActive { get; set; }
    
            public GetProductsInputBase()
            {
    
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderUpdateDto.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrderUpdateDto : OrderUpdateDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderUpdateDto.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    using Volo.Abp.Domain.Entities;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderUpdateDtoBase : IHasConcurrencyStamp
        {
            public DateTime OrderDate { get; set; }
            public float TotalAmount { get; set; }
            public OrderStatus Status { get; set; }
    
            public string ConcurrencyStamp { get; set; } = null!;
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrderExcelDto : OrderExcelDtoBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDto.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderExcelDtoBase
        {
            public DateTime OrderDate { get; set; }
            public float TotalAmount { get; set; }
            public OrderStatus Status { get; set; }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDownloadDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrderExcelDownloadDto : OrderExcelDownloadDtoBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDownloadDto.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using Volo.Abp.Application.Dtos;
    using System;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderExcelDownloadDtoBase
        {
            public string DownloadToken { get; set; } = null!;
    
            public string? FilterText { get; set; }
    
            public DateTime? OrderDateMin { get; set; }
            public DateTime? OrderDateMax { get; set; }
            public float? TotalAmountMin { get; set; }
            public float? TotalAmountMax { get; set; }
            public OrderStatus? Status { get; set; }
    
            public OrderExcelDownloadDtoBase()
            {
    
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderDto.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrderDto : OrderDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderDto.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.Collections.Generic;
    using ExampleAbpApplicationLayer.OrderItems;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Domain.Entities;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderDtoBase : FullAuditedEntityDto<Guid>, IHasConcurrencyStamp
        {
            public DateTime OrderDate { get; set; }
            public float TotalAmount { get; set; }
            public OrderStatus Status { get; set; }
    
            public string ConcurrencyStamp { get; set; } = null!;
    
            public List<OrderItemWithNavigationPropertiesDto> OrderItems { get; set; } = new();
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderCreateDto.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrderCreateDto : OrderCreateDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderCreateDto.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrderCreateDtoBase
        {
            public DateTime OrderDate { get; set; }
            public float TotalAmount { get; set; } = 0f;
            public OrderStatus Status { get; set; } = ((OrderStatus[])Enum.GetValues(typeof(OrderStatus)))[0];
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\IOrdersAppService.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Orders
    {
        public partial interface IOrdersAppService
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\IOrdersAppService.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Content;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public partial interface IOrdersAppService : IApplicationService
        {
    
            Task<PagedResultDto<OrderDto>> GetListAsync(GetOrdersInput input);
    
            Task<OrderDto> GetAsync(Guid id);
    
            Task DeleteAsync(Guid id);
    
            Task<OrderDto> CreateAsync(OrderCreateDto input);
    
            Task<OrderDto> UpdateAsync(Guid id, OrderUpdateDto input);
    
            Task<IRemoteStreamContent> GetListAsExcelFileAsync(OrderExcelDownloadDto input);
    
            Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync();
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\GetOrdersInput.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class GetOrdersInput : GetOrdersInputBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Orders\GetOrdersInput.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Enums.Orders;
    using Volo.Abp.Application.Dtos;
    using System;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class GetOrdersInputBase : PagedAndSortedResultRequestDto
        {
            public string? FilterText { get; set; }
    
            public DateTime? OrderDateMin { get; set; }
            public DateTime? OrderDateMax { get; set; }
            public float? TotalAmountMin { get; set; }
            public float? TotalAmountMax { get; set; }
            public OrderStatus? Status { get; set; }
    
            public GetOrdersInputBase()
            {
    
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemWithNavigationPropertiesDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemWithNavigationPropertiesDto : OrderItemWithNavigationPropertiesDtoBase
        {
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemWithNavigationPropertiesDto.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    
    using System;
    using Volo.Abp.Application.Dtos;
    using System.Collections.Generic;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemWithNavigationPropertiesDtoBase
        {
            public OrderItemDto OrderItem { get; set; } = null!;
    
            public ProductDto Product { get; set; } = null!;
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemUpdateDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemUpdateDto : OrderItemUpdateDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemUpdateDto.cs"><![CDATA[
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemUpdateDtoBase
        {
            public Guid OrderId { get; set; }
            public int Qty { get; set; }
            public float Price { get; set; }
            public float TotalPrice { get; set; }
            public string? ProductName { get; set; }
            public Guid ProductId { get; set; }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemDto : OrderItemDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemDto.cs"><![CDATA[
    using System;
    using System.Collections.Generic;
    
    using Volo.Abp.Application.Dtos;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemDtoBase : FullAuditedEntityDto<Guid>
        {
            public Guid OrderId { get; set; }
            public int Qty { get; set; }
            public float Price { get; set; }
            public float TotalPrice { get; set; }
            public string? ProductName { get; set; }
            public Guid ProductId { get; set; }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemCreateDto.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemCreateDto : OrderItemCreateDtoBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemCreateDto.cs"><![CDATA[
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class OrderItemCreateDtoBase
        {
            public Guid OrderId { get; set; }
            public int Qty { get; set; } = 1;
            public float Price { get; set; } = 0f;
            public float TotalPrice { get; set; }
            public string? ProductName { get; set; }
            public Guid ProductId { get; set; }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\IOrderItemsAppService.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public partial interface IOrderItemsAppService
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\IOrderItemsAppService.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Shared;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public partial interface IOrderItemsAppService : IApplicationService
        {
    
            Task<PagedResultDto<OrderItemDto>> GetListByOrderIdAsync(GetOrderItemListInput input);
            Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListWithNavigationPropertiesByOrderIdAsync(GetOrderItemListInput input);
    
            Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListAsync(GetOrderItemsInput input);
    
            Task<OrderItemWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id);
    
            Task<OrderItemDto> GetAsync(Guid id);
    
            Task<PagedResultDto<LookupDto<Guid>>> GetProductLookupAsync(LookupRequestDto input);
    
            Task DeleteAsync(Guid id);
    
            Task<OrderItemDto> CreateAsync(OrderItemCreateDto input);
    
            Task<OrderItemDto> UpdateAsync(Guid id, OrderItemUpdateDto input);
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\GetOrderItemsInput.Extended.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class GetOrderItemsInput : GetOrderItemsInputBase
        {
            //Write your custom code here...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\GetOrderItemsInput.cs"><![CDATA[
    using Volo.Abp.Application.Dtos;
    using System;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public abstract class GetOrderItemsInputBase : PagedAndSortedResultRequestDto
        {
            public string? FilterText { get; set; }
    
            public int? QtyMin { get; set; }
            public int? QtyMax { get; set; }
            public float? PriceMin { get; set; }
            public float? PriceMax { get; set; }
            public float? TotalPriceMin { get; set; }
            public float? TotalPriceMax { get; set; }
            public Guid? ProductId { get; set; }
    
            public GetOrderItemsInputBase()
            {
    
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\GetOrderItemListInput.cs"><![CDATA[
    using Volo.Abp.Application.Dtos;
    using System;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class GetOrderItemListInput : PagedAndSortedResultRequestDto
        {
            public Guid OrderId { get; set; }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Permissions\ExampleAbpApplicationLayerPermissions.cs"><![CDATA[
    namespace ExampleAbpApplicationLayer.Permissions;
    
    public static class ExampleAbpApplicationLayerPermissions
    {
        public const string GroupName = "ExampleAbpApplicationLayer";
    
        public static class Dashboard
        {
            public const string DashboardGroup = GroupName + ".Dashboard";
            public const string Host = DashboardGroup + ".Host";
            public const string Tenant = DashboardGroup + ".Tenant";
        }
    
        //Add your own permission names. Example:
        //public const string MyPermission1 = GroupName + ".MyPermission1";
    
        public static class Products
        {
            public const string Default = GroupName + ".Products";
            public const string Edit = Default + ".Edit";
            public const string Create = Default + ".Create";
            public const string Delete = Default + ".Delete";
        }
    
        public static class Orders
        {
            public const string Default = GroupName + ".Orders";
            public const string Edit = Default + ".Edit";
            public const string Create = Default + ".Create";
            public const string Delete = Default + ".Delete";
        }
    
        public static class OrderItems
        {
            public const string Default = GroupName + ".OrderItems";
            public const string Edit = Default + ".Edit";
            public const string Create = Default + ".Create";
            public const string Delete = Default + ".Delete";
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application.Contracts\Permissions\ExampleAbpApplicationLayerPermissionDefinitionProvider.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Localization;
    using Volo.Abp.Authorization.Permissions;
    using Volo.Abp.Localization;
    using Volo.Abp.MultiTenancy;
    
    namespace ExampleAbpApplicationLayer.Permissions;
    
    public class ExampleAbpApplicationLayerPermissionDefinitionProvider : PermissionDefinitionProvider
    {
        public override void Define(IPermissionDefinitionContext context)
        {
            var myGroup = context.AddGroup(ExampleAbpApplicationLayerPermissions.GroupName);
    
            myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Dashboard.Host, L("Permission:Dashboard"), MultiTenancySides.Host);
            myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Dashboard.Tenant, L("Permission:Dashboard"), MultiTenancySides.Tenant);
    
            //Define your own permissions here. Example:
            //myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.MyPermission1, L("Permission:MyPermission1"));
    
            var productPermission = myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Products.Default, L("Permission:Products"));
            productPermission.AddChild(ExampleAbpApplicationLayerPermissions.Products.Create, L("Permission:Create"));
            productPermission.AddChild(ExampleAbpApplicationLayerPermissions.Products.Edit, L("Permission:Edit"));
            productPermission.AddChild(ExampleAbpApplicationLayerPermissions.Products.Delete, L("Permission:Delete"));
    
            var orderPermission = myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Orders.Default, L("Permission:Orders"));
            orderPermission.AddChild(ExampleAbpApplicationLayerPermissions.Orders.Create, L("Permission:Create"));
            orderPermission.AddChild(ExampleAbpApplicationLayerPermissions.Orders.Edit, L("Permission:Edit"));
            orderPermission.AddChild(ExampleAbpApplicationLayerPermissions.Orders.Delete, L("Permission:Delete"));
    
            var orderItemPermission = myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.OrderItems.Default, L("Permission:OrderItems"));
            orderItemPermission.AddChild(ExampleAbpApplicationLayerPermissions.OrderItems.Create, L("Permission:Create"));
            orderItemPermission.AddChild(ExampleAbpApplicationLayerPermissions.OrderItems.Edit, L("Permission:Edit"));
            orderItemPermission.AddChild(ExampleAbpApplicationLayerPermissions.OrderItems.Delete, L("Permission:Delete"));
        }
    
        private static LocalizableString L(string name)
        {
            return LocalizableString.Create<ExampleAbpApplicationLayerResource>(name);
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Properties\AssemblyInfo.cs"><![CDATA[
    ﻿using System.Runtime.CompilerServices;
    [assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.Application.Tests")]
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\OrderItems\OrderItemsAppService.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Shared;
    using ExampleAbpApplicationLayer.Products;
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq.Dynamic.Core;
    using Microsoft.AspNetCore.Authorization;
    using Volo.Abp;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Domain.Repositories;
    using ExampleAbpApplicationLayer.Permissions;
    using ExampleAbpApplicationLayer.OrderItems;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        public class OrderItemsAppService : OrderItemsAppServiceBase, IOrderItemsAppService
        {
            //<suite-custom-code-autogenerated>
            public OrderItemsAppService(IOrderItemRepository orderItemRepository, OrderItemManager orderItemManager, IRepository<ExampleAbpApplicationLayer.Products.Product, Guid> productRepository)
                : base(orderItemRepository, orderItemManager, productRepository)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\OrderItems\OrderItemsAppService.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Shared;
    using ExampleAbpApplicationLayer.Products;
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq.Dynamic.Core;
    using Microsoft.AspNetCore.Authorization;
    using Volo.Abp;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Domain.Repositories;
    using ExampleAbpApplicationLayer.Permissions;
    using ExampleAbpApplicationLayer.OrderItems;
    
    namespace ExampleAbpApplicationLayer.OrderItems
    {
        [RemoteService(IsEnabled = false)]
        [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Default)]
        public abstract class OrderItemsAppServiceBase : ExampleAbpApplicationLayerAppService
        {
    
            protected IOrderItemRepository _orderItemRepository;
            protected OrderItemManager _orderItemManager;
    
            protected IRepository<ExampleAbpApplicationLayer.Products.Product, Guid> _productRepository;
    
            public OrderItemsAppServiceBase(IOrderItemRepository orderItemRepository, OrderItemManager orderItemManager, IRepository<ExampleAbpApplicationLayer.Products.Product, Guid> productRepository)
            {
    
                _orderItemRepository = orderItemRepository;
                _orderItemManager = orderItemManager; _productRepository = productRepository;
    
            }
    
            public virtual async Task<PagedResultDto<OrderItemDto>> GetListByOrderIdAsync(GetOrderItemListInput input)
            {
                var orderItems = await _orderItemRepository.GetListByOrderIdAsync(
                    input.OrderId,
                    input.Sorting,
                    input.MaxResultCount,
                    input.SkipCount);
    
                return new PagedResultDto<OrderItemDto>
                {
                    TotalCount = await _orderItemRepository.GetCountByOrderIdAsync(input.OrderId),
                    Items = ObjectMapper.Map<List<OrderItem>, List<OrderItemDto>>(orderItems)
                };
            }
            public virtual async Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListWithNavigationPropertiesByOrderIdAsync(GetOrderItemListInput input)
            {
                var orderItems = await _orderItemRepository.GetListWithNavigationPropertiesByOrderIdAsync(
                    input.OrderId,
                    input.Sorting,
                    input.MaxResultCount,
                    input.SkipCount);
    
                return new PagedResultDto<OrderItemWithNavigationPropertiesDto>
                {
                    TotalCount = await _orderItemRepository.GetCountByOrderIdAsync(input.OrderId),
                    Items = ObjectMapper.Map<List<OrderItemWithNavigationProperties>, List<OrderItemWithNavigationPropertiesDto>>(orderItems)
                };
            }
    
            public virtual async Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListAsync(GetOrderItemsInput input)
            {
                var totalCount = await _orderItemRepository.GetCountAsync(input.FilterText, input.QtyMin, input.QtyMax, input.PriceMin, input.PriceMax, input.TotalPriceMin, input.TotalPriceMax, input.ProductId);
                var items = await _orderItemRepository.GetListWithNavigationPropertiesAsync(input.FilterText, input.QtyMin, input.QtyMax, input.PriceMin, input.PriceMax, input.TotalPriceMin, input.TotalPriceMax, input.ProductId, input.Sorting, input.MaxResultCount, input.SkipCount);
    
                return new PagedResultDto<OrderItemWithNavigationPropertiesDto>
                {
                    TotalCount = totalCount,
                    Items = ObjectMapper.Map<List<OrderItemWithNavigationProperties>, List<OrderItemWithNavigationPropertiesDto>>(items)
                };
            }
    
            public virtual async Task<OrderItemWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
            {
                return ObjectMapper.Map<OrderItemWithNavigationProperties, OrderItemWithNavigationPropertiesDto>
                    (await _orderItemRepository.GetWithNavigationPropertiesAsync(id));
            }
    
            public virtual async Task<OrderItemDto> GetAsync(Guid id)
            {
                return ObjectMapper.Map<OrderItem, OrderItemDto>(await _orderItemRepository.GetAsync(id));
            }
    
            public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetProductLookupAsync(LookupRequestDto input)
            {
                var query = (await _productRepository.GetQueryableAsync())
                    .WhereIf(!string.IsNullOrWhiteSpace(input.Filter),
                        x => x.Name != null &&
                             x.Name.Contains(input.Filter));
    
                var lookupData = await query.PageBy(input.SkipCount, input.MaxResultCount).ToDynamicListAsync<ExampleAbpApplicationLayer.Products.Product>();
                var totalCount = query.Count();
                return new PagedResultDto<LookupDto<Guid>>
                {
                    TotalCount = totalCount,
                    Items = ObjectMapper.Map<List<ExampleAbpApplicationLayer.Products.Product>, List<LookupDto<Guid>>>(lookupData)
                };
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Delete)]
            public virtual async Task DeleteAsync(Guid id)
            {
                await _orderItemRepository.DeleteAsync(id);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Create)]
            public virtual async Task<OrderItemDto> CreateAsync(OrderItemCreateDto input)
            {
                if (input.ProductId == default)
                {
                    throw new UserFriendlyException(L["The {0} field is required.", L["Product"]]);
                }
    
                var orderItem = await _orderItemManager.CreateAsync(input.OrderId
                , input.ProductId, input.Qty, input.Price, input.TotalPrice, input.ProductName
                );
    
                return ObjectMapper.Map<OrderItem, OrderItemDto>(orderItem);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Edit)]
            public virtual async Task<OrderItemDto> UpdateAsync(Guid id, OrderItemUpdateDto input)
            {
                if (input.ProductId == default)
                {
                    throw new UserFriendlyException(L["The {0} field is required.", L["Product"]]);
                }
    
                var orderItem = await _orderItemManager.UpdateAsync(
                id, input.OrderId
                , input.ProductId, input.Qty, input.Price, input.TotalPrice, input.ProductName
                );
    
                return ObjectMapper.Map<OrderItem, OrderItemDto>(orderItem);
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Orders\OrdersAppService.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Shared;
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq.Dynamic.Core;
    using Microsoft.AspNetCore.Authorization;
    using Volo.Abp;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Domain.Repositories;
    using ExampleAbpApplicationLayer.Permissions;
    using ExampleAbpApplicationLayer.Orders;
    using MiniExcelLibs;
    using Volo.Abp.Content;
    using Volo.Abp.Authorization;
    using Volo.Abp.Caching;
    using Microsoft.Extensions.Caching.Distributed;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrdersAppService : OrdersAppServiceBase, IOrdersAppService
        {
            //<suite-custom-code-autogenerated>
            public OrdersAppService(IOrderRepository orderRepository, OrderManager orderManager, IDistributedCache<OrderDownloadTokenCacheItem, string> downloadTokenCache)
                : base(orderRepository, orderManager, downloadTokenCache)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Orders\OrdersAppService.cs"><![CDATA[
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq.Dynamic.Core;
    using Microsoft.AspNetCore.Authorization;
    using Volo.Abp;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Domain.Repositories;
    using ExampleAbpApplicationLayer.Permissions;
    using ExampleAbpApplicationLayer.Orders;
    using MiniExcelLibs;
    using Volo.Abp.Content;
    using Volo.Abp.Authorization;
    using Volo.Abp.Caching;
    using Microsoft.Extensions.Caching.Distributed;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        [RemoteService(IsEnabled = false)]
        [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Default)]
        public abstract class OrdersAppServiceBase : ExampleAbpApplicationLayerAppService
        {
            protected IDistributedCache<OrderDownloadTokenCacheItem, string> _downloadTokenCache;
            protected IOrderRepository _orderRepository;
            protected OrderManager _orderManager;
    
            public OrdersAppServiceBase(IOrderRepository orderRepository, OrderManager orderManager, IDistributedCache<OrderDownloadTokenCacheItem, string> downloadTokenCache)
            {
                _downloadTokenCache = downloadTokenCache;
                _orderRepository = orderRepository;
                _orderManager = orderManager;
    
            }
    
            public virtual async Task<PagedResultDto<OrderDto>> GetListAsync(GetOrdersInput input)
            {
                var totalCount = await _orderRepository.GetCountAsync(input.FilterText, input.OrderDateMin, input.OrderDateMax, input.TotalAmountMin, input.TotalAmountMax, input.Status);
                var items = await _orderRepository.GetListAsync(input.FilterText, input.OrderDateMin, input.OrderDateMax, input.TotalAmountMin, input.TotalAmountMax, input.Status, input.Sorting, input.MaxResultCount, input.SkipCount);
    
                return new PagedResultDto<OrderDto>
                {
                    TotalCount = totalCount,
                    Items = ObjectMapper.Map<List<Order>, List<OrderDto>>(items)
                };
            }
    
            public virtual async Task<OrderDto> GetAsync(Guid id)
            {
                return ObjectMapper.Map<Order, OrderDto>(await _orderRepository.GetAsync(id));
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Delete)]
            public virtual async Task DeleteAsync(Guid id)
            {
                await _orderRepository.DeleteAsync(id);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Create)]
            public virtual async Task<OrderDto> CreateAsync(OrderCreateDto input)
            {
    
                var order = await _orderManager.CreateAsync(
                input.OrderDate, input.TotalAmount, input.Status
                );
    
                return ObjectMapper.Map<Order, OrderDto>(order);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Edit)]
            public virtual async Task<OrderDto> UpdateAsync(Guid id, OrderUpdateDto input)
            {
    
                var order = await _orderManager.UpdateAsync(
                id,
                input.OrderDate, input.TotalAmount, input.Status, input.ConcurrencyStamp
                );
    
                return ObjectMapper.Map<Order, OrderDto>(order);
            }
    
            [AllowAnonymous]
            public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(OrderExcelDownloadDto input)
            {
                var downloadToken = await _downloadTokenCache.GetAsync(input.DownloadToken);
                if (downloadToken == null || input.DownloadToken != downloadToken.Token)
                {
                    throw new AbpAuthorizationException("Invalid download token: " + input.DownloadToken);
                }
    
                var items = await _orderRepository.GetListAsync(input.FilterText, input.OrderDateMin, input.OrderDateMax, input.TotalAmountMin, input.TotalAmountMax, input.Status);
    
                var memoryStream = new MemoryStream();
                await memoryStream.SaveAsAsync(ObjectMapper.Map<List<Order>, List<OrderExcelDto>>(items));
                memoryStream.Seek(0, SeekOrigin.Begin);
    
                return new RemoteStreamContent(memoryStream, "Orders.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            }
    
            public virtual async Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
            {
                var token = Guid.NewGuid().ToString("N");
    
                await _downloadTokenCache.SetAsync(
                    token,
                    new OrderDownloadTokenCacheItem { Token = token },
                    new DistributedCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(30)
                    });
    
                return new ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto
                {
                    Token = token
                };
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Orders\OrderDownloadTokenCacheItem.Extended.cs"><![CDATA[
    using System;
    
    namespace ExampleAbpApplicationLayer.Orders;
    
    [Serializable]
    public class OrderDownloadTokenCacheItem : OrderDownloadTokenCacheItemBase
    {
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Orders\OrderDownloadTokenCacheItem.cs"><![CDATA[
    using System;
    
    namespace ExampleAbpApplicationLayer.Orders;
    
    public abstract class OrderDownloadTokenCacheItemBase
    {
        public string Token { get; set; } = null!;
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Products\ProductsAppService.Extended.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Shared;
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq.Dynamic.Core;
    using Microsoft.AspNetCore.Authorization;
    using Volo.Abp;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Domain.Repositories;
    using ExampleAbpApplicationLayer.Permissions;
    using ExampleAbpApplicationLayer.Products;
    using MiniExcelLibs;
    using Volo.Abp.Content;
    using Volo.Abp.Authorization;
    using Volo.Abp.Caching;
    using Microsoft.Extensions.Caching.Distributed;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductsAppService : ProductsAppServiceBase, IProductsAppService
        {
            //<suite-custom-code-autogenerated>
            public ProductsAppService(IProductRepository productRepository, ProductManager productManager, IDistributedCache<ProductDownloadTokenCacheItem, string> downloadTokenCache)
                : base(productRepository, productManager, downloadTokenCache)
            {
            }
            //</suite-custom-code-autogenerated>
    
            //Write your custom code...
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Products\ProductsAppService.cs"><![CDATA[
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq.Dynamic.Core;
    using Microsoft.AspNetCore.Authorization;
    using Volo.Abp;
    using Volo.Abp.Application.Dtos;
    using Volo.Abp.Application.Services;
    using Volo.Abp.Domain.Repositories;
    using ExampleAbpApplicationLayer.Permissions;
    using ExampleAbpApplicationLayer.Products;
    using MiniExcelLibs;
    using Volo.Abp.Content;
    using Volo.Abp.Authorization;
    using Volo.Abp.Caching;
    using Microsoft.Extensions.Caching.Distributed;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        [RemoteService(IsEnabled = false)]
        [Authorize(ExampleAbpApplicationLayerPermissions.Products.Default)]
        public abstract class ProductsAppServiceBase : ExampleAbpApplicationLayerAppService
        {
            protected IDistributedCache<ProductDownloadTokenCacheItem, string> _downloadTokenCache;
            protected IProductRepository _productRepository;
            protected ProductManager _productManager;
    
            public ProductsAppServiceBase(IProductRepository productRepository, ProductManager productManager, IDistributedCache<ProductDownloadTokenCacheItem, string> downloadTokenCache)
            {
                _downloadTokenCache = downloadTokenCache;
                _productRepository = productRepository;
                _productManager = productManager;
    
            }
    
            public virtual async Task<PagedResultDto<ProductDto>> GetListAsync(GetProductsInput input)
            {
                var totalCount = await _productRepository.GetCountAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive);
                var items = await _productRepository.GetListAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive, input.Sorting, input.MaxResultCount, input.SkipCount);
    
                return new PagedResultDto<ProductDto>
                {
                    TotalCount = totalCount,
                    Items = ObjectMapper.Map<List<Product>, List<ProductDto>>(items)
                };
            }
    
            public virtual async Task<ProductDto> GetAsync(Guid id)
            {
                return ObjectMapper.Map<Product, ProductDto>(await _productRepository.GetAsync(id));
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Products.Delete)]
            public virtual async Task DeleteAsync(Guid id)
            {
                await _productRepository.DeleteAsync(id);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Products.Create)]
            public virtual async Task<ProductDto> CreateAsync(ProductCreateDto input)
            {
    
                var product = await _productManager.CreateAsync(
                input.Name, input.Price, input.IsActive, input.Desc
                );
    
                return ObjectMapper.Map<Product, ProductDto>(product);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Products.Edit)]
            public virtual async Task<ProductDto> UpdateAsync(Guid id, ProductUpdateDto input)
            {
    
                var product = await _productManager.UpdateAsync(
                id,
                input.Name, input.Price, input.IsActive, input.Desc, input.ConcurrencyStamp
                );
    
                return ObjectMapper.Map<Product, ProductDto>(product);
            }
    
            [AllowAnonymous]
            public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(ProductExcelDownloadDto input)
            {
                var downloadToken = await _downloadTokenCache.GetAsync(input.DownloadToken);
                if (downloadToken == null || input.DownloadToken != downloadToken.Token)
                {
                    throw new AbpAuthorizationException("Invalid download token: " + input.DownloadToken);
                }
    
                var items = await _productRepository.GetListAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive);
    
                var memoryStream = new MemoryStream();
                await memoryStream.SaveAsAsync(ObjectMapper.Map<List<Product>, List<ProductExcelDto>>(items));
                memoryStream.Seek(0, SeekOrigin.Begin);
    
                return new RemoteStreamContent(memoryStream, "Products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Products.Delete)]
            public virtual async Task DeleteByIdsAsync(List<Guid> productIds)
            {
                await _productRepository.DeleteManyAsync(productIds);
            }
    
            [Authorize(ExampleAbpApplicationLayerPermissions.Products.Delete)]
            public virtual async Task DeleteAllAsync(GetProductsInput input)
            {
                await _productRepository.DeleteAllAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive);
            }
            public virtual async Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
            {
                var token = Guid.NewGuid().ToString("N");
    
                await _downloadTokenCache.SetAsync(
                    token,
                    new ProductDownloadTokenCacheItem { Token = token },
                    new DistributedCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(30)
                    });
    
                return new ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto
                {
                    Token = token
                };
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Products\ProductDownloadTokenCacheItem.Extended.cs"><![CDATA[
    using System;
    
    namespace ExampleAbpApplicationLayer.Products;
    
    [Serializable]
    public class ProductDownloadTokenCacheItem : ProductDownloadTokenCacheItemBase
    {
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Application\Products\ProductDownloadTokenCacheItem.cs"><![CDATA[
    using System;
    
    namespace ExampleAbpApplicationLayer.Products;
    
    public abstract class ProductDownloadTokenCacheItemBase
    {
        public string Token { get; set; } = null!;
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.TestBase\Security\FakeCurrentPrincipalAccessor.cs"><![CDATA[
    ﻿using System;
    using System.Collections.Generic;
    using System.Security.Claims;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Security.Claims;
    
    namespace ExampleAbpApplicationLayer.Security;
    
    [Dependency(ReplaceServices = true)]
    public class FakeCurrentPrincipalAccessor : ThreadCurrentPrincipalAccessor
    {
        protected override ClaimsPrincipal GetClaimsPrincipal()
        {
            return GetPrincipal();
        }
    
        private ClaimsPrincipal GetPrincipal()
        {
            return new ClaimsPrincipal(new ClaimsIdentity(new List<Claim>
            {
                new Claim(AbpClaimTypes.UserId, "2e701e62-0953-4dd3-910b-dc6cc93ccb0d"),
                new Claim(AbpClaimTypes.UserName, "admin"),
                new Claim(AbpClaimTypes.Email, "admin@abp.io")
            }));
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreTestModule.cs"><![CDATA[
    ﻿using Microsoft.Data.Sqlite;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Storage;
    using Microsoft.Extensions.DependencyInjection;
    using Volo.Abp;
    using Volo.Abp.EntityFrameworkCore;
    using Volo.Abp.EntityFrameworkCore.Sqlite;
    using Volo.Abp.FeatureManagement;
    using Volo.Abp.Modularity;
    using Volo.Abp.PermissionManagement;
    using Volo.Abp.TextTemplateManagement;
    using Volo.Abp.Uow;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    [DependsOn(
        typeof(ExampleAbpApplicationLayerApplicationTestModule),
        typeof(ExampleAbpApplicationLayerEntityFrameworkCoreModule),
        typeof(AbpEntityFrameworkCoreSqliteModule)
    )]
    public class ExampleAbpApplicationLayerEntityFrameworkCoreTestModule : AbpModule
    {
        private SqliteConnection? _sqliteConnection;
    
        public override void ConfigureServices(ServiceConfigurationContext context)
        {
            Configure<FeatureManagementOptions>(options =>
            {
                options.SaveStaticFeaturesToDatabase = false;
                options.IsDynamicFeatureStoreEnabled = false;
            });
            Configure<PermissionManagementOptions>(options =>
            {
                options.SaveStaticPermissionsToDatabase = false;
                options.IsDynamicPermissionStoreEnabled = false;
            });
            Configure<TextTemplateManagementOptions>(options =>
            {
                options.SaveStaticTemplatesToDatabase = false;
                options.IsDynamicTemplateStoreEnabled = false;
            });
            context.Services.AddAlwaysDisableUnitOfWorkTransaction();
    
            ConfigureInMemorySqlite(context.Services);
    
        }
    
        private void ConfigureInMemorySqlite(IServiceCollection services)
        {
            _sqliteConnection = CreateDatabaseAndGetConnection();
    
            services.Configure<AbpDbContextOptions>(options =>
            {
                options.Configure(context =>
                {
                    context.DbContextOptions.UseSqlite(_sqliteConnection);
                });
            });
        }
    
        public override void OnApplicationShutdown(ApplicationShutdownContext context)
        {
            _sqliteConnection?.Dispose();
        }
    
        private static SqliteConnection CreateDatabaseAndGetConnection()
        {
            var connection = new SqliteConnection("Data Source=:memory:");
            connection.Open();
    
            var options = new DbContextOptionsBuilder<ExampleAbpApplicationLayerDbContext>()
                .UseSqlite(connection)
                .Options;
    
            using (var context = new ExampleAbpApplicationLayerDbContext(options))
            {
                context.GetService<IRelationalDatabaseCreator>().CreateTables();
            }
    
            return connection;
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreTestBase.cs"><![CDATA[
    ﻿using Volo.Abp;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    public abstract class ExampleAbpApplicationLayerEntityFrameworkCoreTestBase : ExampleAbpApplicationLayerTestBase<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreFixture.cs"><![CDATA[
    ﻿using System;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    public class ExampleAbpApplicationLayerEntityFrameworkCoreFixture : IDisposable
    {
        public void Dispose()
        {
    
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreCollectionFixtureBase.cs"><![CDATA[
    ﻿using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    public class ExampleAbpApplicationLayerEntityFrameworkCoreCollectionFixtureBase : ICollectionFixture<ExampleAbpApplicationLayerEntityFrameworkCoreFixture>
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreCollection.cs"><![CDATA[
    ﻿using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    [CollectionDefinition(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
    public class ExampleAbpApplicationLayerEntityFrameworkCoreCollection : ICollectionFixture<ExampleAbpApplicationLayerEntityFrameworkCoreFixture>
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\Samples\SampleDomainTests.cs"><![CDATA[
    ﻿using System.Threading.Tasks;
    using Shouldly;
    using Volo.Abp.Identity;
    using Volo.Abp.Modularity;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.Samples;
    
    /* This is just an example test class.
     * Normally, you don't test code of the modules you are using
     * (like IdentityUserManager here).
     * Only test your own domain services.
     */
    public abstract class SampleDomainTests<TStartupModule> : ExampleAbpApplicationLayerDomainTestBase<TStartupModule>
        where TStartupModule : IAbpModule
    {
        private readonly IIdentityUserRepository _identityUserRepository;
        private readonly IdentityUserManager _identityUserManager;
    
        protected SampleDomainTests()
        {
            _identityUserRepository = GetRequiredService<IIdentityUserRepository>();
            _identityUserManager = GetRequiredService<IdentityUserManager>();
        }
    
        [Fact]
        public async Task Should_Set_Email_Of_A_User()
        {
            IdentityUser adminUser;
    
            /* Need to manually start Unit Of Work because
             * FirstOrDefaultAsync should be executed while db connection / context is available.
             */
            await WithUnitOfWorkAsync(async () =>
            {
                adminUser = await _identityUserRepository
                    .FindByNormalizedUserNameAsync("ADMIN");
    
                await _identityUserManager.SetEmailAsync(adminUser, "newemail@abp.io");
                await _identityUserRepository.UpdateAsync(adminUser);
            });
    
            adminUser = await _identityUserRepository.FindByNormalizedUserNameAsync("ADMIN");
            adminUser.Email.ShouldBe("newemail@abp.io");
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\Orders\OrdersDataSeedContributor.cs"><![CDATA[
    using System;
    using System.Threading.Tasks;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Uow;
    using ExampleAbpApplicationLayer.Orders;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public class OrdersDataSeedContributor : IDataSeedContributor, ISingletonDependency
        {
            private bool IsSeeded = false;
            private readonly IOrderRepository _orderRepository;
            private readonly IUnitOfWorkManager _unitOfWorkManager;
    
            public OrdersDataSeedContributor(IOrderRepository orderRepository, IUnitOfWorkManager unitOfWorkManager)
            {
                _orderRepository = orderRepository;
                _unitOfWorkManager = unitOfWorkManager;
    
            }
    
            public async Task SeedAsync(DataSeedContext context)
            {
                if (IsSeeded)
                {
                    return;
                }
    
                await _orderRepository.InsertAsync(new Order
                (
                    id: Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"),
                    orderDate: new DateTime(2020, 10, 26),
                    totalAmount: 504230225,
                    status: default
                ));
    
                await _orderRepository.InsertAsync(new Order
                (
                    id: Guid.Parse("53a5e56a-5b6f-4f0f-a42e-3562b6baf84c"),
                    orderDate: new DateTime(2024, 4, 20),
                    totalAmount: 326594224,
                    status: default
                ));
    
                await _unitOfWorkManager!.Current!.SaveChangesAsync();
    
                IsSeeded = true;
            }
        }
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Domain.Tests\Products\ProductsDataSeedContributor.cs"><![CDATA[
    using System;
    using System.Threading.Tasks;
    using Volo.Abp.Data;
    using Volo.Abp.DependencyInjection;
    using Volo.Abp.Uow;
    using ExampleAbpApplicationLayer.Products;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public class ProductsDataSeedContributor : IDataSeedContributor, ISingletonDependency
        {
            private bool IsSeeded = false;
            private readonly IProductRepository _productRepository;
            private readonly IUnitOfWorkManager _unitOfWorkManager;
    
            public ProductsDataSeedContributor(IProductRepository productRepository, IUnitOfWorkManager unitOfWorkManager)
            {
                _productRepository = productRepository;
                _unitOfWorkManager = unitOfWorkManager;
    
            }
    
            public async Task SeedAsync(DataSeedContext context)
            {
                if (IsSeeded)
                {
                    return;
                }
    
                await _productRepository.InsertAsync(new Product
                (
                    id: Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"),
                    name: "11c71ef2c24743f9a15561f887f77ff1af1fc02044ad40b08b2cdee1a9f4227728370b25ec",
                    desc: "ca38a7fceb674ede95bb5732eb52",
                    price: 983272089,
                    isActive: true
                ));
    
                await _productRepository.InsertAsync(new Product
                (
                    id: Guid.Parse("1fb2febb-25f1-48b5-83f0-4c7b4c218476"),
                    name: "c75153fbae544e9f9877689c8f8b37be6490c5f01e4348ab93f19a95ea61a964bcbe1532bf6c4cc78beb027269229847db",
                    desc: "ea807e41d2b84c10a9f58c9c7534dd7d1e4add1437e64df6ab688756ec",
                    price: 1794088944,
                    isActive: true
                ));
    
                await _unitOfWorkManager!.Current!.SaveChangesAsync();
    
                IsSeeded = true;
            }
        }
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\Samples\SampleAppServiceTests.cs"><![CDATA[
    ﻿using Shouldly;
    using System.Threading.Tasks;
    using Volo.Abp.Identity;
    using Volo.Abp.Modularity;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.Samples;
    
    /* This is just an example test class.
     * Normally, you don't test code of the modules you are using
     * (like IIdentityUserAppService here).
     * Only test your own application services.
     */
    public abstract class SampleAppServiceTests<TStartupModule> : ExampleAbpApplicationLayerApplicationTestBase<TStartupModule>
        where TStartupModule : IAbpModule
    {
        private readonly IIdentityUserAppService _userAppService;
    
        protected SampleAppServiceTests()
        {
            _userAppService = GetRequiredService<IIdentityUserAppService>();
        }
    
        [Fact]
        public async Task Initial_Data_Should_Contain_Admin_User()
        {
            //Act
            var result = await _userAppService.GetListAsync(new GetIdentityUsersInput());
    
            //Assert
            result.TotalCount.ShouldBeGreaterThan(0);
            result.Items.ShouldContain(u => u.UserName == "admin");
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\Products\ProductApplicationTests.cs"><![CDATA[
    using System;
    using System.Linq;
    using Shouldly;
    using System.Threading.Tasks;
    using Volo.Abp.Domain.Repositories;
    using Volo.Abp.Modularity;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.Products
    {
        public abstract class ProductsAppServiceTests<TStartupModule> : ExampleAbpApplicationLayerApplicationTestBase<TStartupModule>
            where TStartupModule : IAbpModule
        {
            private readonly IProductsAppService _productsAppService;
            private readonly IRepository<Product, Guid> _productRepository;
    
            public ProductsAppServiceTests()
            {
                _productsAppService = GetRequiredService<IProductsAppService>();
                _productRepository = GetRequiredService<IRepository<Product, Guid>>();
            }
    
            [Fact]
            public async Task GetListAsync()
            {
                // Act
                var result = await _productsAppService.GetListAsync(new GetProductsInput());
    
                // Assert
                result.TotalCount.ShouldBe(2);
                result.Items.Count.ShouldBe(2);
                result.Items.Any(x => x.Id == Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30")).ShouldBe(true);
                result.Items.Any(x => x.Id == Guid.Parse("1fb2febb-25f1-48b5-83f0-4c7b4c218476")).ShouldBe(true);
            }
    
            [Fact]
            public async Task GetAsync()
            {
                // Act
                var result = await _productsAppService.GetAsync(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
    
                // Assert
                result.ShouldNotBeNull();
                result.Id.ShouldBe(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
            }
    
            [Fact]
            public async Task CreateAsync()
            {
                // Arrange
                var input = new ProductCreateDto
                {
                    Name = "bac02df9832f493cada933bc16daec5d7537d5e15a954fc18b3d",
                    Desc = "893e6f582",
                    Price = 483816289,
                    IsActive = true
                };
    
                // Act
                var serviceResult = await _productsAppService.CreateAsync(input);
    
                // Assert
                var result = await _productRepository.FindAsync(c => c.Id == serviceResult.Id);
    
                result.ShouldNotBe(null);
                result.Name.ShouldBe("bac02df9832f493cada933bc16daec5d7537d5e15a954fc18b3d");
                result.Desc.ShouldBe("893e6f582");
                result.Price.ShouldBe(483816289);
                result.IsActive.ShouldBe(true);
            }
    
            [Fact]
            public async Task UpdateAsync()
            {
                // Arrange
                var input = new ProductUpdateDto()
                {
                    Name = "6f2999bf4a71400d98bd5217e63611477d14",
                    Desc = "af562c7a791346e0b6fc4163368bb75deef92116279d4acfa945aac0ed10e57bd5732d565c7a4d6a9088",
                    Price = 1002811477,
                    IsActive = true
                };
    
                // Act
                var serviceResult = await _productsAppService.UpdateAsync(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"), input);
    
                // Assert
                var result = await _productRepository.FindAsync(c => c.Id == serviceResult.Id);
    
                result.ShouldNotBe(null);
                result.Name.ShouldBe("6f2999bf4a71400d98bd5217e63611477d14");
                result.Desc.ShouldBe("af562c7a791346e0b6fc4163368bb75deef92116279d4acfa945aac0ed10e57bd5732d565c7a4d6a9088");
                result.Price.ShouldBe(1002811477);
                result.IsActive.ShouldBe(true);
            }
    
            [Fact]
            public async Task DeleteAsync()
            {
                // Act
                await _productsAppService.DeleteAsync(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
    
                // Assert
                var result = await _productRepository.FindAsync(c => c.Id == Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
    
                result.ShouldBeNull();
            }
        }
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.Application.Tests\Orders\OrderApplicationTests.cs"><![CDATA[
    using System;
    using System.Linq;
    using Shouldly;
    using System.Threading.Tasks;
    using Volo.Abp.Domain.Repositories;
    using Volo.Abp.Modularity;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.Orders
    {
        public abstract class OrdersAppServiceTests<TStartupModule> : ExampleAbpApplicationLayerApplicationTestBase<TStartupModule>
            where TStartupModule : IAbpModule
        {
            private readonly IOrdersAppService _ordersAppService;
            private readonly IRepository<Order, Guid> _orderRepository;
    
            public OrdersAppServiceTests()
            {
                _ordersAppService = GetRequiredService<IOrdersAppService>();
                _orderRepository = GetRequiredService<IRepository<Order, Guid>>();
            }
    
            [Fact]
            public async Task GetListAsync()
            {
                // Act
                var result = await _ordersAppService.GetListAsync(new GetOrdersInput());
    
                // Assert
                result.TotalCount.ShouldBe(2);
                result.Items.Count.ShouldBe(2);
                result.Items.Any(x => x.Id == Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c")).ShouldBe(true);
                result.Items.Any(x => x.Id == Guid.Parse("53a5e56a-5b6f-4f0f-a42e-3562b6baf84c")).ShouldBe(true);
            }
    
            [Fact]
            public async Task GetAsync()
            {
                // Act
                var result = await _ordersAppService.GetAsync(Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"));
    
                // Assert
                result.ShouldNotBeNull();
                result.Id.ShouldBe(Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"));
            }
    
            [Fact]
            public async Task CreateAsync()
            {
                // Arrange
                var input = new OrderCreateDto
                {
                    OrderDate = new DateTime(2011, 6, 5),
                    TotalAmount = 704622860,
                    Status = default
                };
    
                // Act
                var serviceResult = await _ordersAppService.CreateAsync(input);
    
                // Assert
                var result = await _orderRepository.FindAsync(c => c.Id == serviceResult.Id);
    
                result.ShouldNotBe(null);
                result.OrderDate.ShouldBe(new DateTime(2011, 6, 5));
                result.TotalAmount.ShouldBe(704622860);
                result.Status.ShouldBe(default);
            }
    
            [Fact]
            public async Task UpdateAsync()
            {
                // Arrange
                var input = new OrderUpdateDto()
                {
                    OrderDate = new DateTime(2006, 11, 2),
                    TotalAmount = 151144323,
                    Status = default
                };
    
                // Act
                var serviceResult = await _ordersAppService.UpdateAsync(Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"), input);
    
                // Assert
                var result = await _orderRepository.FindAsync(c => c.Id == serviceResult.Id);
    
                result.ShouldNotBe(null);
                result.OrderDate.ShouldBe(new DateTime(2006, 11, 2));
                result.TotalAmount.ShouldBe(151144323);
                result.Status.ShouldBe(default);
            }
    
            [Fact]
            public async Task DeleteAsync()
            {
                // Act
                await _ordersAppService.DeleteAsync(Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"));
    
                // Assert
                var result = await _orderRepository.FindAsync(c => c.Id == Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"));
    
                result.ShouldBeNull();
            }
        }
    }
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\values.yaml"><![CDATA[
    global:
      tlsSecret: "exampleabpapplicationlayer-local-tls"
      abpStudioClient:
        studioUrl: "http://abp-studio-proxy:38271"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\values.exampleabpapplicationlayer-local.yaml"><![CDATA[
    global:
      hosts:
        dbmigrator: "[RELEASE_NAME]-dbmigrator"
        httpapi: "[RELEASE_NAME]-httpapihost"
        angular: "[RELEASE_NAME]-angular"
      connectionStrings:
        default: "Server=[RELEASE_NAME]-sqlserver,1433; Database=ExampleAbpApplicationLayer; User Id=sa; Password=myPassw@rd; TrustServerCertificate=True"
      dotnetEnvironment: "Staging"
      disablePII: "false"
      stringEncryptionDefaultPassPhrase: "SpOOeQFpH5eH4TMY"
      abpStudioClient:
        isLinkEnabled: "true"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\Chart.yaml"><![CDATA[
    apiVersion: v2
    name: exampleabpapplicationlayer
    version: 1.0.0
    appVersion: "1.0"
    description: ExampleAbpApplicationLayer Solution
    ]]></file>
  <file path="etc\abp-studio\run-profiles\Default.abprun.json"><![CDATA[
    ﻿{
      "applications": {
        "ExampleAbpApplicationLayer.HttpApi.Host": {
          "type": "dotnet-project",
          "launchUrl": "https://localhost:44302",
          "path": "../../../src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.csproj",
          "kubernetesService": ".*-httpapihost$",
          "healthCheckEndpoint": "/health-status",
          "healthUiEndpoint": "/health-ui",
          "execution": {
            "order": 4
          }
        },
        "ExampleAbpApplicationLayer.Angular": {
          "type": "cli",
          "workingDirectory": "../../../angular",
          "startCommand": "./start.ps1",
          "launchUrl": "http://localhost:4200",
          "kubernetesService": ".*-angular$",
          "execution": {
            "order": 2
          }    
        }
      },
      "containers": {
        "serviceName": "ExampleAbpApplicationLayer-Containers",
      }
    }
    ]]></file>
  <file path="etc\abp-studio\k8s-profiles\local.abpk8s.json"><![CDATA[
    {
      "config": {
        "context": "docker-desktop",
        "namespace": "exampleabpapplicationlayer-local"
      },
      "metadata": {
        "dotnetEnvironment": "Staging"
      },
      "services": {}
    }
    ]]></file>
  <file path="angular\src\environments\environment.ts"><![CDATA[
    import { Environment } from '@abp/ng.core';
    
    const baseUrl = 'http://localhost:4200';
    
    const oAuthConfig = {
      issuer: 'https://localhost:44302/',
      redirectUri: baseUrl,
      clientId: 'ExampleAbpApplicationLayer_App',
      responseType: 'code',
      scope: 'offline_access ExampleAbpApplicationLayer',
      requireHttps: true,
      impersonation: {
        tenantImpersonation: true,
        userImpersonation: true,
      }
    };
    
    export const environment = {
      production: false,
      application: {
        baseUrl,
        name: 'ExampleAbpApplicationLayer',
      },
      oAuthConfig,
      apis: {
        default: {
          url: 'https://localhost:44302',
          rootNamespace: 'ExampleAbpApplicationLayer',
        },
        AbpAccountPublic: {
          url: oAuthConfig.issuer,
          rootNamespace: 'AbpAccountPublic',
        },
      },
    } as Environment;
    
    ]]></file>
  <file path="angular\src\environments\environment.prod.ts"><![CDATA[
    import { Environment } from '@abp/ng.core';
    
    const baseUrl = 'http://localhost:4200';
    
    const oAuthConfig = {
      issuer: 'https://localhost:44302/',
      redirectUri: baseUrl,
      clientId: 'ExampleAbpApplicationLayer_App',
      responseType: 'code',
      scope: 'offline_access ExampleAbpApplicationLayer',
      requireHttps: true,
      impersonation: {
        tenantImpersonation: true,
        userImpersonation: true,
      }
    };
    
    export const environment = {
      production: true,
      application: {
        baseUrl,
        name: 'ExampleAbpApplicationLayer',
      },
      oAuthConfig,
      apis: {
        default: {
          url: 'https://localhost:44302',
          rootNamespace: 'ExampleAbpApplicationLayer',
        },
        AbpAccountPublic: {
          url: oAuthConfig.issuer,
          rootNamespace: 'AbpAccountPublic',
        },
      },
      remoteEnv: {
        url: '/getEnvConfig',
        mergeStrategy: 'deepmerge'
      }
    } as Environment;
    
    ]]></file>
  <file path="angular\src\assets\.gitkeep"></file>
  <file path="angular\src\app\route.provider.ts"><![CDATA[
    import { RoutesService, eLayoutType } from '@abp/ng.core';
    import { inject, provideAppInitializer } from '@angular/core';
    
    export const APP_ROUTE_PROVIDER = [
      provideAppInitializer(() => {
        configureRoutes();
      }),
    ];
    
    function configureRoutes() {
      const routes = inject(RoutesService);
      routes.add([
          {
            path: '/',
            name: '::Menu:Home',
            iconClass: 'fas fa-home',
            order: 1,
            layout: eLayoutType.application,
          },
          {
            path: '/dashboard',
            name: '::Menu:Dashboard',
            iconClass: 'fas fa-chart-line',
            order: 2,
            layout: eLayoutType.application,
            requiredPolicy: 'ExampleAbpApplicationLayer.Dashboard.Host  || ExampleAbpApplicationLayer.Dashboard.Tenant',
          },
      ]);
    }
    
    ]]></file>
  <file path="angular\src\app\app.routes.ts"><![CDATA[
    import { authGuard, permissionGuard } from '@abp/ng.core';
    import { Routes } from '@angular/router';
    import { GDPR_COOKIE_CONSENT_ROUTES } from './gdpr-cookie-consent/gdpr-cookie-consent.routes';
    import { ORDER_ROUTES } from './orders/order/order-routes';
    import { PRODUCT_ROUTES } from './products/product/product-routes';
    
    export const APP_ROUTES: Routes = [
      {
        path: '',
        pathMatch: 'full',
        loadComponent: () => import('./home/home.component').then(c => c.HomeComponent),
      },
      {
        path: 'dashboard',
        loadComponent: () => import('./dashboard/dashboard.component').then(c => c.DashboardComponent),
        canActivate: [authGuard, permissionGuard],
      },
      {
        path: 'account',
        loadChildren: () => import('@volo/abp.ng.account/public').then(c => c.createRoutes()),
      },
      {
        path: 'gdpr',
        loadChildren: () => import('@volo/abp.ng.gdpr').then(c => c.createRoutes()),
      },
      {
        path: 'identity',
        loadChildren: () => import('@volo/abp.ng.identity').then(c => c.createRoutes()),
      },
      {
        path: 'language-management',
        loadChildren: () => import('@volo/abp.ng.language-management').then(c => c.createRoutes()),
      },
      {
        path: 'saas',
        loadChildren: () => import('@volo/abp.ng.saas').then(c => c.createRoutes()),
      },
      {
        path: 'chat',
        loadChildren: () => import('@volo/abp.ng.chat').then(c => c.createRoutes()),
      },
      {
        path: 'audit-logs',
        loadChildren: () => import('@volo/abp.ng.audit-logging').then(c => c.createRoutes()),
      },
      {
        path: 'openiddict',
        loadChildren: () => import('@volo/abp.ng.openiddictpro').then(c => c.createRoutes()),
      },
      {
        path: 'text-template-management',
        loadChildren: () => import('@volo/abp.ng.text-template-management').then(c => c.createRoutes()),
      },
      {
        path: 'file-management',
        loadChildren: () => import('@volo/abp.ng.file-management').then(c => c.createRoutes()),
      },
      {
        path: 'gdpr-cookie-consent',
        children: GDPR_COOKIE_CONSENT_ROUTES,
      },
      {
        path: 'setting-management',
        loadChildren: () => import('@abp/ng.setting-management').then(c => c.createRoutes()),
      },
      { path: 'orders', children: ORDER_ROUTES },
      { path: 'products', children: PRODUCT_ROUTES },
    ];
    
    ]]></file>
  <file path="angular\src\app\app.config.ts"><![CDATA[
    import { provideAbpCore, withOptions } from '@abp/ng.core';
    import { provideAbpOAuth } from '@abp/ng.oauth';
    import { provideSettingManagementConfig } from '@abp/ng.setting-management/config';
    import { provideFeatureManagementConfig } from '@abp/ng.feature-management';
    import {
      provideAbpThemeShared,
      withValidationBluePrint,
      withHttpErrorConfig,
    } from '@abp/ng.theme.shared';
    import { provideIdentityConfig } from '@volo/abp.ng.identity/config';
    import { provideCommercialUiConfig } from '@volo/abp.commercial.ng.ui/config';
    import { provideAccountAdminConfig } from '@volo/abp.ng.account/admin/config';
    import { provideAccountPublicConfig } from '@volo/abp.ng.account/public/config';
    import { provideGdprConfig, withCookieConsentOptions } from '@volo/abp.ng.gdpr/config';
    import { provideAuditLoggingConfig } from '@volo/abp.ng.audit-logging/config';
    import { provideLanguageManagementConfig } from '@volo/abp.ng.language-management/config';
    import { registerLocale } from '@volo/abp.ng.language-management/locale';
    import { provideFileManagementConfig } from '@volo/abp.ng.file-management/config';
    import { provideChatConfig } from '@volo/abp.ng.chat/config';
    import { provideSaasConfig } from '@volo/abp.ng.saas/config';
    import { provideTextTemplateManagementConfig } from '@volo/abp.ng.text-template-management/config';
    import { provideOpeniddictproConfig } from '@volo/abp.ng.openiddictpro/config';
    import { HttpErrorComponent, provideThemeLeptonX } from '@volosoft/abp.ng.theme.lepton-x';
    import { provideSideMenuLayout } from '@volosoft/abp.ng.theme.lepton-x/layouts';
    import { provideLogo, withEnvironmentOptions } from '@volo/ngx-lepton-x.core';
    import { ApplicationConfig } from '@angular/core';
    import { provideAnimations } from '@angular/platform-browser/animations';
    import { provideRouter } from '@angular/router';
    import { environment } from '../environments/environment';
    import { APP_ROUTES } from './app.routes';
    import { APP_ROUTE_PROVIDER } from './route.provider';
    import { ORDERS_ORDER_ROUTE_PROVIDER } from './orders/order/providers/order-route.provider';
    import { PRODUCTS_PRODUCT_ROUTE_PROVIDER } from './products/product/providers/product-route.provider';
    
    export const appConfig: ApplicationConfig = {
      providers: [
        provideRouter(APP_ROUTES),
        APP_ROUTE_PROVIDER,
        provideAnimations(),
        provideAbpCore(
          withOptions({
            environment,
            registerLocaleFn: registerLocale(),
          }),
        ),
        provideAbpOAuth(),
        provideIdentityConfig(),
        provideSettingManagementConfig(),
        provideFeatureManagementConfig(),
        provideAccountAdminConfig(),
        provideAccountPublicConfig(),
        provideCommercialUiConfig(),
        provideThemeLeptonX(),
        provideSideMenuLayout(),
        provideAbpThemeShared(
          withHttpErrorConfig({
            errorScreen: {
              component: HttpErrorComponent,
              forWhichErrors: [401, 403, 404, 500],
              hideCloseIcon: true,
            },
          }),
          withValidationBluePrint({
            wrongPassword: 'Please choose 1q2w3E*',
          }),
        ),
        provideLogo(withEnvironmentOptions(environment)),
        provideGdprConfig(
          withCookieConsentOptions({
            cookiePolicyUrl: '/gdpr-cookie-consent/cookie',
            privacyPolicyUrl: '/gdpr-cookie-consent/privacy',
          }),
        ),
        provideLanguageManagementConfig(),
        provideFileManagementConfig(),
        provideSaasConfig(),
        provideChatConfig(),
        provideAuditLoggingConfig(),
        provideOpeniddictproConfig(),
        provideTextTemplateManagementConfig(),
        ORDERS_ORDER_ROUTE_PROVIDER,
        PRODUCTS_PRODUCT_ROUTE_PROVIDER,
      ],
    };
    
    ]]></file>
  <file path="angular\src\app\app.component.ts"><![CDATA[
    import { Component } from '@angular/core';
    import { GdprCookieConsentComponent } from '@volo/abp.ng.gdpr/config';
    import { DynamicLayoutComponent } from '@abp/ng.core';
    import { LoaderBarComponent } from '@abp/ng.theme.shared';
    
    @Component({
      selector: 'app-root',
      template: `
        <abp-loader-bar />
        <abp-dynamic-layout />
        <abp-gdpr-cookie-consent />
      `,
      imports: [LoaderBarComponent, DynamicLayoutComponent, GdprCookieConsentComponent],
    })
    export class AppComponent {}
    
    ]]></file>
  <file path="angular\e2e\src\app.po.ts"><![CDATA[
    import { browser, by, element } from 'protractor';
    
    export class AppPage {
      navigateTo(): Promise<unknown> {
        return browser.get(browser.baseUrl) as Promise<unknown>;
      }
    
      getTitleText(): Promise<string> {
        return element(by.css('app-root .content span')).getText() as Promise<string>;
      }
    }
    
    ]]></file>
  <file path="angular\e2e\src\app.e2e-spec.ts"><![CDATA[
    import { AppPage } from "./app.po";
    import { browser, logging } from "protractor";
    
    describe("workspace-project App", () => {
      let page: AppPage;
    
      beforeEach(() => {
        page = new AppPage();
      });
    
      it("should display welcome message", () => {
        page.navigateTo();
        expect(page.getTitleText()).toEqual("ExampleAbpApplicationLayer app is running!");
      });
    
      afterEach(async () => {
        // Assert that there are no errors emitted from the browser
        const logs = await browser
          .manage()
          .logs()
          .get(logging.Type.BROWSER);
        expect(logs).not.toContain(
          jasmine.objectContaining({
            level: logging.Level.SEVERE
          } as logging.Entry)
        );
      });
    });
    
    ]]></file>
  <file path="angular\.suite\schematics\version.txt"><![CDATA[
    9.3.1
    ]]></file>
  <file path="angular\.suite\schematics\test-setup.js.map"><![CDATA[
    {"version":3,"file":"test-setup.js","sourceRoot":"","sources":["../../../packages/suite/src/test-setup.ts"],"names":[],"mappings":";;AAAA,0CAAwC;AAExC,mDAAmD;AACnD,uEAGmD;AAEnD,IAAA,oBAAU,GAAE,CAAC,oBAAoB,EAAE,CAAC;AACpC,IAAA,oBAAU,GAAE,CAAC,mBAAmB,CAAC,qCAA2B,EAAE,IAAA,uCAA6B,GAAE,EAAE;IAC7F,QAAQ,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE;CACtC,CAAC,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\test-setup.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("jest-preset-angular/setup-jest");
    const testing_1 = require("@angular/core/testing");
    const testing_2 = require("@angular/platform-browser-dynamic/testing");
    (0, testing_1.getTestBed)().resetTestEnvironment();
    (0, testing_1.getTestBed)().initTestEnvironment(testing_2.BrowserDynamicTestingModule, (0, testing_2.platformBrowserDynamicTesting)(), {
        teardown: { destroyAfterEach: false },
    });
    //# sourceMappingURL=test-setup.js.map
    ]]></file>
  <file path="angular\.suite\schematics\test-setup.d.ts"><![CDATA[
    import 'jest-preset-angular/setup-jest';
    
    ]]></file>
  <file path="angular\.suite\schematics\run-schematics.mjs"><![CDATA[
    import { execa } from 'execa';
    import path from 'path';
    
    const [ngCli, command, schematic, template, appName, jsonFile, angularPath] = process.argv.slice(2);
    
    const ngCliPath = '.suite/schematics/node_modules/' + ngCli.split('node_modules/')[1];
    
    const [schematicPath, schematicName] = schematic.split(':');
    
    const collectionPath = convertToUnixPath(path.resolve(angularPath, schematicPath));
    const resolvedSchematic = `${collectionPath}:${schematicName}`;
    
    const { stdout } = await execa(
      ngCliPath,
      [command, resolvedSchematic, '--template', template, '--target', appName, '--source', jsonFile],
      {
        cwd: angularPath,
      },
    );
    console.log(stdout);
    
    /**
     * Converts a file path to a Unix-style absolute path.
     *
     * Angular CLI (latest versions) enforces strict requirements on schematic collection paths:
     * they must be absolute Unix-style paths starting with a leading slash ('/').
     * Without this, Angular CLI treats the path as relative and cannot resolve the collection,
     * causing errors.
     *
     * This function also removes Windows drive letters (e.g., 'C:') to ensure compatibility
     * across platforms, meeting the latest forced specifications by Angular CLI.
     *
     * @param {string} filePath - The original file path to convert.
     * @returns {string} The converted Unix-style absolute path.
     */
    function convertToUnixPath(filePath) {
      const parts = filePath.split(path.sep).filter(part => part && !/^[A-Za-z]:$/.test(part));
      return '/' + parts.join('/');
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\README.md"><![CDATA[
    # ABP Suite Schematics
    
    **Important Note:** This is not a stand-alone package and requires content generated by ABP Suite.
    ]]></file>
  <file path="angular\.suite\schematics\package.json"><![CDATA[
    {
      "name": "@volo/abp.ng.suite",
      "version": "9.3.0-rc.4",
      "private": true,
      "schematics": "./collection.json",
      "dependencies": {
        "@abp/ng.schematics": "~9.3.0-rc.4",
        "@angular-devkit/core": "~20.0.0",
        "@angular-devkit/schematics": "~20.0.0",
        "execa": "^9.0.0",
        "jsonc-parser": "^2.0.0",
        "path": "^0.12.0",
        "prettier": "^3.0.0",
        "typescript": "~5.8.0"
      },
      "devDependencies": {
        "@angular/cli": "~20.0.0",
        "@schematics/angular": "~20.0.0",
        "@types/node": "^20.0.0",
        "@types/prettier": "^3.0.0"
      },
      "homepage": "https://abp.io",
      "repository": {
        "type": "git",
        "url": "https://github.com/volosoft/volo.git"
      },
      "license": "LGPL-3.0",
      "keywords": [
        "aspnetcore",
        "boilerplate",
        "framework",
        "web",
        "best-practices",
        "angular",
        "maui",
        "blazor",
        "mvc",
        "csharp",
        "webapp"
      ]
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\package-lock.json"><![CDATA[
    {
      "name": "@volo/abp.ng.suite",
      "version": "9.3.0-rc.4",
      "lockfileVersion": 3,
      "requires": true,
      "packages": {
        "": {
          "name": "@volo/abp.ng.suite",
          "version": "9.3.0-rc.4",
          "license": "LGPL-3.0",
          "dependencies": {
            "@abp/ng.schematics": "~9.3.0-rc.4",
            "@angular-devkit/core": "~20.0.0",
            "@angular-devkit/schematics": "~20.0.0",
            "execa": "^9.0.0",
            "jsonc-parser": "^2.0.0",
            "path": "^0.12.0",
            "prettier": "^3.0.0",
            "typescript": "~5.8.0"
          },
          "devDependencies": {
            "@angular/cli": "~20.0.0",
            "@schematics/angular": "~20.0.0",
            "@types/node": "^20.0.0",
            "@types/prettier": "^3.0.0"
          }
        },
        "node_modules/@abp/ng.schematics": {
          "version": "9.3.1",
          "resolved": "https://registry.npmjs.org/@abp/ng.schematics/-/ng.schematics-9.3.1.tgz",
          "integrity": "sha512-jv1eigGCOkA04mUJ+RDD6/k677dqf9sgIzuOFX+J45zeuL8YRn6LFB2SFk/iSSqjcXdK7rGUpJx4MvTUgxu7wA==",
          "license": "LGPL-3.0",
          "dependencies": {
            "@angular-devkit/core": "~20.0.0",
            "@angular-devkit/schematics": "~20.0.0",
            "@angular/cli": "~20.0.0",
            "got": "^11.5.2",
            "jsonc-parser": "^2.3.0",
            "should-quote": "^1.0.0",
            "typescript": "~5.8.0"
          }
        },
        "node_modules/@angular-devkit/architect": {
          "version": "0.2000.6",
          "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.2000.6.tgz",
          "integrity": "sha512-LvXYe7hqEgkBKzDy4VKTgCg2E2nAl8vC986n1+snzt2zMjo2l8wFl6BWal3AtaKGhPlp8/57Y53MdG2TIgUJNA==",
          "license": "MIT",
          "dependencies": {
            "@angular-devkit/core": "20.0.6",
            "rxjs": "7.8.2"
          },
          "engines": {
            "node": "^20.19.0 || ^22.12.0 || >=24.0.0",
            "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
            "yarn": ">= 1.13.0"
          }
        },
        "node_modules/@angular-devkit/core": {
          "version": "20.0.6",
          "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-20.0.6.tgz",
          "integrity": "sha512-kalYqR/soAMPgYdaKJL3iOMCubiq0gljpbQFzS+Uey/P1nn+MDY8V0zzc9cBNhKKkAxCXPN/NIEKC7ICOfaJbg==",
          "license": "MIT",
          "dependencies": {
            "ajv": "8.17.1",
            "ajv-formats": "3.0.1",
            "jsonc-parser": "3.3.1",
            "picomatch": "4.0.2",
            "rxjs": "7.8.2",
            "source-map": "0.7.4"
          },
          "engines": {
            "node": "^20.19.0 || ^22.12.0 || >=24.0.0",
            "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
            "yarn": ">= 1.13.0"
          },
          "peerDependencies": {
            "chokidar": "^4.0.0"
          },
          "peerDependenciesMeta": {
            "chokidar": {
              "optional": true
            }
          }
        },
        "node_modules/@angular-devkit/core/node_modules/jsonc-parser": {
          "version": "3.3.1",
          "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.3.1.tgz",
          "integrity": "sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==",
          "license": "MIT"
        },
        "node_modules/@angular-devkit/schematics": {
          "version": "20.0.6",
          "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-20.0.6.tgz",
          "integrity": "sha512-4YjAJVN6bPL7d46Jb4Rok703av5UHlHQBhfJfkPVrUV45mwUboBhBrl0WzlKuUN6JhE44xFO48LApxdT1rbYRA==",
          "license": "MIT",
          "dependencies": {
            "@angular-devkit/core": "20.0.6",
            "jsonc-parser": "3.3.1",
            "magic-string": "0.30.17",
            "ora": "8.2.0",
            "rxjs": "7.8.2"
          },
          "engines": {
            "node": "^20.19.0 || ^22.12.0 || >=24.0.0",
            "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
            "yarn": ">= 1.13.0"
          }
        },
        "node_modules/@angular-devkit/schematics/node_modules/jsonc-parser": {
          "version": "3.3.1",
          "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.3.1.tgz",
          "integrity": "sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==",
          "license": "MIT"
        },
        "node_modules/@angular/cli": {
          "version": "20.0.6",
          "resolved": "https://registry.npmjs.org/@angular/cli/-/cli-20.0.6.tgz",
          "integrity": "sha512-d7E3QgYQR42pxzvLOHryqxfEvFdcz6OKhskASQdNGdyH8lIXSKE08U/8KpaeMASTksJ8TmLu31N4JCiCSv29HA==",
          "license": "MIT",
          "dependencies": {
            "@angular-devkit/architect": "0.2000.6",
            "@angular-devkit/core": "20.0.6",
            "@angular-devkit/schematics": "20.0.6",
            "@inquirer/prompts": "7.5.1",
            "@listr2/prompt-adapter-inquirer": "2.0.22",
            "@schematics/angular": "20.0.6",
            "@yarnpkg/lockfile": "1.1.0",
            "ini": "5.0.0",
            "jsonc-parser": "3.3.1",
            "listr2": "8.3.3",
            "npm-package-arg": "12.0.2",
            "npm-pick-manifest": "10.0.0",
            "pacote": "21.0.0",
            "resolve": "1.22.10",
            "semver": "7.7.2",
            "yargs": "17.7.2"
          },
          "bin": {
            "ng": "bin/ng.js"
          },
          "engines": {
            "node": "^20.19.0 || ^22.12.0 || >=24.0.0",
            "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
            "yarn": ">= 1.13.0"
          }
        },
        "node_modules/@angular/cli/node_modules/jsonc-parser": {
          "version": "3.3.1",
          "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.3.1.tgz",
          "integrity": "sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==",
          "license": "MIT"
        },
        "node_modules/@inquirer/checkbox": {
          "version": "4.2.1",
          "resolved": "https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-4.2.1.tgz",
          "integrity": "sha512-bevKGO6kX1eM/N+pdh9leS5L7TBF4ICrzi9a+cbWkrxeAeIcwlo/7OfWGCDERdRCI2/Q6tjltX4bt07ALHDwFw==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/figures": "^1.0.13",
            "@inquirer/type": "^3.0.8",
            "ansi-escapes": "^4.3.2",
            "yoctocolors-cjs": "^2.1.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/confirm": {
          "version": "5.1.15",
          "resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-5.1.15.tgz",
          "integrity": "sha512-SwHMGa8Z47LawQN0rog0sT+6JpiL0B7eW9p1Bb7iCeKDGTI5Ez25TSc2l8kw52VV7hA4sX/C78CGkMrKXfuspA==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/type": "^3.0.8"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/core": {
          "version": "10.1.15",
          "resolved": "https://registry.npmjs.org/@inquirer/core/-/core-10.1.15.tgz",
          "integrity": "sha512-8xrp836RZvKkpNbVvgWUlxjT4CraKk2q+I3Ksy+seI2zkcE+y6wNs1BVhgcv8VyImFecUhdQrYLdW32pAjwBdA==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/figures": "^1.0.13",
            "@inquirer/type": "^3.0.8",
            "ansi-escapes": "^4.3.2",
            "cli-width": "^4.1.0",
            "mute-stream": "^2.0.0",
            "signal-exit": "^4.1.0",
            "wrap-ansi": "^6.2.0",
            "yoctocolors-cjs": "^2.1.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/editor": {
          "version": "4.2.17",
          "resolved": "https://registry.npmjs.org/@inquirer/editor/-/editor-4.2.17.tgz",
          "integrity": "sha512-r6bQLsyPSzbWrZZ9ufoWL+CztkSatnJ6uSxqd6N+o41EZC51sQeWOzI6s5jLb+xxTWxl7PlUppqm8/sow241gg==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/external-editor": "^1.0.1",
            "@inquirer/type": "^3.0.8"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/expand": {
          "version": "4.0.17",
          "resolved": "https://registry.npmjs.org/@inquirer/expand/-/expand-4.0.17.tgz",
          "integrity": "sha512-PSqy9VmJx/VbE3CT453yOfNa+PykpKg/0SYP7odez1/NWBGuDXgPhp4AeGYYKjhLn5lUUavVS/JbeYMPdH50Mw==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/type": "^3.0.8",
            "yoctocolors-cjs": "^2.1.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/external-editor": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/@inquirer/external-editor/-/external-editor-1.0.1.tgz",
          "integrity": "sha512-Oau4yL24d2B5IL4ma4UpbQigkVhzPDXLoqy1ggK4gnHg/stmkffJE4oOXHXF3uz0UEpywG68KcyXsyYpA1Re/Q==",
          "license": "MIT",
          "dependencies": {
            "chardet": "^2.1.0",
            "iconv-lite": "^0.6.3"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/figures": {
          "version": "1.0.13",
          "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.13.tgz",
          "integrity": "sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/@inquirer/input": {
          "version": "4.2.1",
          "resolved": "https://registry.npmjs.org/@inquirer/input/-/input-4.2.1.tgz",
          "integrity": "sha512-tVC+O1rBl0lJpoUZv4xY+WGWY8V5b0zxU1XDsMsIHYregdh7bN5X5QnIONNBAl0K765FYlAfNHS2Bhn7SSOVow==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/type": "^3.0.8"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/number": {
          "version": "3.0.17",
          "resolved": "https://registry.npmjs.org/@inquirer/number/-/number-3.0.17.tgz",
          "integrity": "sha512-GcvGHkyIgfZgVnnimURdOueMk0CztycfC8NZTiIY9arIAkeOgt6zG57G+7vC59Jns3UX27LMkPKnKWAOF5xEYg==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/type": "^3.0.8"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/password": {
          "version": "4.0.17",
          "resolved": "https://registry.npmjs.org/@inquirer/password/-/password-4.0.17.tgz",
          "integrity": "sha512-DJolTnNeZ00E1+1TW+8614F7rOJJCM4y4BAGQ3Gq6kQIG+OJ4zr3GLjIjVVJCbKsk2jmkmv6v2kQuN/vriHdZA==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/type": "^3.0.8",
            "ansi-escapes": "^4.3.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/prompts": {
          "version": "7.5.1",
          "resolved": "https://registry.npmjs.org/@inquirer/prompts/-/prompts-7.5.1.tgz",
          "integrity": "sha512-5AOrZPf2/GxZ+SDRZ5WFplCA2TAQgK3OYrXCYmJL5NaTu4ECcoWFlfUZuw7Es++6Njv7iu/8vpYJhuzxUH76Vg==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/checkbox": "^4.1.6",
            "@inquirer/confirm": "^5.1.10",
            "@inquirer/editor": "^4.2.11",
            "@inquirer/expand": "^4.0.13",
            "@inquirer/input": "^4.1.10",
            "@inquirer/number": "^3.0.13",
            "@inquirer/password": "^4.0.13",
            "@inquirer/rawlist": "^4.1.1",
            "@inquirer/search": "^3.0.13",
            "@inquirer/select": "^4.2.1"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/rawlist": {
          "version": "4.1.5",
          "resolved": "https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-4.1.5.tgz",
          "integrity": "sha512-R5qMyGJqtDdi4Ht521iAkNqyB6p2UPuZUbMifakg1sWtu24gc2Z8CJuw8rP081OckNDMgtDCuLe42Q2Kr3BolA==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/type": "^3.0.8",
            "yoctocolors-cjs": "^2.1.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/search": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/@inquirer/search/-/search-3.1.0.tgz",
          "integrity": "sha512-PMk1+O/WBcYJDq2H7foV0aAZSmDdkzZB9Mw2v/DmONRJopwA/128cS9M/TXWLKKdEQKZnKwBzqu2G4x/2Nqx8Q==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/figures": "^1.0.13",
            "@inquirer/type": "^3.0.8",
            "yoctocolors-cjs": "^2.1.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/select": {
          "version": "4.3.1",
          "resolved": "https://registry.npmjs.org/@inquirer/select/-/select-4.3.1.tgz",
          "integrity": "sha512-Gfl/5sqOF5vS/LIrSndFgOh7jgoe0UXEizDqahFRkq5aJBLegZ6WjuMh/hVEJwlFQjyLq1z9fRtvUMkb7jM1LA==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/core": "^10.1.15",
            "@inquirer/figures": "^1.0.13",
            "@inquirer/type": "^3.0.8",
            "ansi-escapes": "^4.3.2",
            "yoctocolors-cjs": "^2.1.2"
          },
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@inquirer/type": {
          "version": "3.0.8",
          "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-3.0.8.tgz",
          "integrity": "sha512-lg9Whz8onIHRthWaN1Q9EGLa/0LFJjyM8mEUbL1eTi6yMGvBf8gvyDLtxSXztQsxMvhxxNpJYrwa1YHdq+w4Jw==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "peerDependencies": {
            "@types/node": ">=18"
          },
          "peerDependenciesMeta": {
            "@types/node": {
              "optional": true
            }
          }
        },
        "node_modules/@isaacs/balanced-match": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/@isaacs/balanced-match/-/balanced-match-4.0.1.tgz",
          "integrity": "sha512-yzMTt9lEb8Gv7zRioUilSglI0c0smZ9k5D65677DLWLtWJaXIS3CqcGyUFByYKlnUj6TkjLVs54fBl6+TiGQDQ==",
          "license": "MIT",
          "engines": {
            "node": "20 || >=22"
          }
        },
        "node_modules/@isaacs/brace-expansion": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/@isaacs/brace-expansion/-/brace-expansion-5.0.0.tgz",
          "integrity": "sha512-ZT55BDLV0yv0RBm2czMiZ+SqCGO7AvmOM3G/w2xhVPH+te0aKgFjmBvGlL1dH+ql2tgGO3MVrbb3jCKyvpgnxA==",
          "license": "MIT",
          "dependencies": {
            "@isaacs/balanced-match": "^4.0.1"
          },
          "engines": {
            "node": "20 || >=22"
          }
        },
        "node_modules/@isaacs/cliui": {
          "version": "8.0.2",
          "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
          "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
          "license": "ISC",
          "dependencies": {
            "string-width": "^5.1.2",
            "string-width-cjs": "npm:string-width@^4.2.0",
            "strip-ansi": "^7.0.1",
            "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
            "wrap-ansi": "^8.1.0",
            "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
          },
          "engines": {
            "node": ">=12"
          }
        },
        "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
          "version": "9.2.2",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
          "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
          "license": "MIT"
        },
        "node_modules/@isaacs/cliui/node_modules/string-width": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
          "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
          "license": "MIT",
          "dependencies": {
            "eastasianwidth": "^0.2.0",
            "emoji-regex": "^9.2.2",
            "strip-ansi": "^7.0.1"
          },
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
          "version": "8.1.0",
          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
          "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^6.1.0",
            "string-width": "^5.0.1",
            "strip-ansi": "^7.0.1"
          },
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
          }
        },
        "node_modules/@isaacs/fs-minipass": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
          "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^7.0.4"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        },
        "node_modules/@jridgewell/sourcemap-codec": {
          "version": "1.5.5",
          "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
          "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
          "license": "MIT"
        },
        "node_modules/@listr2/prompt-adapter-inquirer": {
          "version": "2.0.22",
          "resolved": "https://registry.npmjs.org/@listr2/prompt-adapter-inquirer/-/prompt-adapter-inquirer-2.0.22.tgz",
          "integrity": "sha512-hV36ZoY+xKL6pYOt1nPNnkciFkn89KZwqLhAFzJvYysAvL5uBQdiADZx/8bIDXIukzzwG0QlPYolgMzQUtKgpQ==",
          "license": "MIT",
          "dependencies": {
            "@inquirer/type": "^1.5.5"
          },
          "engines": {
            "node": ">=18.0.0"
          },
          "peerDependencies": {
            "@inquirer/prompts": ">= 3 < 8"
          }
        },
        "node_modules/@listr2/prompt-adapter-inquirer/node_modules/@inquirer/type": {
          "version": "1.5.5",
          "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-1.5.5.tgz",
          "integrity": "sha512-MzICLu4yS7V8AA61sANROZ9vT1H3ooca5dSmI1FjZkzq7o/koMsRfQSzRtFo+F3Ao4Sf1C0bpLKejpKB/+j6MA==",
          "license": "MIT",
          "dependencies": {
            "mute-stream": "^1.0.0"
          },
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/@listr2/prompt-adapter-inquirer/node_modules/mute-stream": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
          "integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
          "license": "ISC",
          "engines": {
            "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
          }
        },
        "node_modules/@npmcli/agent": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/@npmcli/agent/-/agent-3.0.0.tgz",
          "integrity": "sha512-S79NdEgDQd/NGCay6TCoVzXSj74skRZIKJcpJjC5lOq34SZzyI6MqtiiWoiVWoVrTcGjNeC4ipbh1VIHlpfF5Q==",
          "license": "ISC",
          "dependencies": {
            "agent-base": "^7.1.0",
            "http-proxy-agent": "^7.0.0",
            "https-proxy-agent": "^7.0.1",
            "lru-cache": "^10.0.1",
            "socks-proxy-agent": "^8.0.3"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/fs": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/@npmcli/fs/-/fs-4.0.0.tgz",
          "integrity": "sha512-/xGlezI6xfGO9NwuJlnwz/K14qD1kCSAGtacBHnGzeAIuJGazcp45KP5NuyARXoKb7cwulAGWVsbeSxdG/cb0Q==",
          "license": "ISC",
          "dependencies": {
            "semver": "^7.3.5"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/git": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/@npmcli/git/-/git-6.0.3.tgz",
          "integrity": "sha512-GUYESQlxZRAdhs3UhbB6pVRNUELQOHXwK9ruDkwmCv2aZ5y0SApQzUJCg02p3A7Ue2J5hxvlk1YI53c00NmRyQ==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/promise-spawn": "^8.0.0",
            "ini": "^5.0.0",
            "lru-cache": "^10.0.1",
            "npm-pick-manifest": "^10.0.0",
            "proc-log": "^5.0.0",
            "promise-retry": "^2.0.1",
            "semver": "^7.3.5",
            "which": "^5.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/git/node_modules/isexe": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/isexe/-/isexe-3.1.1.tgz",
          "integrity": "sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==",
          "license": "ISC",
          "engines": {
            "node": ">=16"
          }
        },
        "node_modules/@npmcli/git/node_modules/which": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/which/-/which-5.0.0.tgz",
          "integrity": "sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==",
          "license": "ISC",
          "dependencies": {
            "isexe": "^3.1.1"
          },
          "bin": {
            "node-which": "bin/which.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/installed-package-contents": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/@npmcli/installed-package-contents/-/installed-package-contents-3.0.0.tgz",
          "integrity": "sha512-fkxoPuFGvxyrH+OQzyTkX2LUEamrF4jZSmxjAtPPHHGO0dqsQ8tTKjnIS8SAnPHdk2I03BDtSMR5K/4loKg79Q==",
          "license": "ISC",
          "dependencies": {
            "npm-bundled": "^4.0.0",
            "npm-normalize-package-bin": "^4.0.0"
          },
          "bin": {
            "installed-package-contents": "bin/index.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/node-gyp": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/@npmcli/node-gyp/-/node-gyp-4.0.0.tgz",
          "integrity": "sha512-+t5DZ6mO/QFh78PByMq1fGSAub/agLJZDRfJRMeOSNCt8s9YVlTjmGpIPwPhvXTGUIJk+WszlT0rQa1W33yzNA==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/package-json": {
          "version": "6.2.0",
          "resolved": "https://registry.npmjs.org/@npmcli/package-json/-/package-json-6.2.0.tgz",
          "integrity": "sha512-rCNLSB/JzNvot0SEyXqWZ7tX2B5dD2a1br2Dp0vSYVo5jh8Z0EZ7lS9TsZ1UtziddB1UfNUaMCc538/HztnJGA==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/git": "^6.0.0",
            "glob": "^10.2.2",
            "hosted-git-info": "^8.0.0",
            "json-parse-even-better-errors": "^4.0.0",
            "proc-log": "^5.0.0",
            "semver": "^7.5.3",
            "validate-npm-package-license": "^3.0.4"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/promise-spawn": {
          "version": "8.0.2",
          "resolved": "https://registry.npmjs.org/@npmcli/promise-spawn/-/promise-spawn-8.0.2.tgz",
          "integrity": "sha512-/bNJhjc+o6qL+Dwz/bqfTQClkEO5nTQ1ZEcdCkAQjhkZMHIh22LPG7fNh1enJP1NKWDqYiiABnjFCY7E0zHYtQ==",
          "license": "ISC",
          "dependencies": {
            "which": "^5.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/promise-spawn/node_modules/isexe": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/isexe/-/isexe-3.1.1.tgz",
          "integrity": "sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==",
          "license": "ISC",
          "engines": {
            "node": ">=16"
          }
        },
        "node_modules/@npmcli/promise-spawn/node_modules/which": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/which/-/which-5.0.0.tgz",
          "integrity": "sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==",
          "license": "ISC",
          "dependencies": {
            "isexe": "^3.1.1"
          },
          "bin": {
            "node-which": "bin/which.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/redact": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/@npmcli/redact/-/redact-3.2.2.tgz",
          "integrity": "sha512-7VmYAmk4csGv08QzrDKScdzn11jHPFGyqJW39FyPgPuAp3zIaUmuCo1yxw9aGs+NEJuTGQ9Gwqpt93vtJubucg==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/run-script": {
          "version": "9.1.0",
          "resolved": "https://registry.npmjs.org/@npmcli/run-script/-/run-script-9.1.0.tgz",
          "integrity": "sha512-aoNSbxtkePXUlbZB+anS1LqsJdctG5n3UVhfU47+CDdwMi6uNTBMF9gPcQRnqghQd2FGzcwwIFBruFMxjhBewg==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/node-gyp": "^4.0.0",
            "@npmcli/package-json": "^6.0.0",
            "@npmcli/promise-spawn": "^8.0.0",
            "node-gyp": "^11.0.0",
            "proc-log": "^5.0.0",
            "which": "^5.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@npmcli/run-script/node_modules/isexe": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/isexe/-/isexe-3.1.1.tgz",
          "integrity": "sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==",
          "license": "ISC",
          "engines": {
            "node": ">=16"
          }
        },
        "node_modules/@npmcli/run-script/node_modules/which": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/which/-/which-5.0.0.tgz",
          "integrity": "sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==",
          "license": "ISC",
          "dependencies": {
            "isexe": "^3.1.1"
          },
          "bin": {
            "node-which": "bin/which.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@pkgjs/parseargs": {
          "version": "0.11.0",
          "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
          "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
          "license": "MIT",
          "optional": true,
          "engines": {
            "node": ">=14"
          }
        },
        "node_modules/@schematics/angular": {
          "version": "20.0.6",
          "resolved": "https://registry.npmjs.org/@schematics/angular/-/angular-20.0.6.tgz",
          "integrity": "sha512-aAGHku+Aka8gNLBdgGOnofx2Do8bQoZbzfA4OGtrxrYR8C2wrES3fKmFbQO2aRyUjzX31w2oSOy9BNN/L3gnIA==",
          "license": "MIT",
          "dependencies": {
            "@angular-devkit/core": "20.0.6",
            "@angular-devkit/schematics": "20.0.6",
            "jsonc-parser": "3.3.1"
          },
          "engines": {
            "node": "^20.19.0 || ^22.12.0 || >=24.0.0",
            "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
            "yarn": ">= 1.13.0"
          }
        },
        "node_modules/@schematics/angular/node_modules/jsonc-parser": {
          "version": "3.3.1",
          "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.3.1.tgz",
          "integrity": "sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==",
          "license": "MIT"
        },
        "node_modules/@sec-ant/readable-stream": {
          "version": "0.4.1",
          "resolved": "https://registry.npmjs.org/@sec-ant/readable-stream/-/readable-stream-0.4.1.tgz",
          "integrity": "sha512-831qok9r2t8AlxLko40y2ebgSDhenenCatLVeW/uBtnHPyhHOvG0C7TvfgecV+wHzIm5KUICgzmVpWS+IMEAeg==",
          "license": "MIT"
        },
        "node_modules/@sigstore/bundle": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/@sigstore/bundle/-/bundle-3.1.0.tgz",
          "integrity": "sha512-Mm1E3/CmDDCz3nDhFKTuYdB47EdRFRQMOE/EAbiG1MJW77/w1b3P7Qx7JSrVJs8PfwOLOVcKQCHErIwCTyPbag==",
          "license": "Apache-2.0",
          "dependencies": {
            "@sigstore/protobuf-specs": "^0.4.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@sigstore/core": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/@sigstore/core/-/core-2.0.0.tgz",
          "integrity": "sha512-nYxaSb/MtlSI+JWcwTHQxyNmWeWrUXJJ/G4liLrGG7+tS4vAz6LF3xRXqLH6wPIVUoZQel2Fs4ddLx4NCpiIYg==",
          "license": "Apache-2.0",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@sigstore/protobuf-specs": {
          "version": "0.4.3",
          "resolved": "https://registry.npmjs.org/@sigstore/protobuf-specs/-/protobuf-specs-0.4.3.tgz",
          "integrity": "sha512-fk2zjD9117RL9BjqEwF7fwv7Q/P9yGsMV4MUJZ/DocaQJ6+3pKr+syBq1owU5Q5qGw5CUbXzm+4yJ2JVRDQeSA==",
          "license": "Apache-2.0",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@sigstore/sign": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/@sigstore/sign/-/sign-3.1.0.tgz",
          "integrity": "sha512-knzjmaOHOov1Ur7N/z4B1oPqZ0QX5geUfhrVaqVlu+hl0EAoL4o+l0MSULINcD5GCWe3Z0+YJO8ues6vFlW0Yw==",
          "license": "Apache-2.0",
          "dependencies": {
            "@sigstore/bundle": "^3.1.0",
            "@sigstore/core": "^2.0.0",
            "@sigstore/protobuf-specs": "^0.4.0",
            "make-fetch-happen": "^14.0.2",
            "proc-log": "^5.0.0",
            "promise-retry": "^2.0.1"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@sigstore/tuf": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/@sigstore/tuf/-/tuf-3.1.1.tgz",
          "integrity": "sha512-eFFvlcBIoGwVkkwmTi/vEQFSva3xs5Ot3WmBcjgjVdiaoelBLQaQ/ZBfhlG0MnG0cmTYScPpk7eDdGDWUcFUmg==",
          "license": "Apache-2.0",
          "dependencies": {
            "@sigstore/protobuf-specs": "^0.4.1",
            "tuf-js": "^3.0.1"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@sigstore/verify": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/@sigstore/verify/-/verify-2.1.1.tgz",
          "integrity": "sha512-hVJD77oT67aowHxwT4+M6PGOp+E2LtLdTK3+FC0lBO9T7sYwItDMXZ7Z07IDCvR1M717a4axbIWckrW67KMP/w==",
          "license": "Apache-2.0",
          "dependencies": {
            "@sigstore/bundle": "^3.1.0",
            "@sigstore/core": "^2.0.0",
            "@sigstore/protobuf-specs": "^0.4.1"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@sindresorhus/is": {
          "version": "4.6.0",
          "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
          "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
          "license": "MIT",
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sindresorhus/is?sponsor=1"
          }
        },
        "node_modules/@sindresorhus/merge-streams": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/@sindresorhus/merge-streams/-/merge-streams-4.0.0.tgz",
          "integrity": "sha512-tlqY9xq5ukxTUZBmoOp+m61cqwQD5pHJtFY3Mn8CA8ps6yghLH/Hw8UPdqg4OLmFW3IFlcXnQNmo/dh8HzXYIQ==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/@szmarczak/http-timer": {
          "version": "4.0.6",
          "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
          "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
          "license": "MIT",
          "dependencies": {
            "defer-to-connect": "^2.0.0"
          },
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/@tufjs/canonical-json": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/@tufjs/canonical-json/-/canonical-json-2.0.0.tgz",
          "integrity": "sha512-yVtV8zsdo8qFHe+/3kw81dSLyF7D576A5cCFCi4X7B39tWT7SekaEFUnvnWJHz+9qO7qJTah1JbrDjWKqFtdWA==",
          "license": "MIT",
          "engines": {
            "node": "^16.14.0 || >=18.0.0"
          }
        },
        "node_modules/@tufjs/models": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/@tufjs/models/-/models-3.0.1.tgz",
          "integrity": "sha512-UUYHISyhCU3ZgN8yaear3cGATHb3SMuKHsQ/nVbHXcmnBf+LzQ/cQfhNG+rfaSHgqGKNEm2cOCLVLELStUQ1JA==",
          "license": "MIT",
          "dependencies": {
            "@tufjs/canonical-json": "2.0.0",
            "minimatch": "^9.0.5"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/@types/cacheable-request": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
          "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
          "license": "MIT",
          "dependencies": {
            "@types/http-cache-semantics": "*",
            "@types/keyv": "^3.1.4",
            "@types/node": "*",
            "@types/responselike": "^1.0.0"
          }
        },
        "node_modules/@types/http-cache-semantics": {
          "version": "4.0.4",
          "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.4.tgz",
          "integrity": "sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==",
          "license": "MIT"
        },
        "node_modules/@types/keyv": {
          "version": "3.1.4",
          "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
          "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
          "license": "MIT",
          "dependencies": {
            "@types/node": "*"
          }
        },
        "node_modules/@types/node": {
          "version": "20.19.11",
          "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.11.tgz",
          "integrity": "sha512-uug3FEEGv0r+jrecvUUpbY8lLisvIjg6AAic6a2bSP5OEOLeJsDSnvhCDov7ipFFMXS3orMpzlmi0ZcuGkBbow==",
          "license": "MIT",
          "dependencies": {
            "undici-types": "~6.21.0"
          }
        },
        "node_modules/@types/prettier": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/@types/prettier/-/prettier-3.0.0.tgz",
          "integrity": "sha512-mFMBfMOz8QxhYVbuINtswBp9VL2b4Y0QqYHwqLz3YbgtfAcat2Dl6Y1o4e22S/OVE6Ebl9m7wWiMT2lSbAs1wA==",
          "deprecated": "This is a stub types definition. prettier provides its own type definitions, so you do not need this installed.",
          "dev": true,
          "license": "MIT",
          "dependencies": {
            "prettier": "*"
          }
        },
        "node_modules/@types/responselike": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.3.tgz",
          "integrity": "sha512-H/+L+UkTV33uf49PH5pCAUBVPNj2nDBXTN+qS1dOwyyg24l3CcicicCA7ca+HMvJBZcFgl5r8e+RR6elsb4Lyw==",
          "license": "MIT",
          "dependencies": {
            "@types/node": "*"
          }
        },
        "node_modules/@yarnpkg/lockfile": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/@yarnpkg/lockfile/-/lockfile-1.1.0.tgz",
          "integrity": "sha512-GpSwvyXOcOOlV70vbnzjj4fW5xW/FdUF6nQEt1ENy7m4ZCczi1+/buVUPAqmGfqznsORNFzUMjctTIp8a9tuCQ==",
          "license": "BSD-2-Clause"
        },
        "node_modules/abbrev": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-3.0.1.tgz",
          "integrity": "sha512-AO2ac6pjRB3SJmGJo+v5/aK6Omggp6fsLrs6wN9bd35ulu4cCwaAU9+7ZhXjeqHVkaHThLuzH0nZr0YpCDhygg==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/agent-base": {
          "version": "7.1.4",
          "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
          "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
          "license": "MIT",
          "engines": {
            "node": ">= 14"
          }
        },
        "node_modules/ajv": {
          "version": "8.17.1",
          "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
          "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
          "license": "MIT",
          "dependencies": {
            "fast-deep-equal": "^3.1.3",
            "fast-uri": "^3.0.1",
            "json-schema-traverse": "^1.0.0",
            "require-from-string": "^2.0.2"
          },
          "funding": {
            "type": "github",
            "url": "https://github.com/sponsors/epoberezkin"
          }
        },
        "node_modules/ajv-formats": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-3.0.1.tgz",
          "integrity": "sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==",
          "license": "MIT",
          "dependencies": {
            "ajv": "^8.0.0"
          },
          "peerDependencies": {
            "ajv": "^8.0.0"
          },
          "peerDependenciesMeta": {
            "ajv": {
              "optional": true
            }
          }
        },
        "node_modules/ansi-escapes": {
          "version": "4.3.2",
          "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
          "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
          "license": "MIT",
          "dependencies": {
            "type-fest": "^0.21.3"
          },
          "engines": {
            "node": ">=8"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/ansi-regex": {
          "version": "6.2.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.0.tgz",
          "integrity": "sha512-TKY5pyBkHyADOPYlRT9Lx6F544mPl0vS5Ew7BJ45hA08Q+t3GjbueLliBWN3sMICk6+y7HdyxSzC4bWS8baBdg==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/chalk/ansi-regex?sponsor=1"
          }
        },
        "node_modules/ansi-styles": {
          "version": "6.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
          "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/chalk/ansi-styles?sponsor=1"
          }
        },
        "node_modules/balanced-match": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
          "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
          "license": "MIT"
        },
        "node_modules/brace-expansion": {
          "version": "2.0.2",
          "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
          "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
          "license": "MIT",
          "dependencies": {
            "balanced-match": "^1.0.0"
          }
        },
        "node_modules/cacache": {
          "version": "19.0.1",
          "resolved": "https://registry.npmjs.org/cacache/-/cacache-19.0.1.tgz",
          "integrity": "sha512-hdsUxulXCi5STId78vRVYEtDAjq99ICAUktLTeTYsLoTE6Z8dS0c8pWNCxwdrk9YfJeobDZc2Y186hD/5ZQgFQ==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/fs": "^4.0.0",
            "fs-minipass": "^3.0.0",
            "glob": "^10.2.2",
            "lru-cache": "^10.0.1",
            "minipass": "^7.0.3",
            "minipass-collect": "^2.0.1",
            "minipass-flush": "^1.0.5",
            "minipass-pipeline": "^1.2.4",
            "p-map": "^7.0.2",
            "ssri": "^12.0.0",
            "tar": "^7.4.3",
            "unique-filename": "^4.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/cacache/node_modules/chownr": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
          "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
          "license": "BlueOak-1.0.0",
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/cacache/node_modules/mkdirp": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
          "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
          "license": "MIT",
          "bin": {
            "mkdirp": "dist/cjs/src/bin.js"
          },
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/cacache/node_modules/tar": {
          "version": "7.4.3",
          "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
          "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
          "license": "ISC",
          "dependencies": {
            "@isaacs/fs-minipass": "^4.0.0",
            "chownr": "^3.0.0",
            "minipass": "^7.1.2",
            "minizlib": "^3.0.1",
            "mkdirp": "^3.0.1",
            "yallist": "^5.0.0"
          },
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/cacache/node_modules/yallist": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
          "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
          "license": "BlueOak-1.0.0",
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/cacheable-lookup": {
          "version": "5.0.4",
          "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
          "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
          "license": "MIT",
          "engines": {
            "node": ">=10.6.0"
          }
        },
        "node_modules/cacheable-request": {
          "version": "7.0.4",
          "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.4.tgz",
          "integrity": "sha512-v+p6ongsrp0yTGbJXjgxPow2+DL93DASP4kXCDKb8/bwRtt9OEF3whggkkDkGNzgcWy2XaF4a8nZglC7uElscg==",
          "license": "MIT",
          "dependencies": {
            "clone-response": "^1.0.2",
            "get-stream": "^5.1.0",
            "http-cache-semantics": "^4.0.0",
            "keyv": "^4.0.0",
            "lowercase-keys": "^2.0.0",
            "normalize-url": "^6.0.1",
            "responselike": "^2.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/cacheable-request/node_modules/get-stream": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
          "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
          "license": "MIT",
          "dependencies": {
            "pump": "^3.0.0"
          },
          "engines": {
            "node": ">=8"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/chalk": {
          "version": "5.6.0",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.6.0.tgz",
          "integrity": "sha512-46QrSQFyVSEyYAgQ22hQ+zDa60YHA4fBstHmtSApj1Y5vKtG27fWowW03jCk5KcbXEWPZUIR894aARCA/G1kfQ==",
          "license": "MIT",
          "engines": {
            "node": "^12.17.0 || ^14.13 || >=16.0.0"
          },
          "funding": {
            "url": "https://github.com/chalk/chalk?sponsor=1"
          }
        },
        "node_modules/chardet": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/chardet/-/chardet-2.1.0.tgz",
          "integrity": "sha512-bNFETTG/pM5ryzQ9Ad0lJOTa6HWD/YsScAR3EnCPZRPlQh77JocYktSHOUHelyhm8IARL+o4c4F1bP5KVOjiRA==",
          "license": "MIT"
        },
        "node_modules/chownr": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
          "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
          "license": "ISC",
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/cli-cursor": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz",
          "integrity": "sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==",
          "license": "MIT",
          "dependencies": {
            "restore-cursor": "^5.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/cli-spinners": {
          "version": "2.9.2",
          "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
          "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
          "license": "MIT",
          "engines": {
            "node": ">=6"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/cli-truncate": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-4.0.0.tgz",
          "integrity": "sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==",
          "license": "MIT",
          "dependencies": {
            "slice-ansi": "^5.0.0",
            "string-width": "^7.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/cli-width": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
          "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
          "license": "ISC",
          "engines": {
            "node": ">= 12"
          }
        },
        "node_modules/cliui": {
          "version": "8.0.1",
          "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
          "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
          "license": "ISC",
          "dependencies": {
            "string-width": "^4.2.0",
            "strip-ansi": "^6.0.1",
            "wrap-ansi": "^7.0.0"
          },
          "engines": {
            "node": ">=12"
          }
        },
        "node_modules/cliui/node_modules/ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/cliui/node_modules/ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "license": "MIT",
          "dependencies": {
            "color-convert": "^2.0.1"
          },
          "engines": {
            "node": ">=8"
          },
          "funding": {
            "url": "https://github.com/chalk/ansi-styles?sponsor=1"
          }
        },
        "node_modules/cliui/node_modules/emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
          "license": "MIT"
        },
        "node_modules/cliui/node_modules/is-fullwidth-code-point": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/cliui/node_modules/string-width": {
          "version": "4.2.3",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
          "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
          "license": "MIT",
          "dependencies": {
            "emoji-regex": "^8.0.0",
            "is-fullwidth-code-point": "^3.0.0",
            "strip-ansi": "^6.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/cliui/node_modules/strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^5.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/cliui/node_modules/wrap-ansi": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
          "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^4.0.0",
            "string-width": "^4.1.0",
            "strip-ansi": "^6.0.0"
          },
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
          }
        },
        "node_modules/clone-response": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
          "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
          "license": "MIT",
          "dependencies": {
            "mimic-response": "^1.0.0"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "license": "MIT",
          "dependencies": {
            "color-name": "~1.1.4"
          },
          "engines": {
            "node": ">=7.0.0"
          }
        },
        "node_modules/color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
          "license": "MIT"
        },
        "node_modules/colorette": {
          "version": "2.0.20",
          "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
          "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
          "license": "MIT"
        },
        "node_modules/cross-spawn": {
          "version": "7.0.6",
          "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
          "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
          "license": "MIT",
          "dependencies": {
            "path-key": "^3.1.0",
            "shebang-command": "^2.0.0",
            "which": "^2.0.1"
          },
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/debug": {
          "version": "4.4.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
          "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
          "license": "MIT",
          "dependencies": {
            "ms": "^2.1.3"
          },
          "engines": {
            "node": ">=6.0"
          },
          "peerDependenciesMeta": {
            "supports-color": {
              "optional": true
            }
          }
        },
        "node_modules/decompress-response": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
          "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
          "license": "MIT",
          "dependencies": {
            "mimic-response": "^3.1.0"
          },
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/decompress-response/node_modules/mimic-response": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
          "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
          "license": "MIT",
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/defer-to-connect": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
          "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
          "license": "MIT",
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/eastasianwidth": {
          "version": "0.2.0",
          "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
          "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
          "license": "MIT"
        },
        "node_modules/emoji-regex": {
          "version": "10.4.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
          "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
          "license": "MIT"
        },
        "node_modules/encoding": {
          "version": "0.1.13",
          "resolved": "https://registry.npmjs.org/encoding/-/encoding-0.1.13.tgz",
          "integrity": "sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==",
          "license": "MIT",
          "optional": true,
          "dependencies": {
            "iconv-lite": "^0.6.2"
          }
        },
        "node_modules/end-of-stream": {
          "version": "1.4.5",
          "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
          "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
          "license": "MIT",
          "dependencies": {
            "once": "^1.4.0"
          }
        },
        "node_modules/env-paths": {
          "version": "2.2.1",
          "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
          "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
          "license": "MIT",
          "engines": {
            "node": ">=6"
          }
        },
        "node_modules/environment": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/environment/-/environment-1.1.0.tgz",
          "integrity": "sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/err-code": {
          "version": "2.0.3",
          "resolved": "https://registry.npmjs.org/err-code/-/err-code-2.0.3.tgz",
          "integrity": "sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==",
          "license": "MIT"
        },
        "node_modules/escalade": {
          "version": "3.2.0",
          "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
          "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
          "license": "MIT",
          "engines": {
            "node": ">=6"
          }
        },
        "node_modules/eventemitter3": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
          "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
          "license": "MIT"
        },
        "node_modules/execa": {
          "version": "9.6.0",
          "resolved": "https://registry.npmjs.org/execa/-/execa-9.6.0.tgz",
          "integrity": "sha512-jpWzZ1ZhwUmeWRhS7Qv3mhpOhLfwI+uAX4e5fOcXqwMR7EcJ0pj2kV1CVzHVMX/LphnKWD3LObjZCoJ71lKpHw==",
          "license": "MIT",
          "dependencies": {
            "@sindresorhus/merge-streams": "^4.0.0",
            "cross-spawn": "^7.0.6",
            "figures": "^6.1.0",
            "get-stream": "^9.0.0",
            "human-signals": "^8.0.1",
            "is-plain-obj": "^4.1.0",
            "is-stream": "^4.0.1",
            "npm-run-path": "^6.0.0",
            "pretty-ms": "^9.2.0",
            "signal-exit": "^4.1.0",
            "strip-final-newline": "^4.0.0",
            "yoctocolors": "^2.1.1"
          },
          "engines": {
            "node": "^18.19.0 || >=20.5.0"
          },
          "funding": {
            "url": "https://github.com/sindresorhus/execa?sponsor=1"
          }
        },
        "node_modules/exponential-backoff": {
          "version": "3.1.2",
          "resolved": "https://registry.npmjs.org/exponential-backoff/-/exponential-backoff-3.1.2.tgz",
          "integrity": "sha512-8QxYTVXUkuy7fIIoitQkPwGonB8F3Zj8eEO8Sqg9Zv/bkI7RJAzowee4gr81Hak/dUTpA2Z7VfQgoijjPNlUZA==",
          "license": "Apache-2.0"
        },
        "node_modules/fast-deep-equal": {
          "version": "3.1.3",
          "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
          "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
          "license": "MIT"
        },
        "node_modules/fast-uri": {
          "version": "3.0.6",
          "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
          "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
          "funding": [
            {
              "type": "github",
              "url": "https://github.com/sponsors/fastify"
            },
            {
              "type": "opencollective",
              "url": "https://opencollective.com/fastify"
            }
          ],
          "license": "BSD-3-Clause"
        },
        "node_modules/fdir": {
          "version": "6.5.0",
          "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
          "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
          "license": "MIT",
          "engines": {
            "node": ">=12.0.0"
          },
          "peerDependencies": {
            "picomatch": "^3 || ^4"
          },
          "peerDependenciesMeta": {
            "picomatch": {
              "optional": true
            }
          }
        },
        "node_modules/figures": {
          "version": "6.1.0",
          "resolved": "https://registry.npmjs.org/figures/-/figures-6.1.0.tgz",
          "integrity": "sha512-d+l3qxjSesT4V7v2fh+QnmFnUWv9lSpjarhShNTgBOfA0ttejbQUAlHLitbjkoRiDulW0OPoQPYIGhIC8ohejg==",
          "license": "MIT",
          "dependencies": {
            "is-unicode-supported": "^2.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/foreground-child": {
          "version": "3.3.1",
          "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
          "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
          "license": "ISC",
          "dependencies": {
            "cross-spawn": "^7.0.6",
            "signal-exit": "^4.0.1"
          },
          "engines": {
            "node": ">=14"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/fs-minipass": {
          "version": "3.0.3",
          "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-3.0.3.tgz",
          "integrity": "sha512-XUBA9XClHbnJWSfBzjkm6RvPsyg3sryZt06BEQoXcF7EK/xpGaQYJgQKDJSUH5SGZ76Y7pFx1QBnXz09rU5Fbw==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^7.0.3"
          },
          "engines": {
            "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
          }
        },
        "node_modules/function-bind": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
          "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
          "license": "MIT",
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/get-caller-file": {
          "version": "2.0.5",
          "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
          "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
          "license": "ISC",
          "engines": {
            "node": "6.* || 8.* || >= 10.*"
          }
        },
        "node_modules/get-east-asian-width": {
          "version": "1.3.0",
          "resolved": "https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.3.0.tgz",
          "integrity": "sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/get-stream": {
          "version": "9.0.1",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-9.0.1.tgz",
          "integrity": "sha512-kVCxPF3vQM/N0B1PmoqVUqgHP+EeVjmZSQn+1oCRPxd2P21P2F19lIgbR3HBosbB1PUhOAoctJnfEn2GbN2eZA==",
          "license": "MIT",
          "dependencies": {
            "@sec-ant/readable-stream": "^0.4.1",
            "is-stream": "^4.0.1"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/glob": {
          "version": "10.4.5",
          "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
          "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
          "license": "ISC",
          "dependencies": {
            "foreground-child": "^3.1.0",
            "jackspeak": "^3.1.2",
            "minimatch": "^9.0.4",
            "minipass": "^7.1.2",
            "package-json-from-dist": "^1.0.0",
            "path-scurry": "^1.11.1"
          },
          "bin": {
            "glob": "dist/esm/bin.mjs"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/got": {
          "version": "11.8.6",
          "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
          "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
          "license": "MIT",
          "dependencies": {
            "@sindresorhus/is": "^4.0.0",
            "@szmarczak/http-timer": "^4.0.5",
            "@types/cacheable-request": "^6.0.1",
            "@types/responselike": "^1.0.0",
            "cacheable-lookup": "^5.0.3",
            "cacheable-request": "^7.0.2",
            "decompress-response": "^6.0.0",
            "http2-wrapper": "^1.0.0-beta.5.2",
            "lowercase-keys": "^2.0.0",
            "p-cancelable": "^2.0.0",
            "responselike": "^2.0.0"
          },
          "engines": {
            "node": ">=10.19.0"
          },
          "funding": {
            "url": "https://github.com/sindresorhus/got?sponsor=1"
          }
        },
        "node_modules/graceful-fs": {
          "version": "4.2.11",
          "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
          "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
          "license": "ISC"
        },
        "node_modules/hasown": {
          "version": "2.0.2",
          "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
          "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
          "license": "MIT",
          "dependencies": {
            "function-bind": "^1.1.2"
          },
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/hosted-git-info": {
          "version": "8.1.0",
          "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-8.1.0.tgz",
          "integrity": "sha512-Rw/B2DNQaPBICNXEm8balFz9a6WpZrkCGpcWFpy7nCj+NyhSdqXipmfvtmWt9xGfp0wZnBxB+iVpLmQMYt47Tw==",
          "license": "ISC",
          "dependencies": {
            "lru-cache": "^10.0.1"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/http-cache-semantics": {
          "version": "4.2.0",
          "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz",
          "integrity": "sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==",
          "license": "BSD-2-Clause"
        },
        "node_modules/http-proxy-agent": {
          "version": "7.0.2",
          "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
          "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
          "license": "MIT",
          "dependencies": {
            "agent-base": "^7.1.0",
            "debug": "^4.3.4"
          },
          "engines": {
            "node": ">= 14"
          }
        },
        "node_modules/http2-wrapper": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
          "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
          "license": "MIT",
          "dependencies": {
            "quick-lru": "^5.1.1",
            "resolve-alpn": "^1.0.0"
          },
          "engines": {
            "node": ">=10.19.0"
          }
        },
        "node_modules/https-proxy-agent": {
          "version": "7.0.6",
          "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
          "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
          "license": "MIT",
          "dependencies": {
            "agent-base": "^7.1.2",
            "debug": "4"
          },
          "engines": {
            "node": ">= 14"
          }
        },
        "node_modules/human-signals": {
          "version": "8.0.1",
          "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-8.0.1.tgz",
          "integrity": "sha512-eKCa6bwnJhvxj14kZk5NCPc6Hb6BdsU9DZcOnmQKSnO1VKrfV0zCvtttPZUsBvjmNDn8rpcJfpwSYnHBjc95MQ==",
          "license": "Apache-2.0",
          "engines": {
            "node": ">=18.18.0"
          }
        },
        "node_modules/iconv-lite": {
          "version": "0.6.3",
          "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
          "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
          "license": "MIT",
          "dependencies": {
            "safer-buffer": ">= 2.1.2 < 3.0.0"
          },
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/ignore-walk": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/ignore-walk/-/ignore-walk-8.0.0.tgz",
          "integrity": "sha512-FCeMZT4NiRQGh+YkeKMtWrOmBgWjHjMJ26WQWrRQyoyzqevdaGSakUaJW5xQYmjLlUVk2qUnCjYVBax9EKKg8A==",
          "license": "ISC",
          "dependencies": {
            "minimatch": "^10.0.3"
          },
          "engines": {
            "node": "^20.17.0 || >=22.9.0"
          }
        },
        "node_modules/ignore-walk/node_modules/minimatch": {
          "version": "10.0.3",
          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-10.0.3.tgz",
          "integrity": "sha512-IPZ167aShDZZUMdRk66cyQAW3qr0WzbHkPdMYa8bzZhlHhO3jALbKdxcaak7W9FfT2rZNpQuUu4Od7ILEpXSaw==",
          "license": "ISC",
          "dependencies": {
            "@isaacs/brace-expansion": "^5.0.0"
          },
          "engines": {
            "node": "20 || >=22"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/imurmurhash": {
          "version": "0.1.4",
          "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
          "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
          "license": "MIT",
          "engines": {
            "node": ">=0.8.19"
          }
        },
        "node_modules/inherits": {
          "version": "2.0.3",
          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
          "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==",
          "license": "ISC"
        },
        "node_modules/ini": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/ini/-/ini-5.0.0.tgz",
          "integrity": "sha512-+N0ngpO3e7cRUWOJAS7qw0IZIVc6XPrW4MlFBdD066F2L4k1L6ker3hLqSq7iXxU5tgS4WGkIUElWn5vogAEnw==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/ip-address": {
          "version": "10.0.1",
          "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-10.0.1.tgz",
          "integrity": "sha512-NWv9YLW4PoW2B7xtzaS3NCot75m6nK7Icdv0o3lfMceJVRfSoQwqD4wEH5rLwoKJwUiZ/rfpiVBhnaF0FK4HoA==",
          "license": "MIT",
          "engines": {
            "node": ">= 12"
          }
        },
        "node_modules/is-core-module": {
          "version": "2.16.1",
          "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
          "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
          "license": "MIT",
          "dependencies": {
            "hasown": "^2.0.2"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/is-fullwidth-code-point": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
          "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/is-interactive": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-2.0.0.tgz",
          "integrity": "sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/is-plain-obj": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-4.1.0.tgz",
          "integrity": "sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/is-stream": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-4.0.1.tgz",
          "integrity": "sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/is-unicode-supported": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-2.1.0.tgz",
          "integrity": "sha512-mE00Gnza5EEB3Ds0HfMyllZzbBrmLOX3vfWoj9A9PEnTfratQ/BcaJOuMhnkhjXvb2+FkY3VuHqtAGpTPmglFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/isexe": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
          "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
          "license": "ISC"
        },
        "node_modules/jackspeak": {
          "version": "3.4.3",
          "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
          "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
          "license": "BlueOak-1.0.0",
          "dependencies": {
            "@isaacs/cliui": "^8.0.2"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          },
          "optionalDependencies": {
            "@pkgjs/parseargs": "^0.11.0"
          }
        },
        "node_modules/json-buffer": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
          "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
          "license": "MIT"
        },
        "node_modules/json-parse-even-better-errors": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-4.0.0.tgz",
          "integrity": "sha512-lR4MXjGNgkJc7tkQ97kb2nuEMnNCyU//XYVH0MKTGcXEiSudQ5MKGKen3C5QubYy0vmq+JGitUg92uuywGEwIA==",
          "license": "MIT",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/json-schema-traverse": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
          "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
          "license": "MIT"
        },
        "node_modules/jsonc-parser": {
          "version": "2.3.1",
          "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-2.3.1.tgz",
          "integrity": "sha512-H8jvkz1O50L3dMZCsLqiuB2tA7muqbSg1AtGEkN0leAqGjsUzDJir3Zwr02BhqdcITPg3ei3mZ+HjMocAknhhg==",
          "license": "MIT"
        },
        "node_modules/jsonparse": {
          "version": "1.3.1",
          "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
          "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==",
          "engines": [
            "node >= 0.2.0"
          ],
          "license": "MIT"
        },
        "node_modules/keyv": {
          "version": "4.5.4",
          "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
          "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
          "license": "MIT",
          "dependencies": {
            "json-buffer": "3.0.1"
          }
        },
        "node_modules/listr2": {
          "version": "8.3.3",
          "resolved": "https://registry.npmjs.org/listr2/-/listr2-8.3.3.tgz",
          "integrity": "sha512-LWzX2KsqcB1wqQ4AHgYb4RsDXauQiqhjLk+6hjbaeHG4zpjjVAB6wC/gz6X0l+Du1cN3pUB5ZlrvTbhGSNnUQQ==",
          "license": "MIT",
          "dependencies": {
            "cli-truncate": "^4.0.0",
            "colorette": "^2.0.20",
            "eventemitter3": "^5.0.1",
            "log-update": "^6.1.0",
            "rfdc": "^1.4.1",
            "wrap-ansi": "^9.0.0"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        },
        "node_modules/listr2/node_modules/wrap-ansi": {
          "version": "9.0.0",
          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
          "integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^6.2.1",
            "string-width": "^7.0.0",
            "strip-ansi": "^7.1.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
          }
        },
        "node_modules/log-symbols": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-6.0.0.tgz",
          "integrity": "sha512-i24m8rpwhmPIS4zscNzK6MSEhk0DUWa/8iYQWxhffV8jkI4Phvs3F+quL5xvS0gdQR0FyTCMMH33Y78dDTzzIw==",
          "license": "MIT",
          "dependencies": {
            "chalk": "^5.3.0",
            "is-unicode-supported": "^1.3.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/log-symbols/node_modules/is-unicode-supported": {
          "version": "1.3.0",
          "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
          "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/log-update": {
          "version": "6.1.0",
          "resolved": "https://registry.npmjs.org/log-update/-/log-update-6.1.0.tgz",
          "integrity": "sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==",
          "license": "MIT",
          "dependencies": {
            "ansi-escapes": "^7.0.0",
            "cli-cursor": "^5.0.0",
            "slice-ansi": "^7.1.0",
            "strip-ansi": "^7.1.0",
            "wrap-ansi": "^9.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/log-update/node_modules/ansi-escapes": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-7.0.0.tgz",
          "integrity": "sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==",
          "license": "MIT",
          "dependencies": {
            "environment": "^1.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/log-update/node_modules/is-fullwidth-code-point": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz",
          "integrity": "sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==",
          "license": "MIT",
          "dependencies": {
            "get-east-asian-width": "^1.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/log-update/node_modules/slice-ansi": {
          "version": "7.1.0",
          "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-7.1.0.tgz",
          "integrity": "sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^6.2.1",
            "is-fullwidth-code-point": "^5.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/chalk/slice-ansi?sponsor=1"
          }
        },
        "node_modules/log-update/node_modules/wrap-ansi": {
          "version": "9.0.0",
          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
          "integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^6.2.1",
            "string-width": "^7.0.0",
            "strip-ansi": "^7.1.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
          }
        },
        "node_modules/lowercase-keys": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
          "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/lru-cache": {
          "version": "10.4.3",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
          "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
          "license": "ISC"
        },
        "node_modules/magic-string": {
          "version": "0.30.17",
          "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
          "integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
          "license": "MIT",
          "dependencies": {
            "@jridgewell/sourcemap-codec": "^1.5.0"
          }
        },
        "node_modules/make-fetch-happen": {
          "version": "14.0.3",
          "resolved": "https://registry.npmjs.org/make-fetch-happen/-/make-fetch-happen-14.0.3.tgz",
          "integrity": "sha512-QMjGbFTP0blj97EeidG5hk/QhKQ3T4ICckQGLgz38QF7Vgbk6e6FTARN8KhKxyBbWn8R0HU+bnw8aSoFPD4qtQ==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/agent": "^3.0.0",
            "cacache": "^19.0.1",
            "http-cache-semantics": "^4.1.1",
            "minipass": "^7.0.2",
            "minipass-fetch": "^4.0.0",
            "minipass-flush": "^1.0.5",
            "minipass-pipeline": "^1.2.4",
            "negotiator": "^1.0.0",
            "proc-log": "^5.0.0",
            "promise-retry": "^2.0.1",
            "ssri": "^12.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/mimic-function": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz",
          "integrity": "sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/mimic-response": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
          "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
          "license": "MIT",
          "engines": {
            "node": ">=4"
          }
        },
        "node_modules/minimatch": {
          "version": "9.0.5",
          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
          "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
          "license": "ISC",
          "dependencies": {
            "brace-expansion": "^2.0.1"
          },
          "engines": {
            "node": ">=16 || 14 >=14.17"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/minipass": {
          "version": "7.1.2",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
          "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
          "license": "ISC",
          "engines": {
            "node": ">=16 || 14 >=14.17"
          }
        },
        "node_modules/minipass-collect": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/minipass-collect/-/minipass-collect-2.0.1.tgz",
          "integrity": "sha512-D7V8PO9oaz7PWGLbCACuI1qEOsq7UKfLotx/C0Aet43fCUB/wfQ7DYeq2oR/svFJGYDHPr38SHATeaj/ZoKHKw==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^7.0.3"
          },
          "engines": {
            "node": ">=16 || 14 >=14.17"
          }
        },
        "node_modules/minipass-fetch": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/minipass-fetch/-/minipass-fetch-4.0.1.tgz",
          "integrity": "sha512-j7U11C5HXigVuutxebFadoYBbd7VSdZWggSe64NVdvWNBqGAiXPL2QVCehjmw7lY1oF9gOllYbORh+hiNgfPgQ==",
          "license": "MIT",
          "dependencies": {
            "minipass": "^7.0.3",
            "minipass-sized": "^1.0.3",
            "minizlib": "^3.0.1"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          },
          "optionalDependencies": {
            "encoding": "^0.1.13"
          }
        },
        "node_modules/minipass-flush": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/minipass-flush/-/minipass-flush-1.0.5.tgz",
          "integrity": "sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^3.0.0"
          },
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/minipass-flush/node_modules/minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "license": "ISC",
          "dependencies": {
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/minipass-pipeline": {
          "version": "1.2.4",
          "resolved": "https://registry.npmjs.org/minipass-pipeline/-/minipass-pipeline-1.2.4.tgz",
          "integrity": "sha512-xuIq7cIOt09RPRJ19gdi4b+RiNvDFYe5JH+ggNvBqGqpQXcru3PcRmOZuHBKWK1Txf9+cQ+HMVN4d6z46LZP7A==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^3.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/minipass-pipeline/node_modules/minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "license": "ISC",
          "dependencies": {
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/minipass-sized": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/minipass-sized/-/minipass-sized-1.0.3.tgz",
          "integrity": "sha512-MbkQQ2CTiBMlA2Dm/5cY+9SWFEN8pzzOXi6rlM5Xxq0Yqbda5ZQy9sU75a673FE9ZK0Zsbr6Y5iP6u9nktfg2g==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^3.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/minipass-sized/node_modules/minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "license": "ISC",
          "dependencies": {
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/minizlib": {
          "version": "3.0.2",
          "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
          "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
          "license": "MIT",
          "dependencies": {
            "minipass": "^7.1.2"
          },
          "engines": {
            "node": ">= 18"
          }
        },
        "node_modules/mkdirp": {
          "version": "1.0.4",
          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
          "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
          "license": "MIT",
          "bin": {
            "mkdirp": "bin/cmd.js"
          },
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "license": "MIT"
        },
        "node_modules/mute-stream": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-2.0.0.tgz",
          "integrity": "sha512-WWdIxpyjEn+FhQJQQv9aQAYlHoNVdzIzUySNV1gHUPDSdZJ3yZn7pAAbQcV7B56Mvu881q9FZV+0Vx2xC44VWA==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/negotiator": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
          "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/node-gyp": {
          "version": "11.4.1",
          "resolved": "https://registry.npmjs.org/node-gyp/-/node-gyp-11.4.1.tgz",
          "integrity": "sha512-GiVxQ1e4TdZSSVmFDYUn6uUsrEUP68pa8C/xBzCfL/FcLHa4reWrxxTP7tRGhNdviYrNsL5kRolBL5LNYEutCw==",
          "license": "MIT",
          "dependencies": {
            "env-paths": "^2.2.0",
            "exponential-backoff": "^3.1.1",
            "graceful-fs": "^4.2.6",
            "make-fetch-happen": "^14.0.3",
            "nopt": "^8.0.0",
            "proc-log": "^5.0.0",
            "semver": "^7.3.5",
            "tar": "^7.4.3",
            "tinyglobby": "^0.2.12",
            "which": "^5.0.0"
          },
          "bin": {
            "node-gyp": "bin/node-gyp.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/node-gyp/node_modules/chownr": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
          "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
          "license": "BlueOak-1.0.0",
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/node-gyp/node_modules/isexe": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/isexe/-/isexe-3.1.1.tgz",
          "integrity": "sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==",
          "license": "ISC",
          "engines": {
            "node": ">=16"
          }
        },
        "node_modules/node-gyp/node_modules/mkdirp": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
          "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
          "license": "MIT",
          "bin": {
            "mkdirp": "dist/cjs/src/bin.js"
          },
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/node-gyp/node_modules/tar": {
          "version": "7.4.3",
          "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
          "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
          "license": "ISC",
          "dependencies": {
            "@isaacs/fs-minipass": "^4.0.0",
            "chownr": "^3.0.0",
            "minipass": "^7.1.2",
            "minizlib": "^3.0.1",
            "mkdirp": "^3.0.1",
            "yallist": "^5.0.0"
          },
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/node-gyp/node_modules/which": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/which/-/which-5.0.0.tgz",
          "integrity": "sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==",
          "license": "ISC",
          "dependencies": {
            "isexe": "^3.1.1"
          },
          "bin": {
            "node-which": "bin/which.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/node-gyp/node_modules/yallist": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
          "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
          "license": "BlueOak-1.0.0",
          "engines": {
            "node": ">=18"
          }
        },
        "node_modules/nopt": {
          "version": "8.1.0",
          "resolved": "https://registry.npmjs.org/nopt/-/nopt-8.1.0.tgz",
          "integrity": "sha512-ieGu42u/Qsa4TFktmaKEwM6MQH0pOWnaB3htzh0JRtx84+Mebc0cbZYN5bC+6WTZ4+77xrL9Pn5m7CV6VIkV7A==",
          "license": "ISC",
          "dependencies": {
            "abbrev": "^3.0.0"
          },
          "bin": {
            "nopt": "bin/nopt.js"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/normalize-url": {
          "version": "6.1.0",
          "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
          "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
          "license": "MIT",
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/npm-bundled": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/npm-bundled/-/npm-bundled-4.0.0.tgz",
          "integrity": "sha512-IxaQZDMsqfQ2Lz37VvyyEtKLe8FsRZuysmedy/N06TU1RyVppYKXrO4xIhR0F+7ubIBox6Q7nir6fQI3ej39iA==",
          "license": "ISC",
          "dependencies": {
            "npm-normalize-package-bin": "^4.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/npm-install-checks": {
          "version": "7.1.1",
          "resolved": "https://registry.npmjs.org/npm-install-checks/-/npm-install-checks-7.1.1.tgz",
          "integrity": "sha512-u6DCwbow5ynAX5BdiHQ9qvexme4U3qHW3MWe5NqH+NeBm0LbiH6zvGjNNew1fY+AZZUtVHbOPF3j7mJxbUzpXg==",
          "license": "BSD-2-Clause",
          "dependencies": {
            "semver": "^7.1.1"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/npm-normalize-package-bin": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/npm-normalize-package-bin/-/npm-normalize-package-bin-4.0.0.tgz",
          "integrity": "sha512-TZKxPvItzai9kN9H/TkmCtx/ZN/hvr3vUycjlfmH0ootY9yFBzNOpiXAdIn1Iteqsvk4lQn6B5PTrt+n6h8k/w==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/npm-package-arg": {
          "version": "12.0.2",
          "resolved": "https://registry.npmjs.org/npm-package-arg/-/npm-package-arg-12.0.2.tgz",
          "integrity": "sha512-f1NpFjNI9O4VbKMOlA5QoBq/vSQPORHcTZ2feJpFkTHJ9eQkdlmZEKSjcAhxTGInC7RlEyScT9ui67NaOsjFWA==",
          "license": "ISC",
          "dependencies": {
            "hosted-git-info": "^8.0.0",
            "proc-log": "^5.0.0",
            "semver": "^7.3.5",
            "validate-npm-package-name": "^6.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/npm-packlist": {
          "version": "10.0.1",
          "resolved": "https://registry.npmjs.org/npm-packlist/-/npm-packlist-10.0.1.tgz",
          "integrity": "sha512-vaC03b2PqJA6QqmwHi1jNU8fAPXEnnyv4j/W4PVfgm24C4/zZGSVut3z0YUeN0WIFCo1oGOL02+6LbvFK7JL4Q==",
          "license": "ISC",
          "dependencies": {
            "ignore-walk": "^8.0.0"
          },
          "engines": {
            "node": "^20.17.0 || >=22.9.0"
          }
        },
        "node_modules/npm-pick-manifest": {
          "version": "10.0.0",
          "resolved": "https://registry.npmjs.org/npm-pick-manifest/-/npm-pick-manifest-10.0.0.tgz",
          "integrity": "sha512-r4fFa4FqYY8xaM7fHecQ9Z2nE9hgNfJR+EmoKv0+chvzWkBcORX3r0FpTByP+CbOVJDladMXnPQGVN8PBLGuTQ==",
          "license": "ISC",
          "dependencies": {
            "npm-install-checks": "^7.1.0",
            "npm-normalize-package-bin": "^4.0.0",
            "npm-package-arg": "^12.0.0",
            "semver": "^7.3.5"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/npm-registry-fetch": {
          "version": "18.0.2",
          "resolved": "https://registry.npmjs.org/npm-registry-fetch/-/npm-registry-fetch-18.0.2.tgz",
          "integrity": "sha512-LeVMZBBVy+oQb5R6FDV9OlJCcWDU+al10oKpe+nsvcHnG24Z3uM3SvJYKfGJlfGjVU8v9liejCrUR/M5HO5NEQ==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/redact": "^3.0.0",
            "jsonparse": "^1.3.1",
            "make-fetch-happen": "^14.0.0",
            "minipass": "^7.0.2",
            "minipass-fetch": "^4.0.0",
            "minizlib": "^3.0.1",
            "npm-package-arg": "^12.0.0",
            "proc-log": "^5.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/npm-run-path": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-6.0.0.tgz",
          "integrity": "sha512-9qny7Z9DsQU8Ou39ERsPU4OZQlSTP47ShQzuKZ6PRXpYLtIFgl/DEBYEXKlvcEa+9tHVcK8CF81Y2V72qaZhWA==",
          "license": "MIT",
          "dependencies": {
            "path-key": "^4.0.0",
            "unicorn-magic": "^0.3.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/npm-run-path/node_modules/path-key": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
          "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/once": {
          "version": "1.4.0",
          "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
          "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
          "license": "ISC",
          "dependencies": {
            "wrappy": "1"
          }
        },
        "node_modules/onetime": {
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz",
          "integrity": "sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==",
          "license": "MIT",
          "dependencies": {
            "mimic-function": "^5.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/ora": {
          "version": "8.2.0",
          "resolved": "https://registry.npmjs.org/ora/-/ora-8.2.0.tgz",
          "integrity": "sha512-weP+BZ8MVNnlCm8c0Qdc1WSWq4Qn7I+9CJGm7Qali6g44e/PUzbjNqJX5NJ9ljlNMosfJvg1fKEGILklK9cwnw==",
          "license": "MIT",
          "dependencies": {
            "chalk": "^5.3.0",
            "cli-cursor": "^5.0.0",
            "cli-spinners": "^2.9.2",
            "is-interactive": "^2.0.0",
            "is-unicode-supported": "^2.0.0",
            "log-symbols": "^6.0.0",
            "stdin-discarder": "^0.2.2",
            "string-width": "^7.2.0",
            "strip-ansi": "^7.1.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/p-cancelable": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
          "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/p-map": {
          "version": "7.0.3",
          "resolved": "https://registry.npmjs.org/p-map/-/p-map-7.0.3.tgz",
          "integrity": "sha512-VkndIv2fIB99swvQoA65bm+fsmt6UNdGeIB0oxBs+WhAhdh08QA04JXpI7rbB9r08/nkbysKoya9rtDERYOYMA==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/package-json-from-dist": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
          "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
          "license": "BlueOak-1.0.0"
        },
        "node_modules/pacote": {
          "version": "21.0.0",
          "resolved": "https://registry.npmjs.org/pacote/-/pacote-21.0.0.tgz",
          "integrity": "sha512-lcqexq73AMv6QNLo7SOpz0JJoaGdS3rBFgF122NZVl1bApo2mfu+XzUBU/X/XsiJu+iUmKpekRayqQYAs+PhkA==",
          "license": "ISC",
          "dependencies": {
            "@npmcli/git": "^6.0.0",
            "@npmcli/installed-package-contents": "^3.0.0",
            "@npmcli/package-json": "^6.0.0",
            "@npmcli/promise-spawn": "^8.0.0",
            "@npmcli/run-script": "^9.0.0",
            "cacache": "^19.0.0",
            "fs-minipass": "^3.0.0",
            "minipass": "^7.0.2",
            "npm-package-arg": "^12.0.0",
            "npm-packlist": "^10.0.0",
            "npm-pick-manifest": "^10.0.0",
            "npm-registry-fetch": "^18.0.0",
            "proc-log": "^5.0.0",
            "promise-retry": "^2.0.1",
            "sigstore": "^3.0.0",
            "ssri": "^12.0.0",
            "tar": "^6.1.11"
          },
          "bin": {
            "pacote": "bin/index.js"
          },
          "engines": {
            "node": "^20.17.0 || >=22.9.0"
          }
        },
        "node_modules/parse-ms": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-4.0.0.tgz",
          "integrity": "sha512-TXfryirbmq34y8QBwgqCVLi+8oA3oWx2eAnSn62ITyEhEYaWRlVZ2DvMM9eZbMs/RfxPu/PK/aBLyGj4IrqMHw==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/path": {
          "version": "0.12.7",
          "resolved": "https://registry.npmjs.org/path/-/path-0.12.7.tgz",
          "integrity": "sha512-aXXC6s+1w7otVF9UletFkFcDsJeO7lSZBPUQhtb5O0xJe8LtYhj/GxldoL09bBj9+ZmE2hNoHqQSFMN5fikh4Q==",
          "license": "MIT",
          "dependencies": {
            "process": "^0.11.1",
            "util": "^0.10.3"
          }
        },
        "node_modules/path-key": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
          "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/path-parse": {
          "version": "1.0.7",
          "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
          "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
          "license": "MIT"
        },
        "node_modules/path-scurry": {
          "version": "1.11.1",
          "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
          "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
          "license": "BlueOak-1.0.0",
          "dependencies": {
            "lru-cache": "^10.2.0",
            "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
          },
          "engines": {
            "node": ">=16 || 14 >=14.18"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/picomatch": {
          "version": "4.0.2",
          "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
          "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
          "license": "MIT",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/sponsors/jonschlinkert"
          }
        },
        "node_modules/prettier": {
          "version": "3.6.2",
          "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
          "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
          "license": "MIT",
          "bin": {
            "prettier": "bin/prettier.cjs"
          },
          "engines": {
            "node": ">=14"
          },
          "funding": {
            "url": "https://github.com/prettier/prettier?sponsor=1"
          }
        },
        "node_modules/pretty-ms": {
          "version": "9.2.0",
          "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-9.2.0.tgz",
          "integrity": "sha512-4yf0QO/sllf/1zbZWYnvWw3NxCQwLXKzIj0G849LSufP15BXKM0rbD2Z3wVnkMfjdn/CB0Dpp444gYAACdsplg==",
          "license": "MIT",
          "dependencies": {
            "parse-ms": "^4.0.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/proc-log": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/proc-log/-/proc-log-5.0.0.tgz",
          "integrity": "sha512-Azwzvl90HaF0aCz1JrDdXQykFakSSNPaPoiZ9fm5qJIMHioDZEi7OAdRwSm6rSoPtY3Qutnm3L7ogmg3dc+wbQ==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/process": {
          "version": "0.11.10",
          "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
          "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6.0"
          }
        },
        "node_modules/promise-retry": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/promise-retry/-/promise-retry-2.0.1.tgz",
          "integrity": "sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==",
          "license": "MIT",
          "dependencies": {
            "err-code": "^2.0.2",
            "retry": "^0.12.0"
          },
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/pump": {
          "version": "3.0.3",
          "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.3.tgz",
          "integrity": "sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==",
          "license": "MIT",
          "dependencies": {
            "end-of-stream": "^1.1.0",
            "once": "^1.3.1"
          }
        },
        "node_modules/quick-lru": {
          "version": "5.1.1",
          "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
          "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
          "license": "MIT",
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/require-directory": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
          "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
          "license": "MIT",
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/require-from-string": {
          "version": "2.0.2",
          "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
          "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
          "license": "MIT",
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/resolve": {
          "version": "1.22.10",
          "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
          "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
          "license": "MIT",
          "dependencies": {
            "is-core-module": "^2.16.0",
            "path-parse": "^1.0.7",
            "supports-preserve-symlinks-flag": "^1.0.0"
          },
          "bin": {
            "resolve": "bin/resolve"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/resolve-alpn": {
          "version": "1.2.1",
          "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
          "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
          "license": "MIT"
        },
        "node_modules/responselike": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
          "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
          "license": "MIT",
          "dependencies": {
            "lowercase-keys": "^2.0.0"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/restore-cursor": {
          "version": "5.1.0",
          "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz",
          "integrity": "sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==",
          "license": "MIT",
          "dependencies": {
            "onetime": "^7.0.0",
            "signal-exit": "^4.1.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/retry": {
          "version": "0.12.0",
          "resolved": "https://registry.npmjs.org/retry/-/retry-0.12.0.tgz",
          "integrity": "sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==",
          "license": "MIT",
          "engines": {
            "node": ">= 4"
          }
        },
        "node_modules/rfdc": {
          "version": "1.4.1",
          "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz",
          "integrity": "sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==",
          "license": "MIT"
        },
        "node_modules/rxjs": {
          "version": "7.8.2",
          "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
          "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
          "license": "Apache-2.0",
          "dependencies": {
            "tslib": "^2.1.0"
          }
        },
        "node_modules/safer-buffer": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
          "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
          "license": "MIT"
        },
        "node_modules/semver": {
          "version": "7.7.2",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
          "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
          "license": "ISC",
          "bin": {
            "semver": "bin/semver.js"
          },
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/shebang-command": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
          "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
          "license": "MIT",
          "dependencies": {
            "shebang-regex": "^3.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/shebang-regex": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
          "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/should-quote": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/should-quote/-/should-quote-1.0.0.tgz",
          "integrity": "sha512-mQN5Meec3CTPmykzwXfDGWDpi75HUD8NT21wRWaJ7oqxpFIhXq80Hiy4ziccUNOwzhWeFkT9/kNSZbaugL9jsA==",
          "license": "MIT",
          "engines": {
            "node": ">=8.5",
            "npm": ">=6.0",
            "yarn": "^1.0"
          }
        },
        "node_modules/signal-exit": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
          "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
          "license": "ISC",
          "engines": {
            "node": ">=14"
          },
          "funding": {
            "url": "https://github.com/sponsors/isaacs"
          }
        },
        "node_modules/sigstore": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/sigstore/-/sigstore-3.1.0.tgz",
          "integrity": "sha512-ZpzWAFHIFqyFE56dXqgX/DkDRZdz+rRcjoIk/RQU4IX0wiCv1l8S7ZrXDHcCc+uaf+6o7w3h2l3g6GYG5TKN9Q==",
          "license": "Apache-2.0",
          "dependencies": {
            "@sigstore/bundle": "^3.1.0",
            "@sigstore/core": "^2.0.0",
            "@sigstore/protobuf-specs": "^0.4.0",
            "@sigstore/sign": "^3.1.0",
            "@sigstore/tuf": "^3.1.0",
            "@sigstore/verify": "^2.1.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/slice-ansi": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
          "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^6.0.0",
            "is-fullwidth-code-point": "^4.0.0"
          },
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/chalk/slice-ansi?sponsor=1"
          }
        },
        "node_modules/smart-buffer": {
          "version": "4.2.0",
          "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
          "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
          "license": "MIT",
          "engines": {
            "node": ">= 6.0.0",
            "npm": ">= 3.0.0"
          }
        },
        "node_modules/socks": {
          "version": "2.8.7",
          "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.7.tgz",
          "integrity": "sha512-HLpt+uLy/pxB+bum/9DzAgiKS8CX1EvbWxI4zlmgGCExImLdiad2iCwXT5Z4c9c3Eq8rP2318mPW2c+QbtjK8A==",
          "license": "MIT",
          "dependencies": {
            "ip-address": "^10.0.1",
            "smart-buffer": "^4.2.0"
          },
          "engines": {
            "node": ">= 10.0.0",
            "npm": ">= 3.0.0"
          }
        },
        "node_modules/socks-proxy-agent": {
          "version": "8.0.5",
          "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.5.tgz",
          "integrity": "sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==",
          "license": "MIT",
          "dependencies": {
            "agent-base": "^7.1.2",
            "debug": "^4.3.4",
            "socks": "^2.8.3"
          },
          "engines": {
            "node": ">= 14"
          }
        },
        "node_modules/source-map": {
          "version": "0.7.4",
          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
          "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
          "license": "BSD-3-Clause",
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/spdx-correct": {
          "version": "3.2.0",
          "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.2.0.tgz",
          "integrity": "sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==",
          "license": "Apache-2.0",
          "dependencies": {
            "spdx-expression-parse": "^3.0.0",
            "spdx-license-ids": "^3.0.0"
          }
        },
        "node_modules/spdx-exceptions": {
          "version": "2.5.0",
          "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.5.0.tgz",
          "integrity": "sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==",
          "license": "CC-BY-3.0"
        },
        "node_modules/spdx-expression-parse": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
          "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
          "license": "MIT",
          "dependencies": {
            "spdx-exceptions": "^2.1.0",
            "spdx-license-ids": "^3.0.0"
          }
        },
        "node_modules/spdx-license-ids": {
          "version": "3.0.22",
          "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.22.tgz",
          "integrity": "sha512-4PRT4nh1EImPbt2jASOKHX7PB7I+e4IWNLvkKFDxNhJlfjbYlleYQh285Z/3mPTHSAK/AvdMmw5BNNuYH8ShgQ==",
          "license": "CC0-1.0"
        },
        "node_modules/ssri": {
          "version": "12.0.0",
          "resolved": "https://registry.npmjs.org/ssri/-/ssri-12.0.0.tgz",
          "integrity": "sha512-S7iGNosepx9RadX82oimUkvr0Ct7IjJbEbs4mJcTxst8um95J3sDYU1RBEOvdu6oL1Wek2ODI5i4MAw+dZ6cAQ==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^7.0.3"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/stdin-discarder": {
          "version": "0.2.2",
          "resolved": "https://registry.npmjs.org/stdin-discarder/-/stdin-discarder-0.2.2.tgz",
          "integrity": "sha512-UhDfHmA92YAlNnCfhmq0VeNL5bDbiZGg7sZ2IvPsXubGkiNa9EC+tUTsjBRsYUAz87btI6/1wf4XoVvQ3uRnmQ==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/string-width": {
          "version": "7.2.0",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
          "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
          "license": "MIT",
          "dependencies": {
            "emoji-regex": "^10.3.0",
            "get-east-asian-width": "^1.0.0",
            "strip-ansi": "^7.1.0"
          },
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/string-width-cjs": {
          "name": "string-width",
          "version": "4.2.3",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
          "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
          "license": "MIT",
          "dependencies": {
            "emoji-regex": "^8.0.0",
            "is-fullwidth-code-point": "^3.0.0",
            "strip-ansi": "^6.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/string-width-cjs/node_modules/ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/string-width-cjs/node_modules/emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
          "license": "MIT"
        },
        "node_modules/string-width-cjs/node_modules/is-fullwidth-code-point": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/string-width-cjs/node_modules/strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^5.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/strip-ansi": {
          "version": "7.1.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
          "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^6.0.1"
          },
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://github.com/chalk/strip-ansi?sponsor=1"
          }
        },
        "node_modules/strip-ansi-cjs": {
          "name": "strip-ansi",
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^5.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/strip-final-newline": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-4.0.0.tgz",
          "integrity": "sha512-aulFJcD6YK8V1G7iRB5tigAP4TsHBZZrOV8pjV++zdUwmeV8uzbY7yn6h9MswN62adStNZFuCIx4haBnRuMDaw==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/supports-preserve-symlinks-flag": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
          "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/tar": {
          "version": "6.2.1",
          "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
          "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
          "license": "ISC",
          "dependencies": {
            "chownr": "^2.0.0",
            "fs-minipass": "^2.0.0",
            "minipass": "^5.0.0",
            "minizlib": "^2.1.1",
            "mkdirp": "^1.0.3",
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/tar/node_modules/fs-minipass": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
          "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
          "license": "ISC",
          "dependencies": {
            "minipass": "^3.0.0"
          },
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/tar/node_modules/fs-minipass/node_modules/minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "license": "ISC",
          "dependencies": {
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/tar/node_modules/minipass": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
          "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
          "license": "ISC",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/tar/node_modules/minizlib": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
          "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
          "license": "MIT",
          "dependencies": {
            "minipass": "^3.0.0",
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/tar/node_modules/minizlib/node_modules/minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "license": "ISC",
          "dependencies": {
            "yallist": "^4.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/tinyglobby": {
          "version": "0.2.14",
          "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
          "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
          "license": "MIT",
          "dependencies": {
            "fdir": "^6.4.4",
            "picomatch": "^4.0.2"
          },
          "engines": {
            "node": ">=12.0.0"
          },
          "funding": {
            "url": "https://github.com/sponsors/SuperchupuDev"
          }
        },
        "node_modules/tslib": {
          "version": "2.8.1",
          "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
          "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
          "license": "0BSD"
        },
        "node_modules/tuf-js": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/tuf-js/-/tuf-js-3.1.0.tgz",
          "integrity": "sha512-3T3T04WzowbwV2FDiGXBbr81t64g1MUGGJRgT4x5o97N+8ArdhVCAF9IxFrxuSJmM3E5Asn7nKHkao0ibcZXAg==",
          "license": "MIT",
          "dependencies": {
            "@tufjs/models": "3.0.1",
            "debug": "^4.4.1",
            "make-fetch-happen": "^14.0.3"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/type-fest": {
          "version": "0.21.3",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
          "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
          "license": "(MIT OR CC0-1.0)",
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/typescript": {
          "version": "5.8.3",
          "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
          "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
          "license": "Apache-2.0",
          "bin": {
            "tsc": "bin/tsc",
            "tsserver": "bin/tsserver"
          },
          "engines": {
            "node": ">=14.17"
          }
        },
        "node_modules/undici-types": {
          "version": "6.21.0",
          "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
          "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
          "license": "MIT"
        },
        "node_modules/unicorn-magic": {
          "version": "0.3.0",
          "resolved": "https://registry.npmjs.org/unicorn-magic/-/unicorn-magic-0.3.0.tgz",
          "integrity": "sha512-+QBBXBCvifc56fsbuxZQ6Sic3wqqc3WWaqxs58gvJrcOuN83HGTCwz3oS5phzU9LthRNE9VrJCFCLUgHeeFnfA==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/unique-filename": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/unique-filename/-/unique-filename-4.0.0.tgz",
          "integrity": "sha512-XSnEewXmQ+veP7xX2dS5Q4yZAvO40cBN2MWkJ7D/6sW4Dg6wYBNwM1Vrnz1FhH5AdeLIlUXRI9e28z1YZi71NQ==",
          "license": "ISC",
          "dependencies": {
            "unique-slug": "^5.0.0"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/unique-slug": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/unique-slug/-/unique-slug-5.0.0.tgz",
          "integrity": "sha512-9OdaqO5kwqR+1kVgHAhsp5vPNU0hnxRa26rBFNfNgM7M6pNtgzeBn3s/xbyCQL3dcjzOatcef6UUHpB/6MaETg==",
          "license": "ISC",
          "dependencies": {
            "imurmurhash": "^0.1.4"
          },
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/util": {
          "version": "0.10.4",
          "resolved": "https://registry.npmjs.org/util/-/util-0.10.4.tgz",
          "integrity": "sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==",
          "license": "MIT",
          "dependencies": {
            "inherits": "2.0.3"
          }
        },
        "node_modules/validate-npm-package-license": {
          "version": "3.0.4",
          "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
          "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
          "license": "Apache-2.0",
          "dependencies": {
            "spdx-correct": "^3.0.0",
            "spdx-expression-parse": "^3.0.0"
          }
        },
        "node_modules/validate-npm-package-name": {
          "version": "6.0.2",
          "resolved": "https://registry.npmjs.org/validate-npm-package-name/-/validate-npm-package-name-6.0.2.tgz",
          "integrity": "sha512-IUoow1YUtvoBBC06dXs8bR8B9vuA3aJfmQNKMoaPG/OFsPmoQvw8xh+6Ye25Gx9DQhoEom3Pcu9MKHerm/NpUQ==",
          "license": "ISC",
          "engines": {
            "node": "^18.17.0 || >=20.5.0"
          }
        },
        "node_modules/which": {
          "version": "2.0.2",
          "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
          "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
          "license": "ISC",
          "dependencies": {
            "isexe": "^2.0.0"
          },
          "bin": {
            "node-which": "bin/node-which"
          },
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/wrap-ansi": {
          "version": "6.2.0",
          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
          "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^4.0.0",
            "string-width": "^4.1.0",
            "strip-ansi": "^6.0.0"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi-cjs": {
          "name": "wrap-ansi",
          "version": "7.0.0",
          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
          "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
          "license": "MIT",
          "dependencies": {
            "ansi-styles": "^4.0.0",
            "string-width": "^4.1.0",
            "strip-ansi": "^6.0.0"
          },
          "engines": {
            "node": ">=10"
          },
          "funding": {
            "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
          }
        },
        "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "license": "MIT",
          "dependencies": {
            "color-convert": "^2.0.1"
          },
          "engines": {
            "node": ">=8"
          },
          "funding": {
            "url": "https://github.com/chalk/ansi-styles?sponsor=1"
          }
        },
        "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
          "license": "MIT"
        },
        "node_modules/wrap-ansi-cjs/node_modules/is-fullwidth-code-point": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi-cjs/node_modules/string-width": {
          "version": "4.2.3",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
          "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
          "license": "MIT",
          "dependencies": {
            "emoji-regex": "^8.0.0",
            "is-fullwidth-code-point": "^3.0.0",
            "strip-ansi": "^6.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^5.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi/node_modules/ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi/node_modules/ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "license": "MIT",
          "dependencies": {
            "color-convert": "^2.0.1"
          },
          "engines": {
            "node": ">=8"
          },
          "funding": {
            "url": "https://github.com/chalk/ansi-styles?sponsor=1"
          }
        },
        "node_modules/wrap-ansi/node_modules/emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
          "license": "MIT"
        },
        "node_modules/wrap-ansi/node_modules/is-fullwidth-code-point": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi/node_modules/string-width": {
          "version": "4.2.3",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
          "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
          "license": "MIT",
          "dependencies": {
            "emoji-regex": "^8.0.0",
            "is-fullwidth-code-point": "^3.0.0",
            "strip-ansi": "^6.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrap-ansi/node_modules/strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^5.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/wrappy": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
          "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
          "license": "ISC"
        },
        "node_modules/y18n": {
          "version": "5.0.8",
          "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
          "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
          "license": "ISC",
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/yallist": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
          "license": "ISC"
        },
        "node_modules/yargs": {
          "version": "17.7.2",
          "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
          "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
          "license": "MIT",
          "dependencies": {
            "cliui": "^8.0.1",
            "escalade": "^3.1.1",
            "get-caller-file": "^2.0.5",
            "require-directory": "^2.1.1",
            "string-width": "^4.2.3",
            "y18n": "^5.0.5",
            "yargs-parser": "^21.1.1"
          },
          "engines": {
            "node": ">=12"
          }
        },
        "node_modules/yargs-parser": {
          "version": "21.1.1",
          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
          "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
          "license": "ISC",
          "engines": {
            "node": ">=12"
          }
        },
        "node_modules/yargs/node_modules/ansi-regex": {
          "version": "5.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
          "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/yargs/node_modules/emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
          "license": "MIT"
        },
        "node_modules/yargs/node_modules/is-fullwidth-code-point": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
          "license": "MIT",
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/yargs/node_modules/string-width": {
          "version": "4.2.3",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
          "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
          "license": "MIT",
          "dependencies": {
            "emoji-regex": "^8.0.0",
            "is-fullwidth-code-point": "^3.0.0",
            "strip-ansi": "^6.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/yargs/node_modules/strip-ansi": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
          "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
          "license": "MIT",
          "dependencies": {
            "ansi-regex": "^5.0.1"
          },
          "engines": {
            "node": ">=8"
          }
        },
        "node_modules/yoctocolors": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/yoctocolors/-/yoctocolors-2.1.2.tgz",
          "integrity": "sha512-CzhO+pFNo8ajLM2d2IW/R93ipy99LWjtwblvC1RsoSUMZgyLbYFr221TnSNT7GjGdYui6P459mw9JH/g/zW2ug==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/yoctocolors-cjs": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.3.tgz",
          "integrity": "sha512-U/PBtDf35ff0D8X8D0jfdzHYEPFxAI7jJlxZXwCSez5M3190m+QobIfh+sWDWSHMCWWJN2AWamkegn6vr6YBTw==",
          "license": "MIT",
          "engines": {
            "node": ">=18"
          },
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        }
      }
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\collection.json"><![CDATA[
    {
      "schematics": {
        "entity": {
          "description": "ABP Suite Entity Module Schematics",
          "factory": "./commands/entity",
          "schema": "./commands/entity/schema.json"
        },
        "generate-entity": {
          "description": "ABP Suite Create Entity Module Schematics without generate proxy",
          "factory": "./commands/generate-entity",
          "schema": "./commands/generate-entity/schema.json"
        }
      }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Models\Test\TestModel.cs"><![CDATA[
    ﻿using System;
    
    namespace ExampleAbpApplicationLayer.Models.Test;
    
    public class TestModel
    {
        public string? Name { get; set; }
    
        public DateTime BirthDate { get; set; }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\Products\ProductController.Extended.cs"><![CDATA[
    using Asp.Versioning;
    using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Volo.Abp;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Application.Dtos;
    using ExampleAbpApplicationLayer.Products;
    
    namespace ExampleAbpApplicationLayer.Controllers.Products
    {
        [RemoteService]
        [Area("app")]
        [ControllerName("Product")]
        [Route("api/app/products")]
    
        public class ProductController : ProductControllerBase, IProductsAppService
        {
            public ProductController(IProductsAppService productsAppService) : base(productsAppService)
            {
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\Products\ProductController.cs"><![CDATA[
    using Asp.Versioning;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Volo.Abp;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Application.Dtos;
    using ExampleAbpApplicationLayer.Products;
    using Volo.Abp.Content;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Controllers.Products
    {
        [RemoteService]
        [Area("app")]
        [ControllerName("Product")]
        [Route("api/app/products")]
    
        public abstract class ProductControllerBase : AbpController
        {
            protected IProductsAppService _productsAppService;
    
            public ProductControllerBase(IProductsAppService productsAppService)
            {
                _productsAppService = productsAppService;
            }
    
            [HttpGet]
            public virtual Task<PagedResultDto<ProductDto>> GetListAsync(GetProductsInput input)
            {
                return _productsAppService.GetListAsync(input);
            }
    
            [HttpGet]
            [Route("{id}")]
            public virtual Task<ProductDto> GetAsync(Guid id)
            {
                return _productsAppService.GetAsync(id);
            }
    
            [HttpPost]
            public virtual Task<ProductDto> CreateAsync(ProductCreateDto input)
            {
                return _productsAppService.CreateAsync(input);
            }
    
            [HttpPut]
            [Route("{id}")]
            public virtual Task<ProductDto> UpdateAsync(Guid id, ProductUpdateDto input)
            {
                return _productsAppService.UpdateAsync(id, input);
            }
    
            [HttpDelete]
            [Route("{id}")]
            public virtual Task DeleteAsync(Guid id)
            {
                return _productsAppService.DeleteAsync(id);
            }
    
            [HttpGet]
            [Route("as-excel-file")]
            public virtual Task<IRemoteStreamContent> GetListAsExcelFileAsync(ProductExcelDownloadDto input)
            {
                return _productsAppService.GetListAsExcelFileAsync(input);
            }
    
            [HttpGet]
            [Route("download-token")]
            public virtual Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
            {
                return _productsAppService.GetDownloadTokenAsync();
            }
    
            [HttpDelete]
            [Route("")]
            public virtual Task DeleteByIdsAsync(List<Guid> productIds)
            {
                return _productsAppService.DeleteByIdsAsync(productIds);
            }
    
            [HttpDelete]
            [Route("all")]
            public virtual Task DeleteAllAsync(GetProductsInput input)
            {
                return _productsAppService.DeleteAllAsync(input);
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\Orders\OrderController.Extended.cs"><![CDATA[
    using Asp.Versioning;
    using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Volo.Abp;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Application.Dtos;
    using ExampleAbpApplicationLayer.Orders;
    
    namespace ExampleAbpApplicationLayer.Controllers.Orders
    {
        [RemoteService]
        [Area("app")]
        [ControllerName("Order")]
        [Route("api/app/orders")]
    
        public class OrderController : OrderControllerBase, IOrdersAppService
        {
            public OrderController(IOrdersAppService ordersAppService) : base(ordersAppService)
            {
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\Orders\OrderController.cs"><![CDATA[
    using Asp.Versioning;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Volo.Abp;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Application.Dtos;
    using ExampleAbpApplicationLayer.Orders;
    using Volo.Abp.Content;
    using ExampleAbpApplicationLayer.Shared;
    
    namespace ExampleAbpApplicationLayer.Controllers.Orders
    {
        [RemoteService]
        [Area("app")]
        [ControllerName("Order")]
        [Route("api/app/orders")]
    
        public abstract class OrderControllerBase : AbpController
        {
            protected IOrdersAppService _ordersAppService;
    
            public OrderControllerBase(IOrdersAppService ordersAppService)
            {
                _ordersAppService = ordersAppService;
            }
    
            [HttpGet]
            public virtual Task<PagedResultDto<OrderDto>> GetListAsync(GetOrdersInput input)
            {
                return _ordersAppService.GetListAsync(input);
            }
    
            [HttpGet]
            [Route("{id}")]
            public virtual Task<OrderDto> GetAsync(Guid id)
            {
                return _ordersAppService.GetAsync(id);
            }
    
            [HttpPost]
            public virtual Task<OrderDto> CreateAsync(OrderCreateDto input)
            {
                return _ordersAppService.CreateAsync(input);
            }
    
            [HttpPut]
            [Route("{id}")]
            public virtual Task<OrderDto> UpdateAsync(Guid id, OrderUpdateDto input)
            {
                return _ordersAppService.UpdateAsync(id, input);
            }
    
            [HttpDelete]
            [Route("{id}")]
            public virtual Task DeleteAsync(Guid id)
            {
                return _ordersAppService.DeleteAsync(id);
            }
    
            [HttpGet]
            [Route("as-excel-file")]
            public virtual Task<IRemoteStreamContent> GetListAsExcelFileAsync(OrderExcelDownloadDto input)
            {
                return _ordersAppService.GetListAsExcelFileAsync(input);
            }
    
            [HttpGet]
            [Route("download-token")]
            public virtual Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
            {
                return _ordersAppService.GetDownloadTokenAsync();
            }
    
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\OrderItems\OrderItemController.Extended.cs"><![CDATA[
    using Asp.Versioning;
    using System;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Volo.Abp;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Application.Dtos;
    using ExampleAbpApplicationLayer.OrderItems;
    
    namespace ExampleAbpApplicationLayer.Controllers.OrderItems
    {
        [RemoteService]
        [Area("app")]
        [ControllerName("OrderItem")]
        [Route("api/app/order-items")]
    
        public class OrderItemController : OrderItemControllerBase, IOrderItemsAppService
        {
            public OrderItemController(IOrderItemsAppService orderItemsAppService) : base(orderItemsAppService)
            {
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.HttpApi\Controllers\OrderItems\OrderItemController.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Shared;
    using Asp.Versioning;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Volo.Abp;
    using Volo.Abp.AspNetCore.Mvc;
    using Volo.Abp.Application.Dtos;
    using ExampleAbpApplicationLayer.OrderItems;
    
    namespace ExampleAbpApplicationLayer.Controllers.OrderItems
    {
        [RemoteService]
        [Area("app")]
        [ControllerName("OrderItem")]
        [Route("api/app/order-items")]
    
        public abstract class OrderItemControllerBase : AbpController
        {
            protected IOrderItemsAppService _orderItemsAppService;
    
            public OrderItemControllerBase(IOrderItemsAppService orderItemsAppService)
            {
                _orderItemsAppService = orderItemsAppService;
            }
    
            [HttpGet]
            [Route("by-order")]
            public virtual Task<PagedResultDto<OrderItemDto>> GetListByOrderIdAsync(GetOrderItemListInput input)
            {
                return _orderItemsAppService.GetListByOrderIdAsync(input);
            }
            [HttpGet]
            [Route("detailed/by-order")]
            public virtual Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListWithNavigationPropertiesByOrderIdAsync(GetOrderItemListInput input)
            {
                return _orderItemsAppService.GetListWithNavigationPropertiesByOrderIdAsync(input);
            }
    
            [HttpGet]
            public virtual Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListAsync(GetOrderItemsInput input)
            {
                return _orderItemsAppService.GetListAsync(input);
            }
    
            [HttpGet]
            [Route("with-navigation-properties/{id}")]
            public virtual Task<OrderItemWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
            {
                return _orderItemsAppService.GetWithNavigationPropertiesAsync(id);
            }
    
            [HttpGet]
            [Route("{id}")]
            public virtual Task<OrderItemDto> GetAsync(Guid id)
            {
                return _orderItemsAppService.GetAsync(id);
            }
    
            [HttpGet]
            [Route("product-lookup")]
            public virtual Task<PagedResultDto<LookupDto<Guid>>> GetProductLookupAsync(LookupRequestDto input)
            {
                return _orderItemsAppService.GetProductLookupAsync(input);
            }
    
            [HttpPost]
            public virtual Task<OrderItemDto> CreateAsync(OrderItemCreateDto input)
            {
                return _orderItemsAppService.CreateAsync(input);
            }
    
            [HttpPut]
            [Route("{id}")]
            public virtual Task<OrderItemDto> UpdateAsync(Guid id, OrderItemUpdateDto input)
            {
                return _orderItemsAppService.UpdateAsync(id, input);
            }
    
            [HttpDelete]
            [Route("{id}")]
            public virtual Task DeleteAsync(Guid id)
            {
                return _orderItemsAppService.DeleteAsync(id);
            }
        }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\Localization\ExampleAbpApplicationLayer\en.json"><![CDATA[
    {
      "Culture": "en",
      "Texts": {
        "AppName": "ExampleAbpApplicationLayer",
        "Menu:ContactUs": "Contact Us",
        "Menu:ArticleSample": "Article Sample",
        "Home": "Home",
        "Date": "Date",
        "Permission:Dashboard": "Dashboard",
        "Menu:Dashboard": "Dashboard",
        "Menu:HomePage": "Home page",
        "Dashboard": "Dashboard",
        "ExternalProvider:Google": "Google",
        "ExternalProvider:Google:ClientId": "Client ID",
        "ExternalProvider:Google:ClientSecret": "Client Secret",
        "ExternalProvider:Microsoft": "Microsoft",
        "ExternalProvider:Microsoft:ClientId": "Client ID",
        "ExternalProvider:Microsoft:ClientSecret": "Client Secret",
        "ExternalProvider:Twitter": "Twitter",
        "ExternalProvider:Twitter:ConsumerKey": "Consumer Key",
        "ExternalProvider:Twitter:ConsumerSecret": "Consumer Secret",
        "NewsletterHeader": "Subscribe to the newsletter!",
        "NewsletterInfo": "Get information about the latest happenings.",
        "NewsletterPreference_Default": "Default Newsletter",
        "NewsletterPrivacyAcceptMessage": "I accept the <a href='/privacy-policy'>Privacy Policy</a>.",
        "Language": "Language",
        "Search": "Search",
        "LoadMore": "Load More",
        "Settings": "Settings",
        "Theme": "Theme",
        "DeviceTheme": "Device theme",
        "Dark": "Dark",
        "Light": "Light",
        "Unspecified": "System",
        "SeeAllUsers": "See All Users",
        "TakePhoto": "Take Photo",
        "ChoosePhoto": "Choose Photo",
        "Menu:Home": "Home",
        "LongWelcomeMessage": "Welcome to the application. This is a startup project based on the ABP framework. For more information visit",
        "Welcome": "Welcome",
        "Permission:Products": "Products",
        "Permission:ExampleAbpApplicationLayer": "Example Abp Application Layer",
        "Permission:Create": "Create",
        "Permission:Edit": "Edit",
        "Permission:Delete": "Delete",
        "Products": "Products",
        "NewProduct": "New Product",
        "Product": "Product",
        "Menu:Products": "Products",
        "SeeAdvancedFilters": "Filters",
        "DeleteConfirmationMessage": "Are you sure you want to delete this record?",
        "AreYouSure": "Are you sure?",
        "Pick": "Pick",
        "Actions": "Actions",
        "SuccessfullyDeleted": "Successfully deleted",
        "ExportToExcel": "Export to Excel",
        "AllItemsAreSelected": "All {0} items are selected",
        "OneItemOnThisPageIsSelected": "1 item on this page is selected",
        "NumberOfItemsOnThisPageAreSelected": "All {0} items on this page are selected",
        "SelectAllItems": "Select all {0} items",
        "ClearSelection": "Clear selection",
        "DeleteAllRecords": "Are you sure you want to delete all records?",
        "DeleteSelectedRecords": "Are you sure you want to delete {0} record(s)?",
        "UploadFailedMessage": "Upload Failed: Unsupported file format or file size too large. Please ensure the file meets the required format and size limits, and try again.",
        "DownloadSelectedFile": "Download selected file",
        "RemoveSelectedFile": "Remove selected file",
        "Filters": "Filters",
        "Name": "Name",
        "Desc": "Desc",
        "Price": "Price",
        "IsActive": "Is Active",
        "MinName": "Min Name",
        "MinDesc": "Min Desc",
        "MinPrice": "Min Price",
        "MinIsActive": "Min Is Active",
        "MaxName": "Max Name",
        "MaxDesc": "Max Desc",
        "MaxPrice": "Max Price",
        "MaxIsActive": "Max Is Active",
        "Enum:OrderStatus.0": "Initialized",
        "Enum:OrderStatus.1": "Paid",
        "Enum:OrderStatus.2": "Processing",
        "Enum:OrderStatus.3": "Ordered",
        "Enum:OrderStatus.4": "Shipped",
        "Enum:OrderStatus.5": "Arrived",
        "Enum:OrderStatus.6": "Delivered",
        "Enum:OrderStatus.7": "Cancelled",
        "Enum:OrderStatus.8": "Not paid",
        "Permission:Orders": "Orders",
        "Orders": "Orders",
        "NewOrder": "New Order",
        "Order": "Order",
        "Menu:Orders": "Orders",
        "OrderDate": "Order Date",
        "TotalAmount": "Total Amount",
        "Status": "Status",
        "MinOrderDate": "Min Order Date",
        "MinTotalAmount": "Min Total Amount",
        "MinStatus": "Min Status",
        "MaxOrderDate": "Max Order Date",
        "MaxTotalAmount": "Max Total Amount",
        "MaxStatus": "Max Status",
        "OrderItems": "Order Items",
        "NewOrderItem": "New Order Item",
        "OrderItem": "Order Item",
        "Menu:OrderItems": "Order Items",
        "Qty": "Qty",
        "TotalPrice": "Total Price",
        "ProductName": "Product Name",
        "MinQty": "Min Qty",
        "MinTotalPrice": "Min Total Price",
        "MinProductName": "Min Product Name",
        "MaxQty": "Max Qty",
        "MaxTotalPrice": "Max Total Price",
        "MaxProductName": "Max Product Name",
        "Permission:OrderItems": "Order Items"
      }
    }
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\Localization\ExampleAbpApplicationLayer\ar.json"><![CDATA[
    {
      "culture": "ar",
      "texts": {
        "AppName": "ExampleAbpApplicationLayer",
        "Menu:Home": "منزل، بيت",
        "Menu:ContactUs": "اتصل بنا",
        "Menu:ArticleSample": "عينة المادة",
        "Home": "منزل، بيت",
        "Welcome": "مرحبا",
        "LongWelcomeMessage": "مرحبا بكم في التطبيق. هذا مشروع بدء التشغيل يعتمد على إطار عمل برنامج ABP. لمزيد من المعلومات قم بزيارة",
        "Date": "تاريخ",
        "Permission:Dashboard": "لوحة القيادة",
        "Menu:Dashboard": "لوحة القيادة",
        "Menu:HomePage": "الصفحة الرئيسية",
        "Dashboard": "لوحة القيادة",
        "ExternalProvider:Google": "جوجل",
        "ExternalProvider:Google:ClientId": "معرف العميل",
        "ExternalProvider:Google:ClientSecret": "سر العميل",
        "ExternalProvider:Microsoft": "مايكروسوفت",
        "ExternalProvider:Microsoft:ClientId": "معرف العميل",
        "ExternalProvider:Microsoft:ClientSecret": "سر العميل",
        "ExternalProvider:Twitter": "تويتر",
        "ExternalProvider:Twitter:ConsumerKey": "مفتاح المستهلك",
        "ExternalProvider:Twitter:ConsumerSecret": "سر المستهلك",
        "NewsletterHeader": "اشترك في النشرة الإخبارية!",
        "NewsletterInfo": "احصل على معلومات حول آخر الأحداث.",
        "NewsletterPreference_Default": "النشرة الإخبارية الافتراضية",
        "NewsletterPrivacyAcceptMessage": "أوافق على <a href='/privacy-policy'> سياسة الخصوصية </a>.",
        "Language": "لغة",
        "Search": "يبحث",
        "LoadMore": "تحميل المزيد",
        "Settings": "إعدادات",
        "Theme": "سمة",
        "DeviceTheme": "موضوع الجهاز",
        "Dark": "مظلم",
        "Light": "ضوء",
        "Unspecified": "نظام",
        "SeeAllUsers": "رؤية كافة المستخدمين",
        "TakePhoto": "تصوير",
        "ChoosePhoto": "اختر صورة"
      }
    }
    
    ]]></file>
  <file path="src\ExampleAbpApplicationLayer.Domain.Shared\Enum\Orders\OrderStatus.cs"><![CDATA[
    ﻿using System;
    using System.Collections.Generic;
    using System.Text;
    
    namespace ExampleAbpApplicationLayer.Enums.Orders
    {
        public enum OrderStatus
        {
            Initialized = 0,
            Paid = 1,
            Processing = 2,
            Ordered = 3,
            Shipped = 4,
            Arrived = 5,
            Delivered = 6,
            Cancelled = 7,
            NotPaid = 8
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Samples\SampleRepositoryTests.cs"><![CDATA[
    ﻿using System;
    using System.Threading.Tasks;
    using Shouldly;
    using Volo.Abp.Domain.Repositories;
    using Volo.Abp.Identity;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Samples;
    
    /* This is just an example test class.
     * Normally, you don't test ABP framework code
     * Only test your custom repository methods.
     */
    [Collection(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
    public class SampleRepositoryTests : ExampleAbpApplicationLayerEntityFrameworkCoreTestBase
    {
        private readonly IRepository<IdentityUser, Guid> _appUserRepository;
    
        public SampleRepositoryTests()
        {
            _appUserRepository = GetRequiredService<IRepository<IdentityUser, Guid>>();
        }
    
        [Fact]
        public async Task Should_Query_AppUser()
        {
            /* Need to manually start Unit Of Work because
             * FirstOrDefaultAsync should be executed while db connection / context is available.
             */
            await WithUnitOfWorkAsync(async () =>
            {
                    //Act
                    var adminUser = await _appUserRepository
                    .FirstOrDefaultAsync(u => u.UserName == "admin");
    
                    //Assert
                    adminUser.ShouldNotBeNull();
            });
        }
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Domains\EfCoreSampleDomainTests.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Samples;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Domains;
    
    [Collection(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
    public class EfCoreSampleDomainTests : SampleDomainTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
    {
    
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Applications\EfCoreSampleAppServiceTests.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Samples;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Applications;
    
    [Collection(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
    public class EfCoreSampleAppServiceTests : SampleAppServiceTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
    {
    
    }
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\templates\_helpers.tpl"><![CDATA[
    {{- define "exampleabpapplicationlayer.hosts.httpapi" -}}
    {{- print "https://" (.Values.global.hosts.httpapi | replace "[RELEASE_NAME]" .Release.Name) -}}
    {{- end -}}
    {{- define "exampleabpapplicationlayer.hosts.angular" -}}
    {{- print "https://" (.Values.global.hosts.angular | replace "[RELEASE_NAME]" .Release.Name) -}}
    {{- end -}}
    
    ]]></file>
  <file path="angular\src\app\proxy\index.ts"><![CDATA[
    import * as Enums from './enums';
    import * as OrderItems from './order-items';
    import * as Orders from './orders';
    import * as Products from './products';
    import * as Shared from './shared';
    export { Enums, OrderItems, Orders, Products, Shared };
    
    ]]></file>
  <file path="angular\src\app\proxy\generate-proxy.json"><![CDATA[
    {
      "generated": ["app"],
      "modules": {
        "app": {
          "rootPath": "app",
          "remoteServiceName": "Default",
          "controllers": {
            "ExampleAbpApplicationLayer.Controllers.Orders.OrderController": {
              "controllerName": "Order",
              "type": "ExampleAbpApplicationLayer.Controllers.Orders.OrderController",
              "isRemoteService": true,
              "isIntegrationService": false,
              "interfaces": [
                {
                  "type": "ExampleAbpApplicationLayer.Orders.IOrderAppService"
                }
              ],
              "actions": {
                "GetListAsyncByInput": {
                  "uniqueName": "GetListAsyncByInput",
                  "name": "GetListAsync",
                  "httpMethod": "GET",
                  "url": "api/app/orders",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Orders.GetOrdersInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Orders.GetOrdersInput",
                      "typeSimple": "ExampleAbpApplicationLayer.Orders.GetOrdersInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Sorting",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "OrderDateMin",
                      "jsonName": null,
                      "type": "System.DateTime?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "OrderDateMax",
                      "jsonName": null,
                      "type": "System.DateTime?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "TotalAmountMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "TotalAmountMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Status",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
                      "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Orders.OrderDto>",
                    "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Orders.OrderDto>"
                  }
                },
                "GetAsyncById": {
                  "uniqueName": "GetAsyncById",
                  "name": "GetAsync",
                  "httpMethod": "GET",
                  "url": "api/app/orders/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto"
                  }
                },
                "GetListAsExcelFileAsyncByInput": {
                  "uniqueName": "GetListAsExcelFileAsyncByInput",
                  "name": "GetListAsExcelFileAsync",
                  "httpMethod": "GET",
                  "url": "api/app/orders/as-excel-file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "DownloadToken",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "OrderDateMin",
                      "jsonName": null,
                      "type": "System.DateTime?",
                      "typeSimple": "string?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "OrderDateMax",
                      "jsonName": null,
                      "type": "System.DateTime?",
                      "typeSimple": "string?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "TotalAmountMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "TotalAmountMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "Status",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
                      "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Content.IRemoteStreamContent",
                    "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
                  },
                  "allowAnonymous": null,
                  "implementFrom": "ExampleAbpApplicationLayer.Orders.IOrdersAppService"
                },
                "GetDownloadTokenAsync": {
                  "uniqueName": "GetDownloadTokenAsync",
                  "name": "GetDownloadTokenAsync",
                  "httpMethod": "GET",
                  "url": "api/app/orders/download-token",
                  "supportedVersions": [],
                  "parametersOnMethod": [],
                  "parameters": [],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto"
                  },
                  "allowAnonymous": null,
                  "implementFrom": "ExampleAbpApplicationLayer.Orders.IOrdersAppService"
                },
                "CreateAsyncByInput": {
                  "uniqueName": "CreateAsyncByInput",
                  "name": "CreateAsync",
                  "httpMethod": "POST",
                  "url": "api/app/orders",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Orders.OrderCreateDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto"
                  }
                },
                "UpdateAsyncByIdAndInput": {
                  "uniqueName": "UpdateAsyncByIdAndInput",
                  "name": "UpdateAsync",
                  "httpMethod": "PUT",
                  "url": "api/app/orders/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    },
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto"
                  }
                },
                "DeleteAsyncById": {
                  "uniqueName": "DeleteAsyncById",
                  "name": "DeleteAsync",
                  "httpMethod": "DELETE",
                  "url": "api/app/orders/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "System.Void",
                    "typeSimple": "System.Void"
                  }
                },
                "UploadFileAsyncByInput": {
                  "name": "UploadFileAsync",
                  "uniqueName": "UploadFileAsyncByInput",
                  "httpMethod": "POST",
                  "url": "api/app/orders/upload-file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core",
                      "type": "Volo.Abp.Content.IRemoteStreamContent",
                      "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "Volo.Abp.Content.IRemoteStreamContent",
                      "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto"
                  }
                },
                "GetFileAsyncByInput": {
                  "name": "GetFileAsync",
                  "uniqueName": "GetFileAsyncByInput",
                  "httpMethod": "GET",
                  "url": "api/app/orders/file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Shared.GetFileInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Shared.GetFileInput",
                      "typeSimple": "ExampleAbpApplicationLayer.Shared.GetFileInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "DownloadToken",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FileId",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Content.IRemoteStreamContent",
                    "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
                  }
                }
              }
            },
            "ExampleAbpApplicationLayer.Controllers.OrderItems.OrderItemController": {
              "controllerName": "OrderItem",
              "type": "ExampleAbpApplicationLayer.Controllers.OrderItems.OrderItemController",
              "isRemoteService": true,
              "isIntegrationService": false,
              "interfaces": [
                {
                  "type": "ExampleAbpApplicationLayer.OrderItems.IOrderItemAppService"
                }
              ],
              "actions": {
                "GetListAsyncByInput": {
                  "uniqueName": "GetListAsyncByInput",
                  "name": "GetListAsync",
                  "httpMethod": "GET",
                  "url": "api/app/order-items",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "OrderId",
                      "jsonName": null,
                      "type": "string",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Sorting",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "QtyMin",
                      "jsonName": null,
                      "type": "System.Int?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "QtyMax",
                      "jsonName": null,
                      "type": "System.Int?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "PriceMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "PriceMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "TotalPriceMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "TotalPriceMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "ProductName",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "ProductId",
                      "jsonName": null,
                      "type": "System.Guid?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>",
                    "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>"
                  }
                },
                "GetWithNavigationPropertiesAsyncById": {
                  "uniqueName": "GetWithNavigationPropertiesAsyncById",
                  "name": "GetWithNavigationPropertiesAsync",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/with-navigation-properties/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto",
                    "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto"
                  }
                },
                "GetListWithNavigationPropertiesByOrderIdAsync": {
                  "uniqueName": "GetListWithNavigationPropertiesByOrderIdAsync",
                  "name": "GetListWithNavigationPropertiesByOrderIdAsync",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/detailed/by-order",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "OrderId",
                      "jsonName": null,
                      "type": "string",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Sorting",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>",
                    "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>"
                  }
                },
                "GetAsyncById": {
                  "uniqueName": "GetAsyncById",
                  "name": "GetAsync",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
                    "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto"
                  }
                },
                "GetProductLookupAsyncByInput": {
                  "uniqueName": "GetProductLookupAsyncByInput",
                  "name": "GetProductLookupAsync",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/product-lookup",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Shared.LookupRequestDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Shared.LookupRequestDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Shared.LookupRequestDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "Filter",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Shared.LookupDto<System.Guid?>>",
                    "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Shared.LookupDto<string?>>"
                  }
                },
                "CreateAsyncByInput": {
                  "uniqueName": "CreateAsyncByInput",
                  "name": "CreateAsync",
                  "httpMethod": "POST",
                  "url": "api/app/order-items",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
                    "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto"
                  }
                },
                "UpdateAsyncByIdAndInput": {
                  "uniqueName": "UpdateAsyncByIdAndInput",
                  "name": "UpdateAsync",
                  "httpMethod": "PUT",
                  "url": "api/app/order-items/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    },
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
                    "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto"
                  }
                },
                "DeleteAsyncById": {
                  "uniqueName": "DeleteAsyncById",
                  "name": "DeleteAsync",
                  "httpMethod": "DELETE",
                  "url": "api/app/order-items/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "System.Void",
                    "typeSimple": "System.Void"
                  }
                },
                "UploadFileAsyncByInput": {
                  "name": "UploadFileAsync",
                  "uniqueName": "UploadFileAsyncByInput",
                  "httpMethod": "POST",
                  "url": "api/app/order-items/upload-file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core",
                      "type": "Volo.Abp.Content.IRemoteStreamContent",
                      "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "Volo.Abp.Content.IRemoteStreamContent",
                      "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto"
                  }
                },
                "GetFileAsyncByInput": {
                  "name": "GetFileAsync",
                  "uniqueName": "GetFileAsyncByInput",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Shared.GetFileInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Shared.GetFileInput",
                      "typeSimple": "ExampleAbpApplicationLayer.Shared.GetFileInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "DownloadToken",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FileId",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Content.IRemoteStreamContent",
                    "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
                  }
                },
                "GetDownloadTokenAsync": {
                  "uniqueName": "GetDownloadTokenAsync",
                  "name": "GetDownloadTokenAsync",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/download-token",
                  "supportedVersions": [],
                  "parametersOnMethod": [],
                  "parameters": [],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto"
                  },
                  "allowAnonymous": null,
                  "implementFrom": "ExampleAbpApplicationLayer.OrderItems.IOrderItemsAppService"
                },
                "GetListByOrderIdAsync": {
                  "uniqueName": "GetListByOrderIdAsync",
                  "name": "GetListByOrderId",
                  "httpMethod": "GET",
                  "url": "api/app/order-items/by-order",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
                      "typeSimple": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "OrderId",
                      "jsonName": null,
                      "type": "string",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Sorting",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>",
                    "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>"
                  }
                }
              }
            },
            "ExampleAbpApplicationLayer.Controllers.Products.ProductController": {
              "controllerName": "Product",
              "type": "ExampleAbpApplicationLayer.Controllers.Products.ProductController",
              "isRemoteService": true,
              "isIntegrationService": false,
              "interfaces": [
                {
                  "type": "ExampleAbpApplicationLayer.Products.IProductAppService"
                }
              ],
              "actions": {
                "GetListAsyncByInput": {
                  "uniqueName": "GetListAsyncByInput",
                  "name": "GetListAsync",
                  "httpMethod": "GET",
                  "url": "api/app/products",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Products.GetProductsInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Products.GetProductsInput",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.GetProductsInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Sorting",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Name",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Desc",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "PriceMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "PriceMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "IsActive",
                      "jsonName": null,
                      "type": "System.Bool?",
                      "typeSimple": "boolean?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Products.ProductDto>",
                    "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Products.ProductDto>"
                  }
                },
                "GetAsyncById": {
                  "uniqueName": "GetAsyncById",
                  "name": "GetAsync",
                  "httpMethod": "GET",
                  "url": "api/app/products/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Products.ProductDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto"
                  }
                },
                "GetListAsExcelFileAsyncByInput": {
                  "uniqueName": "GetListAsExcelFileAsyncByInput",
                  "name": "GetListAsExcelFileAsync",
                  "httpMethod": "GET",
                  "url": "api/app/products/as-excel-file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "DownloadToken",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "Name",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isRequired": true,
                      "nameOnMethod": "input",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "Desc",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "PriceMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "PriceMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "name": "IsActive",
                      "jsonName": null,
                      "type": "System.Bool?",
                      "typeSimple": "boolean?",
                      "isRequired": false,
                      "nameOnMethod": "input",
                      "isOptional": true,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Content.IRemoteStreamContent",
                    "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
                  },
                  "allowAnonymous": null,
                  "implementFrom": "ExampleAbpApplicationLayer.Products.IProductsAppService"
                },
                "GetDownloadTokenAsync": {
                  "uniqueName": "GetDownloadTokenAsync",
                  "name": "GetDownloadTokenAsync",
                  "httpMethod": "GET",
                  "url": "api/app/products/download-token",
                  "supportedVersions": [],
                  "parametersOnMethod": [],
                  "parameters": [],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto"
                  },
                  "allowAnonymous": null,
                  "implementFrom": "ExampleAbpApplicationLayer.Products.IProductsAppService"
                },
                "CreateAsyncByInput": {
                  "uniqueName": "CreateAsyncByInput",
                  "name": "CreateAsync",
                  "httpMethod": "POST",
                  "url": "api/app/products",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Products.ProductCreateDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Products.ProductDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto"
                  }
                },
                "UpdateAsyncByIdAndInput": {
                  "uniqueName": "UpdateAsyncByIdAndInput",
                  "name": "UpdateAsync",
                  "httpMethod": "PUT",
                  "url": "api/app/products/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    },
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Products.ProductUpdateDto, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Products.ProductDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto"
                  }
                },
                "DeleteAsyncById": {
                  "uniqueName": "DeleteAsyncById",
                  "name": "DeleteAsync",
                  "httpMethod": "DELETE",
                  "url": "api/app/products/{id}",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "id",
                      "typeAsString": "System.Guid, System.Private.CoreLib",
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "id",
                      "name": "id",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": [],
                      "bindingSourceId": "Path",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "System.Void",
                    "typeSimple": "System.Void"
                  }
                },
                "UploadFileAsyncByInput": {
                  "name": "UploadFileAsync",
                  "uniqueName": "UploadFileAsyncByInput",
                  "httpMethod": "POST",
                  "url": "api/app/products/upload-file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core",
                      "type": "Volo.Abp.Content.IRemoteStreamContent",
                      "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "input",
                      "jsonName": null,
                      "type": "Volo.Abp.Content.IRemoteStreamContent",
                      "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "Body",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto",
                    "typeSimple": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto"
                  }
                },
                "GetFileAsyncByInput": {
                  "name": "GetFileAsync",
                  "uniqueName": "GetFileAsyncByInput",
                  "httpMethod": "GET",
                  "url": "api/app/products/file",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Shared.GetFileInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Shared.GetFileInput",
                      "typeSimple": "ExampleAbpApplicationLayer.Shared.GetFileInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "DownloadToken",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "FileId",
                      "jsonName": null,
                      "type": "System.Guid",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "returnValue": {
                    "type": "Volo.Abp.Content.IRemoteStreamContent",
                    "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
                  }
                },
                "DeleteAllAsync": {
                  "uniqueName": "DeleteAllAsync",
                  "name": "DeleteAllAsync",
                  "httpMethod": "DELETE",
                  "url": "api/app/products/all",
                  "supportedVersions": [],
                  "parameters": [
                    {
                      "nameOnMethod": "input",
                      "name": "FilterText",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Sorting",
                      "jsonName": null,
                      "type": "System.String",
                      "typeSimple": "string",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "SkipCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "MaxResultCount",
                      "jsonName": null,
                      "type": "System.Int32",
                      "typeSimple": "number",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Name",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "Desc",
                      "jsonName": null,
                      "type": "System.String?",
                      "typeSimple": "string?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "PriceMin",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "PriceMax",
                      "jsonName": null,
                      "type": "System.Float?",
                      "typeSimple": "number?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    },
                    {
                      "nameOnMethod": "input",
                      "name": "IsActive",
                      "jsonName": null,
                      "type": "System.Bool?",
                      "typeSimple": "boolean?",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": "input"
                    }
                  ],
                  "parametersOnMethod": [
                    {
                      "name": "input",
                      "typeAsString": "ExampleAbpApplicationLayer.Products.GetProductsInput, ExampleAbpApplicationLayer.Application.Contracts",
                      "type": "ExampleAbpApplicationLayer.Products.GetProductsInput",
                      "typeSimple": "ExampleAbpApplicationLayer.Products.GetProductsInput",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "returnValue": {
                    "type": "System.Void",
                    "typeSimple": "System.Void"
                  }
                },
                "DeleteByIdsAsyncByProductIds": {
                  "uniqueName": "DeleteByIdsAsyncByProductIds",
                  "name": "DeleteByIdsAsync",
                  "httpMethod": "DELETE",
                  "url": "api/app/products",
                  "supportedVersions": [],
                  "parametersOnMethod": [
                    {
                      "name": "productIds",
                      "type": "System.Collections.Generic.List<System.Guid>",
                      "typeAsString": "System.Collections.Generic.List<System.Guid>, System.Private.CoreLib",
                      "typeSimple": "[string]",
                      "isOptional": false,
                      "defaultValue": null
                    }
                  ],
                  "parameters": [
                    {
                      "nameOnMethod": "productIds",
                      "name": "productIds",
                      "jsonName": null,
                      "type": "System.Collections.Generic.List<System.Guid>",
                      "typeSimple": "[string]",
                      "isOptional": false,
                      "defaultValue": null,
                      "constraintTypes": null,
                      "bindingSourceId": "ModelBinding",
                      "descriptorName": ""
                    }
                  ],
                  "returnValue": {
                    "type": "System.Void",
                    "typeSimple": "System.Void"
                  }
                }
              }
            }
          }
        }
      },
      "types": {
        "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus": {
          "baseType": "System.Enum",
          "isEnum": true,
          "enumNames": [
            "Initialized",
            "Paid",
            "Processing",
            "Ordered",
            "Shipped",
            "Arrived",
            "Delivered",
            "Cancelled",
            "NotPaid"
          ],
          "enumValues": [0, 1, 2, 3, 4, 5, 6, 7, 8],
          "genericArguments": null,
          "properties": null
        },
        "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto": {
          "baseType": "Volo.Abp.Application.Dtos.PagedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Sorting",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.PagedResultRequestDto": {
          "baseType": "Volo.Abp.Application.Dtos.LimitedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "SkipCount",
              "jsonName": null,
              "type": "System.Int32",
              "typeSimple": "number",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.LimitedResultRequestDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "DefaultMaxResultCount",
              "jsonName": null,
              "type": "System.Int32",
              "typeSimple": "number",
              "isRequired": false
            },
            {
              "name": "MaxMaxResultCount",
              "jsonName": null,
              "type": "System.Int32",
              "typeSimple": "number",
              "isRequired": false
            },
            {
              "name": "MaxResultCount",
              "jsonName": null,
              "type": "System.Int32",
              "typeSimple": "number",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.PagedResultDto<T0>": {
          "baseType": "Volo.Abp.Application.Dtos.ListResultDto<T>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["T"],
          "properties": [
            {
              "name": "TotalCount",
              "jsonName": null,
              "type": "System.Int64",
              "typeSimple": "number",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.ListResultDto<T0>": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["T"],
          "properties": [
            {
              "name": "Items",
              "jsonName": null,
              "type": "[T]",
              "typeSimple": "[T]",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.FullAuditedEntityDto<T0>": {
          "baseType": "Volo.Abp.Application.Dtos.AuditedEntityDto<TPrimaryKey>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["TPrimaryKey"],
          "properties": [
            {
              "name": "IsDeleted",
              "jsonName": null,
              "type": "System.Boolean",
              "typeSimple": "boolean",
              "isRequired": false
            },
            {
              "name": "DeleterId",
              "jsonName": null,
              "type": "System.Guid?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "DeletionTime",
              "jsonName": null,
              "type": "System.DateTime?",
              "typeSimple": "string?",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.AuditedEntityDto<T0>": {
          "baseType": "Volo.Abp.Application.Dtos.CreationAuditedEntityDto<TPrimaryKey>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["TPrimaryKey"],
          "properties": [
            {
              "name": "LastModificationTime",
              "jsonName": null,
              "type": "System.DateTime?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "LastModifierId",
              "jsonName": null,
              "type": "System.Guid?",
              "typeSimple": "string?",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.CreationAuditedEntityDto<T0>": {
          "baseType": "Volo.Abp.Application.Dtos.EntityDto<TPrimaryKey>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["TPrimaryKey"],
          "properties": [
            {
              "name": "CreationTime",
              "jsonName": null,
              "type": "System.DateTime",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "CreatorId",
              "jsonName": null,
              "type": "System.Guid?",
              "typeSimple": "string?",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.EntityDto<T0>": {
          "baseType": "Volo.Abp.Application.Dtos.EntityDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["TKey"],
          "properties": [
            {
              "name": "Id",
              "jsonName": null,
              "type": "TKey",
              "typeSimple": "TKey",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Application.Dtos.EntityDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": []
        },
        "Volo.Abp.Identity.IdentityUserDto": {
          "baseType": "Volo.Abp.Application.Dtos.ExtensibleEntityDto<System.Guid>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "TenantId",
              "jsonName": null,
              "type": "System.Guid?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "UserName",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "Email",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "Surname",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "EmailConfirmed",
              "jsonName": null,
              "type": "System.Boolean",
              "typeSimple": "boolean",
              "isRequired": false
            },
            {
              "name": "PhoneNumber",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "PhoneNumberConfirmed",
              "jsonName": null,
              "type": "System.Boolean",
              "typeSimple": "boolean",
              "isRequired": false
            },
            {
              "name": "SupportTwoFactor",
              "jsonName": null,
              "type": "System.Boolean",
              "typeSimple": "boolean",
              "isRequired": false
            },
            {
              "name": "LockoutEnabled",
              "jsonName": null,
              "type": "System.Boolean",
              "typeSimple": "boolean",
              "isRequired": false
            },
            {
              "name": "IsLockedOut",
              "jsonName": null,
              "type": "System.Boolean",
              "typeSimple": "boolean",
              "isRequired": false
            },
            {
              "name": "ConcurrencyStamp",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Shared.LookupRequestDto": {
          "baseType": "Volo.Abp.Application.Dtos.PagedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Filter",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Shared.LookupDto<T0>": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": ["TKey"],
          "properties": [
            {
              "name": "Id",
              "jsonName": null,
              "type": "TKey",
              "typeSimple": "TKey",
              "isRequired": false
            },
            {
              "name": "DisplayName",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Orders.GetOrdersInput": {
          "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "FilterText",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "OrderDateMin",
              "jsonName": null,
              "type": "System.DateTime?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "OrderDateMax",
              "jsonName": null,
              "type": "System.DateTime?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "TotalAmountMin",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "TotalAmountMax",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "Status",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
              "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Orders.OrderDto": {
          "baseType": "Volo.Abp.Application.Dtos.FullAuditedEntityDto<System.Guid>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "OrderDate",
              "jsonName": null,
              "type": "System.DateTime",
              "typeSimple": "string",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "TotalAmount",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Status",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
              "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
              "isRequired": false
            },
            {
              "name": "ConcurrencyStamp",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Orders.OrderCreateDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "OrderDate",
              "jsonName": null,
              "type": "System.DateTime",
              "typeSimple": "string",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "TotalAmount",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Status",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
              "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Orders.OrderUpdateDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "OrderDate",
              "jsonName": null,
              "type": "System.DateTime",
              "typeSimple": "string",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "TotalAmount",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Status",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
              "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
              "isRequired": false
            },
            {
              "name": "ConcurrencyStamp",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Users.AppUserDto": {
          "baseType": "Volo.Abp.Identity.IdentityUserDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": []
        },
        "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Token",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            }
          ]
        },
        "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "DownloadToken",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "FilterText",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "OrderDateMin",
              "jsonName": null,
              "type": "System.DateTime?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "OrderDateMax",
              "jsonName": null,
              "type": "System.DateTime?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "TotalAmountMin",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "TotalAmountMax",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "Status",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
              "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
              "isRequired": false
            }
          ]
        },
        "Volo.Abp.Content.IRemoteStreamContent": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "FileName",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "ContentType",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "ContentLength",
              "jsonName": null,
              "type": "System.Int64?",
              "typeSimple": "number?",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            }
          ]
        },
        "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto": {
          "baseType": "Volo.Abp.Application.Dtos.EntityDto<System.Guid>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "MimeType",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            }
          ]
        },
        "ExampleAbpApplicationLayer.Shared.GetFileInput": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "DownloadToken",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "FileId",
              "jsonName": null,
              "type": "System.Guid",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            }
          ]
        },
        "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput": {
          "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "FilterText",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "QtyMin",
              "jsonName": null,
              "type": "System.Int?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "QtyMax",
              "jsonName": null,
              "type": "System.Int?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "PriceMin",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "PriceMax",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "TotalPriceMin",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "TotalPriceMax",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "ProductName",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "ProductId",
              "jsonName": null,
              "type": "System.Guid?",
              "typeSimple": "string?",
              "isRequired": true
            },
            {
              "name": "OrderId",
              "jsonName": null,
              "type": "string",
              "typeSimple": "string",
              "isRequired": true
            }
          ]
        },
        "ExampleAbpApplicationLayer.OrderItems.OrderItemDto": {
          "baseType": "Volo.Abp.Application.Dtos.FullAuditedEntityDto<System.Guid>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Qty",
              "jsonName": null,
              "type": "System.Int",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Price",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "TotalPrice",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ProductName",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ProductId",
              "jsonName": null,
              "type": "System.Guid",
              "typeSimple": "string",
              "isRef": true,
              "isRequired": true
            }
          ]
        },
        "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Qty",
              "jsonName": null,
              "type": "System.Int",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Price",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "TotalPrice",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ProductName",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ProductId",
              "jsonName": null,
              "type": "System.Guid",
              "typeSimple": "string",
              "isRef": true,
              "isRequired": true
            }
          ]
        },
        "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Qty",
              "jsonName": null,
              "type": "System.Int",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Price",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "TotalPrice",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ProductName",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ProductId",
              "jsonName": null,
              "type": "System.Guid",
              "typeSimple": "string",
              "isRef": true,
              "isRequired": true
            }
          ]
        },
        "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput": {
          "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "FilterText",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "OrderId",
              "jsonName": null,
              "type": "string",
              "typeSimple": "string",
              "isRequired": true
            }
          ]
        },
        "ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "OrderItem",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
              "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
              "isRequired": false
            },
            {
              "name": "Product",
              "jsonName": null,
              "type": "ExampleAbpApplicationLayer.Products.ProductDto",
              "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto",
              "isRequired": true
            }
          ]
        },
        "ExampleAbpApplicationLayer.Products.GetProductsInput": {
          "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "FilterText",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            },
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRequired": true
            },
            {
              "name": "Desc",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "PriceMin",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "PriceMax",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "IsActive",
              "jsonName": null,
              "type": "System.Bool?",
              "typeSimple": "boolean?",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Products.ProductDto": {
          "baseType": "Volo.Abp.Application.Dtos.FullAuditedEntityDto<System.Guid>",
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRef": false,
              "isRequired": true
            },
            {
              "name": "Desc",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Price",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "IsActive",
              "jsonName": null,
              "type": "System.Bool",
              "typeSimple": "boolean",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ConcurrencyStamp",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Products.ProductCreateDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRef": false,
              "isRequired": true
            },
            {
              "name": "Desc",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Price",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "IsActive",
              "jsonName": null,
              "type": "System.Bool",
              "typeSimple": "boolean",
              "isRef": false,
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Products.ProductUpdateDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRef": false,
              "isRequired": true
            },
            {
              "name": "Desc",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "Price",
              "jsonName": null,
              "type": "System.Float",
              "typeSimple": "number",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "IsActive",
              "jsonName": null,
              "type": "System.Bool",
              "typeSimple": "boolean",
              "isRef": false,
              "isRequired": false
            },
            {
              "name": "ConcurrencyStamp",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false
            }
          ]
        },
        "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto": {
          "baseType": null,
          "isEnum": false,
          "enumNames": null,
          "enumValues": null,
          "genericArguments": null,
          "properties": [
            {
              "name": "DownloadToken",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "FilterText",
              "jsonName": null,
              "type": "System.String",
              "typeSimple": "string",
              "isRequired": false,
              "minLength": null,
              "maxLength": null,
              "minimum": null,
              "maximum": null,
              "regex": null
            },
            {
              "name": "Name",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRequired": true
            },
            {
              "name": "Desc",
              "jsonName": null,
              "type": "System.String?",
              "typeSimple": "string?",
              "isRequired": false
            },
            {
              "name": "PriceMin",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "PriceMax",
              "jsonName": null,
              "type": "System.Float?",
              "typeSimple": "number?",
              "isRequired": false
            },
            {
              "name": "IsActive",
              "jsonName": null,
              "type": "System.Bool?",
              "typeSimple": "boolean?",
              "isRequired": false
            }
          ]
        }
      }
    }
    
    ]]></file>
  <file path="angular\src\app\home\home.component.ts"><![CDATA[
    import { Component, inject } from '@angular/core';
    import { AuthService, LocalizationPipe } from '@abp/ng.core';
    
    @Component({
      selector: 'app-home',
      templateUrl: './home.component.html',
      styleUrls: ['./home.component.scss'],
      imports: [LocalizationPipe]
    })
    export class HomeComponent {
      private authService = inject(AuthService);
    
      get hasLoggedIn(): boolean {
        return this.authService.isAuthenticated
      }
    
      login() {
        this.authService.navigateToLogin();
      }
    }
    
    ]]></file>
  <file path="angular\src\app\home\home.component.scss"><![CDATA[
    /* Styles for the home component */
    .card-bg-image {
      position: absolute;
      width: 630px;
      height: auto;
      bottom: 0;
      right: 0;
      z-index: 1;
    }
    
    .starting-content {
      position: relative;
      z-index: 2;
    }
    
    
    @media (min-width: 1199px) {
      .h-lg-100 {
        height: 100% !important;
      }
    }
    
    @media (min-width: 768px) {
      .h-md-100 {
        height: 100% !important;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\home\home.component.html"><![CDATA[
    <div class="row mb-3">
      <div class="col-xl-6 col-12 d-flex">
        <div class="card h-lg-100 w-100 overflow-hidden">
          <div class="card-body">
            <div class="starting-content pe-5">
              @if(!hasLoggedIn){
              <h3>Welcome</h3>
              <p class="lead text-muted mb-2">
                {{ '::LongWelcomeMessage' | abpLocalization }}
              </p>
              <a (click)="login()" class="px-4 btn btn-primary mb-4" role="button">
                <i class="fa fa-sign-in"></i>
                {{ 'AbpAccount::Login' | abpLocalization }}
              </a>
              }
    
              <h4>Getting Started</h4>
              <p class="lead text-muted mb-2">
                Learn how to create and run a new web application using the application startup
                template.
              </p>
              <a
                href="https://abp.io/docs/latest/getting-started"
                class="btn btn-brand mb-4"
                target="_blank"
              >
                Getting Started
              </a>
    
              <h4>Web Application Development Tutorial</h4>
              <p class="lead text-muted mb-2">
                Learn how to build an ABP based web application named Acme.BookStore.
              </p>
              <a
                href="https://abp.io/docs/latest/tutorials/book-store/part-01?UI=NG&DB=EF"
                class="btn btn-brand mb-4"
                target="_blank"
              >
                Explore Tutorial
              </a>
    
              <h4>Customize Lepton Theme</h4>
              <p class="text-muted mb-2">Learn how to customize LeptonX Theme as you wish.</p>
              <a
                href="https://abp.io/docs/commercial/latest/themes/lepton-x/index"
                class="btn btn-primary soft mb-5 mb-xl-0"
                target="_blank"
              >
                Customize Lepton
              </a>
            </div>
            <img class="card-bg-image" src="assets/images/getting-started/bg-01.png" />
          </div>
        </div>
      </div>
      <div class="col-xl-3 col-md-6 d-flex">
        <div class="row">
          <div class="col-12 d-flex">
            <div class="card overflow-hidden mb-3">
              <div class="card-body d-flex flex-column">
                <div class="abp-support abp-logo mb-2"></div>
                <p class="text-muted mb-2">
                  You can check for similar problems and solutions, or open a new topic to discuss your
                  specific issue.
                </p>
                <a
                  class="btn btn-brand soft w-50"
                  href="https://abp.io/support/questions"
                  target="_blank"
                >
                  Visit Support
                </a>
                <img
                  style="margin-bottom: -24px"
                  class="w-100 mt-auto"
                  src="assets/images/getting-started/img-support.png"
                />
              </div>
            </div>
          </div>
          <div class="col-12 d-flex">
            <div class="card h-md-100 overflow-hidden">
              <div class="card-body d-flex flex-column">
                <div class="abp-blog abp-logo mb-2"></div>
                <p class="text-muted mb-2">
                  You can find content on .NET development, cross-platform, ASP.NET application
                  templates, ABP-related news, and more.
                </p>
                <a
                  class="btn btn-brand soft w-50"
                  href="https://abp.io/blog"
                  target="_blank"
                >
                  Visit Blog
                </a>
                <img
                  style="margin-bottom: -24px"
                  class="w-100 mt-auto"
                  src="assets/images/getting-started/img-blog.png"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-xl-3 col-md-6 d-flex">
        <div class="card h-100 overflow-hidden">
          <div class="card-body">
            <div class="abp-community abp-logo mb-2"></div>
            <p class="lead text-muted">
              A unique community platform for <span class="fw-bold">ABP Lovers!</span>
            </p>
            <p class="text-muted mb-2">
              Explore all ABP users' experiences with the ABP Framework, discover articles and videos on
              how to use ABP, and join raffles for a chance to win surprise gifts!
            </p>
            <a
              class="btn btn-brand soft mb-3"
              href="https://abp.io/community/"
              target="_blank"
            >
              Join ABP Community
            </a>
          </div>
          <img class="mt-3 w-100" src="assets/images/getting-started/img-community.png" />
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-xl-3 col-lg-4">
        <div class="card">
          <div class="card-header">
            <div class="card-title text-body">More from ABP.IO</div>
          </div>
          <div class="card-body pt-0">
            <div>
              <table class="table mb-0">
                <tbody>
                  <tr>
                    <td class="ps-0 d-flex">
                      <div
                        class="rounded-circle me-2 flex-center bg-brand soft"
                        style="width: 20px; height: 20px"
                      >
                        <i class="bi bi-check fs-4"></i>
                      </div>
                      <div>Latest Release Logs</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://github.com/abpframework/abp/releases" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex">
                      <div
                        class="rounded-circle me-2 flex-center bg-brand soft"
                        style="width: 20px; height: 20px"
                      >
                        <i class="bi bi-check fs-4"></i>
                      </div>
                      <div>Video Courses</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://abp.io/video-courses/essentials" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex">
                      <div
                        class="rounded-circle me-2 flex-center bg-brand soft"
                        style="width: 20px; height: 20px"
                      >
                        <i class="bi bi-check fs-4"></i>
                      </div>
                      <div>Samples</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://abp.io/docs/latest/Samples/Index" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex">
                      <div
                        class="rounded-circle me-2 flex-center bg-brand soft"
                        style="width: 20px; height: 20px"
                      >
                        <i class="bi bi-check fs-4"></i>
                      </div>
                      <div>Books</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://abp.io/books" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex border-bottom-0">
                      <div
                        class="rounded-circle me-2 flex-center bg-brand soft"
                        style="width: 20px; height: 20px"
                      >
                        <i class="bi bi-check fs-4"></i>
                      </div>
                      <div>FAQ</div>
                    </td>
                    <td class="text-end pe-0 opacity-25 border-bottom-0">
                      <a href="https://abp.io/faq" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div class="col-xl-6 col-lg-8 d-flex">
        <div class="card">
          <div class="card-body d-flex">
            <div class="row align-items-center">
              <div class="col-md-8">
                <p class="text-muted mb-0">THE OFFICIAL GUIDE</p>
                <h3>Mastering ABP Framework</h3>
                <p class="text-muted">
                  Written by the creator of the ABP Framework, this book will help you gain a complete
                  understanding of the framework and modern web application development techniques.
                </p>
                <div class="d-md-flex mb-2 mb-md-0">
                  <a
                    href="https://www.amazon.com/gp/product/B097Z2DM8Q"
                    target="_blank"
                    class="btn btn-primary soft me-md-2 mb-2 mb-md-0"
                  >
                    Buy on Amazon US
                  </a>
                  <a
                    href="https://www.packtpub.com/product/mastering-abp-framework/9781801079242"
                    target="_blank"
                    class="btn btn-primary soft mb-2 mb-md-0"
                  >
                    Buy on PACKT
                  </a>
                </div>
              </div>
              <div class="col">
                <img class="w-100" src="assets/images/getting-started/book.png" />
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-xl-3 col-lg-4">
        <div class="card">
          <div class="card-header">
            <div class="card-title text-body">Follow us on Social Media</div>
          </div>
          <div class="card-body pt-0">
            <div>
              <table class="table mb-0">
                <tbody>
                  <tr>
                    <td class="ps-0 d-flex">
                      <div class="logo-x me-2"></div>
                      <div>X.com</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://twitter.com/abpframework" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex">
                      <img src="assets/images/getting-started/discord.svg" class="me-2" />
                      <div>Discord</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://abp.io/community/discord" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex">
                      <img src="assets/images/getting-started/stack-overflow.svg" class="me-2" />
                      <div>Stack Overflow</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://stackoverflow.com/questions/tagged/abp" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex">
                      <img src="assets/images/getting-started/youtube.svg" class="me-2" />
                      <div>YouTube</div>
                    </td>
                    <td class="text-end pe-0 opacity-25">
                      <a href="https://www.youtube.com/@Volosoft" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <td class="ps-0 d-flex border-bottom-0">
                      <img src="assets/images/getting-started/instagram.svg" class="me-2" />
                      <div>Instagram</div>
                    </td>
                    <td class="text-end pe-0 opacity-25 border-bottom-0">
                      <a href="https://www.instagram.com/abpframework/" target="_blank">
                        <i class="fa fa-external-link text-dark"></i>
                      </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    ]]></file>
  <file path="angular\src\app\gdpr-cookie-consent\gdpr-cookie-consent.routes.ts"><![CDATA[
    import { Routes } from '@angular/router';
    
    export const GDPR_COOKIE_CONSENT_ROUTES: Routes = [
      {
        path: 'privacy',
        loadComponent: () =>
          import('./privacy-policy/privacy-policy.component').then(c => c.PrivacyPolicyComponent),
      },
      {
        path: 'cookie',
        loadComponent: () =>
          import('./cookie-policy/cookie-policy.component').then(c => c.CookiePolicyComponent),
      },
    ];
    
    ]]></file>
  <file path="angular\src\app\dashboard\dashboard.component.ts"><![CDATA[
    import { Component } from '@angular/core';
    import { PermissionDirective } from '@abp/ng.core';
    import { HostDashboardComponent } from './host-dashboard/host-dashboard.component';
    import { TenantDashboardComponent } from './tenant-dashboard/tenant-dashboard.component';
    
    @Component({
      selector: 'app-dashboard',
      template: `
        <app-host-dashboard *abpPermission="'ExampleAbpApplicationLayer.Dashboard.Host'" />
        <app-tenant-dashboard *abpPermission="'ExampleAbpApplicationLayer.Dashboard.Tenant'" />
      `,
      imports: [HostDashboardComponent,TenantDashboardComponent, PermissionDirective]
    })
    export class DashboardComponent {}
    
    ]]></file>
  <file path="angular\.suite\schematics\models\proxy-config.js.map"><![CDATA[
    {"version":3,"file":"proxy-config.js","sourceRoot":"","sources":["../../../../packages/suite/src/models/proxy-config.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\models\proxy-config.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=proxy-config.js.map
    ]]></file>
  <file path="angular\.suite\schematics\models\proxy-config.d.ts"><![CDATA[
    import { ApiDefinition } from './api-definition';
    export interface ProxyConfig extends ApiDefinition {
        generated: string[];
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\models\prop.js.map"><![CDATA[
    {"version":3,"file":"prop.js","sourceRoot":"","sources":["../../../../packages/suite/src/models/prop.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\models\prop.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=prop.js.map
    ]]></file>
  <file path="angular\.suite\schematics\models\prop.d.ts"><![CDATA[
    import { eFormControl, ePropType, eUiPickType } from '../enums';
    import { NavigationProperty, Property } from './entity';
    export interface Prop {
        ref: Property | NavigationProperty;
        name: string;
        entityRef: EntityRef;
        getInput: string[];
        type: ePropType;
        enumType?: string;
        formControl: eFormControl | eUiPickType;
        defaultValue: any;
        validators: string[];
        asterisk: string;
        question: string;
        showOnList?: boolean;
        readonlyOnEditModal?: boolean;
        showOnModal?: boolean;
        ngIf?: boolean;
        isFilterable?: boolean;
    }
    export interface EntityRef {
        name: string;
        namespace: string;
        displayProperty?: string;
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\models\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../packages/suite/src/models/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,mDAAiC;AACjC,2CAAyB;AACzB,yCAAuB;AACvB,yCAAuB;AACvB,iDAA+B"}
    ]]></file>
  <file path="angular\.suite\schematics\models\index.js"><![CDATA[
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require("./api-definition"), exports);
    __exportStar(require("./entity"), exports);
    __exportStar(require("./enum"), exports);
    __exportStar(require("./prop"), exports);
    __exportStar(require("./proxy-config"), exports);
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\models\index.d.ts"><![CDATA[
    export * from './api-definition';
    export * from './entity';
    export * from './enum';
    export * from './prop';
    export * from './proxy-config';
    
    ]]></file>
  <file path="angular\.suite\schematics\models\enum.js.map"><![CDATA[
    {"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../../packages/suite/src/models/enum.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\models\enum.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=enum.js.map
    ]]></file>
  <file path="angular\.suite\schematics\models\enum.d.ts"><![CDATA[
    export interface Enum {
        name: string;
        namespace: string;
        members: [string, number][];
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\models\entity.js.map"><![CDATA[
    {"version":3,"file":"entity.js","sourceRoot":"","sources":["../../../../packages/suite/src/models/entity.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\models\entity.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=entity.js.map
    ]]></file>
  <file path="angular\.suite\schematics\models\entity.d.ts"><![CDATA[
    import { EntityType, eUiPickType } from '../enums';
    export interface Entity {
        Id: string;
        BaseClass: string;
        CreateTests: boolean;
        CheckConcurrency: boolean;
        DatabaseTableName: string;
        IsMultiTenant: boolean;
        Name: string;
        NamePlural: string;
        Namespace: string;
        Type: EntityType;
        ChildEntities: Entity[];
        NavigationProperties: NavigationProperty[];
        NavigationConnections: NavigationProperty[];
        OriginalName: string;
        PhysicalFileName: string;
        PrimaryKeyType: string;
        Properties: Property[];
        ShouldAddMigration: boolean;
        ShouldCreateUserInterface: boolean;
        ShouldUpdateDatabase: boolean;
        ShouldExportExcel: boolean;
        PreserveCustomCode: boolean;
        MenuIcon?: string;
        MasterEntityName?: string;
        MasterEntity?: Entity;
        BulkDeleteEnabled: boolean;
        PageTitle: string;
    }
    export interface Property {
        Id: string;
        EmailValidation: boolean;
        EnumAngularImport: string;
        EnumNamespace: string;
        EnumType: string;
        EnumValues?: Record<string, number>;
        IsNullable: boolean;
        DefaultValue: any;
        IsRequired: boolean;
        IsTextArea: boolean;
        MaxLength?: number;
        MinLength?: number;
        Name: string;
        Regex: string;
        SortOrder: number;
        SortType: number;
        Type: ServerDataType;
        ShowOnList: boolean;
        ShowOnCreateModal: boolean;
        ShowOnEditModal: boolean;
        ReadonlyOnEditModal: boolean;
        IsFilterable: boolean;
    }
    export interface NavigationProperty {
        DisplayProperty: string;
        DtoEntityName: string;
        DtoNamespace: string;
        EntityName: string;
        EntityNameWithDuplicationNumber: string;
        EntitySetName: string;
        EntitySetNameWithDuplicationNumber: string;
        IsRequired: boolean;
        Name: string;
        Namespace: string;
        ReferencePropertyName: string;
        Type: ServerDataType;
        UiPickType: keyof typeof eUiPickType;
    }
    export declare type ServerDataType = 'bool' | 'byte' | 'char' | 'Date' | 'DateTime' | 'DateOnly' | 'TimeOnly' | 'decimal' | 'double' | 'enum' | 'float' | 'Guid' | 'File' | 'int' | 'long' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort';
    export declare type UsedLookupTypes = {
        hasLookupSelect: boolean;
        hasLookupModal: boolean;
        hasLookupTypeahead: boolean;
    };
    
    ]]></file>
  <file path="angular\.suite\schematics\models\api-definition.js.map"><![CDATA[
    {"version":3,"file":"api-definition.js","sourceRoot":"","sources":["../../../../packages/suite/src/models/api-definition.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\models\api-definition.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=api-definition.js.map
    ]]></file>
  <file path="angular\.suite\schematics\models\api-definition.d.ts"><![CDATA[
    import { eBindingSourceId } from '../enums';
    export interface ApiDefinition {
        modules: Record<string, Module>;
        types: Record<string, Type>;
    }
    export interface Type {
        baseType: string | null;
        isEnum: boolean;
        enumNames: string[] | null;
        enumValues: number[] | null;
        genericArguments: string[] | null;
        properties: PropertyDef[] | null;
    }
    export interface PropertyDef {
        isRef?: boolean;
        isRequired: boolean;
        name: string;
        jsonName: string | null;
        type: string;
        typeSimple: string;
        minLength?: number | null;
        maxLength?: number | null;
        minimum?: number | null;
        maximum?: number | null;
        regex?: string | null;
    }
    export interface Module {
        rootPath: string;
        remoteServiceName: string;
        controllers: Record<string, Controller>;
    }
    export interface Controller {
        controllerName: string;
        type: string;
        isRemoteService: boolean;
        isIntegrationService: boolean;
        interfaces: InterfaceDef[];
        actions: Record<string, Action>;
    }
    export interface InterfaceDef {
        type: string;
    }
    export interface Action {
        uniqueName: string;
        name: string;
        httpMethod: string;
        url: string;
        supportedVersions: string[];
        parametersOnMethod: ParameterInSignature[];
        parameters: ParameterInBody[];
        returnValue: TypeDef;
    }
    export interface ParameterInSignature {
        name: string;
        typeAsString: string;
        type: string;
        typeSimple: string;
        isOptional: boolean;
        defaultValue: any;
    }
    export interface ParameterInBody {
        nameOnMethod: string;
        name: string;
        jsonName: string | null;
        type: string;
        typeSimple: string;
        isOptional: boolean;
        defaultValue: any;
        constraintTypes: string[] | null;
        bindingSourceId: eBindingSourceId;
        descriptorName: string;
    }
    export interface TypeDef {
        type: string;
        typeSimple: string;
    }
    export interface TypeWithEnum {
        isEnum: boolean;
        type: string;
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\tests\helpers.js.map"><![CDATA[
    {"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../../packages/suite/src/tests/helpers.ts"],"names":[],"mappings":";;;AAAA,uEAAkF;AAElF,SAAgB,mBAAmB,CAAC,OAAe;IACjD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,+BAAqB,CAAC,CAAC;IACnD,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9B,CAAC;AAHD,kDAGC"}
    ]]></file>
  <file path="angular\.suite\schematics\tests\helpers.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCustomCodeBlocks = void 0;
    const helpers_1 = require("../commands/generate-entity/utils/helpers");
    function getCustomCodeBlocks(content) {
        const match = content.match(helpers_1.contentPatternForHtml);
        return match ? match : null;
    }
    exports.getCustomCodeBlocks = getCustomCodeBlocks;
    //# sourceMappingURL=helpers.js.map
    ]]></file>
  <file path="angular\.suite\schematics\tests\helpers.d.ts"><![CDATA[
    export declare function getCustomCodeBlocks(content: string): RegExpMatchArray | null;
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\template.js.map"><![CDATA[
    {"version":3,"file":"template.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/template.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\enums\template.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=template.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\template.d.ts"><![CDATA[
    export declare const enum Template {
        App = "app-pro",
        AppNoLayers = "app-nolayers-pro",
        MS = "microservice-pro",
        Module = "module-pro"
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\schematics.js.map"><![CDATA[
    {"version":3,"file":"schematics.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/schematics.ts"],"names":[],"mappings":";;;AAAA,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,4BAAW,CAAA;IACX,yCAAwB,CAAA;IACxB,sCAAqB,CAAA;IACrB,2CAA0B,CAAA;IAC1B,6CAA4B,CAAA;IAC5B,mDAAkC,CAAA;AACpC,CAAC,EAPW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAOxB"}
    ]]></file>
  <file path="angular\.suite\schematics\enums\schematics.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ABPSchematics = void 0;
    var ABPSchematics;
    (function (ABPSchematics) {
        ABPSchematics["Api"] = "api";
        ABPSchematics["CreateLib"] = "create-lib";
        ABPSchematics["ProxyAdd"] = "ProxyAdd";
        ABPSchematics["ProxyIndex"] = "proxy-index";
        ABPSchematics["ProxyRemove"] = "proxy-remove";
        ABPSchematics["GenerateEntity"] = "generate-entity";
    })(ABPSchematics = exports.ABPSchematics || (exports.ABPSchematics = {}));
    //# sourceMappingURL=schematics.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\schematics.d.ts"><![CDATA[
    export declare enum ABPSchematics {
        Api = "api",
        CreateLib = "create-lib",
        ProxyAdd = "ProxyAdd",
        ProxyIndex = "proxy-index",
        ProxyRemove = "proxy-remove",
        GenerateEntity = "generate-entity"
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\prop-type.js.map"><![CDATA[
    {"version":3,"file":"prop-type.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/prop-type.ts"],"names":[],"mappings":";;;AAAA,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,gCAAmB,CAAA;IACnB,8BAAiB,CAAA;IACjB,8BAAiB,CAAA;AACnB,CAAC,EAJW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAIpB"}
    ]]></file>
  <file path="angular\.suite\schematics\enums\prop-type.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ePropType = void 0;
    var ePropType;
    (function (ePropType) {
        ePropType["Boolean"] = "boolean";
        ePropType["Number"] = "number";
        ePropType["String"] = "string";
    })(ePropType = exports.ePropType || (exports.ePropType = {}));
    //# sourceMappingURL=prop-type.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\prop-type.d.ts"><![CDATA[
    export declare enum ePropType {
        Boolean = "boolean",
        Number = "number",
        String = "string"
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,sDAAoC;AACpC,8CAA4B;AAC5B,iDAA+B;AAC/B,8CAA4B;AAC5B,+CAA6B;AAC7B,6CAA2B;AAC3B,gDAA8B"}
    ]]></file>
  <file path="angular\.suite\schematics\enums\index.js"><![CDATA[
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require("./binding-source-id"), exports);
    __exportStar(require("./exception"), exports);
    __exportStar(require("./form-control"), exports);
    __exportStar(require("./prop-type"), exports);
    __exportStar(require("./schematics"), exports);
    __exportStar(require("./template"), exports);
    __exportStar(require("./entity-type"), exports);
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\index.d.ts"><![CDATA[
    export * from './binding-source-id';
    export * from './exception';
    export * from './form-control';
    export * from './prop-type';
    export * from './schematics';
    export * from './template';
    export * from './entity-type';
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\form-control.js.map"><![CDATA[
    {"version":3,"file":"form-control.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/form-control.ts"],"names":[],"mappings":";;;AAAA,IAAY,YAQX;AARD,WAAY,YAAY;IACtB,qCAAqB,CAAA;IACrB,6BAAa,CAAA;IACb,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,iCAAiB,CAAA;IACjB,6BAAa,CAAA;IACb,6BAAa,CAAA;AACf,CAAC,EARW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAQvB;AAED,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,yCAA0B,CAAA;IAC1B,qCAAsB,CAAA;IACtB,6CAA8B,CAAA;AAChC,CAAC,EAJW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAItB"}
    ]]></file>
  <file path="angular\.suite\schematics\enums\form-control.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.eUiPickType = exports.eFormControl = void 0;
    var eFormControl;
    (function (eFormControl) {
        eFormControl["Checkbox"] = "checkbox";
        eFormControl["Date"] = "date";
        eFormControl["Time"] = "time";
        eFormControl["Number"] = "number";
        eFormControl["Select"] = "select";
        eFormControl["Text"] = "text";
        eFormControl["File"] = "file";
    })(eFormControl = exports.eFormControl || (exports.eFormControl = {}));
    var eUiPickType;
    (function (eUiPickType) {
        eUiPickType["Dropdown"] = "lookup.select";
        eUiPickType["Modal"] = "lookup.modal";
        eUiPickType["Typeahead"] = "lookup.typeahead";
    })(eUiPickType = exports.eUiPickType || (exports.eUiPickType = {}));
    //# sourceMappingURL=form-control.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\form-control.d.ts"><![CDATA[
    export declare enum eFormControl {
        Checkbox = "checkbox",
        Date = "date",
        Time = "time",
        Number = "number",
        Select = "select",
        Text = "text",
        File = "file"
    }
    export declare enum eUiPickType {
        Dropdown = "lookup.select",
        Modal = "lookup.modal",
        Typeahead = "lookup.typeahead"
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\exception.js.map"><![CDATA[
    {"version":3,"file":"exception.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/exception.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\enums\exception.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=exception.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\exception.d.ts"><![CDATA[
    export declare const enum Exception {
        FileNotFound = "[File Not Found] There is no file at \"{0}\" path.",
        InvalidWorkspace = "[Invalid Workspace] The angular.json should be a valid JSON file.",
        NoModule = "[Module Not Found] Please check if a module called {0} exists in the {1} project.",
        NoProject = "[Project Not Found] A project matching entity solution name or a default project does not exist in your Angular workspace.",
        NoWorkspace = "[Workspace Not Found] Make sure you are running schematics at the root directory of your workspace and it has an angular.json file."
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\entity-type.js.map"><![CDATA[
    {"version":3,"file":"entity-type.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/entity-type.ts"],"names":[],"mappings":";;;AAAA,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,+CAAU,CAAA;IACV,6CAAS,CAAA;AACX,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB"}
    ]]></file>
  <file path="angular\.suite\schematics\enums\entity-type.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityType = void 0;
    var EntityType;
    (function (EntityType) {
        EntityType[EntityType["Master"] = 1] = "Master";
        EntityType[EntityType["Child"] = 2] = "Child";
    })(EntityType = exports.EntityType || (exports.EntityType = {}));
    //# sourceMappingURL=entity-type.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\entity-type.d.ts"><![CDATA[
    export declare enum EntityType {
        Master = 1,
        Child = 2
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\enums\binding-source-id.js.map"><![CDATA[
    {"version":3,"file":"binding-source-id.js","sourceRoot":"","sources":["../../../../packages/suite/src/enums/binding-source-id.ts"],"names":[],"mappings":";;;AAAA,IAAY,gBAKX;AALD,WAAY,gBAAgB;IAC1B,iCAAa,CAAA;IACb,0CAAsB,CAAA;IACtB,iCAAa,CAAA;IACb,mCAAe,CAAA;AACjB,CAAC,EALW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAK3B"}
    ]]></file>
  <file path="angular\.suite\schematics\enums\binding-source-id.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.eBindingSourceId = void 0;
    var eBindingSourceId;
    (function (eBindingSourceId) {
        eBindingSourceId["Body"] = "Body";
        eBindingSourceId["Model"] = "ModelBinding";
        eBindingSourceId["Path"] = "Path";
        eBindingSourceId["Query"] = "Query";
    })(eBindingSourceId = exports.eBindingSourceId || (exports.eBindingSourceId = {}));
    //# sourceMappingURL=binding-source-id.js.map
    ]]></file>
  <file path="angular\.suite\schematics\enums\binding-source-id.d.ts"><![CDATA[
    export declare enum eBindingSourceId {
        Body = "Body",
        Model = "ModelBinding",
        Path = "Path",
        Query = "Query"
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\workspace.js.map"><![CDATA[
    {"version":3,"file":"workspace.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/workspace.ts"],"names":[],"mappings":";;;AACA,2DAAuE;AAEvE,uCAAyD;AAEzD,SAAgB,mBAAmB,CAAC,IAAU;IAC5C,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACnF,IAAI,CAAC,eAAe;QAAE,MAAM,IAAI,gCAAmB,mKAAuB,CAAC;IAE3E,IAAI,eAAgC,CAAC;IAErC,IAAI;QACF,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC1D;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,gCAAmB,sGAA4B,CAAC;KAC3D;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAbD,kDAaC;AAED,SAAgB,eAAe,CAAC,OAAqC;IACnE,OAAO,IAAI,OAAO,CAAC,IAAI,cAAc,CAAC;AACxC,CAAC;AAFD,0CAEC;AAED,SAAgB,SAAS,CAAC,OAAqC;IAC7D,OAAO,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,qBAAW,CAAC,OAAO,CAAC;AACnE,CAAC;AAFD,8BAEC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\workspace.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isLibrary = exports.buildConfigPath = exports.readWorkspaceSchema = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const angular_1 = require("./angular");
    function readWorkspaceSchema(tree) {
        const workspaceBuffer = tree.read('/angular.json') || tree.read('/workspace.json');
        if (!workspaceBuffer)
            throw new schematics_1.SchematicsException("[Workspace Not Found] Make sure you are running schematics at the root directory of your workspace and it has an angular.json file." /* Exception.NoWorkspace */);
        let workspaceSchema;
        try {
            workspaceSchema = JSON.parse(workspaceBuffer.toString());
        }
        catch (_) {
            throw new schematics_1.SchematicsException("[Invalid Workspace] The angular.json should be a valid JSON file." /* Exception.InvalidWorkspace */);
        }
        return workspaceSchema;
    }
    exports.readWorkspaceSchema = readWorkspaceSchema;
    function buildConfigPath(project) {
        return `/${project.root}/config/src/`;
    }
    exports.buildConfigPath = buildConfigPath;
    function isLibrary(project) {
        return project.extensions['projectType'] === angular_1.ProjectType.Library;
    }
    exports.isLibrary = isLibrary;
    //# sourceMappingURL=workspace.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\workspace.d.ts"><![CDATA[
    import { workspaces } from '@angular-devkit/core';
    import { Tree } from '@angular-devkit/schematics';
    import { WorkspaceSchema } from './angular';
    export declare function readWorkspaceSchema(tree: Tree): WorkspaceSchema;
    export declare function buildConfigPath(project: workspaces.ProjectDefinition): string;
    export declare function isLibrary(project: workspaces.ProjectDefinition): boolean;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\validation.js.map"><![CDATA[
    {"version":3,"file":"validation.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/validation.ts"],"names":[],"mappings":";;;AAAA,+CAA+C;AAC/C,4CAA0C;AAE1C,qCAA6C;AAEhC,QAAA,kBAAkB,GAAG;IAChC,KAAK,EAAE,uBAAuB;IAC9B,SAAS,EAAE,2BAA2B;IACtC,SAAS,EAAE,2BAA2B;IACtC,KAAK,EAAE,uBAAuB;IAC9B,QAAQ,EAAE,4BAA4B;CACvC,CAAC;AAEF,SAAS,4BAA4B,CAAC,IAAc;IAClD,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC;AACxD,CAAC;AAED,SAAS,uBAAuB,CAAC,IAAc;IAC7C,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1D,CAAC;AAED,SAAS,uBAAuB,CAAC,IAAc;IAC7C,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IACD,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,OAAO,sBAAsB,YAAY,GAAG,CAAC;AAC/C,CAAC;AAED,SAAS,2BAA2B,CAAC,IAAc;IACjD,OAAO,qCAAqC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5D,CAAC;AAED,SAAS,2BAA2B,CAAC,IAAc;IACjD,OAAO,qCAAqC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5D,CAAC;AAED,SAAS,qCAAqC,CAAC,IAAmB;IAChE,MAAM,IAAI,GAAG,CAAC,cAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,QAAQ,CAA8B,CAAC;IAEhF,OAAO,CAAC,IAAc,EAAE,EAAE;QACxB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,IAAA,0BAAiB,EAAC,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QAE1C,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,sBAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAElF,OAAO,cAAc,SAAS,IAAI,KAAK,GAAG,CAAC;IAC7C,CAAC,CAAC;AACJ,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\validation.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidatorGenerator = void 0;
    const core_1 = require("@angular-devkit/core");
    const constants_1 = require("../constants");
    const common_1 = require("./common");
    exports.ValidatorGenerator = {
        Email: generateEmailValidators,
        MaxLength: generateMaxLengthValidators,
        MinLength: generateMinLengthValidators,
        Regex: generateRegexValidators,
        Required: generateIsRequiredValidators,
    };
    function generateIsRequiredValidators(prop) {
        return prop.IsRequired ? 'Validators.required' : null;
    }
    function generateEmailValidators(prop) {
        return prop.EmailValidation ? 'Validators.email' : null;
    }
    function generateRegexValidators(prop) {
        if (!prop.Regex) {
            return null;
        }
        const regexPattern = new RegExp(prop.Regex);
        return `Validators.pattern(${regexPattern})`;
    }
    function generateMaxLengthValidators(prop) {
        return createMaxMinLengthValidatorsGenerator('max')(prop);
    }
    function generateMinLengthValidators(prop) {
        return createMaxMinLengthValidatorsGenerator('min')(prop);
    }
    function createMaxMinLengthValidatorsGenerator(type) {
        const attr = (core_1.strings.capitalize(type) + 'Length');
        return (prop) => {
            const value = prop[attr];
            if ((0, common_1.isNullOrUndefined)(value))
                return null;
            const validator = type + (constants_1.PROP_TYPES.get(prop.Type) === 'number' ? '' : 'Length');
            return `Validators.${validator}(${value})`;
        };
    }
    //# sourceMappingURL=validation.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\validation.d.ts"><![CDATA[
    import { Property } from '../models';
    export declare const ValidatorGenerator: {
        Email: typeof generateEmailValidators;
        MaxLength: typeof generateMaxLengthValidators;
        MinLength: typeof generateMinLengthValidators;
        Regex: typeof generateRegexValidators;
        Required: typeof generateIsRequiredValidators;
    };
    declare function generateIsRequiredValidators(prop: Property): "Validators.required" | null;
    declare function generateEmailValidators(prop: Property): "Validators.email" | null;
    declare function generateRegexValidators(prop: Property): string | null;
    declare function generateMaxLengthValidators(prop: Property): string | null;
    declare function generateMinLengthValidators(prop: Property): string | null;
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\text.js.map"><![CDATA[
    {"version":3,"file":"text.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/text.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\text.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dir = exports.macro = exports.snake = exports.kebab = exports.pascal = exports.removePostfix = exports.camel = exports.upper = exports.lower = void 0;
    const core_1 = require("@angular-devkit/core");
    const lower = (text) => text.toLowerCase();
    exports.lower = lower;
    const upper = (text) => text.toUpperCase();
    exports.upper = upper;
    const camel = (text) => toCamelCase(_(text));
    exports.camel = camel;
    const removePostfix = (text, postfix) => _removePostfix(_(text), postfix);
    exports.removePostfix = removePostfix;
    const pascal = (text) => core_1.strings.classify(_(text));
    exports.pascal = pascal;
    const kebab = (text) => core_1.strings.dasherize(_(text));
    exports.kebab = kebab;
    const snake = (text) => core_1.strings.underscore(_(text));
    exports.snake = snake;
    const macro = (text) => (0, exports.upper)((0, exports.snake)(text));
    exports.macro = macro;
    const dir = (text) => core_1.strings.dasherize(text.replace(/\./g, '/').replace(/\/\//g, '/'));
    exports.dir = dir;
    function _(text) {
        return text.replace(/\./g, '_');
    }
    // https://github.com/JamesNK/Newtonsoft.Json/blob/master/Src/Newtonsoft.Json/Utilities/StringUtils.cs#L155
    function toCamelCase(str) {
        if (!str || !isUpperCase(str[0]))
            return str;
        const chars = str.split('');
        const { length } = chars;
        for (let i = 0; i < length; i++) {
            if (i === 1 && !isUpperCase(chars[i]))
                break;
            const hasNext = i + 1 < length;
            if (i > 0 && hasNext && !isUpperCase(chars[i + 1])) {
                if (isSeparator(chars[i + 1])) {
                    chars[i] = toLowerCase(chars[i]);
                }
                break;
            }
            chars[i] = toLowerCase(chars[i]);
        }
        return chars.join('');
    }
    function isSeparator(str = '') {
        return /[\s\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-.\/:;<=>?@\[\]^_`{|}~]+/.test(str);
    }
    function isUpperCase(str = '') {
        return /[A-Z]+/.test(str);
    }
    function toLowerCase(str = '') {
        return str.toLowerCase();
    }
    function _removePostfix(text, postfix) {
        return text.replace(new RegExp(`${postfix}$`), '');
    }
    //# sourceMappingURL=text.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\text.d.ts"><![CDATA[
    export declare const lower: (text: string) => string;
    export declare const upper: (text: string) => string;
    export declare const camel: (text: string) => string;
    export declare const removePostfix: (text: string, postfix: string) => string;
    export declare const pascal: (text: string) => string;
    export declare const kebab: (text: string) => string;
    export declare const snake: (text: string) => string;
    export declare const macro: (text: string) => string;
    export declare const dir: (text: string) => string;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\template.js.map"><![CDATA[
    {"version":3,"file":"template.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/template.ts"],"names":[],"mappings":";;;AACA,iCAA+B;AAE/B,SAAgB,aAAa,CAAC,IAAU,EAAE,sBAA+B;IACvE,IAAI,sBAAsB,EAAE;QAC1B,OAAO,IAAA,YAAK,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;KAC1C;IAED,OAAO,IAAA,YAAK,EAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;AAC/B,CAAC;AAND,sCAMC;AAED,SAAgB,yBAAyB,CAAC,KAAa;IACrD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACxE,CAAC;AAFD,8DAEC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\template.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.markNavigationConnections = exports.getLookupName = void 0;
    const text_1 = require("./text");
    function getLookupName(prop, isNavigationConnection) {
        if (isNavigationConnection) {
            return (0, text_1.camel)(`${prop.entityRef.name}Id`);
        }
        return (0, text_1.camel)(`${prop.name}`);
    }
    exports.getLookupName = getLookupName;
    function markNavigationConnections(props) {
        return props.map(prop => ({ ...prop, isNavigationConnection: true }));
    }
    exports.markNavigationConnections = markNavigationConnections;
    //# sourceMappingURL=template.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\template.d.ts"><![CDATA[
    import { Prop } from '../models';
    export declare function getLookupName(prop: Prop, isNavigationConnection: boolean): string;
    export declare function markNavigationConnections(props: Prop[]): {
        isNavigationConnection: boolean;
        ref: import("../models").NavigationProperty | import("../models").Property;
        name: string;
        entityRef: import("../models").EntityRef;
        getInput: string[];
        type: import("../enums").ePropType;
        enumType?: string | undefined;
        formControl: import("../enums").eUiPickType | import("../enums").eFormControl;
        defaultValue: any;
        validators: string[];
        asterisk: string;
        question: string;
        showOnList?: boolean | undefined;
        readonlyOnEditModal?: boolean | undefined;
        showOnModal?: boolean | undefined;
        ngIf?: boolean | undefined;
        isFilterable?: boolean | undefined;
    }[];
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\standalone.js.map"><![CDATA[
    {"version":3,"file":"standalone.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/standalone.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\standalone.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasModuleFileInDirectory = exports.findArray = exports.isIdentifierInFile = exports.getLibEntryFilePaths = exports.getAppEntryFilePaths = exports.PROVIDER_PATH_EXTENSION = exports.ROUTES_PATH_EXTENSION = exports.APP_CONFIG_PATH = void 0;
    const ts = require("typescript");
    const schematics_1 = require("@angular-devkit/schematics");
    const util_1 = require("./angular/standalone/util");
    const path_1 = require("path");
    const text_1 = require("./text");
    const workspace_1 = require("./workspace");
    const angular_1 = require("./angular");
    exports.APP_CONFIG_PATH = 'app.config.ts';
    exports.ROUTES_PATH_EXTENSION = '.routes.ts';
    exports.PROVIDER_PATH_EXTENSION = '.provider.ts';
    /**
     * Retrieves the application-level entry file paths for config and routing files.
     *
     * It locates the `main.ts` file to infer the source directory and builds paths
     * to the app configuration and routes files. Throws an error if either file is missing.
     *
     * @param tree - The virtual file tree representing the project.
     * @param projectName - The name of the Angular application project.
     * @returns An object containing the config path and routes path.
     * @throws SchematicsException if the config or routes file does not exist.
     */
    async function getAppEntryFilePaths(tree, projectName) {
        const mainFilePath = await (0, util_1.getMainFilePath)(tree, projectName);
        const srcDir = mainFilePath.substring(0, mainFilePath.indexOf('src') + 3);
        const appDir = (0, path_1.join)(srcDir, 'app');
        const appConfigPath = (0, path_1.normalize)((0, path_1.join)(appDir, `${exports.APP_CONFIG_PATH}`));
        const appRoutesPath = (0, path_1.normalize)((0, path_1.join)(appDir, `app${exports.ROUTES_PATH_EXTENSION}`));
        if (!tree.exists(appConfigPath) || !tree.exists(appRoutesPath)) {
            throw new schematics_1.SchematicsException(`Either "${appConfigPath}" or "${appRoutesPath}" does not exist.`);
        }
        return { configPath: appConfigPath, routesPath: appRoutesPath };
    }
    exports.getAppEntryFilePaths = getAppEntryFilePaths;
    /**
     * Retrieves the entry file paths for a library project, including routes and provider files.
     *
     * Uses the workspace configuration to locate the source root and constructs paths
     * based on known folder structure conventions. Validates the existence of both files.
     *
     * @param tree - The virtual file tree representing the workspace.
     * @param projectName - The name of the library project.
     * @returns An object containing the routes and provider file paths.
     * @throws SchematicsException if the library config files do not exist.
     */
    async function getLibEntryFilePaths(tree, projectName) {
        const workspace = (0, workspace_1.readWorkspaceSchema)(tree).projects;
        const project = workspace[(0, text_1.kebab)(projectName)];
        if (!project || !project.sourceRoot) {
            throw new schematics_1.SchematicsException(`Project "${projectName}" not found or missing a "sourceRoot" in angular.json.`);
        }
        const libRoutesPath = (0, path_1.normalize)((0, path_1.join)(project.sourceRoot, 'lib', `${(0, text_1.kebab)(projectName)}${exports.ROUTES_PATH_EXTENSION}`));
        const libProviderPath = (0, path_1.normalize)((0, path_1.join)(project.root, 'config', 'src', 'providers', `route${exports.PROVIDER_PATH_EXTENSION}`));
        if (!tree.exists(libRoutesPath) || !tree.exists(libProviderPath)) {
            throw new schematics_1.SchematicsException(`Either "${libRoutesPath}" or "${libProviderPath}" does not exist.`);
        }
        return { routesPath: libRoutesPath, providerPath: libProviderPath };
    }
    exports.getLibEntryFilePaths = getLibEntryFilePaths;
    /**
     * Checks whether a specific identifier is present in a given file.
     *
     * Reads the file contents and uses a regular expression to determine if the
     * identifier exists in the code as a whole word.
     *
     * @param tree - The virtual file tree.
     * @param filePath - The path to the file to inspect.
     * @param identifier - The identifier to look for.
     * @returns True if the identifier is found, false otherwise.
     */
    function isIdentifierInFile(tree, filePath, identifier) {
        const content = tree.read(filePath)?.toString('utf-8') ?? '';
        const regex = new RegExp(`\\b${identifier}\\b`);
        return regex.test(content);
    }
    exports.isIdentifierInFile = isIdentifierInFile;
    /**
     * Searches a TypeScript source file for an array literal assigned to a specific variable name.
     *
     *
     * @param sourceFile - The parsed TypeScript source file.
     * @param arrayIdentifier - The name of the array variable to find.
     * @returns The array literal expression if found, otherwise undefined.
     */
    function findArray(sourceFile, arrayIdentifier) {
        let found;
        const visit = (node) => {
            if (ts.isVariableDeclaration(node) &&
                ts.isIdentifier(node.name) &&
                node.name.escapedText === arrayIdentifier &&
                node.initializer &&
                ts.isArrayLiteralExpression(node.initializer)) {
                found = node.initializer;
                return true;
            }
            return ts.forEachChild(node, visit) ?? false;
        };
        ts.forEachChild(sourceFile, visit);
        return found;
    }
    exports.findArray = findArray;
    /**
     * Checks if a directory contains at least one module file (*.module.ts or *.routing.module.ts).
     *
     *
     * @param tree - The virtual file tree.
     * @param configPath - The normalized directory path to check.
     * @returns True if a module file exists, false otherwise.
     */
    function hasModuleFileInDirectory(tree, configPath) {
        const dir = tree.getDir((0, path_1.normalize)(configPath));
        return dir.subfiles.some(file => file.endsWith(angular_1.MODULE_EXT) || file.endsWith(angular_1.ROUTING_MODULE_EXT));
    }
    exports.hasModuleFileInDirectory = hasModuleFileInDirectory;
    //# sourceMappingURL=standalone.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\standalone.d.ts"><![CDATA[
    import * as ts from 'typescript';
    import { Tree } from '@angular-devkit/schematics';
    interface AppEntryFilePaths {
        configPath?: string;
        routesPath?: string;
        providerPath?: string;
    }
    export declare const APP_CONFIG_PATH = "app.config.ts";
    export declare const ROUTES_PATH_EXTENSION = ".routes.ts";
    export declare const PROVIDER_PATH_EXTENSION = ".provider.ts";
    /**
     * Retrieves the application-level entry file paths for config and routing files.
     *
     * It locates the `main.ts` file to infer the source directory and builds paths
     * to the app configuration and routes files. Throws an error if either file is missing.
     *
     * @param tree - The virtual file tree representing the project.
     * @param projectName - The name of the Angular application project.
     * @returns An object containing the config path and routes path.
     * @throws SchematicsException if the config or routes file does not exist.
     */
    export declare function getAppEntryFilePaths(tree: Tree, projectName: string): Promise<AppEntryFilePaths>;
    /**
     * Retrieves the entry file paths for a library project, including routes and provider files.
     *
     * Uses the workspace configuration to locate the source root and constructs paths
     * based on known folder structure conventions. Validates the existence of both files.
     *
     * @param tree - The virtual file tree representing the workspace.
     * @param projectName - The name of the library project.
     * @returns An object containing the routes and provider file paths.
     * @throws SchematicsException if the library config files do not exist.
     */
    export declare function getLibEntryFilePaths(tree: Tree, projectName: string): Promise<AppEntryFilePaths>;
    /**
     * Checks whether a specific identifier is present in a given file.
     *
     * Reads the file contents and uses a regular expression to determine if the
     * identifier exists in the code as a whole word.
     *
     * @param tree - The virtual file tree.
     * @param filePath - The path to the file to inspect.
     * @param identifier - The identifier to look for.
     * @returns True if the identifier is found, false otherwise.
     */
    export declare function isIdentifierInFile(tree: Tree, filePath: string, identifier: string): boolean;
    /**
     * Searches a TypeScript source file for an array literal assigned to a specific variable name.
     *
     *
     * @param sourceFile - The parsed TypeScript source file.
     * @param arrayIdentifier - The name of the array variable to find.
     * @returns The array literal expression if found, otherwise undefined.
     */
    export declare function findArray(sourceFile: ts.SourceFile, arrayIdentifier: string): ts.ArrayLiteralExpression | undefined;
    /**
     * Checks if a directory contains at least one module file (*.module.ts or *.routing.module.ts).
     *
     *
     * @param tree - The virtual file tree.
     * @param configPath - The normalized directory path to check.
     * @returns True if a module file exists, false otherwise.
     */
    export declare function hasModuleFileInDirectory(tree: Tree, configPath: string): boolean;
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\source.js.map"><![CDATA[
    {"version":3,"file":"source.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/source.ts"],"names":[],"mappings":";;;AAAA,2DAAiE;AAGjE,qCAAuC;AAEvC,SAAgB,cAAc,CAAC,IAAY;IACzC,IAAI,MAAc,CAAC;IAEnB,IAAI;QACF,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;KACxB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,gCAAmB,CAAC,IAAA,oBAAW,qFAAyB,IAAI,CAAC,CAAC,CAAC;KAC1E;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAVD,wCAUC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\source.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readSourceJson = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const common_1 = require("./common");
    function readSourceJson(path) {
        let entity;
        try {
            entity = require(path);
        }
        catch (e) {
            throw new schematics_1.SchematicsException((0, common_1.interpolate)("[File Not Found] There is no file at \"{0}\" path." /* Exception.FileNotFound */, path));
        }
        return entity;
    }
    exports.readSourceJson = readSourceJson;
    //# sourceMappingURL=source.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\source.d.ts"><![CDATA[
    import { Entity } from '../models';
    export declare function readSourceJson(path: string): Entity;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\rule.js.map"><![CDATA[
    {"version":3,"file":"rule.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/rule.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\rule.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.overwriteFileIfExists = exports.overwriteFileWhen = exports.noopRule = exports.deleteFileIfExists = exports.applyWithOverwriteWhen = exports.applyWithOverwrite = exports.absoluteUrl = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const url_1 = require("url");
    function absoluteUrl(urlString) {
        const url = (0, url_1.parse)(process.cwd() + '/' + urlString);
        return (context) => context.engine.createSourceFromUrl(url, context)(context);
    }
    exports.absoluteUrl = absoluteUrl;
    function applyWithOverwrite(source, rules) {
        return (tree, _context) => {
            const rule = (0, schematics_1.mergeWith)((0, schematics_1.apply)(source, [...rules, overwriteFileIfExists(tree)]));
            return rule(tree, _context);
        };
    }
    exports.applyWithOverwrite = applyWithOverwrite;
    function applyWithOverwriteWhen(source, rules, whenFn, mergeFn) {
        return (tree, _context) => {
            const rule = (0, schematics_1.mergeWith)((0, schematics_1.apply)(source, [...rules, overwriteFileWhen(tree, whenFn, mergeFn)]), schematics_1.MergeStrategy.Overwrite);
            return rule(tree, _context);
        };
    }
    exports.applyWithOverwriteWhen = applyWithOverwriteWhen;
    function deleteFileIfExists(path) {
        return (tree, _context) => {
            if (tree.exists(path))
                tree.delete(path);
        };
    }
    exports.deleteFileIfExists = deleteFileIfExists;
    const noopRule = (tree, _context) => tree;
    exports.noopRule = noopRule;
    function overwriteFileWhen(tree, whenFn, mergeFn) {
        return (0, schematics_1.forEach)(fileEntry => {
            if (!tree.exists(fileEntry.path))
                return fileEntry;
            if (!whenFn(fileEntry.path))
                return null;
            const newContent = fileEntry.content.toString();
            const existFile = tree.read(fileEntry.path);
            const oldContent = existFile?.toString() ?? '';
            const mergedContent = mergeFn(fileEntry.path, newContent, oldContent);
            tree.overwrite(fileEntry.path, mergedContent);
            return null;
        });
    }
    exports.overwriteFileWhen = overwriteFileWhen;
    function overwriteFileIfExists(tree) {
        return (0, schematics_1.forEach)(fileEntry => {
            if (!tree.exists(fileEntry.path))
                return fileEntry;
            tree.overwrite(fileEntry.path, fileEntry.content);
            return null;
        });
    }
    exports.overwriteFileIfExists = overwriteFileIfExists;
    //# sourceMappingURL=rule.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\rule.d.ts"><![CDATA[
    import { Rule, SchematicContext, Source, Tree } from '@angular-devkit/schematics';
    export declare function absoluteUrl(urlString: string): (context: SchematicContext) => Tree | any;
    export declare function applyWithOverwrite(source: Source, rules: Rule[]): Rule;
    export declare type MergeFnType = (path: string, oldContent: string, newContent: string) => string;
    export declare type WhenFnType = (path: string) => boolean;
    export declare function applyWithOverwriteWhen(source: Source, rules: Rule[], whenFn: WhenFnType, mergeFn: MergeFnType): Rule;
    export declare function deleteFileIfExists(path: string): Rule;
    export declare const noopRule: (tree: Tree, _context: SchematicContext) => import("@angular-devkit/schematics/src/tree/interface").Tree;
    export declare function overwriteFileWhen(tree: Tree, whenFn: WhenFnType, mergeFn: MergeFnType): Rule;
    export declare function overwriteFileIfExists(tree: Tree): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\provider.js.map"><![CDATA[
    {"version":3,"file":"provider.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/provider.ts"],"names":[],"mappings":";;;AAAA,2DAA+F;AAC/F,iCAAiC;AAEjC,uCAA8D;AAC9D,+BAAgE;AAChE,qCAAuC;AAEvC,SAAgB,+BAA+B,CAC7C,UAAkB,EAClB,aAAqB,EACrB,aAAqB;IAErB,OAAO,CAAC,IAAU,EAAE,QAA0B,EAAE,EAAE;QAChD,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAElD,MAAM,OAAO,GAAG,IAAA,6CAAuC,EACrD,MAAM,EACN,UAAU,EACV,aAAa,EACb,aAAa,CACd,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAE9C,KAAK,MAAM,MAAM,IAAI,OAAO;YAC1B,IAAI,MAAM,YAAY,sBAAY;gBAAE,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAEpF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AAxBD,0EAwBC;AAED,SAAgB,qBAAqB,CACnC,UAAkB,EAClB,YAAoB,EACpB,YAAoB;IAEpB,OAAO,CAAC,IAAU,EAAE,QAA0B,EAAE,EAAE;QAChD,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,OAAO,GAAG,IAAA,6BAAmB,EAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;QAEpF,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAE9C,KAAK,MAAM,MAAM,IAAI,OAAO;YAC1B,IAAI,MAAM,YAAY,sBAAY;gBAAE,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAEpF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AAlBD,sDAkBC;AAED,SAAS,gBAAgB,CAAC,IAAU,EAAE,UAAkB;IACtD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnC,IAAI,IAAI,KAAK,IAAI;QAAE,MAAM,IAAI,gCAAmB,CAAC,IAAA,oBAAW,qFAAyB,UAAU,CAAC,CAAC,CAAC;IAElG,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC1C,OAAO,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnF,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\provider.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addProviderToNgModule = exports.addProviderToModuleWithProvider = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const ts = require("typescript");
    const angular_1 = require("./angular");
    const ast_1 = require("./ast");
    const common_1 = require("./common");
    function addProviderToModuleWithProvider(modulePath, _providerName, _providerPath) {
        return (tree, _context) => {
            const source = readModuleSource(tree, modulePath);
            const changes = (0, ast_1.addProviderToModuleWithProviderMetadata)(source, modulePath, _providerName, _providerPath);
            const recorder = tree.beginUpdate(modulePath);
            for (const change of changes)
                if (change instanceof angular_1.InsertChange)
                    recorder.insertLeft(change.pos, change.toAdd);
            tree.commitUpdate(recorder);
            return tree;
        };
    }
    exports.addProviderToModuleWithProvider = addProviderToModuleWithProvider;
    function addProviderToNgModule(modulePath, providerName, providerPath) {
        return (tree, _context) => {
            const source = readModuleSource(tree, modulePath);
            const changes = (0, angular_1.addProviderToModule)(source, modulePath, providerName, providerPath);
            const recorder = tree.beginUpdate(modulePath);
            for (const change of changes)
                if (change instanceof angular_1.InsertChange)
                    recorder.insertLeft(change.pos, change.toAdd);
            tree.commitUpdate(recorder);
            return tree;
        };
    }
    exports.addProviderToNgModule = addProviderToNgModule;
    function readModuleSource(tree, modulePath) {
        const text = tree.read(modulePath);
        if (text === null)
            throw new schematics_1.SchematicsException((0, common_1.interpolate)("[File Not Found] There is no file at \"{0}\" path." /* Exception.FileNotFound */, modulePath));
        const sourceText = text.toString('utf-8');
        return ts.createSourceFile(modulePath, sourceText, ts.ScriptTarget.Latest, true);
    }
    //# sourceMappingURL=provider.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\provider.d.ts"><![CDATA[
    import { Rule } from '@angular-devkit/schematics';
    export declare function addProviderToModuleWithProvider(modulePath: string, _providerName: string, _providerPath: string): Rule;
    export declare function addProviderToNgModule(modulePath: string, providerName: string, providerPath: string): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\path.js.map"><![CDATA[
    {"version":3,"file":"path.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/path.ts"],"names":[],"mappings":";;;AAAA,4CAA6C;AAG7C,iCAAoC;AAEpC,SAAgB,qBAAqB,CAAC,SAAiB;IACrD,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,OAAO,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC5C,CAAC;AAHD,sDAGC;AAED,SAAgB,+BAA+B,CAAC,KAAa,EAAE,SAAiB,EAAE,CAAO,EAAE,eAAuB;IAChH,MAAM,IAAI,GAAG,yCAAyC,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IACvG,OAAO,IAAI,GAAG,IAAI,IAAA,YAAK,EAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;AACzC,CAAC;AAHD,0EAGC;AAED,SAAgB,gCAAgC,CAAC,KAAa,EAAE,SAAiB,EAAE,eAAuB;IACxG,MAAM,IAAI,GAAG,yCAAyC,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;IACrG,OAAO,IAAI,GAAG,SAAS,CAAC;AAC1B,CAAC;AAHD,4EAGC;AAED,SAAgB,kCAAkC,CAAC,KAAa,EAAE,SAAiB,EAAE,IAAY,EAAE,eAAuB;IACxH,MAAM,IAAI,GAAG,yCAAyC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,yBAAa,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;IAC7I,OAAO,IAAI,GAAG,IAAI,IAAA,YAAK,EAAC,IAAI,CAAC,UAAU,CAAC;AAC1C,CAAC;AAHD,gFAGC;AAED,SAAgB,yCAAyC,CACvD,KAAa,EACb,SAAiB,EACjB,cAAsB,EACtB,eAAuB;IAEvB,OAAO,mBAAmB,CACxB,iBAAiB,CACf,gCAAgC,CAAC,KAAK,EAAE,SAAS,EAAE,eAAe,CAAC,GAAG,GAAG,GAAG,IAAA,UAAG,EAAC,cAAc,CAAC,CAChG,CACF,CAAC;AACJ,CAAC;AAXD,8FAWC;AAED,SAAgB,gCAAgC,CAAC,KAAa,EAAE,SAAiB,EAAE,eAAuB;IACxG,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,MAAM,WAAW,GAAG,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;IAC/D,IAAI,eAAe,uCAAoB,EAAE;QACvC,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;AACzD,CAAC;AAPD,4EAOC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACrC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACtC,CAAC;AAED,SAAS,mBAAmB,CAAC,IAAY;IACvC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\path.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.relativePathFromComponentToProxy = exports.relativePathFromComponentToProxyNamespace = exports.relativePathFromComponentToService = exports.relativePathFromComponentToModel = exports.relativePathFromComponentToEnum = exports.relativePathToSrcRoot = void 0;
    const constants_1 = require("../constants");
    const text_1 = require("./text");
    function relativePathToSrcRoot(namespace) {
        const repeats = namespace ? namespace.split('.').length : 0;
        return '../../..' + '/..'.repeat(repeats);
    }
    exports.relativePathToSrcRoot = relativePathToSrcRoot;
    function relativePathFromComponentToEnum(scope, namespace, e, projectTemplate) {
        const path = relativePathFromComponentToProxyNamespace(scope, namespace, e.namespace, projectTemplate);
        return path + `/${(0, text_1.kebab)(e.name)}.enum`;
    }
    exports.relativePathFromComponentToEnum = relativePathFromComponentToEnum;
    function relativePathFromComponentToModel(scope, namespace, projectTemplate) {
        const path = relativePathFromComponentToProxyNamespace(scope, namespace, namespace, projectTemplate);
        return path + '/models';
    }
    exports.relativePathFromComponentToModel = relativePathFromComponentToModel;
    function relativePathFromComponentToService(scope, namespace, name, projectTemplate) {
        const path = relativePathFromComponentToProxyNamespace(`${scope.length > 0 ? scope : constants_1.DEFAULT_SCOPE}`, namespace, namespace, projectTemplate);
        return path + `/${(0, text_1.kebab)(name)}.service`;
    }
    exports.relativePathFromComponentToService = relativePathFromComponentToService;
    function relativePathFromComponentToProxyNamespace(scope, namespace, proxyNamespace, projectTemplate) {
        return removeTrailingSlash(removeDoubleSlash(relativePathFromComponentToProxy(scope, namespace, projectTemplate) + '/' + (0, text_1.dir)(proxyNamespace)));
    }
    exports.relativePathFromComponentToProxyNamespace = relativePathFromComponentToProxyNamespace;
    function relativePathFromComponentToProxy(scope, namespace, projectTemplate) {
        const repeats = namespace ? namespace.split('.').length : 0;
        const pathToProxy = '../..' + '/..'.repeat(repeats) + '/proxy';
        if (projectTemplate === "module-pro" /* Template.Module */) {
            return pathToProxy;
        }
        return scope ? `${pathToProxy}/${scope}` : pathToProxy;
    }
    exports.relativePathFromComponentToProxy = relativePathFromComponentToProxy;
    function removeDoubleSlash(path) {
        return path.replace(/\/{2,}/g, '/');
    }
    function removeTrailingSlash(path) {
        return path.replace(/\/+$/, '');
    }
    //# sourceMappingURL=path.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\path.d.ts"><![CDATA[
    import { Enum } from '../models';
    export declare function relativePathToSrcRoot(namespace: string): string;
    export declare function relativePathFromComponentToEnum(scope: string, namespace: string, e: Enum, projectTemplate: string): string;
    export declare function relativePathFromComponentToModel(scope: string, namespace: string, projectTemplate: string): string;
    export declare function relativePathFromComponentToService(scope: string, namespace: string, name: string, projectTemplate: string): string;
    export declare function relativePathFromComponentToProxyNamespace(scope: string, namespace: string, proxyNamespace: string, projectTemplate: string): string;
    export declare function relativePathFromComponentToProxy(scope: string, namespace: string, projectTemplate: string): string;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\module.js.map"><![CDATA[
    {"version":3,"file":"module.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/module.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\module.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveModuleOptions = exports.getRoutingModulePath = exports.getProject = exports.buildSelector = exports.buildRelativeModulePath = exports.addRouteDeclarationToNgModule = exports.addRoutingToModule = void 0;
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const ts = require("typescript");
    const ast_utils_1 = require("./angular/ast-utils");
    const change_1 = require("./angular/change");
    const find_module_1 = require("./angular/find-module");
    const parse_name_1 = require("./angular/parse-name");
    const workspace_1 = require("./angular/workspace");
    const ast_1 = require("./ast");
    const common_1 = require("./common");
    const angular_1 = require("./angular");
    const util_1 = require("./angular/standalone/util");
    const workspace_2 = require("./workspace");
    const standalone_1 = require("./standalone");
    function addRoutingToModule(options, isModuleTemplate = false) {
        return (tree) => {
            const path = options.path;
            const parsedPath = (0, parse_name_1.parseName)(path, options.name);
            options.name = parsedPath.name;
            options.path = parsedPath.path;
            if (options.standalone) {
                return (0, schematics_1.noop)();
            }
            const routingModulePath = getRoutingModulePath(tree, options.module);
            return addRouteDeclarationToNgModule(options, routingModulePath, isModuleTemplate);
        };
    }
    exports.addRoutingToModule = addRoutingToModule;
    function addRouteDeclarationToNgModule(options, routingModulePath, isModuleTemplate = false) {
        return (tree) => {
            if (!options.module)
                return tree;
            const modulePath = routingModulePath ?? options.module;
            const text = tree.read(modulePath);
            if (!text)
                throw new Error((0, common_1.interpolate)("[Module Not Found] Please check if a module called {0} exists in the {1} project." /* Exception.NoModule */, modulePath, String(options.project)));
            const sourceText = text.toString();
            const source = ts.createSourceFile(modulePath, sourceText, ts.ScriptTarget.Latest, true);
            if ((0, ast_1.shouldAddRouteDeclaration)(source, options.route)) {
                const moduleName = `${options.name}Module`;
                const relativePath = buildRelativeModulePath(options, options.module);
                const changes = [];
                let loadChildren;
                if (isModuleTemplate) {
                    loadChildren = `load${moduleName}AsChild`;
                    changes.push((0, ast_utils_1.insertImport)(source, modulePath, loadChildren, relativePath));
                }
                else {
                    loadChildren = `() => import('${relativePath}').then(m => m.${moduleName})`;
                }
                const route = `{ path: '${options.route}', loadChildren: ${loadChildren} }`;
                changes.push((0, ast_utils_1.addRouteDeclarationToModule)(source, modulePath, route));
                const recorder = tree.beginUpdate(modulePath);
                for (const change of changes) {
                    if (change instanceof change_1.InsertChange)
                        recorder.insertLeft(change.pos, change.toAdd);
                }
                tree.commitUpdate(recorder);
            }
            return tree;
        };
    }
    exports.addRouteDeclarationToNgModule = addRouteDeclarationToNgModule;
    function buildRelativeModulePath(options, modulePath) {
        const nameKebabCase = core_1.strings.dasherize(options.name);
        const importModulePath = (0, core_1.normalize)(`/${options.path}/${nameKebabCase}/${nameKebabCase}.module`);
        return (0, find_module_1.buildRelativePath)(modulePath, importModulePath);
    }
    exports.buildRelativeModulePath = buildRelativeModulePath;
    function buildSelector(name, prefix) {
        const nameKebabCase = core_1.strings.dasherize(name);
        return prefix ? `${prefix}-${nameKebabCase}` : nameKebabCase;
    }
    exports.buildSelector = buildSelector;
    async function getProject(tree, name) {
        const workspace = await (0, workspace_1.getWorkspace)(tree);
        let definition;
        try {
            definition = workspace.projects.get(name);
            // eslint-disable-next-line no-empty
        }
        catch (_) { }
        if (!definition)
            try {
                name = core_1.strings.dasherize(name);
                definition = workspace.projects.get(name);
                // eslint-disable-next-line no-empty
            }
            catch (_) { }
        if (!definition)
            try {
                name = core_1.strings.camelize(name);
                definition = workspace.projects.get(name);
                // eslint-disable-next-line no-empty
            }
            catch (_) { }
        if (!definition)
            throw new schematics_1.SchematicsException("[Project Not Found] A project matching entity solution name or a default project does not exist in your Angular workspace." /* Exception.NoProject */);
        return { name, definition };
    }
    exports.getProject = getProject;
    function getRoutingModulePath(tree, modulePath) {
        const routingModulePath = modulePath.endsWith(find_module_1.ROUTING_MODULE_EXT)
            ? modulePath
            : modulePath.replace(find_module_1.MODULE_EXT, find_module_1.ROUTING_MODULE_EXT);
        return tree.exists(routingModulePath) ? (0, core_1.normalize)(routingModulePath) : undefined;
    }
    exports.getRoutingModulePath = getRoutingModulePath;
    async function resolveModuleOptions(tree, options) {
        let project;
        ({ name: options.project, definition: project } = await getProject(tree, options.project));
        if ((0, workspace_2.isLibrary)(project)) {
            const configPath = (0, core_1.normalize)((0, workspace_2.buildConfigPath)(project));
            const defaultPath = (0, core_1.normalize)((0, workspace_1.buildDefaultPath)(project));
            const hasModuleInProjectConfig = (0, standalone_1.hasModuleFileInDirectory)(tree, configPath);
            const hasModuleInDefaultPath = (0, standalone_1.hasModuleFileInDirectory)(tree, defaultPath);
            if (!hasModuleInProjectConfig && !hasModuleInDefaultPath) {
                options.standalone = true;
            }
        }
        else {
            const mainFilePath = await (0, util_1.getMainFilePath)(tree, options.project);
            options.standalone = (0, angular_1.isStandaloneApp)(tree, mainFilePath);
        }
        options.path = options.path ?? (0, core_1.normalize)((0, workspace_1.buildDefaultPath)(project) + `/${options.module || ''}`);
        options.route = options.route ?? core_1.strings.dasherize(options.name);
        options.module = (0, find_module_1.findModuleFromOptions)(tree, options);
        options.selector = options.selector ?? buildSelector(options.name, project.prefix);
        return { options, project };
    }
    exports.resolveModuleOptions = resolveModuleOptions;
    //# sourceMappingURL=module.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\module.d.ts"><![CDATA[
    import { Path, workspaces } from '@angular-devkit/core';
    import { Rule, Tree } from '@angular-devkit/schematics';
    import { ModuleOptions } from '../utils/angular/find-module';
    export interface ABPModuleOptions extends ModuleOptions {
        project?: string;
        route?: string;
        selector?: string;
    }
    export declare function addRoutingToModule(options: ABPModuleOptions, isModuleTemplate?: boolean): Rule;
    export declare function addRouteDeclarationToNgModule(options: ABPModuleOptions, routingModulePath: Path | undefined, isModuleTemplate?: boolean): Rule;
    export declare function buildRelativeModulePath(options: ABPModuleOptions, modulePath: string): string;
    export declare function buildSelector(name: string, prefix?: string): string;
    export declare function getProject(tree: Tree, name: string): Promise<{
        name: string;
        definition: workspaces.ProjectDefinition;
    }>;
    export declare function getRoutingModulePath(tree: Tree, modulePath: string): Path | undefined;
    export declare function resolveModuleOptions(tree: Tree, options: ABPModuleOptions): Promise<{
        options: ABPModuleOptions;
        project: ProjectDefinition;
    }>;
    declare type ProjectDefinition = workspaces.ProjectDefinition;
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,4CAA0B;AAC1B,mDAAiC;AACjC,wCAAsB;AACtB,2CAAyB;AACzB,2CAAyB;AACzB,yCAAuB;AACvB,yCAAuB;AACvB,iDAA+B;AAC/B,2CAAyB;AACzB,yCAAuB;AACvB,6CAA2B;AAC3B,yCAAuB;AACvB,2CAAyB;AACzB,+CAA6B;AAC7B,6CAA2B;AAC3B,yCAAuB;AACvB,8CAA4B"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\index.js"><![CDATA[
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require("./angular"), exports);
    __exportStar(require("./api-definition"), exports);
    __exportStar(require("./ast"), exports);
    __exportStar(require("./common"), exports);
    __exportStar(require("./entity"), exports);
    __exportStar(require("./enum"), exports);
    __exportStar(require("./form"), exports);
    __exportStar(require("./format-files"), exports);
    __exportStar(require("./module"), exports);
    __exportStar(require("./path"), exports);
    __exportStar(require("./provider"), exports);
    __exportStar(require("./rule"), exports);
    __exportStar(require("./source"), exports);
    __exportStar(require("./standalone"), exports);
    __exportStar(require("./template"), exports);
    __exportStar(require("./text"), exports);
    __exportStar(require("./workspace"), exports);
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\index.d.ts"><![CDATA[
    export * from './angular';
    export * from './api-definition';
    export * from './ast';
    export * from './common';
    export * from './entity';
    export * from './enum';
    export * from './form';
    export * from './format-files';
    export * from './module';
    export * from './path';
    export * from './provider';
    export * from './rule';
    export * from './source';
    export * from './standalone';
    export * from './template';
    export * from './text';
    export * from './workspace';
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\format-files.js.map"><![CDATA[
    {"version":3,"file":"format-files.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/format-files.ts"],"names":[],"mappings":";;;AAEA,6BAA6B;AAEtB,KAAK,UAAU,WAAW,CAAC,IAAU;IAC1C,IAAI,QAAyB,CAAC;IAC9B,IAAI;QACF,QAAQ,GAAG,2CAAa,UAAU,EAAC,CAAC;KACrC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO;KACR;IACD,IAAI,CAAC,QAAQ;QAAE,OAAO;IACtB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAEzE,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO;YAAE,OAAO;QAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QACnF,IAAI,OAAO,GAAqB;YAC9B,QAAQ,EAAE,QAAQ;SACnB,CAAC;QAEF,MAAM,eAAe,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC7D,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QACH,OAAO,GAAG;YACR,GAAG,OAAO;YACV,GAAG,CAAC,eAAe,IAAI,EAAE,CAAC;SAC3B,CAAC;QAEF,MAAM,eAAe,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,eAAe,CAAC,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc;YAAE,OAAO;QAEvE,MAAM,gBAAgB,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;QACnF,IAAI;YACF,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;SAC/C;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,uCAAuC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;SACjF;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAvCD,kCAuCC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\format-files.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatFiles = void 0;
    const path = require("path");
    async function formatFiles(tree) {
        let prettier;
        try {
            prettier = await Promise.resolve().then(() => require('prettier'));
        }
        catch (e) {
            return;
        }
        if (!prettier)
            return;
        const files = tree.actions.filter(f => ['o', 'c', 'r'].includes(f.kind));
        await Promise.all(Array.from(files).map(async (action) => {
            const content = tree.read(action.path);
            if (!content)
                return;
            const fullPath = path.join(path.join(path.resolve(), tree.root.path), action.path);
            let options = {
                filepath: fullPath,
            };
            const resolvedOptions = await prettier.resolveConfig(fullPath, {
                editorconfig: true,
            });
            options = {
                ...options,
                ...(resolvedOptions || {}),
            };
            const isFileSupported = await prettier.getFileInfo(fullPath);
            if (isFileSupported.ignored || !isFileSupported.inferredParser)
                return;
            const formattedContent = await prettier.format(content.toString('utf-8'), options);
            try {
                tree.overwrite(action.path, formattedContent);
            }
            catch (e) {
                console.warn(`${action.path} file could not formatted. Reason: "${e.message}"`);
            }
        }));
    }
    exports.formatFiles = formatFiles;
    //# sourceMappingURL=format-files.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\format-files.d.ts"><![CDATA[
    import { Tree } from '@angular-devkit/schematics';
    export declare function formatFiles(tree: Tree): Promise<void>;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\form.js.map"><![CDATA[
    {"version":3,"file":"form.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/form.ts"],"names":[],"mappings":";;;AACA,qCAAoC;AACpC,qCAAgD;AAChD,iCAA+B;AAC/B,6CAAkD;AAClD,4CAA6C;AAE7C,SAAgB,gCAAgC,CAAC,IAAmC;IAClF,MAAM,QAAQ,GAAG,IAAA,YAAK,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAElC,IAAI,YAAoB,CAAC;IACzB,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,MAAM;YACT,YAAY,GAAG,GAAG,QAAQ,WAAW,CAAC;YACtC,MAAM;QACR;YACE,YAAY,GAAG,GAAG,QAAQ,UAAU,CAAC;YACrC,MAAM;KACT;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAdD,4EAcC;AAED,SAAgB,8BAA8B,CAAC,IAAmC;IAChF,IAAI,IAAI,GAAwC,CAAC,UAAU,CAAC,CAAC;IAC7D,IAAI,CAAC,IAAA,6BAAoB,EAAC,IAAI,CAAC,EAAE;QAC/B,IAAI,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAEhE,MAAM,QAAQ,GAAG,yBAAa,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,YAAY,GAAG,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,QAAQ,CAAC;QAElE,IAAI,YAAY,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;KACF;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,+BAAkB,CAAC,GAAG,CAAC,CAAC,IAAgB,CAAC,CAAC,CAAC;IAE9E,OAAO,UAAU,CAAC,MAAM,CAAC,iBAAQ,CAAC,CAAC;AACrC,CAAC;AAhBD,wEAgBC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\form.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateValidatorsFromProperty = exports.generateDefaultValueFromProperty = void 0;
    const common_1 = require("./common");
    const entity_1 = require("./entity");
    const text_1 = require("./text");
    const validation_1 = require("./validation");
    const constants_1 = require("../constants");
    function generateDefaultValueFromProperty(prop) {
        const propName = (0, text_1.camel)(prop.Name);
        let defaultValue;
        switch (prop.Type) {
            case 'bool':
                defaultValue = `${propName} ?? false`;
                break;
            default:
                defaultValue = `${propName} ?? null`;
                break;
        }
        return defaultValue;
    }
    exports.generateDefaultValueFromProperty = generateDefaultValueFromProperty;
    function generateValidatorsFromProperty(prop) {
        let keys = ['Required'];
        if (!(0, entity_1.isNavigationProperty)(prop)) {
            keys = ['Required', 'MinLength', 'MaxLength', 'Email', 'Regex'];
            const propType = constants_1.FORM_CONTROLS.get(prop.Type);
            const dateOrNumber = propType === 'date' || propType === 'number';
            if (dateOrNumber && !prop.IsNullable) {
                prop.IsRequired = true;
            }
        }
        const validators = keys.map(key => validation_1.ValidatorGenerator[key](prop));
        return validators.filter(common_1.isString);
    }
    exports.generateValidatorsFromProperty = generateValidatorsFromProperty;
    //# sourceMappingURL=form.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\form.d.ts"><![CDATA[
    import { NavigationProperty, Property } from '../models';
    export declare function generateDefaultValueFromProperty(prop: Property | NavigationProperty): string;
    export declare function generateValidatorsFromProperty(prop: Property | NavigationProperty): string[];
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\enum.js.map"><![CDATA[
    {"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/enum.ts"],"names":[],"mappings":";;;AAEA,SAAgB,kBAAkB,CAAC,QAAgB,EAAE,MAAc;IACjE,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;IAEjD,OAAO,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAC9C,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QACrD,IAAI,CAAC,UAAU;YAAE,OAAO,KAAK,CAAC;QAE9B,MAAM,IAAI,GAAG,QAAQ,CAAC;QACtB,MAAM,SAAS,GAAG,aAAa,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QAE3D,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,KAAK,SAAS,GAAG,IAAI,CAAC;YAC7D,KAAK,CAAC,IAAI,CAAC;gBACT,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;gBACnC,IAAI;gBACJ,SAAS;aACV,CAAC,CAAC;QAEL,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,EAAY,CAAC,CAAC;AACnB,CAAC;AAnBD,gDAmBC;AAED,SAAgB,MAAM,CAAC,QAAuC;IAC5D,OAAO,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC;AAClC,CAAC;AAFD,wBAEC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\enum.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEnum = exports.getEnumsFromEntity = void 0;
    function getEnumsFromEntity(solution, entity) {
        const solutionRegex = new RegExp('^' + solution);
        return entity.Properties.reduce((enums, prop) => {
            const { EnumType, EnumNamespace, EnumValues } = prop;
            if (!EnumValues)
                return enums;
            const name = EnumType;
            const namespace = EnumNamespace.replace(solutionRegex, '');
            if (enums.every(e => e.namespace + e.name !== namespace + name))
                enums.push({
                    members: Object.entries(EnumValues),
                    name,
                    namespace,
                });
            return enums;
        }, []);
    }
    exports.getEnumsFromEntity = getEnumsFromEntity;
    function isEnum(property) {
        return property.Type === 'enum';
    }
    exports.isEnum = isEnum;
    //# sourceMappingURL=enum.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\enum.d.ts"><![CDATA[
    import { Entity, Enum, NavigationProperty, Property } from '../models';
    export declare function getEnumsFromEntity(solution: string, entity: Entity): Enum[];
    export declare function isEnum(property: Property | NavigationProperty): property is Property;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\entity.js.map"><![CDATA[
    {"version":3,"file":"entity.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/entity.ts"],"names":[],"mappings":";;;AAAA,+CAA+C;AAC/C,4CAAyD;AACzD,oCAAqD;AAErD,iCAA0F;AAC1F,iCAA+B;AAG/B,SAAgB,4BAA4B,CAAC,MAAc;IACzD,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,KAAK,EAAE,cAAO,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC;KAC5C,CAAC;AACJ,CAAC;AALD,oEAKC;AAED,SAAgB,sBAAsB,CAAC,KAAa;IAClD,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;QACjC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAE3C,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,KAAK,SAAS,GAAG,IAAI,CAAC;YAClE,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC;IACd,CAAC,EAAE,EAAiB,CAAC,CAAC;AACxB,CAAC;AATD,wDASC;AAED,SAAgB,kBAAkB,CAAC,QAAgB,EAAE,MAAc;IACjE,OAAO,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;AACpE,CAAC;AAFD,gDAEC;AAED,SAAgB,qBAAqB,CAAC,QAAgB,EAAE,MAAc;IACpE,OAAO,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;AAC9E,CAAC;AAFD,sDAEC;AAED,SAAgB,2BAA2B,CAAC,QAAgB,EAAE,MAAc;IAC1E,gEAAgE;IAChE,MAAM,qBAAqB,GAAG,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAC5D,IAAI,CAAC,EAAE,CACL,CAAC;QACC,GAAG,IAAI;QACP,UAAU,EAAE,WAAW;KACxB,CAAuB,CAC3B,CAAC;IACF,OAAO,qBAAqB,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;AAC9E,CAAC;AAVD,kEAUC;AAED,SAAS,iBAAiB,CAAC,QAAgB,EAAE,MAAc,EAAE,eAAe,GAAG,KAAK;IAClF,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;IAEjD,OAAO,CAAC,QAAuC,EAAQ,EAAE;QACvD,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,MAAM,SAAS,GAAc,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC;QAEhF,IAAI,oBAAoB,CAAC,QAAQ,CAAC,EAAE;YAClC,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC,UAAU,CAAC;YACrC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YACpE,SAAS,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;SACtD;aAAM;YACL,MAAM,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;YACrD,MAAM,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;YACjD,IAAI,IAAI,GAAG,EAAE,CAAC;YAEd,IAAI,iBAAiB,IAAI,eAAe,EAAE;gBACxC,IAAI,GAAG,EAAE,CAAC;aACX;iBAAM,IAAI,iBAAiB,EAAE;gBAC5B,IAAI,GAAG,2BAA2B,CAAC;aACpC;iBAAM;gBACL,IAAI,GAAG,4BAA4B,CAAC;aACrC;YAED,cAAc,GAAG;gBACf,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,WAAW,EAAE,iBAAiB,IAAI,eAAe;gBACjD,IAAI;gBACJ,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;aAClD,CAAC;SACH;QAED,MAAM,YAAY,GAAG,eAAe,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QAEhE,IAAI,WAAuC,CAAC;QAC5C,IAAI,YAAY,IAAI,QAAQ,EAAE;YAC5B,WAAW,GAAG,mBAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAChD;aAAM;YACL,WAAW,GAAG,yBAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAE,CAAC;SACjD;QAED,OAAO;YACL,GAAG,EAAE,QAAQ;YACb,SAAS;YACT,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC;YACjC,IAAI,EAAE,sBAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAE;YACpC,QAAQ,EAAE,UAAU,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YAChE,WAAW;YACX,YAAY;YACZ,UAAU,EAAE,IAAA,qCAA8B,EAAC,QAAQ,CAAC;YACpD,IAAI,QAAQ;gBACV,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACpE,CAAC;YACD,IAAI,QAAQ;gBACV,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;YACpE,CAAC;YACD,GAAG,cAAc;YACjB,YAAY,EAAE,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAE,QAAqB,CAAC,YAAY;SACrF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,eAAwB,EAAE,QAAuC;IACxF,IAAI,eAAe,EAAE;QACnB,OAAO,GAAG,IAAA,YAAK,EAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;KAClC;IAED,IAAI,cAAc,IAAI,QAAQ,EAAE;QAC9B,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,QAAQ,IAAI,EAAE,CAAC;QACpD,MAAM,QAAQ,GAAG,IAAA,YAAK,EAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,YAAY,CAAC;QAE1B,IAAI,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,IAAI,EAAE;YACvD,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,IAAI,KAAK,MAAM,EAAE;gBACvD,MAAM,GAAG,IAAI,YAAY,GAAG,CAAC;aAC9B;YAED,OAAO,GAAG,QAAQ,OAAO,MAAM,EAAE,CAAC;SACnC;KACF;IAED,OAAO,IAAA,uCAAgC,EAAC,QAAQ,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,aAAa,CAAC,QAAuC;IAC5D,MAAM,IAAI,GAAG,IAAA,YAAK,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,CAAC,CAAC;IAC5C,MAAM,OAAO,GAAG,yBAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAE,CAAC;IAElD,OAAO,OAAO,KAAK,oBAAY,CAAC,IAAI,IAAI,OAAO,KAAK,oBAAY,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AAC5F,CAAC;AAED,SAAgB,oBAAoB,CAClC,IAAmC;IAEnC,OAAO,YAAY,IAAI,IAAI,CAAC;AAC9B,CAAC;AAJD,oDAIC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\entity.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNavigationProperty = exports.getNavConnectionsFromEntity = exports.getNavPropsFromEntity = exports.getPropsFromEntity = exports.getEntityRefsFromProps = exports.buildModuleOptionsFromEntity = void 0;
    const core_1 = require("@angular-devkit/core");
    const constants_1 = require("../constants");
    const enums_1 = require("../enums");
    const form_1 = require("./form");
    const text_1 = require("./text");
    function buildModuleOptionsFromEntity(entity) {
        return {
            name: entity.Name,
            route: core_1.strings.dasherize(entity.NamePlural),
        };
    }
    exports.buildModuleOptionsFromEntity = buildModuleOptionsFromEntity;
    function getEntityRefsFromProps(props) {
        return props.reduce((refs, prop) => {
            const { name, namespace } = prop.entityRef;
            if (refs.every(ref => ref.namespace + ref.name !== namespace + name))
                refs.push({ name, namespace });
            return refs;
        }, []);
    }
    exports.getEntityRefsFromProps = getEntityRefsFromProps;
    function getPropsFromEntity(solution, entity) {
        return entity.Properties.map(createPropBuilder(solution, entity));
    }
    exports.getPropsFromEntity = getPropsFromEntity;
    function getNavPropsFromEntity(solution, entity) {
        return entity.NavigationProperties.map(createPropBuilder(solution, entity));
    }
    exports.getNavPropsFromEntity = getNavPropsFromEntity;
    function getNavConnectionsFromEntity(solution, entity) {
        //TODO: remove static UıPickType when backend returns this value
        const navigationConnections = entity.NavigationConnections.map(prop => ({
            ...prop,
            UiPickType: 'Typeahead',
        }));
        return navigationConnections.map(createPropBuilder(solution, entity, true));
    }
    exports.getNavConnectionsFromEntity = getNavConnectionsFromEntity;
    function createPropBuilder(solution, entity, isNavConnection = false) {
        const solutionRegex = new RegExp('^' + solution);
        return (property) => {
            let propVisibility = {};
            const entityRef = { name: entity.Name, namespace: entity.Namespace };
            if (isNavigationProperty(property)) {
                entityRef.name = property.EntityName;
                entityRef.namespace = property.Namespace.replace(solutionRegex, '');
                entityRef.displayProperty = property.DisplayProperty;
            }
            else {
                const showOnCreateModal = property.ShowOnCreateModal;
                const showOnEditModal = property.ShowOnEditModal;
                let ngIf = '';
                if (showOnCreateModal && showOnEditModal) {
                    ngIf = '';
                }
                else if (showOnCreateModal) {
                    ngIf = '*ngIf="!service.selected"';
                }
                else {
                    ngIf = '*ngIf="!!service.selected"';
                }
                propVisibility = {
                    showOnList: property.ShowOnList,
                    showOnModal: showOnCreateModal || showOnEditModal,
                    ngIf,
                    readonlyOnEditModal: property.ReadonlyOnEditModal,
                };
            }
            const defaultValue = getDefaultValue(isNavConnection, property);
            let formControl;
            if ('UiPickType' in property) {
                formControl = enums_1.eUiPickType[property.UiPickType];
            }
            else {
                formControl = constants_1.FORM_CONTROLS.get(property.Type);
            }
            return {
                ref: property,
                entityRef,
                name: property.Name,
                getInput: buildGetInput(property),
                type: constants_1.PROP_TYPES.get(property.Type),
                enumType: 'EnumType' in property ? property.EnumType : undefined,
                formControl,
                defaultValue,
                validators: (0, form_1.generateValidatorsFromProperty)(property),
                get asterisk() {
                    return this.validators.includes('Validators.required') ? '*' : '';
                },
                get question() {
                    return this.validators.includes('Validators.required') ? '' : '?';
                },
                ...propVisibility,
                isFilterable: property.Type === 'File' ? false : property.IsFilterable,
            };
        };
    }
    function getDefaultValue(isNavConnection, property) {
        if (isNavConnection) {
            return `${(0, text_1.camel)(property.Name)}`;
        }
        if ('DefaultValue' in property) {
            const { DefaultValue, Name, Type } = property || {};
            const propName = (0, text_1.camel)(Name);
            let parsed = DefaultValue;
            if (DefaultValue !== undefined && DefaultValue !== null) {
                if (typeof DefaultValue === 'string' && Type !== 'bool') {
                    parsed = `'${DefaultValue}'`;
                }
                return `${propName} ?? ${parsed}`;
            }
        }
        return (0, form_1.generateDefaultValueFromProperty)(property);
    }
    function buildGetInput(property) {
        const name = (0, text_1.camel)(property.Name);
        const maxMin = [name + 'Max', name + 'Min'];
        const control = constants_1.FORM_CONTROLS.get(property.Type);
        return control === enums_1.eFormControl.Date || control === enums_1.eFormControl.Number ? maxMin : [name];
    }
    function isNavigationProperty(prop) {
        return 'EntityName' in prop;
    }
    exports.isNavigationProperty = isNavigationProperty;
    //# sourceMappingURL=entity.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\entity.d.ts"><![CDATA[
    import { Entity, EntityRef, NavigationProperty, Prop, Property } from '../models';
    import { ABPModuleOptions } from './module';
    export declare function buildModuleOptionsFromEntity(entity: Entity): ABPModuleOptions;
    export declare function getEntityRefsFromProps(props: Prop[]): EntityRef[];
    export declare function getPropsFromEntity(solution: string, entity: Entity): Prop[];
    export declare function getNavPropsFromEntity(solution: string, entity: Entity): Prop[];
    export declare function getNavConnectionsFromEntity(solution: string, entity: Entity): Prop[];
    export declare function isNavigationProperty(prop: Property | NavigationProperty): prop is NavigationProperty;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\common.js.map"><![CDATA[
    {"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/common.ts"],"names":[],"mappings":";;;AAAA,+CAAiD;AACjD,6BAA6B;AAE7B,2CAAwC;AAGxC,SAAgB,iBAAiB,CAAC,MAAc;IAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAA,gBAAS,EAAC,MAAM,CAAC,CAAC,CAAC;AACrD,CAAC;AAFD,8CAEC;AAED,SAAgB,WAAW,CAAC,IAAY,EAAE,GAAG,MAAqC;IAChF,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;QAC1B,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;QAClD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC;AACd,CAAC;AAPD,kCAOC;AAED,SAAgB,iBAAiB,CAAC,KAAU;IAC1C,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;AAC/C,CAAC;AAFD,8CAEC;AAED,SAAgB,QAAQ,CAAC,KAAU;IACjC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;AACnC,CAAC;AAFD,4BAEC;AAED,SAAgB,aAAa,CAAC,eAAyB,EAAE,OAA0B;IACjF,OAAO,CACL,CAAC,eAAe,uCAAoB,IAAI,eAAe,kDAAyB,CAAC;QACjF,IAAA,qBAAS,EAAC,OAAO,CAAC,CACnB,CAAC;AACJ,CAAC;AALD,sCAKC;AAED,SAAgB,SAAS,CAAC,eAAyB,EAAE,OAA2B;IAC9E,IAAI,OAAO,EAAE;QACX,OAAO,IAAA,qBAAS,EAAC,OAAO,CAAC,CAAC;KAC3B;IACD,OAAO,eAAe,yCAAgB,CAAC;AACzC,CAAC;AALD,8BAKC;AAED,SAAgB,wBAAwB,CAAC,eAAyB,EAAE,OAA0B;IAC5F,OAAO;QACL,eAAe,EAAE,eAAe,uCAAoB,IAAI,IAAA,qBAAS,EAAC,OAAO,CAAC;QAC1E,qBAAqB,EAAE,eAAe,kDAAyB,IAAI,IAAA,qBAAS,EAAC,OAAO,CAAC;KACtF,CAAC;AACJ,CAAC;AALD,4DAKC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\common.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProjectStructureFlags = exports.checkIsMS = exports.checkIsModule = exports.isString = exports.isNullOrUndefined = exports.interpolate = exports.buildAbsolutePath = void 0;
    const core_1 = require("@angular-devkit/core");
    const path = require("path");
    const workspace_1 = require("./workspace");
    function buildAbsolutePath(source) {
        return path.join(process.cwd(), (0, core_1.normalize)(source));
    }
    exports.buildAbsolutePath = buildAbsolutePath;
    function interpolate(text, ...params) {
        params.forEach((param, i) => {
            const pattern = new RegExp('{\\s*' + i + '\\s*}');
            text = text.replace(pattern, String(param));
        });
        return text;
    }
    exports.interpolate = interpolate;
    function isNullOrUndefined(value) {
        return value === null || value === undefined;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isString(value) {
        return typeof value === 'string';
    }
    exports.isString = isString;
    function checkIsModule(projectTemplate, project) {
        return ((projectTemplate === "module-pro" /* Template.Module */ || projectTemplate === "app-nolayers-pro" /* Template.AppNoLayers */) &&
            (0, workspace_1.isLibrary)(project));
    }
    exports.checkIsModule = checkIsModule;
    function checkIsMS(projectTemplate, project) {
        if (project) {
            return (0, workspace_1.isLibrary)(project);
        }
        return projectTemplate === "microservice-pro" /* Template.MS */;
    }
    exports.checkIsMS = checkIsMS;
    function getProjectStructureFlags(projectTemplate, project) {
        return {
            isModuleLibrary: projectTemplate === "module-pro" /* Template.Module */ && (0, workspace_1.isLibrary)(project),
            isMicroserviceLibrary: projectTemplate === "app-nolayers-pro" /* Template.AppNoLayers */ && (0, workspace_1.isLibrary)(project)
        };
    }
    exports.getProjectStructureFlags = getProjectStructureFlags;
    //# sourceMappingURL=common.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\common.d.ts"><![CDATA[
    import { Template } from '../enums';
    import { ProjectDefinition } from '@angular-devkit/core/src/workspace';
    export declare function buildAbsolutePath(source: string): string;
    export declare function interpolate(text: string, ...params: (string | number | boolean)[]): string;
    export declare function isNullOrUndefined(value: any): value is null | undefined;
    export declare function isString(value: any): value is string;
    export declare function checkIsModule(projectTemplate: Template, project: ProjectDefinition): boolean;
    export declare function checkIsMS(projectTemplate: Template, project?: ProjectDefinition): boolean;
    export declare function getProjectStructureFlags(projectTemplate: Template, project: ProjectDefinition): {
        isModuleLibrary: boolean;
        isMicroserviceLibrary: boolean;
    };
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\ast.js.map"><![CDATA[
    {"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/ast.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,uCAQmB;AAEnB,SAAgB,uCAAuC,CACrD,MAAqB,EACrB,YAAoB,EACpB,UAAkB,EAClB,aAA4B,IAAI;IAEhC,IAAI,iBAA+B,CAAC;IACpC,MAAM,aAAa,GAAG,WAAW,CAAC;IAClC,MAAM,CAAC,OAAO,CAAC,GAAG,kCAAkC,CAAC,MAAM,CAAC,CAAC,CAAC,gCAAgC;IAE9F,IAAI,CAAC,OAAO;QAAE,OAAO,EAAE,CAAC;IAExB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAA,mBAAS,EAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAEvE,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,yBAAyB,CAAC,IAAI,CAAC;QAAE,OAAO,EAAE,CAAC;IAE5D,MAAM,CAAC,KAAK,CAAC,GAAG,IAAA,0BAAgB,EAAC,IAAI,EAAE,aAAa,CAAC,IAAI,EAAE,CAAC;IAE5D,IAAI,CAAC,KAAK,EAAE;QACV,iBAAiB,GAAG,6BAA6B,CAC/C,IAAI,EACJ,MAAM,EACN,YAAY,EACZ,GAAG,aAAa,MAAM,UAAU,GAAG,CACpC,CAAC;KACH;SAAM;QACL,MAAM,EAAE,WAAW,EAAE,GAAG,KAA8B,CAAC;QAEvD,IAAI,CAAC,EAAE,CAAC,wBAAwB,CAAC,WAAW,CAAC;YAAE,OAAO,EAAE,CAAC;QAEzD,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,WAAW,CAAC;YACjC,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAErD,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAAE,OAAO,EAAE,CAAC,CAAC,gBAAgB;YAE7D,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACtC;aAAM;YACL,IAAI,GAAG,WAAW,CAAC;SACpB;QAED,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC7B,IAAI,EAAE,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE;YACtC,iBAAiB,GAAG,6BAA6B,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;SAC3F;aAAM,IAAI,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE;YAC5C,0DAA0D;YAC1D,iBAAiB,GAAG,IAAI,sBAAY,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC5E;aAAM;YACL,iBAAiB,GAAG,6BAA6B,CAC/C,EAAE,UAAU,EAAE,CAAC,IAAI,CAAC,EAAS,EAC7B,MAAM,EACN,YAAY,EACZ,UAAU,CACX,CAAC;SACH;KACF;IAED,OAAO,UAAU,KAAK,IAAI;QACxB,CAAC,CAAC,CAAC,iBAAiB,CAAC;QACrB,CAAC,CAAC;YACE,iBAAiB;YACjB,IAAA,sBAAY,EAAC,MAAM,EAAE,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,UAAU,CAAC;SAChF,CAAC;AACR,CAAC;AA/DD,0FA+DC;AAED,SAAS,6BAA6B,CACpC,UAAsC,EACtC,MAAqB,EACrB,YAAoB,EACpB,QAAgB;IAEhB,IAAI,QAAgB,CAAC;IACrB,IAAI,SAAiB,CAAC;IACtB,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC;IAElC,IAAI,UAAU,EAAE,MAAM,EAAE;QACtB,MAAM,QAAQ,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnD,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;QAC7B,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5D,SAAS,GAAG,IAAI,WAAW,GAAG,QAAQ,EAAE,CAAC;KAC1C;SAAM;QACL,QAAQ,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACnC,SAAS,GAAG,MAAM,QAAQ,IAAI,CAAC;KAChC;IAED,OAAO,IAAI,sBAAY,CAAC,YAAY,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC7D,CAAC;AAED,SAAgB,kCAAkC,CAAC,MAAqB;IACtE,OAAO,IAAA,wBAAc,EAAC,MAAM,CAAC,CAAC,MAAM,CAAyB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACzE,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAAE,OAAO,GAAG,CAAC;QAE9C,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC;YAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhE,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AARD,gFAQC;AAED,SAAgB,yBAAyB,CAAC,MAAqB,EAAE,KAAc;IAC7E,IAAI,CAAC,KAAK;QAAE,OAAO,KAAK,CAAC;IAEzB,MAAM,sBAAsB,GAAG,IAAA,oCAA0B,EAAC,MAAM,CAAC,CAAC;IAClE,IAAI,CAAC,sBAAsB;QAAE,OAAO,KAAK,CAAC;IAE1C,MAAM,2BAA2B,GAAI,sBAA4C,CAAC,SAAS,CAAC;IAE5F,IAAI,CAAC,2BAA2B,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAEtD,MAAM,gBAAgB,GAAG,2BAA2B,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,kBAAkB,GAAG,EAAE,CAAC,wBAAwB,CAAC,gBAAgB,CAAC;QACtE,CAAC,CAAC,gBAAgB;QAClB,CAAC,CAAC,yBAAyB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAExD,IAAI,CAAC,kBAAkB;QAAE,OAAO,KAAK,CAAC;IAEtC,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,YAAY,EAAE,KAAK,MAAM,OAAO,IAAI,kBAAkB,CAAC,QAAQ,EAAE;QAC/D,IAAI,CAAC,EAAE,CAAC,yBAAyB,CAAC,OAAO,CAAC;YAAE,SAAS,YAAY,CAAC;QAElE,SAAS,EAAE,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,UAAU,EAAE;YAChD,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC;gBAAE,SAAS,SAAS,CAAC;YACvD,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;gBAAE,SAAS,SAAS,CAAC;YACpD,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM;gBAAE,SAAS,SAAS,CAAC;YAClD,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC;gBAAE,SAAS,SAAS,CAAC;YAC9D,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,KAAK,EAAE;gBACnC,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM,YAAY,CAAC;aACpB;SACF;KACF;IAED,OAAO,CAAC,QAAQ,CAAC;AACnB,CAAC;AAlCD,8DAkCC;AAED,SAAS,yBAAyB,CAAC,MAAqB,EAAE,gBAA+B;IACvF,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,OAAO,EAAE,CAAC;IACtD,IAAI,cAAc,CAAC;IACnB,IAAI,gBAAgB,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE;QACtD,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACzE,OAAO,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,kBAAkB,CAAC;QACjF,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,CAAC,cAAc;QAAE,OAAO,SAAS,CAAC;IAEtC,OAAO,IAAA,mBAAS,EACd,cAAc,EACd,EAAE,CAAC,UAAU,CAAC,sBAAsB,EACpC,CAAC,CACF,CAAC,CAAC,CAA8B,CAAC;AACpC,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\ast.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shouldAddRouteDeclaration = exports.findModuleWithProviderDeclarations = exports.addProviderToModuleWithProviderMetadata = void 0;
    const ts = require("typescript");
    const angular_1 = require("./angular");
    function addProviderToModuleWithProviderMetadata(source, ngModulePath, symbolName, importPath = null) {
        let providerInsertion;
        const metadataField = 'providers';
        const [forRoot] = findModuleWithProviderDeclarations(source); // handle multiple declarations?
        if (!forRoot)
            return [];
        let [node] = (0, angular_1.findNodes)(forRoot, ts.SyntaxKind.ObjectLiteralExpression);
        if (!node || !ts.isObjectLiteralExpression(node))
            return [];
        const [field] = (0, angular_1.getMetadataField)(node, metadataField) || [];
        if (!field) {
            providerInsertion = createMetadataInsertionChange(node, source, ngModulePath, `${metadataField}: [${symbolName}]`);
        }
        else {
            const { initializer } = field;
            if (!ts.isArrayLiteralExpression(initializer))
                return [];
            if (initializer.elements.length) {
                const { elements } = initializer;
                const symbols = elements.map(expr => expr.getText());
                if (symbols.includes(symbolName))
                    return []; // symbol exists
                node = elements[elements.length - 1];
            }
            else {
                node = initializer;
            }
            let position = node.getEnd();
            if (ts.isObjectLiteralExpression(node)) {
                providerInsertion = createMetadataInsertionChange(node, source, ngModulePath, symbolName);
            }
            else if (ts.isArrayLiteralExpression(node)) {
                // providers array is empty, position should be before `]`
                providerInsertion = new angular_1.InsertChange(ngModulePath, --position, symbolName);
            }
            else {
                providerInsertion = createMetadataInsertionChange({ properties: [node] }, source, ngModulePath, symbolName);
            }
        }
        return importPath === null
            ? [providerInsertion]
            : [
                providerInsertion,
                (0, angular_1.insertImport)(source, ngModulePath, symbolName.replace(/\..*$/, ''), importPath),
            ];
    }
    exports.addProviderToModuleWithProviderMetadata = addProviderToModuleWithProviderMetadata;
    function createMetadataInsertionChange(expression, source, ngModulePath, metadata) {
        let position;
        let insertion;
        const { properties } = expression;
        if (properties?.length) {
            const property = properties[properties.length - 1];
            position = property.getEnd();
            const text = property.getFullText(source);
            const [indentation] = text.match(/^\r?\n(\r?)\s*/) || [' '];
            insertion = `,${indentation}${metadata}`;
        }
        else {
            position = expression.getEnd() - 1;
            insertion = `,  ${metadata}\n`;
        }
        return new angular_1.InsertChange(ngModulePath, position, insertion);
    }
    function findModuleWithProviderDeclarations(source) {
        return (0, angular_1.getSourceNodes)(source).reduce((acc, node) => {
            if (!ts.isMethodDeclaration(node))
                return acc;
            if (node.getText().startsWith('static forRoot'))
                acc.push(node);
            return acc;
        }, []);
    }
    exports.findModuleWithProviderDeclarations = findModuleWithProviderDeclarations;
    function shouldAddRouteDeclaration(source, route) {
        if (!route)
            return false;
        const routerModuleExpression = (0, angular_1.getRouterModuleDeclaration)(source);
        if (!routerModuleExpression)
            return false;
        const routerModuleConfigArguments = routerModuleExpression.arguments;
        if (!routerModuleConfigArguments.length)
            return false;
        const routesExpression = routerModuleConfigArguments[0];
        const routesArrayLiteral = ts.isArrayLiteralExpression(routesExpression)
            ? routesExpression
            : resolveRoutesArrayLiteral(source, routesExpression);
        if (!routesArrayLiteral)
            return false;
        let hasRoute = false;
        loopElements: for (const element of routesArrayLiteral.elements) {
            if (!ts.isObjectLiteralExpression(element))
                continue loopElements;
            loopProps: for (const prop of element.properties) {
                if (!ts.isPropertyAssignment(prop))
                    continue loopProps;
                if (!ts.isIdentifier(prop.name))
                    continue loopProps;
                if (prop.name.text !== 'path')
                    continue loopProps;
                if (!ts.isStringLiteral(prop.initializer))
                    continue loopProps;
                if (prop.initializer.text === route) {
                    hasRoute = true;
                    break loopElements;
                }
            }
        }
        return !hasRoute;
    }
    exports.shouldAddRouteDeclaration = shouldAddRouteDeclaration;
    function resolveRoutesArrayLiteral(source, routesExpression) {
        const routesVariableName = routesExpression.getText();
        let routesVariable;
        if (routesExpression.kind === ts.SyntaxKind.Identifier) {
            routesVariable = source.statements.filter(ts.isVariableStatement).find(v => {
                return v.declarationList.declarations[0].name.getText() === routesVariableName;
            });
        }
        if (!routesVariable)
            return undefined;
        return (0, angular_1.findNodes)(routesVariable, ts.SyntaxKind.ArrayLiteralExpression, 1)[0];
    }
    //# sourceMappingURL=ast.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\ast.d.ts"><![CDATA[
    import * as ts from 'typescript';
    import { Change } from './angular';
    export declare function addProviderToModuleWithProviderMetadata(source: ts.SourceFile, ngModulePath: string, symbolName: string, importPath?: string | null): Change[];
    export declare function findModuleWithProviderDeclarations(source: ts.SourceFile): ts.MethodDeclaration[];
    export declare function shouldAddRouteDeclaration(source: ts.SourceFile, route?: string): boolean;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\api-definition.js.map"><![CDATA[
    {"version":3,"file":"api-definition.js","sourceRoot":"","sources":["../../../../packages/suite/src/utils/api-definition.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\api-definition.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProxyJsonParams = exports.createProxyJsonGenerator = void 0;
    const core_1 = require("@angular-devkit/core");
    const constants_1 = require("../constants");
    const enums_1 = require("../enums");
    const angular_1 = require("./angular");
    const enum_1 = require("./enum");
    const text_1 = require("./text");
    const { camelize, capitalize, dasherize } = core_1.strings;
    const FILTER_TEXT_BODY_PARAM = {
        nameOnMethod: 'input',
        name: 'FilterText',
        jsonName: null,
        type: 'System.String',
        typeSimple: 'string',
        isOptional: false,
        defaultValue: null,
        constraintTypes: null,
        bindingSourceId: enums_1.eBindingSourceId.Model,
        descriptorName: 'input',
    };
    const SORTING_BODY_PARAM = {
        nameOnMethod: 'input',
        name: 'Sorting',
        jsonName: null,
        type: 'System.String',
        typeSimple: 'string',
        isOptional: false,
        defaultValue: null,
        constraintTypes: null,
        bindingSourceId: enums_1.eBindingSourceId.Model,
        descriptorName: 'input',
    };
    const SKIP_COUNT_BODY_PARAM = {
        nameOnMethod: 'input',
        name: 'SkipCount',
        jsonName: null,
        type: 'System.Int32',
        typeSimple: 'number',
        isOptional: false,
        defaultValue: null,
        constraintTypes: null,
        bindingSourceId: enums_1.eBindingSourceId.Model,
        descriptorName: 'input',
    };
    const MAX_RESULT_COUNT_BODY_PARAM = {
        nameOnMethod: 'input',
        name: 'MaxResultCount',
        jsonName: null,
        type: 'System.Int32',
        typeSimple: 'number',
        isOptional: false,
        defaultValue: null,
        constraintTypes: null,
        bindingSourceId: enums_1.eBindingSourceId.Model,
        descriptorName: 'input',
    };
    const GET_INPUT_BODY_PARAMS = [
        FILTER_TEXT_BODY_PARAM,
        SORTING_BODY_PARAM,
        SKIP_COUNT_BODY_PARAM,
        MAX_RESULT_COUNT_BODY_PARAM,
    ];
    function createProxyJsonGenerator(params) {
        const { apiName, moduleName, projectPath } = params;
        const apiDefinitionPath = `${projectPath}/proxy/generate-proxy.json`;
        const rootPath = dasherize(moduleName);
        const remoteServiceName = apiName === 'default' ? 'Default' : apiName;
        const moduleKey = camelize(moduleName);
        return (tree) => {
            let apiDefinition = {
                generated: [],
                modules: {
                    [moduleKey]: {
                        rootPath,
                        remoteServiceName,
                        controllers: {},
                    },
                },
                types: {},
            };
            const apiDefinitionExists = tree.exists(apiDefinitionPath);
            if (apiDefinitionExists) {
                const buffer = tree.read(apiDefinitionPath);
                apiDefinition = JSON.parse(buffer.toString());
            }
            apiDefinition.generated = [...new Set([...apiDefinition.generated, moduleKey])];
            apiDefinition.generated.sort();
            const types = createTypes(params);
            apiDefinition.types = {
                ...apiDefinition.types,
                ...params.enums,
                ...types,
            };
            let existsControllers = apiDefinition.modules[moduleKey]?.controllers || {};
            const isBoolean = (value, defaultValue) => typeof value === 'boolean' ? value : defaultValue;
            existsControllers = Object.keys(existsControllers).reduce((acc, key) => {
                const existController = existsControllers[key];
                return {
                    ...acc,
                    [key]: {
                        ...existController,
                        isRemoteService: isBoolean(existController.isRemoteService, true),
                        isIntegrationService: isBoolean(existController.isIntegrationService, false),
                    },
                };
            }, {});
            apiDefinition.modules[moduleKey] = {
                rootPath,
                remoteServiceName,
                controllers: {
                    ...existsControllers,
                    ...createController(params),
                },
            };
            const text = JSON.stringify(apiDefinition, null, 2);
            tree[apiDefinitionExists ? 'overwrite' : 'create'](apiDefinitionPath, text);
        };
    }
    exports.createProxyJsonGenerator = createProxyJsonGenerator;
    function createTypes(params) {
        const { checkConcurrency, solution, entityBaseClass, entityPrimaryKey, namespace, name, namePlural, props: properties, navProps: navigationProperties = [], navPropsSuffix, navConnectionProps: navigationConnectionProperties = [], masterEntity, } = params;
        const { inputNavigationConnectionProps, inputProperties } = generateInputPropertiesWithNavigation(params);
        const exportToExcelTypes = createExportToExcelTypes(params, inputProperties);
        const fileTypes = createFileTypes(params);
        const types = {
            'Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto': {
                baseType: 'Volo.Abp.Application.Dtos.PagedResultRequestDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'Sorting',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.PagedResultRequestDto': {
                baseType: 'Volo.Abp.Application.Dtos.LimitedResultRequestDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'SkipCount',
                        jsonName: null,
                        type: 'System.Int32',
                        typeSimple: 'number',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.LimitedResultRequestDto': {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'DefaultMaxResultCount',
                        jsonName: null,
                        type: 'System.Int32',
                        typeSimple: 'number',
                        isRequired: false,
                    },
                    {
                        name: 'MaxMaxResultCount',
                        jsonName: null,
                        type: 'System.Int32',
                        typeSimple: 'number',
                        isRequired: false,
                    },
                    {
                        name: 'MaxResultCount',
                        jsonName: null,
                        type: 'System.Int32',
                        typeSimple: 'number',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.PagedResultDto<T0>': {
                baseType: 'Volo.Abp.Application.Dtos.ListResultDto<T>',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['T'],
                properties: [
                    {
                        name: 'TotalCount',
                        jsonName: null,
                        type: 'System.Int64',
                        typeSimple: 'number',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.ListResultDto<T0>': {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['T'],
                properties: [
                    {
                        name: 'Items',
                        jsonName: null,
                        type: '[T]',
                        typeSimple: '[T]',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.FullAuditedEntityDto<T0>': {
                baseType: 'Volo.Abp.Application.Dtos.AuditedEntityDto<TPrimaryKey>',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['TPrimaryKey'],
                properties: [
                    {
                        name: 'IsDeleted',
                        jsonName: null,
                        type: 'System.Boolean',
                        typeSimple: 'boolean',
                        isRequired: false,
                    },
                    {
                        name: 'DeleterId',
                        jsonName: null,
                        type: 'System.Guid?',
                        typeSimple: 'string?',
                        isRequired: false,
                    },
                    {
                        name: 'DeletionTime',
                        jsonName: null,
                        type: 'System.DateTime?',
                        typeSimple: 'string?',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.AuditedEntityDto<T0>': {
                baseType: 'Volo.Abp.Application.Dtos.CreationAuditedEntityDto<TPrimaryKey>',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['TPrimaryKey'],
                properties: [
                    {
                        name: 'LastModificationTime',
                        jsonName: null,
                        type: 'System.DateTime?',
                        typeSimple: 'string?',
                        isRequired: false,
                    },
                    {
                        name: 'LastModifierId',
                        jsonName: null,
                        type: 'System.Guid?',
                        typeSimple: 'string?',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.CreationAuditedEntityDto<T0>': {
                baseType: 'Volo.Abp.Application.Dtos.EntityDto<TPrimaryKey>',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['TPrimaryKey'],
                properties: [
                    {
                        name: 'CreationTime',
                        jsonName: null,
                        type: 'System.DateTime',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: 'CreatorId',
                        jsonName: null,
                        type: 'System.Guid?',
                        typeSimple: 'string?',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.EntityDto<T0>': {
                baseType: 'Volo.Abp.Application.Dtos.EntityDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['TKey'],
                properties: [
                    {
                        name: 'Id',
                        jsonName: null,
                        type: 'TKey',
                        typeSimple: 'TKey',
                        isRequired: false,
                    },
                ],
            },
            'Volo.Abp.Application.Dtos.EntityDto': {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [],
            },
            'Volo.Abp.Identity.IdentityUserDto': {
                baseType: 'Volo.Abp.Application.Dtos.ExtensibleEntityDto<System.Guid>',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'TenantId',
                        jsonName: null,
                        type: 'System.Guid?',
                        typeSimple: 'string?',
                        isRequired: false,
                    },
                    {
                        name: 'UserName',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: 'Email',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: 'Name',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: 'Surname',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: 'EmailConfirmed',
                        jsonName: null,
                        type: 'System.Boolean',
                        typeSimple: 'boolean',
                        isRequired: false,
                    },
                    {
                        name: 'PhoneNumber',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: 'PhoneNumberConfirmed',
                        jsonName: null,
                        type: 'System.Boolean',
                        typeSimple: 'boolean',
                        isRequired: false,
                    },
                    {
                        name: 'SupportTwoFactor',
                        jsonName: null,
                        type: 'System.Boolean',
                        typeSimple: 'boolean',
                        isRequired: false,
                    },
                    {
                        name: 'LockoutEnabled',
                        jsonName: null,
                        type: 'System.Boolean',
                        typeSimple: 'boolean',
                        isRequired: false,
                    },
                    {
                        name: 'IsLockedOut',
                        jsonName: null,
                        type: 'System.Boolean',
                        typeSimple: 'boolean',
                        isRequired: false,
                    },
                    {
                        name: 'ConcurrencyStamp',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                ],
            },
            [`${solution}.Shared.LookupRequestDto`]: {
                baseType: 'Volo.Abp.Application.Dtos.PagedResultRequestDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'Filter',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                ],
            },
            [`${solution}.Shared.LookupDto<T0>`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: ['TKey'],
                properties: [
                    { name: 'Id', jsonName: null, type: 'TKey', typeSimple: 'TKey', isRequired: false },
                    {
                        name: 'DisplayName',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                ],
            },
            [`${solution}.${namespace}.Get${namePlural}Input`]: {
                baseType: 'Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'FilterText',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    ...inputProperties,
                ],
            },
            [`${solution}.${namespace}.${name}Dto`]: {
                baseType: `Volo.Abp.Application.Dtos.${entityBaseClass}<${entityPrimaryKey}>`,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [...properties, ...getConcurrencyStampProperty(checkConcurrency)],
            },
            [`${solution}.${namespace}.${name}CreateDto`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [...properties, ...inputNavigationConnectionProps.map(p => mapPlural(p))],
            },
            [`${solution}.${namespace}.${name}UpdateDto`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    ...properties,
                    ...inputNavigationConnectionProps.map(p => mapPlural(p)),
                    ...getConcurrencyStampProperty(checkConcurrency),
                ],
            },
            [`${solution}.Users.AppUserDto`]: {
                baseType: 'Volo.Abp.Identity.IdentityUserDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [],
            },
            ...exportToExcelTypes,
            ...fileTypes,
        };
        if (masterEntity) {
            types[`${solution}.${namespace}.Get${name}ListInput`] = {
                baseType: 'Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'FilterText',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                    },
                    {
                        name: masterEntity.Name + 'Id',
                        jsonName: null,
                        type: masterEntity.PrimaryKeyType,
                        typeSimple: constants_1.PROP_TYPES.get(masterEntity.PrimaryKeyType) ||
                            constants_1.PROP_TYPES.get('Guid'),
                        isRequired: true,
                    },
                ],
            };
        }
        if (navPropsSuffix) {
            types[`${solution}.${namespace}.${name + navPropsSuffix}Dto`] = {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    ...navigationProperties,
                    ...navigationConnectionProperties.map(p => mapPlural(p, true)),
                ],
            };
        }
        const abpModules = navigationProperties.filter(f => f.type.startsWith('Volo.'));
        if (abpModules.length) {
            abpModules.forEach(module => {
                types[module.type] = {};
            });
        }
        return types;
    }
    function generateInputPropertiesWithNavigation(params) {
        const { navigationConnections, masterEntity } = params;
        const inputNavigationConnectionProps = navigationConnections.reduce((acc, prop) => {
            const type = `${prop.Namespace}.${prop.EntityName}Dto`;
            if (acc.some(p => p.type === type)) {
                return acc;
            }
            return [
                ...acc,
                {
                    name: prop.EntityName + 'Id',
                    jsonName: null,
                    type: 'Guid',
                    typeSimple: 'string',
                    isRequired: prop.IsRequired,
                },
            ];
        }, []);
        const inputProperties = createGetInputs(Object.assign(params, { props: [...params.props, ...inputNavigationConnectionProps] }), mapToGetInput);
        if (masterEntity) {
            inputProperties.push({
                name: masterEntity.Name + 'Id',
                jsonName: null,
                type: masterEntity.PrimaryKeyType,
                typeSimple: constants_1.PROP_TYPES.get(masterEntity.PrimaryKeyType) ||
                    constants_1.PROP_TYPES.get('Guid'),
                isRequired: true,
            });
        }
        return { inputNavigationConnectionProps, inputProperties };
    }
    function createExportToExcelTypes(proxyParams, inputProperties) {
        const { solution, name, namespace, shouldExportExcel } = proxyParams;
        if (!shouldExportExcel) {
            return {};
        }
        const result = {
            [`${solution}.Shared.DownloadTokenResultDto`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'Token',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                ],
            },
            [`${solution}.${namespace}.${name}ExcelDownloadDto`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'DownloadToken',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                    {
                        name: 'FilterText',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                    ...inputProperties,
                ],
            },
            'Volo.Abp.Content.IRemoteStreamContent': {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'FileName',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                    {
                        name: 'ContentType',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                    {
                        name: 'ContentLength',
                        jsonName: null,
                        type: 'System.Int64?',
                        typeSimple: 'number?',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                ],
            },
        };
        return result;
    }
    function createFileTypes(params) {
        const { solution } = params;
        const result = {
            //TODO: We also using this type at below for download excel. We need to refactor this.
            [`${solution}.Shared.DownloadTokenResultDto`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'Token',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                ],
            },
            [`${solution}.Shared.AppFileDescriptorDto`]: {
                baseType: 'Volo.Abp.Application.Dtos.EntityDto<System.Guid>',
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'Name',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                    {
                        name: 'MimeType',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                ],
            },
            [`${solution}.Shared.GetFileInput`]: {
                baseType: null,
                isEnum: false,
                enumNames: null,
                enumValues: null,
                genericArguments: null,
                properties: [
                    {
                        name: 'DownloadToken',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                    {
                        name: 'FileId',
                        jsonName: null,
                        type: 'System.Guid',
                        typeSimple: 'string',
                        isRequired: false,
                        minLength: null,
                        maxLength: null,
                        minimum: null,
                        maximum: null,
                        regex: null,
                    },
                ],
            },
        };
        return result;
    }
    function createController(params) {
        const { solution, namespace, name, checkModuleTemplate } = params;
        const type = `${solution}${!checkModuleTemplate ? '.Controllers' : ''}.${namespace}.${name}Controller`;
        return {
            [type]: {
                controllerName: name,
                type,
                isRemoteService: true,
                isIntegrationService: false,
                interfaces: [
                    {
                        type: `${solution}.${namespace}.I${name}AppService`,
                    },
                ],
                actions: createActions(params),
            },
        };
    }
    function createActions(params) {
        const { solution, namespace, name, namePlural, entityPrimaryKey, entityPrimaryKeySimple, entityPath, navPropsSuffix, masterEntity, } = params;
        const getInputs = createGetInputs(params, mapToGetInputExtended);
        const navPropActions = createNavPropActions(params);
        const lookupActions = createLookupActions(params);
        const exportToExcelActions = createExportToExcelActions(params);
        const actions = [
            {
                uniqueName: 'GetListAsyncByInput',
                name: 'GetListAsync',
                httpMethod: 'GET',
                url: entityPath,
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'input',
                        typeAsString: `${solution}.${namespace}.Get${namePlural}Input, ${solution}.Application.Contracts`,
                        type: `${solution}.${namespace}.Get${namePlural}Input`,
                        typeSimple: `${solution}.${namespace}.Get${namePlural}Input`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [...GET_INPUT_BODY_PARAMS, ...getInputs],
                returnValue: {
                    type: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.${namespace}.${name + navPropsSuffix}Dto>`,
                    typeSimple: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.${namespace}.${name + navPropsSuffix}Dto>`,
                },
            },
            ...navPropActions,
            {
                uniqueName: 'GetAsyncById',
                name: 'GetAsync',
                httpMethod: 'GET',
                url: entityPath + '/{id}',
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'id',
                        typeAsString: `${entityPrimaryKey}, System.Private.CoreLib`,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'id',
                        name: 'id',
                        jsonName: null,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: [],
                        bindingSourceId: enums_1.eBindingSourceId.Path,
                        descriptorName: '',
                    },
                ],
                returnValue: {
                    type: `${solution}.${namespace}.${name}Dto`,
                    typeSimple: `${solution}.${namespace}.${name}Dto`,
                },
            },
            ...lookupActions,
            ...exportToExcelActions,
            {
                uniqueName: 'CreateAsyncByInput',
                name: 'CreateAsync',
                httpMethod: 'POST',
                url: entityPath,
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'input',
                        typeAsString: `${solution}.${namespace}.${name}CreateDto, ${solution}.Application.Contracts`,
                        type: `${solution}.${namespace}.${name}CreateDto`,
                        typeSimple: `${solution}.${namespace}.${name}CreateDto`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'input',
                        name: 'input',
                        jsonName: null,
                        type: `${solution}.${namespace}.${name}CreateDto`,
                        typeSimple: `${solution}.${namespace}.${name}CreateDto`,
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: null,
                        bindingSourceId: enums_1.eBindingSourceId.Body,
                        descriptorName: '',
                    },
                ],
                returnValue: {
                    type: `${solution}.${namespace}.${name}Dto`,
                    typeSimple: `${solution}.${namespace}.${name}Dto`,
                },
            },
            {
                uniqueName: 'UpdateAsyncByIdAndInput',
                name: 'UpdateAsync',
                httpMethod: 'PUT',
                url: entityPath + '/{id}',
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'id',
                        typeAsString: `${entityPrimaryKey}, System.Private.CoreLib`,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                    },
                    {
                        name: 'input',
                        typeAsString: `${solution}.${namespace}.${name}UpdateDto, ${solution}.Application.Contracts`,
                        type: `${solution}.${namespace}.${name}UpdateDto`,
                        typeSimple: `${solution}.${namespace}.${name}UpdateDto`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'id',
                        name: 'id',
                        jsonName: null,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: [],
                        bindingSourceId: enums_1.eBindingSourceId.Path,
                        descriptorName: '',
                    },
                    {
                        nameOnMethod: 'input',
                        name: 'input',
                        jsonName: null,
                        type: `${solution}.${namespace}.${name}UpdateDto`,
                        typeSimple: `${solution}.${namespace}.${name}UpdateDto`,
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: null,
                        bindingSourceId: enums_1.eBindingSourceId.Body,
                        descriptorName: '',
                    },
                ],
                returnValue: {
                    type: `${solution}.${namespace}.${name}Dto`,
                    typeSimple: `${solution}.${namespace}.${name}Dto`,
                },
            },
            {
                uniqueName: 'DeleteAsyncById',
                name: 'DeleteAsync',
                httpMethod: 'DELETE',
                url: entityPath + '/{id}',
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'id',
                        typeAsString: `${entityPrimaryKey}, System.Private.CoreLib`,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'id',
                        name: 'id',
                        jsonName: null,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: [],
                        bindingSourceId: enums_1.eBindingSourceId.Path,
                        descriptorName: '',
                    },
                ],
                returnValue: {
                    type: 'System.Void',
                    typeSimple: 'System.Void',
                },
            },
            ...createFileActions(params),
        ];
        if (masterEntity) {
            const masterIdParam = {
                nameOnMethod: 'input',
                name: `${masterEntity.Name}Id`,
                jsonName: null,
                type: masterEntity.PrimaryKeyType,
                typeSimple: constants_1.PROP_TYPES.get(masterEntity.PrimaryKeyType) ||
                    constants_1.PROP_TYPES.get('Guid'),
                isOptional: false,
                defaultValue: null,
                constraintTypes: null,
                bindingSourceId: enums_1.eBindingSourceId.Model,
                descriptorName: 'input',
            };
            const action = actions.find(f => f.uniqueName === 'GetListAsyncByInput');
            if (action) {
                action.parameters = [masterIdParam, ...action.parameters];
            }
            actions.push({
                uniqueName: `GetListBy${masterEntity.Name}IdAsync`,
                name: `GetListBy${masterEntity.Name}Id`,
                httpMethod: 'GET',
                url: `${entityPath}/by-${(0, text_1.kebab)(masterEntity.Name)}`,
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'input',
                        typeAsString: `${solution}.${namespace}.Get${name}ListInput, ${solution}.Application.Contracts`,
                        type: `${solution}.${namespace}.Get${name}ListInput`,
                        typeSimple: `${solution}.${namespace}.Get${name}ListInput`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [masterIdParam, ...GET_INPUT_BODY_PARAMS],
                returnValue: {
                    type: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.${namespace}.${name + navPropsSuffix}Dto>`,
                    typeSimple: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.${namespace}.${name + navPropsSuffix}Dto>`,
                },
            });
        }
        const bulkDeleteActions = createBulkDeleteActions(params);
        if (bulkDeleteActions.length > 0) {
            actions.push(...bulkDeleteActions);
        }
        return actions.reduce((acc, action) => {
            acc[action.uniqueName] = action;
            return acc;
        }, {});
    }
    function createBulkDeleteActions(params) {
        if (!params.bulkDeleteEnabled) {
            return [];
        }
        const { entityPath, entityPrimaryKey, entityPrimaryKeySimple, name, solution, namespace, namePlural, } = params;
        const returnValue = {
            type: 'System.Void',
            typeSimple: 'System.Void',
        };
        const getInputs = createGetInputs(params, mapToGetInputExtended);
        const deleteAllAsync = {
            uniqueName: 'DeleteAllAsync',
            name: 'DeleteAllAsync',
            httpMethod: 'DELETE',
            url: `${entityPath}/all`,
            supportedVersions: [],
            parameters: [...GET_INPUT_BODY_PARAMS, ...getInputs],
            parametersOnMethod: [
                {
                    name: 'input',
                    typeAsString: `${solution}.${namespace}.Get${namePlural}Input, ${solution}.Application.Contracts`,
                    type: `${solution}.${namespace}.Get${namePlural}Input`,
                    typeSimple: `${solution}.${namespace}.Get${namePlural}Input`,
                    isOptional: false,
                    defaultValue: null,
                },
            ],
            returnValue,
        };
        const deleteByIdsAsync = {
            uniqueName: `DeleteByIdsAsyncBy${name}Ids`,
            name: 'DeleteByIdsAsync',
            httpMethod: 'DELETE',
            url: entityPath,
            supportedVersions: [],
            parametersOnMethod: [
                {
                    name: `${camelize(name)}Ids`,
                    type: `System.Collections.Generic.List<${entityPrimaryKey}>`,
                    typeAsString: `System.Collections.Generic.List<${entityPrimaryKey}>, System.Private.CoreLib`,
                    typeSimple: `[${entityPrimaryKeySimple}]`,
                    isOptional: false,
                    defaultValue: null,
                },
            ],
            parameters: [
                {
                    nameOnMethod: `${camelize(name)}Ids`,
                    name: `${camelize(name)}Ids`,
                    jsonName: null,
                    type: `System.Collections.Generic.List<${entityPrimaryKey}>`,
                    typeSimple: `[${entityPrimaryKeySimple}]`,
                    isOptional: false,
                    defaultValue: null,
                    constraintTypes: null,
                    bindingSourceId: enums_1.eBindingSourceId.Model,
                    descriptorName: '',
                },
            ],
            returnValue,
        };
        return [deleteAllAsync, deleteByIdsAsync];
    }
    function createGetInputs(params, mapperFn) {
        return params.props.reduce((acc, { isRef, name, type, typeSimple, isRequired }) => {
            if (type.includes('File')) {
                return acc;
            }
            let inputs = [name];
            const dateTypes = ['System.DateTime', 'System.DateOnly', 'System.TimeOnly'];
            const isDate = dateTypes.some(t => type.startsWith(t));
            if (!isRef && (isDate || typeSimple.startsWith('number'))) {
                inputs = [name + 'Min', name + 'Max'];
            }
            [type, typeSimple] = shouldMakeInputOptional(type, typeSimple);
            inputs.forEach(input => acc.push(mapperFn(input, type, typeSimple, isRequired)));
            return acc;
        }, []);
    }
    function shouldMakeInputOptional(type, typeSimple) {
        if (!type.endsWith('?') && !/[}]>$]/.test(type)) {
            type += '?';
            typeSimple += '?';
        }
        return [type, typeSimple];
    }
    function mapToGetInput(name, type, typeSimple, isRequired) {
        return {
            name,
            jsonName: null,
            type,
            typeSimple,
            isRequired,
        };
    }
    function mapPlural(prop, exceptName = false) {
        return {
            ...prop,
            ...(!exceptName && { name: prop.name + 's' }),
            type: `[${prop.type.replace('?', '')}]`,
            typeSimple: `[${prop.typeSimple.replace('?', '')}]`,
        };
    }
    function mapToGetInputExtended(name, type, typeSimple) {
        return {
            nameOnMethod: 'input',
            name,
            jsonName: null,
            type,
            typeSimple,
            isOptional: false,
            defaultValue: null,
            constraintTypes: null,
            bindingSourceId: enums_1.eBindingSourceId.Model,
            descriptorName: 'input',
        };
    }
    function getConcurrencyStampProperty(checkConcurency) {
        if (!checkConcurency) {
            return [];
        }
        return [
            {
                name: 'ConcurrencyStamp',
                jsonName: null,
                type: 'System.String',
                typeSimple: 'string',
                isRequired: false,
            },
        ];
    }
    function createNavPropActions(params) {
        const { solution, namespace, name, entityPrimaryKey, entityPrimaryKeySimple, entityPath, navPropsSuffix, masterEntity, } = params;
        if (!navPropsSuffix) {
            return [];
        }
        const actions = [
            {
                uniqueName: 'GetWithNavigationPropertiesAsyncById',
                name: 'GetWithNavigationPropertiesAsync',
                httpMethod: 'GET',
                url: entityPath + '/with-navigation-properties/{id}',
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'id',
                        typeAsString: `${entityPrimaryKey}, System.Private.CoreLib`,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'id',
                        name: 'id',
                        jsonName: null,
                        type: entityPrimaryKey,
                        typeSimple: entityPrimaryKeySimple,
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: [],
                        bindingSourceId: enums_1.eBindingSourceId.Path,
                        descriptorName: '',
                    },
                ],
                returnValue: {
                    type: `${solution}.${namespace}.${name}WithNavigationPropertiesDto`,
                    typeSimple: `${solution}.${namespace}.${name}WithNavigationPropertiesDto`,
                },
            },
        ];
        if (masterEntity) {
            const masterIdParam = {
                nameOnMethod: 'input',
                name: `${masterEntity.Name}Id`,
                jsonName: null,
                type: masterEntity.PrimaryKeyType,
                typeSimple: constants_1.PROP_TYPES.get(masterEntity.PrimaryKeyType) ||
                    constants_1.PROP_TYPES.get('Guid'),
                isOptional: false,
                defaultValue: null,
                constraintTypes: null,
                bindingSourceId: enums_1.eBindingSourceId.Model,
                descriptorName: 'input',
            };
            actions.push({
                uniqueName: `GetListWithNavigationPropertiesBy${masterEntity.Name}IdAsync`,
                name: `GetListWithNavigationPropertiesBy${masterEntity.Name}IdAsync`,
                httpMethod: 'GET',
                url: `${entityPath}/detailed/by-${(0, text_1.kebab)(masterEntity.Name)}`,
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'input',
                        typeAsString: `${solution}.${namespace}.Get${name}ListInput, ${solution}.Application.Contracts`,
                        type: `${solution}.${namespace}.Get${name}ListInput`,
                        typeSimple: `${solution}.${namespace}.Get${name}ListInput`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [masterIdParam, ...GET_INPUT_BODY_PARAMS],
                returnValue: {
                    type: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.${namespace}.${name}WithNavigationPropertiesDto>`,
                    typeSimple: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.${namespace}.${name}WithNavigationPropertiesDto>`,
                },
            });
        }
        return actions;
    }
    function createLookupActions(params) {
        const { solution, name: entityName, entityPath, navProps, navConnectionProps = [], navigationConnections = [], } = params;
        return [
            ...navProps,
            ...navConnectionProps.map(e => ({
                ...e,
                name: navigationConnections.find(c => c.Name === e.name)?.EntityName || '',
            })),
        ].reduce((acc, prop) => {
            const keyType = prop.type;
            const navEntityPrimaryKey = constants_1.PRIMARY_KEY_TYPES.get(keyType) || constants_1.PRIMARY_KEY_TYPES.get('Guid');
            const navEntityPrimaryKeySimple = constants_1.PROP_TYPES.get(keyType) || constants_1.PROP_TYPES.get('Guid');
            const navEntityName = prop.name;
            if (entityName === navEntityName)
                return acc;
            const name = `Get${navEntityName}LookupAsync`;
            if (acc.find(action => action.name === name))
                return acc;
            acc.push({
                uniqueName: `${name}ByInput`,
                name,
                httpMethod: 'GET',
                url: `${entityPath}/${dasherize(navEntityName)}-lookup`,
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'input',
                        typeAsString: `${solution}.Shared.LookupRequestDto, ${solution}.Application.Contracts`,
                        type: `${solution}.Shared.LookupRequestDto`,
                        typeSimple: `${solution}.Shared.LookupRequestDto`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'input',
                        name: 'Filter',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: null,
                        bindingSourceId: enums_1.eBindingSourceId.Model,
                        descriptorName: 'input',
                    },
                    SKIP_COUNT_BODY_PARAM,
                    MAX_RESULT_COUNT_BODY_PARAM,
                ],
                returnValue: {
                    type: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.Shared.LookupDto<${navEntityPrimaryKey}?>>`,
                    typeSimple: `Volo.Abp.Application.Dtos.PagedResultDto<${solution}.Shared.LookupDto<${navEntityPrimaryKeySimple}?>>`,
                },
            });
            return acc;
        }, []);
    }
    function createExportToExcelActions(params) {
        const { entityPath, solution, namespace, name, namePlural, shouldExportExcel, masterEntity } = params;
        if (!shouldExportExcel) {
            return [];
        }
        const inputProperties = createGetInputs(Object.assign(params, { props: [...params.props] }), mapToGetInput);
        if (masterEntity) {
            inputProperties.push({
                name: masterEntity.Name + 'Id',
                jsonName: null,
                type: masterEntity.PrimaryKeyType,
                typeSimple: constants_1.PROP_TYPES.get(masterEntity.PrimaryKeyType) ||
                    constants_1.PROP_TYPES.get('Guid'),
                isRequired: true,
            });
        }
        const parametersInBody = inputProperties.map(prop => ({
            ...prop,
            nameOnMethod: 'input',
            isOptional: !prop.isRequired,
            defaultValue: null,
            constraintTypes: null,
            bindingSourceId: enums_1.eBindingSourceId.Model,
            descriptorName: 'input',
        }));
        return [
            {
                uniqueName: 'GetListAsExcelFileAsyncByInput',
                name: 'GetListAsExcelFileAsync',
                httpMethod: 'GET',
                url: entityPath + '/as-excel-file',
                supportedVersions: [],
                parametersOnMethod: [
                    {
                        name: 'input',
                        typeAsString: `${solution}.${namespace}.${name}ExcelDownloadDto, ${solution}.Application.Contracts`,
                        type: `${solution}.${namespace}.${name}ExcelDownloadDto`,
                        typeSimple: `${solution}.${namespace}.${name}ExcelDownloadDto`,
                        isOptional: false,
                        defaultValue: null,
                    },
                ],
                parameters: [
                    {
                        nameOnMethod: 'input',
                        name: 'DownloadToken',
                        jsonName: null,
                        type: 'System.String',
                        typeSimple: 'string',
                        isOptional: false,
                        defaultValue: null,
                        constraintTypes: null,
                        bindingSourceId: enums_1.eBindingSourceId.Model,
                        descriptorName: 'input',
                    },
                    FILTER_TEXT_BODY_PARAM,
                    ...parametersInBody,
                ],
                returnValue: {
                    type: 'Volo.Abp.Content.IRemoteStreamContent',
                    typeSimple: 'Volo.Abp.Content.IRemoteStreamContent',
                },
                allowAnonymous: null,
                implementFrom: `${solution}.${namespace}.I${namePlural}AppService`,
            },
            {
                uniqueName: 'GetDownloadTokenAsync',
                name: 'GetDownloadTokenAsync',
                httpMethod: 'GET',
                url: entityPath + '/download-token',
                supportedVersions: [],
                parametersOnMethod: [],
                parameters: [],
                returnValue: {
                    type: `${solution}.Shared.DownloadTokenResultDto`,
                    typeSimple: `${solution}.Shared.DownloadTokenResultDto`,
                },
                allowAnonymous: null,
                implementFrom: `${solution}.${namespace}.I${namePlural}AppService`,
            },
        ];
    }
    function createFileActions(params) {
        const { solution, namespace, namePlural, entityPath } = params;
        const uploadFileAsync = {
            name: 'UploadFileAsync',
            uniqueName: 'UploadFileAsyncByInput',
            httpMethod: 'POST',
            url: `${entityPath}/upload-file`,
            supportedVersions: [],
            parametersOnMethod: [
                {
                    name: 'input',
                    typeAsString: 'Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core',
                    type: 'Volo.Abp.Content.IRemoteStreamContent',
                    typeSimple: 'Volo.Abp.Content.IRemoteStreamContent',
                    isOptional: false,
                    defaultValue: null,
                },
            ],
            parameters: [
                {
                    nameOnMethod: 'input',
                    name: 'input',
                    jsonName: null,
                    type: 'Volo.Abp.Content.IRemoteStreamContent',
                    typeSimple: 'Volo.Abp.Content.IRemoteStreamContent',
                    isOptional: false,
                    defaultValue: null,
                    constraintTypes: null,
                    bindingSourceId: enums_1.eBindingSourceId.Body,
                    descriptorName: '',
                },
            ],
            returnValue: {
                type: `${solution}.Shared.AppFileDescriptorDto`,
                typeSimple: `${solution}.Shared.AppFileDescriptorDto`,
            },
        };
        const getFileAsync = {
            name: 'GetFileAsync',
            uniqueName: 'GetFileAsyncByInput',
            httpMethod: 'GET',
            url: `${entityPath}/file`,
            supportedVersions: [],
            parametersOnMethod: [
                {
                    name: 'input',
                    typeAsString: `${solution}.Shared.GetFileInput, ${solution}.Application.Contracts`,
                    type: `${solution}.Shared.GetFileInput`,
                    typeSimple: `${solution}.Shared.GetFileInput`,
                    isOptional: false,
                    defaultValue: null,
                },
            ],
            parameters: [
                {
                    nameOnMethod: 'input',
                    name: 'DownloadToken',
                    jsonName: null,
                    type: 'System.String',
                    typeSimple: 'string',
                    isOptional: false,
                    defaultValue: null,
                    constraintTypes: null,
                    bindingSourceId: enums_1.eBindingSourceId.Model,
                    descriptorName: 'input',
                },
                {
                    nameOnMethod: 'input',
                    name: 'FileId',
                    jsonName: null,
                    type: 'System.Guid',
                    typeSimple: 'string',
                    isOptional: false,
                    defaultValue: null,
                    constraintTypes: null,
                    bindingSourceId: enums_1.eBindingSourceId.Model,
                    descriptorName: 'input',
                },
            ],
            returnValue: {
                type: 'Volo.Abp.Content.IRemoteStreamContent',
                typeSimple: 'Volo.Abp.Content.IRemoteStreamContent',
            },
        };
        return [
            uploadFileAsync,
            getFileAsync,
            //TODO: We also use action below for download excel file. We need to refactor this.
            {
                uniqueName: 'GetDownloadTokenAsync',
                name: 'GetDownloadTokenAsync',
                httpMethod: 'GET',
                url: entityPath + '/download-token',
                supportedVersions: [],
                parametersOnMethod: [],
                parameters: [],
                returnValue: {
                    type: `${solution}.Shared.DownloadTokenResultDto`,
                    typeSimple: `${solution}.Shared.DownloadTokenResultDto`,
                },
                allowAnonymous: null,
                implementFrom: `${solution}.${namespace}.I${namePlural}AppService`,
            },
        ];
    }
    class ProxyJsonParams {
        constructor({ project, entity, isMS, isModule, ...options }) {
            this.shouldExportExcel = false;
            this.navConnectionProps = [];
            this.navigationConnections = [];
            Object.assign(this, options);
            if (entity.MasterEntity) {
                this.masterEntity = entity.MasterEntity;
            }
            this.bulkDeleteEnabled = entity.BulkDeleteEnabled;
            this.projectPath = (0, angular_1.buildDefaultPath)(project);
            this.namespace = entity.Namespace;
            this.namePlural = entity.NamePlural;
            this.checkConcurrency = entity.CheckConcurrency;
            this.name = entity.Name;
            this.shouldExportExcel = entity.ShouldExportExcel;
            this.checkModuleTemplate = isMS || isModule;
            this.entityBaseClass =
                constants_1.BASE_CLASSES.get(entity.BaseClass) || constants_1.BASE_CLASSES.get('FullAuditedAggregateRoot');
            const _primaryKey = entity.PrimaryKeyType;
            this.entityPrimaryKey = constants_1.PRIMARY_KEY_TYPES.get(_primaryKey) || constants_1.PRIMARY_KEY_TYPES.get('Guid');
            this.entityPrimaryKeySimple = constants_1.PROP_TYPES.get(_primaryKey) || constants_1.PROP_TYPES.get('Guid');
            this.entityPath = `api/${dasherize(this.moduleName)}/${dasherize(this.namePlural)}`;
            if (this.checkModuleTemplate) {
                const projectName = this.solution.split('.').pop() || '';
                const moduleKey = dasherize((0, text_1.removePostfix)(projectName, 'Service'));
                this.entityPath = `api/${moduleKey}/${dasherize(this.namePlural)}`;
            }
            const naviationProperties = entity.NavigationProperties || [];
            this.enums = {};
            this.createProps(entity);
            this.createNavigationConnectionProps(entity);
            const dto = `${this.solution}.${this.namespace}.${this.name}Dto`;
            this.navProps = [...naviationProperties].reduce((acc, prop) => {
                const type = `${prop.Namespace}.${prop.EntityName}Dto`;
                if (acc.some(p => p.type === type)) {
                    return acc;
                }
                acc.push({
                    name: prop.EntityName,
                    jsonName: null,
                    type,
                    typeSimple: type,
                    isRequired: prop.IsRequired,
                });
                return acc;
            }, [
                {
                    name: this.name,
                    jsonName: null,
                    type: dto,
                    typeSimple: dto,
                    isRequired: false,
                },
            ]);
            this.navPropsSuffix = '';
            if (naviationProperties.length || entity.NavigationConnections?.length) {
                this.navPropsSuffix = 'WithNavigationProperties';
            }
        }
        createProps(entity) {
            const properties = entity.Properties;
            const naviationProperties = entity.NavigationProperties || [];
            this.props = [...properties, ...naviationProperties].map((prop) => {
                if (prop.Type === 'File') {
                    prop.Name += 'Id';
                }
                const { IsRequired: isRequired, IsNullable, Type } = prop;
                let optionalSuffix = isRequired ? '' : '?';
                if (prop) {
                    let isNullable = IsNullable;
                    if (IsNullable === undefined || Type === 'string') {
                        isNullable = !isRequired;
                    }
                    if (!isRequired && !isNullable) {
                        prop.IsRequired = true;
                        optionalSuffix = '';
                    }
                    if (Type === 'bool') {
                        prop.IsRequired = false;
                    }
                }
                const name = prop.Name;
                if ((0, enum_1.isEnum)(prop)) {
                    const entries = Object.entries(prop.EnumValues);
                    entries.sort((a, b) => a[1] - b[1]);
                    const fullEnumName = `${prop.EnumNamespace}.${prop.EnumType}`;
                    this.enums[fullEnumName] = {
                        baseType: 'System.Enum',
                        isEnum: true,
                        enumNames: entries.map(e => e[0]),
                        enumValues: entries.map(e => e[1]),
                        genericArguments: null,
                        properties: null,
                    };
                    const t = fullEnumName + optionalSuffix;
                    return { name, jsonName: null, type: t, typeSimple: t, isRequired };
                }
                const type = `System.${capitalize(prop.Type)}`;
                const typeSimple = constants_1.PROP_TYPES.get(prop.Type);
                return {
                    name,
                    jsonName: null,
                    type: type + optionalSuffix,
                    typeSimple: typeSimple + optionalSuffix,
                    isRef: Boolean(prop.ReferencePropertyName),
                    isRequired,
                };
            });
        }
        createNavigationConnectionProps(entity) {
            const navigationConnections = entity.NavigationConnections || [];
            this.navigationConnections = navigationConnections;
            this.navConnectionProps = navigationConnections.reduce((acc, prop) => {
                const type = `${prop.Namespace}.${prop.EntityName}Dto`;
                if (acc.some(p => p.type === type))
                    return acc;
                acc.push({
                    name: prop.Name,
                    jsonName: null,
                    type,
                    typeSimple: type,
                    isRequired: prop.IsRequired,
                });
                return acc;
            }, []);
        }
    }
    exports.ProxyJsonParams = ProxyJsonParams;
    //# sourceMappingURL=api-definition.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\api-definition.d.ts"><![CDATA[
    import { workspaces } from '@angular-devkit/core';
    import { Tree } from '@angular-devkit/schematics';
    import { Template } from '../enums';
    import { Entity, NavigationProperty, PropertyDef, Type } from '../models';
    export declare function createProxyJsonGenerator(params: ProxyJsonParams): (tree: Tree) => void;
    export declare class ProxyJsonParams {
        solution: string;
        apiName: string;
        moduleName: string;
        projectPath: string;
        namespace: string;
        namePlural: string;
        name: string;
        entityBaseClass: string;
        entityPrimaryKey: string;
        entityPrimaryKeySimple: string;
        entityPath: string;
        enums: Record<string, Type>;
        props: PropertyDef[];
        masterEntity?: Entity;
        bulkDeleteEnabled: boolean;
        checkModuleTemplate: boolean;
        navProps: PropertyDef[];
        shouldExportExcel: boolean;
        navPropsSuffix: string;
        navConnectionProps: PropertyDef[];
        navigationConnections: NavigationProperty[];
        checkConcurrency: boolean;
        constructor({ project, entity, isMS, isModule, ...options }: ProxyJsonParamOptions);
        private createProps;
        private createNavigationConnectionProps;
    }
    declare type ProxyJsonParamOptions = Pick<ProxyJsonParams, 'apiName' | 'moduleName' | 'solution'> & {
        project: workspaces.ProjectDefinition;
        entity: Entity;
        projectTemplate: Template;
        isMS: boolean;
        isModule: boolean;
    };
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\constants\template.js.map"><![CDATA[
    {"version":3,"file":"template.js","sourceRoot":"","sources":["../../../../packages/suite/src/constants/template.ts"],"names":[],"mappings":";;;AAAa,QAAA,0BAA0B,GAAG,0BAA0B,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\constants\template.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NAVIGATION_PROPERTY_SUFFIX = void 0;
    exports.NAVIGATION_PROPERTY_SUFFIX = 'WithNavigationProperties';
    //# sourceMappingURL=template.js.map
    ]]></file>
  <file path="angular\.suite\schematics\constants\template.d.ts"><![CDATA[
    export declare const NAVIGATION_PROPERTY_SUFFIX = "WithNavigationProperties";
    
    ]]></file>
  <file path="angular\.suite\schematics\constants\prop-types.js.map"><![CDATA[
    {"version":3,"file":"prop-types.js","sourceRoot":"","sources":["../../../../packages/suite/src/constants/prop-types.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\constants\prop-types.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PRIMARY_KEY_TYPES = exports.FORM_CONTROLS = exports.PROP_TYPES = void 0;
    const enums_1 = require("../enums");
    exports.PROP_TYPES = new Map([
        ['bool', enums_1.ePropType.Boolean],
        ['byte', enums_1.ePropType.Number],
        ['char', enums_1.ePropType.String],
        ['Date', enums_1.ePropType.String],
        ['DateTime', enums_1.ePropType.String],
        ['DateOnly', enums_1.ePropType.String],
        ['TimeOnly', enums_1.ePropType.String],
        ['decimal', enums_1.ePropType.Number],
        ['double', enums_1.ePropType.Number],
        ['enum', enums_1.ePropType.Number],
        ['float', enums_1.ePropType.Number],
        ['Guid', enums_1.ePropType.String],
        ['int', enums_1.ePropType.Number],
        ['long', enums_1.ePropType.Number],
        ['sbyte', enums_1.ePropType.Number],
        ['short', enums_1.ePropType.Number],
        ['string', enums_1.ePropType.String],
        ['uint', enums_1.ePropType.Number],
        ['ulong', enums_1.ePropType.Number],
        ['ushort', enums_1.ePropType.Number],
        ['File', enums_1.ePropType.String],
    ]);
    exports.FORM_CONTROLS = new Map([
        ['bool', enums_1.eFormControl.Checkbox],
        ['byte', enums_1.eFormControl.Number],
        ['char', enums_1.eFormControl.Text],
        ['Date', enums_1.eFormControl.Date],
        ['DateTime', enums_1.eFormControl.Date],
        ['DateOnly', enums_1.eFormControl.Date],
        ['TimeOnly', enums_1.eFormControl.Time],
        ['decimal', enums_1.eFormControl.Number],
        ['double', enums_1.eFormControl.Number],
        ['enum', enums_1.eFormControl.Select],
        ['float', enums_1.eFormControl.Number],
        ['Guid', enums_1.eFormControl.Text],
        ['int', enums_1.eFormControl.Number],
        ['long', enums_1.eFormControl.Number],
        ['sbyte', enums_1.eFormControl.Number],
        ['short', enums_1.eFormControl.Number],
        ['string', enums_1.eFormControl.Text],
        ['uint', enums_1.eFormControl.Number],
        ['ulong', enums_1.eFormControl.Number],
        ['ushort', enums_1.eFormControl.Number],
        ['File', enums_1.eFormControl.File],
    ]);
    exports.PRIMARY_KEY_TYPES = new Map([
        ['Guid', 'System.Guid'],
        ['int', 'System.Int32'],
        ['long', 'System.Int64'],
        ['string', 'System.String'],
    ]);
    //# sourceMappingURL=prop-types.js.map
    ]]></file>
  <file path="angular\.suite\schematics\constants\prop-types.d.ts"><![CDATA[
    import { eFormControl, ePropType } from '../enums';
    import { ServerDataType } from '../models';
    export declare const PROP_TYPES: Map<ServerDataType, ePropType>;
    export declare const FORM_CONTROLS: Map<ServerDataType, eFormControl>;
    export declare const PRIMARY_KEY_TYPES: Map<"string" | "Guid" | "int" | "long", string>;
    
    ]]></file>
  <file path="angular\.suite\schematics\constants\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../packages/suite/src/constants/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,wCAAsB;AACtB,iDAA+B;AAC/B,6CAA2B;AAC3B,+CAA6B;AAC7B,6CAA2B"}
    ]]></file>
  <file path="angular\.suite\schematics\constants\index.js"><![CDATA[
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require("./abp"), exports);
    __exportStar(require("./base-classes"), exports);
    __exportStar(require("./defaults"), exports);
    __exportStar(require("./prop-types"), exports);
    __exportStar(require("./template"), exports);
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\constants\index.d.ts"><![CDATA[
    export * from './abp';
    export * from './base-classes';
    export * from './defaults';
    export * from './prop-types';
    export * from './template';
    
    ]]></file>
  <file path="angular\.suite\schematics\constants\defaults.js.map"><![CDATA[
    {"version":3,"file":"defaults.js","sourceRoot":"","sources":["../../../../packages/suite/src/constants/defaults.ts"],"names":[],"mappings":";;;AAAa,QAAA,aAAa,GAAG,EAAE,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\constants\defaults.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_SCOPE = void 0;
    exports.DEFAULT_SCOPE = '';
    //# sourceMappingURL=defaults.js.map
    ]]></file>
  <file path="angular\.suite\schematics\constants\defaults.d.ts"><![CDATA[
    export declare const DEFAULT_SCOPE = "";
    
    ]]></file>
  <file path="angular\.suite\schematics\constants\base-classes.js.map"><![CDATA[
    {"version":3,"file":"base-classes.js","sourceRoot":"","sources":["../../../../packages/suite/src/constants/base-classes.ts"],"names":[],"mappings":";;;AAAa,QAAA,YAAY,GAAG,IAAI,GAAG,CAAC;IAClC,CAAC,QAAiB,EAAE,WAAW,CAAC;IAChC,CAAC,eAAwB,EAAE,kBAAkB,CAAC;IAC9C,CAAC,mBAA4B,EAAE,sBAAsB,CAAC;IACtD,CAAC,eAAwB,EAAE,WAAW,CAAC;IACvC,CAAC,sBAA+B,EAAE,kBAAkB,CAAC;IACrD,CAAC,0BAAmC,EAAE,sBAAsB,CAAC;CAC9D,CAAC,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\constants\base-classes.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BASE_CLASSES = void 0;
    exports.BASE_CLASSES = new Map([
        ['Entity', 'EntityDto'],
        ['AuditedEntity', 'AuditedEntityDto'],
        ['FullAuditedEntity', 'FullAuditedEntityDto'],
        ['AggregateRoot', 'EntityDto'],
        ['AuditedAggregateRoot', 'AuditedEntityDto'],
        ['FullAuditedAggregateRoot', 'FullAuditedEntityDto'],
    ]);
    //# sourceMappingURL=base-classes.js.map
    ]]></file>
  <file path="angular\.suite\schematics\constants\base-classes.d.ts"><![CDATA[
    export declare const BASE_CLASSES: Map<"Entity" | "AuditedEntity" | "FullAuditedEntity" | "AggregateRoot" | "AuditedAggregateRoot" | "FullAuditedAggregateRoot", string>;
    
    ]]></file>
  <file path="angular\.suite\schematics\constants\abp.js.map"><![CDATA[
    {"version":3,"file":"abp.js","sourceRoot":"","sources":["../../../../packages/suite/src/constants/abp.ts"],"names":[],"mappings":";;;AAAa,QAAA,mBAAmB,GAAG,mDAAmD,CAAC;AAC1E,QAAA,8BAA8B,GAAG,mBAAmB,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\constants\abp.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ABP_COMMERCIAL_SCHEMATICS_PATH = exports.ABP_SCHEMATICS_PATH = void 0;
    exports.ABP_SCHEMATICS_PATH = './node_modules/@abp/ng.schematics/collection.json';
    exports.ABP_COMMERCIAL_SCHEMATICS_PATH = './collection.json';
    //# sourceMappingURL=abp.js.map
    ]]></file>
  <file path="angular\.suite\schematics\constants\abp.d.ts"><![CDATA[
    export declare const ABP_SCHEMATICS_PATH = "./node_modules/@abp/ng.schematics/collection.json";
    export declare const ABP_COMMERCIAL_SCHEMATICS_PATH = "./collection.json";
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity-template-option.js.map"><![CDATA[
    {"version":3,"file":"entity-template-option.js","sourceRoot":"","sources":["../../../../packages/suite/src/commands/entity-template-option.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity-template-option.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityTemplateOptions = void 0;
    const core_1 = require("@angular-devkit/core");
    const ng_schematics_1 = require("@abp/ng.schematics");
    const enums_1 = require("../enums");
    const cases = require("../utils/text");
    const paths = require("../utils/path");
    const templateUtils = require("../utils/template");
    const utils_1 = require("../utils");
    const constants_1 = require("../constants");
    class EntityTemplateOptions {
        constructor(options) {
            Object.assign(this, cases, core_1.strings, paths, templateUtils, options);
            this.isModule = (0, utils_1.checkIsModule)(this.projectTemplate, this.projectDefinition);
            this.checkConcurrency = options.entity.CheckConcurrency;
            this.isMS = (0, utils_1.checkIsMS)(this.projectTemplate, this.projectDefinition);
            this.scope = this.isMS ? cases.kebab(this.project) : constants_1.DEFAULT_SCOPE;
            this.namespace = this.entity.Namespace;
            this.name = this.entity.Name;
            this.type = this.entity.Type;
            this.childEntities = this.entity.ChildEntities;
            this.masterEntityName = this.entity.MasterEntityName;
            this.masterEntity = this.entity.MasterEntity;
            if (!!this.masterEntity) {
                const primaryKeyType = ng_schematics_1.SYSTEM_TYPES.get(this.masterEntity.PrimaryKeyType);
                if (primaryKeyType) {
                    this.masterEntity.PrimaryKeyType = primaryKeyType;
                }
            }
            this.namePlural = this.entity.NamePlural;
            this.requiredPolicy = this.project + '.' + this.namePlural;
            this.menuIcon = this.entity.MenuIcon;
            this.pageTitle = this.entity.PageTitle;
            this.navPropsSuffix = '';
            if (this.entity.NavigationProperties?.length || this.entity.NavigationConnections?.length) {
                this.navPropsSuffix = constants_1.NAVIGATION_PROPERTY_SUFFIX;
            }
            this.entityNamePrefix = this.navPropsSuffix ? cases.camel(this.name) + '.' : '';
            this.projectPrefix = options.projectPrefix;
            let namespacePath = cases.dir(this.namespace);
            if (!!this.masterEntity) {
                namespacePath = cases.kebab(this.name);
            }
            let relativePath = `${namespacePath}/${cases.kebab(this.name)}`;
            if (!!this.masterEntity) {
                const masterEntityNameSpace = cases.dir(this.masterEntity.Namespace);
                relativePath = `${masterEntityNameSpace}/${cases.kebab(this.name)}`;
            }
            if (this.isModule || this.isMS) {
                this.modulePath = `src/lib/${relativePath}`;
                this.configPath = 'config/src';
            }
            else {
                this.modulePath = `src/app/${relativePath}`;
                this.configPath = this.modulePath;
            }
            this.resourceName = this.isModule || this.isMS ? this.project : '';
            this.enums = (0, utils_1.getEnumsFromEntity)(this.solution, this.entity);
            this.props = (0, utils_1.getPropsFromEntity)(this.solution, this.entity);
            this.navProps = (0, utils_1.getNavPropsFromEntity)(this.solution, this.entity);
            this.navConnections = (0, utils_1.getNavConnectionsFromEntity)(this.solution, this.entity);
            this.navEntities = (0, utils_1.getEntityRefsFromProps)(this.navProps);
            this.bulkDeleteEnabled = this.entity.BulkDeleteEnabled;
            this.hasAdvancedFilterItem =
                this.props.some(p => p.isFilterable) ||
                    this.navProps.some(p => p.isFilterable) ||
                    this.navConnections.some(p => p.isFilterable);
            const navigationList = this.navProps.concat(templateUtils.markNavigationConnections(this.navConnections));
            this.getLookupComponents = {
                hasLookupSelect: navigationList.some(prop => prop.formControl === enums_1.eUiPickType.Dropdown),
                hasLookupTypeahead: navigationList.some(prop => prop.formControl === enums_1.eUiPickType.Typeahead),
                hasLookupModal: navigationList.some(prop => prop.formControl === enums_1.eUiPickType.Modal),
            };
        }
    }
    exports.EntityTemplateOptions = EntityTemplateOptions;
    //# sourceMappingURL=entity-template-option.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity-template-option.d.ts"><![CDATA[
    import { ProjectDefinition } from '@angular-devkit/core/src/workspace';
    import { EntityType, Template } from '../enums';
    import { Entity, EntityRef, Enum, Prop, UsedLookupTypes } from '../models';
    export declare class EntityTemplateOptions {
        isModule: boolean;
        isMS: boolean;
        solution: string;
        project: string;
        projectTemplate: Template;
        projectDefinition: ProjectDefinition;
        scope: string;
        resourceName: string;
        entity: Entity;
        type: EntityType;
        childEntities: Entity[];
        masterEntityName?: string;
        masterEntity?: Entity;
        selector: string;
        namespace: string;
        name: string;
        namePlural: string;
        requiredPolicy: string;
        navPropsSuffix: string;
        entityNamePrefix: string;
        projectPrefix?: string;
        configPath: string;
        modulePath: string;
        props: Prop[];
        navProps: Prop[];
        navConnections: Prop[];
        navEntities: EntityRef[];
        enums: Enum[];
        checkConcurrency: boolean;
        targetPath: string;
        preserveCustomCode: boolean;
        menuIcon?: string;
        bulkDeleteEnabled: boolean;
        hasAdvancedFilterItem: boolean;
        pageTitle?: string;
        getLookupComponents?: UsedLookupTypes;
        constructor(options: Pick<EntityTemplateOptions, 'solution' | 'project' | 'projectTemplate' | 'projectDefinition' | 'selector' | 'projectPrefix' | 'entity' | 'preserveCustomCode' | 'targetPath'>);
    }
    
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Domains\Products\ProductRepositoryTests.cs"><![CDATA[
    using Shouldly;
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using ExampleAbpApplicationLayer.Products;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Domains.Products
    {
        public class ProductRepositoryTests : ExampleAbpApplicationLayerEntityFrameworkCoreTestBase
        {
            private readonly IProductRepository _productRepository;
    
            public ProductRepositoryTests()
            {
                _productRepository = GetRequiredService<IProductRepository>();
            }
    
            [Fact]
            public async Task GetListAsync()
            {
                // Arrange
                await WithUnitOfWorkAsync(async () =>
                {
                    // Act
                    var result = await _productRepository.GetListAsync(
                        name: "11c71ef2c24743f9a15561f887f77ff1af1fc02044ad40b08b2cdee1a9f4227728370b25ec",
                        isActive: true
                    );
    
                    // Assert
                    result.Count.ShouldBe(1);
                    result.FirstOrDefault().ShouldNotBe(null);
                    result.First().Id.ShouldBe(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
                });
            }
    
            [Fact]
            public async Task GetCountAsync()
            {
                // Arrange
                await WithUnitOfWorkAsync(async () =>
                {
                    // Act
                    var result = await _productRepository.GetCountAsync(
                        name: "c75153fbae544e9f9877689c8f8b37be6490c5f01e4348ab93f19a95ea61a964bcbe1532bf6c4cc78beb027269229847db",
                        isActive: true
                    );
    
                    // Assert
                    result.ShouldBe(1);
                });
            }
        }
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Domains\Orders\OrderRepositoryTests.cs"><![CDATA[
    using Shouldly;
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using ExampleAbpApplicationLayer.Orders;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    using Xunit;
    
    namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Domains.Orders
    {
        public class OrderRepositoryTests : ExampleAbpApplicationLayerEntityFrameworkCoreTestBase
        {
            private readonly IOrderRepository _orderRepository;
    
            public OrderRepositoryTests()
            {
                _orderRepository = GetRequiredService<IOrderRepository>();
            }
    
            [Fact]
            public async Task GetListAsync()
            {
                // Arrange
                await WithUnitOfWorkAsync(async () =>
                {
                    // Act
                    var result = await _orderRepository.GetListAsync(
                        status: default
                    );
    
                    // Assert
                    result.Count.ShouldBe(1);
                    result.FirstOrDefault().ShouldNotBe(null);
                    result.First().Id.ShouldBe(Guid.Parse("dcdc247a-f601-486e-9594-a3c6c9351c1c"));
                });
            }
    
            [Fact]
            public async Task GetCountAsync()
            {
                // Arrange
                await WithUnitOfWorkAsync(async () =>
                {
                    // Act
                    var result = await _orderRepository.GetCountAsync(
                        status: default
                    );
    
                    // Assert
                    result.ShouldBe(1);
                });
            }
        }
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Applications\Products\EfCoreProductsAppServiceTests.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Products;
    using Xunit;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.Products;
    
    public class EfCoreProductsAppServiceTests : ProductsAppServiceTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
    {
    }
    ]]></file>
  <file path="test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Applications\Orders\EfCoreOrdersAppServiceTests.cs"><![CDATA[
    using ExampleAbpApplicationLayer.Orders;
    using Xunit;
    using ExampleAbpApplicationLayer.EntityFrameworkCore;
    
    namespace ExampleAbpApplicationLayer.Orders;
    
    public class EfCoreOrdersAppServiceTests : OrdersAppServiceTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
    {
    }
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\rabbitmq\values.yaml"><![CDATA[
    image:
      repository: "rabbitmq"
      tag: "3.12.7-management-alpine"
    ports:
      http: 15672
      amqp: 5672
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\rabbitmq\Chart.yaml"><![CDATA[
    apiVersion: v2
    name: rabbitmq
    version: 1.0.0
    appVersion: "1.0"
    description: Runs RabbitMQ Message Broker Instance
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\sqlserver\values.yaml"><![CDATA[
    port: 1433
    sa_password: "myPassw@rd"
    image:
      repository: "mcr.microsoft.com/azure-sql-edge"
      tag: "1.0.7"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\sqlserver\Chart.yaml"><![CDATA[
    apiVersion: v2
    name: sqlserver
    version: 1.0.0
    appVersion: "1.0"
    description: Runs SQL Server Instance
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\httpapihost\values.yaml"><![CDATA[
    image:
      repository: "exampleabpapplicationlayer/httpapihost"
      tag: "latest"
      pullPolicy: IfNotPresent
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\httpapihost\Chart.yaml"><![CDATA[
    apiVersion: v2
    name: httpapihost
    appVersion: "1.0"
    description: ExampleAbpApplicationLayer HttpApi Host Application
    version: 1.0.0
    type: application
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\angular\values.yaml"><![CDATA[
    image:
      repository: "exampleabpapplicationlayer/angular"
      tag: "latest"
      pullPolicy: IfNotPresent
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\angular\Chart.yaml"><![CDATA[
    apiVersion: v2
    name: angular
    appVersion: "1.0"
    description: ExampleAbpApplicationLayer Angular Application
    version: 1.0.0
    type: application
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\dbmigrator\values.yaml"><![CDATA[
    image:
      repository: "exampleabpapplicationlayer/dbmigrator"
      tag: "latest"
      pullPolicy: IfNotPresent
    authServer:
      clientSecret: "1q2w3e*"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\dbmigrator\Chart.yaml"><![CDATA[
    apiVersion: v2
    name: dbmigrator
    appVersion: "1.0"
    description: ExampleAbpApplicationLayer Database Migrator
    version: 1.0.0
    type: application
    ]]></file>
  <file path="angular\src\app\proxy\orders\order.service.ts"><![CDATA[
    import type {
      GetOrdersInput,
      OrderCreateDto,
      OrderDto,
      OrderExcelDownloadDto,
      OrderUpdateDto,
    } from './models';
    import { RestService, Rest } from '@abp/ng.core';
    import type { PagedResultDto } from '@abp/ng.core';
    import { Injectable } from '@angular/core';
    import type { AppFileDescriptorDto, DownloadTokenResultDto, GetFileInput } from '../shared/models';
    
    @Injectable({
      providedIn: 'root',
    })
    export class OrderService {
      apiName = 'Default';
    
      create = (input: OrderCreateDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderDto>(
          {
            method: 'POST',
            url: '/api/app/orders',
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      delete = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, void>(
          {
            method: 'DELETE',
            url: `/api/app/orders/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      get = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderDto>(
          {
            method: 'GET',
            url: `/api/app/orders/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      getDownloadToken = (config?: Partial<Rest.Config>) =>
        this.restService.request<any, DownloadTokenResultDto>(
          {
            method: 'GET',
            url: '/api/app/orders/download-token',
          },
          { apiName: this.apiName, ...config },
        );
    
      getFile = (input: GetFileInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, Blob>(
          {
            method: 'GET',
            responseType: 'blob',
            url: '/api/app/orders/file',
            params: { downloadToken: input.downloadToken, fileId: input.fileId },
          },
          { apiName: this.apiName, ...config },
        );
    
      getList = (input: GetOrdersInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, PagedResultDto<OrderDto>>(
          {
            method: 'GET',
            url: '/api/app/orders',
            params: {
              filterText: input.filterText,
              sorting: input.sorting,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
              orderDateMin: input.orderDateMin,
              orderDateMax: input.orderDateMax,
              totalAmountMin: input.totalAmountMin,
              totalAmountMax: input.totalAmountMax,
              status: input.status,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      getListAsExcelFile = (input: OrderExcelDownloadDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, Blob>(
          {
            method: 'GET',
            responseType: 'blob',
            url: '/api/app/orders/as-excel-file',
            params: {
              downloadToken: input.downloadToken,
              filterText: input.filterText,
              orderDateMin: input.orderDateMin,
              orderDateMax: input.orderDateMax,
              totalAmountMin: input.totalAmountMin,
              totalAmountMax: input.totalAmountMax,
              status: input.status,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      update = (id: string, input: OrderUpdateDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderDto>(
          {
            method: 'PUT',
            url: `/api/app/orders/${id}`,
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      uploadFile = (input: FormData, config?: Partial<Rest.Config>) =>
        this.restService.request<any, AppFileDescriptorDto>(
          {
            method: 'POST',
            url: '/api/app/orders/upload-file',
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      constructor(private restService: RestService) {}
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\orders\models.ts"><![CDATA[
    import type { FullAuditedEntityDto, PagedAndSortedResultRequestDto } from '@abp/ng.core';
    import type { OrderStatus } from '../enums/orders/order-status.enum';
    
    export interface GetOrdersInput extends PagedAndSortedResultRequestDto {
      filterText?: string;
      orderDateMin?: string;
      orderDateMax?: string;
      totalAmountMin?: number;
      totalAmountMax?: number;
      status?: OrderStatus;
    }
    
    export interface OrderCreateDto {
      orderDate?: string;
      totalAmount: number;
      status: OrderStatus;
    }
    
    export interface OrderDto extends FullAuditedEntityDto<string> {
      orderDate?: string;
      totalAmount: number;
      status: OrderStatus;
      concurrencyStamp?: string;
    }
    
    export interface OrderExcelDownloadDto {
      downloadToken?: string;
      filterText?: string;
      orderDateMin?: string;
      orderDateMax?: string;
      totalAmountMin?: number;
      totalAmountMax?: number;
      status?: OrderStatus;
    }
    
    export interface OrderUpdateDto {
      orderDate?: string;
      totalAmount: number;
      status: OrderStatus;
      concurrencyStamp?: string;
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\orders\index.ts"><![CDATA[
    export * from './models';
    export * from './order.service';
    
    ]]></file>
  <file path="angular\src\app\proxy\products\product.service.ts"><![CDATA[
    import type {
      GetProductsInput,
      ProductCreateDto,
      ProductDto,
      ProductExcelDownloadDto,
      ProductUpdateDto,
    } from './models';
    import { RestService, Rest } from '@abp/ng.core';
    import type { PagedResultDto } from '@abp/ng.core';
    import { Injectable } from '@angular/core';
    import type { AppFileDescriptorDto, DownloadTokenResultDto, GetFileInput } from '../shared/models';
    
    @Injectable({
      providedIn: 'root',
    })
    export class ProductService {
      apiName = 'Default';
    
      create = (input: ProductCreateDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, ProductDto>(
          {
            method: 'POST',
            url: '/api/app/products',
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      delete = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, void>(
          {
            method: 'DELETE',
            url: `/api/app/products/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      deleteAll = (input: GetProductsInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, void>(
          {
            method: 'DELETE',
            url: '/api/app/products/all',
            params: {
              filterText: input.filterText,
              sorting: input.sorting,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
              name: input.name,
              desc: input.desc,
              priceMin: input.priceMin,
              priceMax: input.priceMax,
              isActive: input.isActive,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      deleteByIds = (productIds: string[], config?: Partial<Rest.Config>) =>
        this.restService.request<any, void>(
          {
            method: 'DELETE',
            url: '/api/app/products',
            params: { productIds },
          },
          { apiName: this.apiName, ...config },
        );
    
      get = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, ProductDto>(
          {
            method: 'GET',
            url: `/api/app/products/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      getDownloadToken = (config?: Partial<Rest.Config>) =>
        this.restService.request<any, DownloadTokenResultDto>(
          {
            method: 'GET',
            url: '/api/app/products/download-token',
          },
          { apiName: this.apiName, ...config },
        );
    
      getFile = (input: GetFileInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, Blob>(
          {
            method: 'GET',
            responseType: 'blob',
            url: '/api/app/products/file',
            params: { downloadToken: input.downloadToken, fileId: input.fileId },
          },
          { apiName: this.apiName, ...config },
        );
    
      getList = (input: GetProductsInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, PagedResultDto<ProductDto>>(
          {
            method: 'GET',
            url: '/api/app/products',
            params: {
              filterText: input.filterText,
              sorting: input.sorting,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
              name: input.name,
              desc: input.desc,
              priceMin: input.priceMin,
              priceMax: input.priceMax,
              isActive: input.isActive,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      getListAsExcelFile = (input: ProductExcelDownloadDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, Blob>(
          {
            method: 'GET',
            responseType: 'blob',
            url: '/api/app/products/as-excel-file',
            params: {
              downloadToken: input.downloadToken,
              filterText: input.filterText,
              name: input.name,
              desc: input.desc,
              priceMin: input.priceMin,
              priceMax: input.priceMax,
              isActive: input.isActive,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      update = (id: string, input: ProductUpdateDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, ProductDto>(
          {
            method: 'PUT',
            url: `/api/app/products/${id}`,
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      uploadFile = (input: FormData, config?: Partial<Rest.Config>) =>
        this.restService.request<any, AppFileDescriptorDto>(
          {
            method: 'POST',
            url: '/api/app/products/upload-file',
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      constructor(private restService: RestService) {}
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\products\models.ts"><![CDATA[
    import type { FullAuditedEntityDto, PagedAndSortedResultRequestDto } from '@abp/ng.core';
    
    export interface GetProductsInput extends PagedAndSortedResultRequestDto {
      filterText?: string;
      name?: string;
      desc?: string;
      priceMin?: number;
      priceMax?: number;
      isActive?: boolean;
    }
    
    export interface ProductCreateDto {
      name: string;
      desc?: string;
      price: number;
      isActive: boolean;
    }
    
    export interface ProductDto extends FullAuditedEntityDto<string> {
      name: string;
      desc?: string;
      price: number;
      isActive: boolean;
      concurrencyStamp?: string;
    }
    
    export interface ProductExcelDownloadDto {
      downloadToken?: string;
      filterText?: string;
      name?: string;
      desc?: string;
      priceMin?: number;
      priceMax?: number;
      isActive?: boolean;
    }
    
    export interface ProductUpdateDto {
      name: string;
      desc?: string;
      price: number;
      isActive: boolean;
      concurrencyStamp?: string;
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\products\index.ts"><![CDATA[
    export * from './models';
    export * from './product.service';
    
    ]]></file>
  <file path="angular\src\app\proxy\shared\models.ts"><![CDATA[
    import type { EntityDto, PagedResultRequestDto } from '@abp/ng.core';
    
    export interface AppFileDescriptorDto extends EntityDto<string> {
      name?: string;
      mimeType?: string;
    }
    
    export interface DownloadTokenResultDto {
      token?: string;
    }
    
    export interface GetFileInput {
      downloadToken?: string;
      fileId?: string;
    }
    
    export interface LookupDto<TKey> {
      id: TKey;
      displayName?: string;
    }
    
    export interface LookupRequestDto extends PagedResultRequestDto {
      filter?: string;
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\shared\index.ts"><![CDATA[
    export * from './models';
    
    ]]></file>
  <file path="angular\src\app\proxy\order-items\order-item.service.ts"><![CDATA[
    import type {
      GetOrderItemListInput,
      GetOrderItemsInput,
      OrderItemCreateDto,
      OrderItemDto,
      OrderItemUpdateDto,
      OrderItemWithNavigationPropertiesDto,
    } from './models';
    import { RestService, Rest } from '@abp/ng.core';
    import type { PagedResultDto } from '@abp/ng.core';
    import { Injectable } from '@angular/core';
    import type {
      AppFileDescriptorDto,
      DownloadTokenResultDto,
      GetFileInput,
      LookupDto,
      LookupRequestDto,
    } from '../shared/models';
    
    @Injectable({
      providedIn: 'root',
    })
    export class OrderItemService {
      apiName = 'Default';
    
      create = (input: OrderItemCreateDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderItemDto>(
          {
            method: 'POST',
            url: '/api/app/order-items',
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      delete = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, void>(
          {
            method: 'DELETE',
            url: `/api/app/order-items/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      get = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderItemDto>(
          {
            method: 'GET',
            url: `/api/app/order-items/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      getDownloadToken = (config?: Partial<Rest.Config>) =>
        this.restService.request<any, DownloadTokenResultDto>(
          {
            method: 'GET',
            url: '/api/app/order-items/download-token',
          },
          { apiName: this.apiName, ...config },
        );
    
      getFile = (input: GetFileInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, Blob>(
          {
            method: 'GET',
            responseType: 'blob',
            url: '/api/app/order-items/file',
            params: { downloadToken: input.downloadToken, fileId: input.fileId },
          },
          { apiName: this.apiName, ...config },
        );
    
      getList = (input: GetOrderItemsInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, PagedResultDto<OrderItemWithNavigationPropertiesDto>>(
          {
            method: 'GET',
            url: '/api/app/order-items',
            params: {
              orderId: input.orderId,
              filterText: input.filterText,
              sorting: input.sorting,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
              qtyMin: input.qtyMin,
              qtyMax: input.qtyMax,
              priceMin: input.priceMin,
              priceMax: input.priceMax,
              totalPriceMin: input.totalPriceMin,
              totalPriceMax: input.totalPriceMax,
              productName: input.productName,
              productId: input.productId,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      getListByOrderId = (input: GetOrderItemListInput, config?: Partial<Rest.Config>) =>
        this.restService.request<any, PagedResultDto<OrderItemWithNavigationPropertiesDto>>(
          {
            method: 'GET',
            url: '/api/app/order-items/by-order',
            params: {
              orderId: input.orderId,
              filterText: input.filterText,
              sorting: input.sorting,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      getListWithNavigationPropertiesByOrderId = (
        input: GetOrderItemListInput,
        config?: Partial<Rest.Config>,
      ) =>
        this.restService.request<any, PagedResultDto<OrderItemWithNavigationPropertiesDto>>(
          {
            method: 'GET',
            url: '/api/app/order-items/detailed/by-order',
            params: {
              orderId: input.orderId,
              filterText: input.filterText,
              sorting: input.sorting,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      getProductLookup = (input: LookupRequestDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, PagedResultDto<LookupDto<string>>>(
          {
            method: 'GET',
            url: '/api/app/order-items/product-lookup',
            params: {
              filter: input.filter,
              skipCount: input.skipCount,
              maxResultCount: input.maxResultCount,
            },
          },
          { apiName: this.apiName, ...config },
        );
    
      getWithNavigationProperties = (id: string, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderItemWithNavigationPropertiesDto>(
          {
            method: 'GET',
            url: `/api/app/order-items/with-navigation-properties/${id}`,
          },
          { apiName: this.apiName, ...config },
        );
    
      update = (id: string, input: OrderItemUpdateDto, config?: Partial<Rest.Config>) =>
        this.restService.request<any, OrderItemDto>(
          {
            method: 'PUT',
            url: `/api/app/order-items/${id}`,
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      uploadFile = (input: FormData, config?: Partial<Rest.Config>) =>
        this.restService.request<any, AppFileDescriptorDto>(
          {
            method: 'POST',
            url: '/api/app/order-items/upload-file',
            body: input,
          },
          { apiName: this.apiName, ...config },
        );
    
      constructor(private restService: RestService) {}
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\order-items\models.ts"><![CDATA[
    import type { FullAuditedEntityDto, PagedAndSortedResultRequestDto } from '@abp/ng.core';
    import type { ProductDto } from '../products/models';
    
    export interface GetOrderItemListInput extends PagedAndSortedResultRequestDto {
      filterText?: string;
      orderId: string;
    }
    
    export interface GetOrderItemsInput extends PagedAndSortedResultRequestDto {
      filterText?: string;
      qtyMin?: number;
      qtyMax?: number;
      priceMin?: number;
      priceMax?: number;
      totalPriceMin?: number;
      totalPriceMax?: number;
      productName?: string;
      productId?: string;
      orderId: string;
    }
    
    export interface OrderItemCreateDto {
      qty: number;
      price: number;
      totalPrice: number;
      productName?: string;
      productId: string;
    }
    
    export interface OrderItemDto extends FullAuditedEntityDto<string> {
      qty: number;
      price: number;
      totalPrice: number;
      productName?: string;
      productId: string;
    }
    
    export interface OrderItemUpdateDto {
      qty: number;
      price: number;
      totalPrice: number;
      productName?: string;
      productId: string;
    }
    
    export interface OrderItemWithNavigationPropertiesDto {
      orderItem: OrderItemDto;
      product: ProductDto;
    }
    
    ]]></file>
  <file path="angular\src\app\proxy\order-items\index.ts"><![CDATA[
    export * from './models';
    export * from './order-item.service';
    
    ]]></file>
  <file path="angular\src\app\proxy\enums\index.ts"><![CDATA[
    import * as Orders from './orders';
    export { Orders };
    
    ]]></file>
  <file path="angular\src\app\orders\order\order-routes.ts"><![CDATA[
    import { Routes } from '@angular/router';
    import { authGuard, permissionGuard } from '@abp/ng.core';
    
    export const ORDER_ROUTES: Routes = [
      {
        path: '',
        loadComponent: () => {
          return import('./components/order.component').then(c => c.OrderComponent);
        },
        canActivate: [authGuard, permissionGuard],
      },
    ];
    
    ]]></file>
  <file path="angular\src\app\products\product\product-routes.ts"><![CDATA[
    import { Routes } from '@angular/router';
    import { authGuard, permissionGuard } from '@abp/ng.core';
    
    export const PRODUCT_ROUTES: Routes = [
      {
        path: '',
        loadComponent: () => {
          return import('./components/product.component').then(c => c.ProductComponent);
        },
        canActivate: [authGuard, permissionGuard],
      },
    ];
    
    ]]></file>
  <file path="angular\src\app\gdpr-cookie-consent\privacy-policy\privacy-policy.component.ts"><![CDATA[
    import { Component } from '@angular/core';
    
    @Component({
      selector: 'abp-privacy-policy',
      templateUrl: './privacy-policy.component.html',
    })
    export class PrivacyPolicyComponent {}
    
    ]]></file>
  <file path="angular\src\app\gdpr-cookie-consent\privacy-policy\privacy-policy.component.html"><![CDATA[
    <div class="container">
      <h1 class="text-center">Privacy Policy</h1>
    
      <div class="section-1 my-5">
        <h2>Privacy Notice</h2>
        <p>
          This privacy notice for ExampleAbpApplicationLayer ("Company," "we," "us," or "our"),
          describes how and why we might collect, store, use, and/or share ("process") your information
          when you use our services ("Services"), such as when you:
        </p>
    
        <ul>
          <li>Visit our website, or any website of ours that links to this privacy notice</li>
          <li>Engage with us in other related ways, including any sales, marketing, or events</li>
        </ul>
    
        <p>
          <b>Questions or concerns?</b> Reading this privacy notice will help you understand your
          privacy rights and choices. If you do not agree with our policies and practices, please do not
          use our Services. If you still have any questions or concerns, please contact us at
          __________.
        </p>
      </div>
    
      <div class="section-2 my-5">
        <h2>Summary of Key Points</h2>
    
        <p>
          <b>What personal information do we process?</b> When you visit, use, or navigate our Services,
          we may process personal information depending on how you interact with
          ExampleAbpApplicationLayer and the Services, the choices you make, and the products and
          features you use.
        </p>
    
        <p>
          <b>Do we process any sensitive personal information?</b> We do not process sensitive personal
          information.
        </p>
    
        <p><b>Do we receive any information from third parties?</b> No, we don't.</p>
    
        <p>
          <b>How do we process your information?</b> We process your information to provide, improve,
          and administer our Services, communicate with you, for security and fraud prevention, and to
          comply with law. We may also process your information for other purposes with your consent. We
          process your information only when we have a valid legal reason to do so.
        </p>
    
        <p>
          <b>What are your rights?</b> Depending on where you are located geographically, the applicable
          privacy law may mean you have certain rights regarding your personal information.
        </p>
      </div>
    
      <div class="section-3 my-5">
        <h2>1. What Information Do We Collect?</h2>
    
        <p></p>
        <h4>Personal information you disclose to us</h4>
    
        <p>
          We collect personal information that you voluntarily provide to us when you register on the
          Services, express an interest in obtaining information about us or our products and Services,
          when you participate in activities on the Services, or otherwise when you contact us.
        </p>
      </div>
    
      <div class="section-4 my-5">
        <h2>2. HOW DO WE PROCESS YOUR INFORMATION?</h2>
    
        <p>
          We process your information to provide, improve, and administer our Services, communicate with
          you, for security and fraud prevention, and to comply with law. We may also process your
          information for other purposes with your consent.
        </p>
      </div>
    
      <div class="section-5 my-5">
        <h2>3. WHAT ARE YOUR PRIVACY RIGHTS?</h2>
    
        <p>
          In some regions, such as the European Economic Area (EEA), United Kingdom (UK), and Canada,
          you have rights that allow you greater access to and control over your personal information.
          You may review, change, or terminate your account at any time.
        </p>
      </div>
    
      <div class="section-6 my-5">
        <h2>4. HOW CAN YOU CONTACT US ABOUT THIS NOTICE?</h2>
    
        <p>If you have questions or comments about this notice, you may email us at __________.</p>
      </div>
    
      <div class="section-7 my-5">
        <h2>5. HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU?</h2>
    
        <p>
          Based on the applicable laws of your country, you may have the right to request access to the
          personal information we collect from you, change that information, or delete it. To request to
          review, or delete your personal information, please visit the personal data page.
        </p>
      </div>
    </div>
    
    ]]></file>
  <file path="angular\src\app\gdpr-cookie-consent\cookie-policy\cookie-policy.component.ts"><![CDATA[
    import { Component } from '@angular/core';
    
    @Component({
      selector: 'abp-cookie-policy',
      templateUrl: './cookie-policy.component.html',
    })
    export class CookiePolicyComponent {}
    
    ]]></file>
  <file path="angular\src\app\gdpr-cookie-consent\cookie-policy\cookie-policy.component.html"><![CDATA[
    <div class="container">
      <h1 class="text-center">Cookie Policy</h1>
    
      <div class="section-1 my-5">
        <p>
          This cookie policy explains how cookies and similar technologies are used by
          ExampleAbpApplicationLayer ("we", "or" or "us") on our websites and other online services
          (like applications, portals or other services that use cookies).
        </p>
      </div>
    
      <div class="section-2 my-5">
        <h2>What are cookies and why do we use them?</h2>
    
        <p>
          Cookies are small text files stored in your browser’s memory by our websites. They are
          commonly used to support various functions on our websites.
        </p>
    
        <p>
          Cookies do other very useful jobs, such as tell us which pages you visited the most,
          understand how effective our website has been to you, and improve our communication to you on
          our products and services.
        </p>
    
        <p>
          We do not use cookies to collect information that directly identifies you as an individual.
          However, some information collected by cookies may be treated as personal data (such as your
          browsing history, or your device information).
        </p>
    
        <p>
          Depending on the job the cookie needs to perform, it may be a session or persistent cookie:
        </p>
    
        <ul>
          <li>
            Persistent cookies are retained on your device until you either erase them or your browser
            erases them when the cookie reaches its expiration date.
          </li>
          <li>
            Session cookies are temporary and expire once you close your browser or once your session
            ends.
          </li>
        </ul>
      </div>
    
      <div class="section-3 my-5">
        <h2>What type of cookies do we use?</h2>
    
        <p>
          We only use the "Strictly Necessary" cookies on our website to improve user experience and
          these cookies are required to websites effectively run.
        </p>
    
        <div>
          <h3>Strictly Neccessary Cookies</h3>
    
          <table class="table">
            <thead>
              <tr>
                <th>Cookie</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>AspNetCore.Antiforgery.*</td>
                <td>Helps prevent Cross-Site Request Forgery (CSRF) attacks.</td>
              </tr>
              <tr>
                <td>XSRF-TOKEN</td>
                <td>
                  Ensures visitor browsing-security by preventing cross-site request forgery. This
                  cookie is essential for the security of the website and visitor.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    
    ]]></file>
  <file path="angular\src\app\dashboard\tenant-dashboard\tenant-dashboard.component.ts"><![CDATA[
    import { Component, OnDestroy } from '@angular/core';
    
    @Component({
      selector: 'app-tenant-dashboard',
      templateUrl: './tenant-dashboard.component.html',
      styleUrls: ['./tenant-dashboard.component.scss'],
    })
    export class TenantDashboardComponent implements OnDestroy {
    
      ngOnDestroy(): void {}
    }
    
    ]]></file>
  <file path="angular\src\app\dashboard\tenant-dashboard\tenant-dashboard.component.scss"></file>
  <file path="angular\src\app\dashboard\tenant-dashboard\tenant-dashboard.component.html"><![CDATA[
    <div class="row entry-row">
      <div class="col">
        <div class="card">
          <div class="card-body">
            Add your Tenant related charts/widgets to this page !
          </div>
        </div>
      </div>
    </div>
    ]]></file>
  <file path="angular\src\app\dashboard\host-dashboard\host-dashboard.component.ts"><![CDATA[
    import { AfterViewInit, Component, ViewChild, inject } from '@angular/core';
    import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
    import {
      NgbDateAdapter,
      NgbDateNativeAdapter,
      NgbDatepickerModule,
    } from '@ng-bootstrap/ng-bootstrap';
    import { LocalizationPipe, PermissionDirective } from '@abp/ng.core';
    import { PageComponent } from '@abp/ng.components/page';
    import { DateRangePickerComponent } from '@volo/abp.commercial.ng.ui';
    import {
      AverageExecutionDurationWidgetComponent,
      ErrorRateWidgetComponent,
    } from '@volo/abp.ng.audit-logging';
    import { EditionsUsageWidgetComponent, LatestTenantsWidgetComponent } from '@volo/abp.ng.saas';
    
    const now = new Date();
    const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
    
    @Component({
      selector: 'app-host-dashboard',
      templateUrl: './host-dashboard.component.html',
      styleUrls: ['./host-dashboard.component.scss'],
      imports: [
        AverageExecutionDurationWidgetComponent,
        ErrorRateWidgetComponent,
        EditionsUsageWidgetComponent,
        LatestTenantsWidgetComponent,
        FormsModule,
        ReactiveFormsModule,
        NgbDatepickerModule,
        PageComponent,
        DateRangePickerComponent,
        PermissionDirective,
        LocalizationPipe,
      ],
      providers: [{ provide: NgbDateAdapter, useClass: NgbDateNativeAdapter }],
    })
    
    export class HostDashboardComponent implements AfterViewInit {
      fb = inject(FormBuilder);
    
      @ViewChild('errorRateWidget', { static: false })
      errorRateWidget: ErrorRateWidgetComponent;
    
      @ViewChild('averageExecutionDurationWidget', { static: false })
      averageExecutionDurationWidget: AverageExecutionDurationWidgetComponent;
    
      @ViewChild('editionsUsageWidget', { static: false })
      editionsUsageWidget: EditionsUsageWidgetComponent;
    
      @ViewChild('latestTenantsWidget', { static: false })
      latestTenantsWidget: LatestTenantsWidgetComponent;
    
      toDate = now;
      fromDate = oneMonthAgo;
    
      formFilters = this.fb.group({
        times: [
          {
            fromDate: this.fromDate,
            toDate: this.toDate,
          },
        ],
      });
      
      ngAfterViewInit() {
        this.refresh();
      }
    
      refresh() {
        const { fromDate, toDate } = {
          ...this.formFilters.value.times,
        };
    
        const startDate = this.convertToString(fromDate);
        const endDate = this.convertToString(toDate);
        this.errorRateWidget?.draw({ startDate, endDate });
        this.averageExecutionDurationWidget?.draw({ startDate, endDate });
        this.editionsUsageWidget?.draw();
        this.latestTenantsWidget?.draw();
      }
      
      private convertToString(value: Date): string {
        return value.toLocalISOString();
      }
    }
    
    ]]></file>
  <file path="angular\src\app\dashboard\host-dashboard\host-dashboard.component.scss"></file>
  <file path="angular\src\app\dashboard\host-dashboard\host-dashboard.component.html"><![CDATA[
    <abp-page [title]="'::Menu:Dashboard' | abpLocalization">
      <div class="card">
        <div class="card-body">
          <form [formGroup]="formFilters" (ngSubmit)="refresh()">
            <div id="datepicker" class="input-daterange row align-items-center justify-content-center">
              <div class="col-12 col-lg-auto col-md-6 mb-3 mb-lg-0">
                <abp-date-range-picker
                  formControlName="times"
                  id="times"
                  [labelText]="'::Date' | abpLocalization"
                  startDateProp="fromDate"
                  endDateProp="toDate"
                />
              </div>
              <div class="col-12 col-lg-2 col-md-12">
                <button type="submit" class="btn btn-primary btn-block">
                  <i class="fa fa-refresh me-1" aria-hidden="true"></i>
                  <span>{{ 'AbpAuditLogging::Refresh' | abpLocalization }}</span>
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    
      <div id="DashboardWidgetsArea">
        <div class="row">
          <div class="col col-md-12 col-lg-6" *abpPermission="'AuditLogging.AuditLogs'">
            <abp-error-rate-widget #errorRateWidget [height]="250" />
          </div>
    
          <div class="col col-md-12 col-lg-6" *abpPermission="'AuditLogging.AuditLogs'">
            <abp-average-execution-duration-widget #averageExecutionDurationWidget [height]="250" />
          </div>
    
          <div class="col col-md-12 col-lg-6" *abpPermission="'Saas.Tenants'">
            <abp-editions-usage-widget #editionsUsageWidget [height]="250" />
          </div>
    
          <div class="col col-md-12 col-lg-6" *abpPermission="'Saas.Tenants'">
            <abp-latest-tenants-widget #latestTenantsWidget [minHeight]="250" />
          </div>
    
        </div>
      </div>
    </abp-page>
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\workspace.js.map"><![CDATA[
    {"version":3,"file":"workspace.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/workspace.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\workspace.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allTargetOptions = exports.allWorkspaceTargets = exports.createDefaultPath = exports.buildDefaultPath = exports.writeWorkspace = exports.getWorkspace = exports.updateWorkspace = exports.TreeWorkspaceHost = void 0;
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const workspace_models_1 = require("./workspace-models");
    const DEFAULT_WORKSPACE_PATH = '/angular.json';
    /**
     * A {@link workspaces.WorkspaceHost} backed by a Schematics {@link Tree} instance.
     */
    class TreeWorkspaceHost {
        constructor(tree) {
            this.tree = tree;
        }
        async readFile(path) {
            return this.tree.readText(path);
        }
        async writeFile(path, data) {
            if (this.tree.exists(path)) {
                this.tree.overwrite(path, data);
            }
            else {
                this.tree.create(path, data);
            }
        }
        async isDirectory(path) {
            // approximate a directory check
            return !this.tree.exists(path) && this.tree.getDir(path).subfiles.length > 0;
        }
        async isFile(path) {
            return this.tree.exists(path);
        }
    }
    exports.TreeWorkspaceHost = TreeWorkspaceHost;
    /**
     * Updates the workspace file (`angular.json`) found within the root of the schematic's tree.
     * The workspace object model can be directly modified within the provided updater function
     * with changes being written to the workspace file after the updater function returns.
     * The spacing and overall layout of the file (including comments) will be maintained where
     * possible when updating the file.
     *
     * @param updater An update function that can be used to modify the object model for the
     * workspace. A {@link WorkspaceDefinition} is provided as the first argument to the function.
     */
    function updateWorkspace(updater) {
        return async (host) => {
            const workspace = await getWorkspace(host);
            const result = await updater(workspace);
            await core_1.workspaces.writeWorkspace(workspace, new TreeWorkspaceHost(host));
            return result || schematics_1.noop;
        };
    }
    exports.updateWorkspace = updateWorkspace;
    // TODO: This should be renamed `readWorkspace` once deep imports are restricted (already exported from `utility` with that name)
    /**
     * Reads a workspace file (`angular.json`) from the provided {@link Tree} instance.
     *
     * @param tree A schematics {@link Tree} instance used to access the workspace file.
     * @param path The path where a workspace file should be found. If a file is specified, the file
     * path will be used. If a directory is specified, the file `angular.json` will be used from
     * within the specified directory. Defaults to `/angular.json`.
     * @returns A {@link WorkspaceDefinition} representing the workspace found at the specified path.
     */
    async function getWorkspace(tree, path = DEFAULT_WORKSPACE_PATH) {
        const host = new TreeWorkspaceHost(tree);
        const { workspace } = await core_1.workspaces.readWorkspace(path, host);
        return workspace;
    }
    exports.getWorkspace = getWorkspace;
    /**
     * Writes a workspace file (`angular.json`) to the provided {@link Tree} instance.
     * The spacing and overall layout of an exisitng file (including comments) will be maintained where
     * possible when writing the file.
     *
     * @param tree A schematics {@link Tree} instance used to access the workspace file.
     * @param workspace The {@link WorkspaceDefinition} to write.
     * @param path The path where a workspace file should be written. If a file is specified, the file
     * path will be used. If not provided, the definition's underlying file path stored during reading
     * will be used.
     */
    async function writeWorkspace(tree, workspace, path) {
        const host = new TreeWorkspaceHost(tree);
        return core_1.workspaces.writeWorkspace(workspace, host, path);
    }
    exports.writeWorkspace = writeWorkspace;
    /**
     * Build a default project path for generating.
     * @param project The project which will have its default path generated.
     */
    function buildDefaultPath(project) {
        const root = project.sourceRoot ? `/${project.sourceRoot}/` : `/${project.root}/src/`;
        const projectDirName = project.extensions['projectType'] === workspace_models_1.ProjectType.Application ? 'app' : 'lib';
        return `${root}${projectDirName}`;
    }
    exports.buildDefaultPath = buildDefaultPath;
    async function createDefaultPath(tree, projectName) {
        const workspace = await getWorkspace(tree);
        const project = workspace.projects.get(projectName);
        if (!project) {
            throw new Error(`Project "${projectName}" does not exist.`);
        }
        return buildDefaultPath(project);
    }
    exports.createDefaultPath = createDefaultPath;
    function* allWorkspaceTargets(workspace) {
        for (const [projectName, project] of workspace.projects) {
            for (const [targetName, target] of project.targets) {
                yield [targetName, target, projectName, project];
            }
        }
    }
    exports.allWorkspaceTargets = allWorkspaceTargets;
    function* allTargetOptions(target, skipBaseOptions = false) {
        if (!skipBaseOptions && target.options) {
            yield [undefined, target.options];
        }
        if (!target.configurations) {
            return;
        }
        for (const [name, options] of Object.entries(target.configurations)) {
            if (options !== undefined) {
                yield [name, options];
            }
        }
    }
    exports.allTargetOptions = allTargetOptions;
    //# sourceMappingURL=workspace.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\workspace.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { json, workspaces } from '@angular-devkit/core';
    import { Rule, Tree } from '@angular-devkit/schematics';
    export declare type WorkspaceDefinition = workspaces.WorkspaceDefinition;
    export declare type ProjectDefinition = workspaces.ProjectDefinition;
    export declare type TargetDefinition = workspaces.TargetDefinition;
    /**
     * A {@link workspaces.WorkspaceHost} backed by a Schematics {@link Tree} instance.
     */
    export declare class TreeWorkspaceHost implements workspaces.WorkspaceHost {
        private readonly tree;
        constructor(tree: Tree);
        readFile(path: string): Promise<string>;
        writeFile(path: string, data: string): Promise<void>;
        isDirectory(path: string): Promise<boolean>;
        isFile(path: string): Promise<boolean>;
    }
    /**
     * Updates the workspace file (`angular.json`) found within the root of the schematic's tree.
     * The workspace object model can be directly modified within the provided updater function
     * with changes being written to the workspace file after the updater function returns.
     * The spacing and overall layout of the file (including comments) will be maintained where
     * possible when updating the file.
     *
     * @param updater An update function that can be used to modify the object model for the
     * workspace. A {@link WorkspaceDefinition} is provided as the first argument to the function.
     */
    export declare function updateWorkspace(updater: (workspace: WorkspaceDefinition) => void | Rule | PromiseLike<void | Rule>): Rule;
    /**
     * Reads a workspace file (`angular.json`) from the provided {@link Tree} instance.
     *
     * @param tree A schematics {@link Tree} instance used to access the workspace file.
     * @param path The path where a workspace file should be found. If a file is specified, the file
     * path will be used. If a directory is specified, the file `angular.json` will be used from
     * within the specified directory. Defaults to `/angular.json`.
     * @returns A {@link WorkspaceDefinition} representing the workspace found at the specified path.
     */
    export declare function getWorkspace(tree: Tree, path?: string): Promise<WorkspaceDefinition>;
    /**
     * Writes a workspace file (`angular.json`) to the provided {@link Tree} instance.
     * The spacing and overall layout of an exisitng file (including comments) will be maintained where
     * possible when writing the file.
     *
     * @param tree A schematics {@link Tree} instance used to access the workspace file.
     * @param workspace The {@link WorkspaceDefinition} to write.
     * @param path The path where a workspace file should be written. If a file is specified, the file
     * path will be used. If not provided, the definition's underlying file path stored during reading
     * will be used.
     */
    export declare function writeWorkspace(tree: Tree, workspace: WorkspaceDefinition, path?: string): Promise<void>;
    /**
     * Build a default project path for generating.
     * @param project The project which will have its default path generated.
     */
    export declare function buildDefaultPath(project: workspaces.ProjectDefinition): string;
    export declare function createDefaultPath(tree: Tree, projectName: string): Promise<string>;
    export declare function allWorkspaceTargets(workspace: workspaces.WorkspaceDefinition): Iterable<[string, workspaces.TargetDefinition, string, workspaces.ProjectDefinition]>;
    export declare function allTargetOptions(target: workspaces.TargetDefinition, skipBaseOptions?: boolean): Iterable<[string | undefined, Record<string, json.JsonValue | undefined>]>;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\workspace-models.js.map"><![CDATA[
    {"version":3,"file":"workspace-models.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/workspace-models.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,0CAA2B,CAAA;IAC3B,kCAAmB,CAAA;AACrB,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAED;;;;;GAKG;AACH,IAAY,QAmBX;AAnBD,WAAY,QAAQ;IAClB,qEAAyD,CAAA;IACzD,gEAAoD,CAAA;IACpD,2DAA+C,CAAA;IAC/C,6DAAiD,CAAA;IACjD,yEAA6D,CAAA;IAC7D,iEAAqD,CAAA;IACrD,4EAAgE,CAAA;IAChE,yDAA6C,CAAA;IAC7C,+CAAmC,CAAA;IACnC,2DAA+C,CAAA;IAC/C,kEAAsD,CAAA;IACtD,wDAA4C,CAAA;IAC5C,kEAAsD,CAAA;IACtD,wDAA4C,CAAA;IAC5C,sEAA0D,CAAA;IAC1D,4DAAgD,CAAA;IAChD,2EAA+D,CAAA;IAC/D,2DAA+C,CAAA;AACjD,CAAC,EAnBW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAmBnB"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\workspace-models.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Builders = exports.ProjectType = void 0;
    var ProjectType;
    (function (ProjectType) {
        ProjectType["Application"] = "application";
        ProjectType["Library"] = "library";
    })(ProjectType = exports.ProjectType || (exports.ProjectType = {}));
    /**
     * An enum of the official Angular builders.
     * Each enum value provides the fully qualified name of the associated builder.
     * This enum can be used when analyzing the `builder` fields of project configurations from the
     * `angular.json` workspace file.
     */
    var Builders;
    (function (Builders) {
        Builders["Application"] = "@angular-devkit/build-angular:application";
        Builders["AppShell"] = "@angular-devkit/build-angular:app-shell";
        Builders["Server"] = "@angular-devkit/build-angular:server";
        Builders["Browser"] = "@angular-devkit/build-angular:browser";
        Builders["SsrDevServer"] = "@angular-devkit/build-angular:ssr-dev-server";
        Builders["Prerender"] = "@angular-devkit/build-angular:prerender";
        Builders["BrowserEsbuild"] = "@angular-devkit/build-angular:browser-esbuild";
        Builders["Karma"] = "@angular-devkit/build-angular:karma";
        Builders["BuildKarma"] = "@angular/build:karma";
        Builders["TsLint"] = "@angular-devkit/build-angular:tslint";
        Builders["NgPackagr"] = "@angular-devkit/build-angular:ng-packagr";
        Builders["BuildNgPackagr"] = "@angular/build:ng-packagr";
        Builders["DevServer"] = "@angular-devkit/build-angular:dev-server";
        Builders["BuildDevServer"] = "@angular/build:dev-server";
        Builders["ExtractI18n"] = "@angular-devkit/build-angular:extract-i18n";
        Builders["BuildExtractI18n"] = "@angular/build:extract-i18n";
        Builders["Protractor"] = "@angular-devkit/build-angular:private-protractor";
        Builders["BuildApplication"] = "@angular/build:application";
    })(Builders = exports.Builders || (exports.Builders = {}));
    //# sourceMappingURL=workspace-models.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\workspace-models.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export declare enum ProjectType {
        Application = "application",
        Library = "library"
    }
    /**
     * An enum of the official Angular builders.
     * Each enum value provides the fully qualified name of the associated builder.
     * This enum can be used when analyzing the `builder` fields of project configurations from the
     * `angular.json` workspace file.
     */
    export declare enum Builders {
        Application = "@angular-devkit/build-angular:application",
        AppShell = "@angular-devkit/build-angular:app-shell",
        Server = "@angular-devkit/build-angular:server",
        Browser = "@angular-devkit/build-angular:browser",
        SsrDevServer = "@angular-devkit/build-angular:ssr-dev-server",
        Prerender = "@angular-devkit/build-angular:prerender",
        BrowserEsbuild = "@angular-devkit/build-angular:browser-esbuild",
        Karma = "@angular-devkit/build-angular:karma",
        BuildKarma = "@angular/build:karma",
        TsLint = "@angular-devkit/build-angular:tslint",
        NgPackagr = "@angular-devkit/build-angular:ng-packagr",
        BuildNgPackagr = "@angular/build:ng-packagr",
        DevServer = "@angular-devkit/build-angular:dev-server",
        BuildDevServer = "@angular/build:dev-server",
        ExtractI18n = "@angular-devkit/build-angular:extract-i18n",
        BuildExtractI18n = "@angular/build:extract-i18n",
        Protractor = "@angular-devkit/build-angular:private-protractor",
        BuildApplication = "@angular/build:application"
    }
    export interface FileReplacements {
        replace: string;
        with: string;
    }
    export interface BrowserBuilderBaseOptions {
        main: string;
        tsConfig: string;
        fileReplacements?: FileReplacements[];
        outputPath?: string;
        index?: string;
        polyfills: string;
        assets?: (object | string)[];
        styles?: (object | string)[];
        scripts?: (object | string)[];
        sourceMap?: boolean;
    }
    export declare type OutputHashing = 'all' | 'media' | 'none' | 'bundles';
    export interface BrowserBuilderOptions extends BrowserBuilderBaseOptions {
        serviceWorker?: boolean;
        optimization?: boolean;
        outputHashing?: OutputHashing;
        resourcesOutputPath?: string;
        namedChunks?: boolean;
        aot?: boolean;
        extractLicenses?: boolean;
        vendorChunk?: boolean;
        buildOptimizer?: boolean;
        ngswConfigPath?: string;
        budgets?: {
            type: string;
            maximumWarning?: string;
            maximumError?: string;
        }[];
        webWorkerTsConfig?: string;
    }
    export interface ServeBuilderOptions {
        buildTarget: string;
    }
    export interface LibraryBuilderOptions {
        tsConfig: string;
        project: string;
    }
    export interface ServerBuilderOptions {
        outputPath: string;
        tsConfig: string;
        main: string;
        fileReplacements?: FileReplacements[];
        optimization?: boolean | {
            scripts?: boolean;
            styles?: boolean;
        };
        sourceMap?: boolean | {
            scripts?: boolean;
            styles?: boolean;
            hidden?: boolean;
            vendor?: boolean;
        };
    }
    export interface AppShellBuilderOptions {
        browserTarget: string;
        serverTarget: string;
        route: string;
    }
    export interface TestBuilderOptions extends Partial<BrowserBuilderBaseOptions> {
        karmaConfig: string;
    }
    export interface ExtractI18nOptions {
        browserTarget: string;
    }
    export interface E2EOptions {
        protractorConfig: string;
        devServerTarget: string;
    }
    export interface BuilderTarget<TBuilder extends Builders, TOptions> {
        builder: TBuilder;
        options: TOptions;
        configurations?: {
            production: Partial<TOptions>;
            [key: string]: Partial<TOptions>;
        };
    }
    export declare type LibraryBuilderTarget = BuilderTarget<Builders.NgPackagr, LibraryBuilderOptions>;
    export declare type BrowserBuilderTarget = BuilderTarget<Builders.Browser, BrowserBuilderOptions>;
    export declare type ServerBuilderTarget = BuilderTarget<Builders.Server, ServerBuilderOptions>;
    export declare type AppShellBuilderTarget = BuilderTarget<Builders.AppShell, AppShellBuilderOptions>;
    export declare type TestBuilderTarget = BuilderTarget<Builders.Karma, TestBuilderOptions>;
    export declare type ServeBuilderTarget = BuilderTarget<Builders.DevServer, ServeBuilderOptions>;
    export declare type ExtractI18nBuilderTarget = BuilderTarget<Builders.ExtractI18n, ExtractI18nOptions>;
    export declare type E2EBuilderTarget = BuilderTarget<Builders.Protractor, E2EOptions>;
    interface WorkspaceCLISchema {
        warnings?: Record<string, boolean>;
        schematicCollections?: string[];
    }
    export interface WorkspaceSchema {
        version: 1;
        cli?: WorkspaceCLISchema;
        projects: {
            [key: string]: WorkspaceProject<ProjectType.Application | ProjectType.Library>;
        };
    }
    export interface WorkspaceProject<TProjectType extends ProjectType = ProjectType.Application> {
        /**
         * Project type.
         */
        projectType: ProjectType;
        root: string;
        sourceRoot: string;
        prefix: string;
        cli?: WorkspaceCLISchema;
        /**
         * Tool options.
         */
        architect?: WorkspaceTargets<TProjectType>;
        /**
         * Tool options.
         */
        targets?: WorkspaceTargets<TProjectType>;
    }
    export interface WorkspaceTargets<TProjectType extends ProjectType = ProjectType.Application> {
        build?: TProjectType extends ProjectType.Library ? LibraryBuilderTarget : BrowserBuilderTarget;
        server?: ServerBuilderTarget;
        test?: TestBuilderTarget;
        serve?: ServeBuilderTarget;
        e2e?: E2EBuilderTarget;
        'app-shell'?: AppShellBuilderTarget;
        'extract-i18n'?: ExtractI18nBuilderTarget;
        [key: string]: any;
    }
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\validation.js.map"><![CDATA[
    {"version":3,"file":"validation.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/validation.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,2DAAiE;AAEjE,qFAAqF;AACrF,+EAA+E;AAClE,QAAA,cAAc,GACzB,+EAA+E,CAAC;AAElF,+IAA+I;AAC/I,MAAM,wBAAwB,GAAG,6DAA6D,CAAC;AAE/F,SAAgB,oBAAoB,CAAC,QAAgB;IACnD,IAAI,QAAQ,IAAI,CAAC,sBAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC9C,MAAM,IAAI,gCAAmB,CAAC,aAAa,QAAQ,eAAe,CAAC,CAAC;KACrE;AACH,CAAC;AAJD,oDAIC;AAED,SAAgB,iBAAiB,CAAC,SAAiB;IACjD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QAC7C,MAAM,IAAI,gCAAmB,CAAC,eAAe,SAAS,eAAe,CAAC,CAAC;KACxE;AACH,CAAC;AAJD,8CAIC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\validation.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateClassName = exports.validateHtmlSelector = exports.htmlSelectorRe = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    // Must start with a letter, and must contain only alphanumeric characters or dashes.
    // When adding a dash the segment after the dash must also start with a letter.
    exports.htmlSelectorRe = /^[a-zA-Z][.0-9a-zA-Z]*((:?-[0-9]+)*|(:?-[a-zA-Z][.0-9a-zA-Z]*(:?-[0-9]+)*)*)$/;
    // See: https://github.com/tc39/proposal-regexp-unicode-property-escapes/blob/fe6d07fad74cd0192d154966baa1e95e7cda78a1/README.md#other-examples
    const ecmaIdentifierNameRegExp = /^(?:[$_\p{ID_Start}])(?:[$_\u200C\u200D\p{ID_Continue}])*$/u;
    function validateHtmlSelector(selector) {
        if (selector && !exports.htmlSelectorRe.test(selector)) {
            throw new schematics_1.SchematicsException(`Selector "${selector}" is invalid.`);
        }
    }
    exports.validateHtmlSelector = validateHtmlSelector;
    function validateClassName(className) {
        if (!ecmaIdentifierNameRegExp.test(className)) {
            throw new schematics_1.SchematicsException(`Class name "${className}" is invalid.`);
        }
    }
    exports.validateClassName = validateClassName;
    //# sourceMappingURL=validation.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\validation.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export declare const htmlSelectorRe: RegExp;
    export declare function validateHtmlSelector(selector: string): void;
    export declare function validateClassName(className: string): void;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\project-targets.js.map"><![CDATA[
    {"version":3,"file":"project-targets.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/project-targets.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,2DAAiE;AAEjE,yDAA8C;AAE9C,SAAgB,wBAAwB;IACtC,OAAO,IAAI,gCAAmB,CAAC,mCAAmC,CAAC,CAAC;AACtE,CAAC;AAFD,4DAEC;AAED,SAAgB,yBAAyB,CAAC,OAA0B;IAClE,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC;IAC3D,MAAM,yBAAyB,GAC7B,YAAY,KAAK,2BAAQ,CAAC,WAAW,IAAI,YAAY,KAAK,2BAAQ,CAAC,gBAAgB,CAAC;IAEtF,OAAO,yBAAyB,CAAC;AACnC,CAAC;AAND,8DAMC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\project-targets.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isUsingApplicationBuilder = exports.targetBuildNotFoundError = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const workspace_models_1 = require("./workspace-models");
    function targetBuildNotFoundError() {
        return new schematics_1.SchematicsException(`Project target "build" not found.`);
    }
    exports.targetBuildNotFoundError = targetBuildNotFoundError;
    function isUsingApplicationBuilder(project) {
        const buildBuilder = project.targets.get('build')?.builder;
        const isUsingApplicationBuilder = buildBuilder === workspace_models_1.Builders.Application || buildBuilder === workspace_models_1.Builders.BuildApplication;
        return isUsingApplicationBuilder;
    }
    exports.isUsingApplicationBuilder = isUsingApplicationBuilder;
    //# sourceMappingURL=project-targets.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\project-targets.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { SchematicsException } from '@angular-devkit/schematics';
    import { ProjectDefinition } from './workspace';
    export declare function targetBuildNotFoundError(): SchematicsException;
    export declare function isUsingApplicationBuilder(project: ProjectDefinition): boolean;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\paths.js.map"><![CDATA[
    {"version":3,"file":"paths.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/paths.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,+BAAsC;AAEtC,SAAgB,2BAA2B,CAAC,WAA+B;IACzE,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,GAAG,CAAC;KACZ;IAED,OAAO,IAAA,eAAQ,EAAC,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC;AACtD,CAAC;AAND,kEAMC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\paths.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.relativePathToWorkspaceRoot = void 0;
    const path_1 = require("path");
    function relativePathToWorkspaceRoot(projectRoot) {
        if (!projectRoot) {
            return '.';
        }
        return (0, path_1.relative)((0, path_1.join)('/', projectRoot), '/') || '.';
    }
    exports.relativePathToWorkspaceRoot = relativePathToWorkspaceRoot;
    //# sourceMappingURL=paths.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\paths.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export declare function relativePathToWorkspaceRoot(projectRoot: string | undefined): string;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\parse-name.js.map"><![CDATA[
    {"version":3,"file":"parse-name.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/parse-name.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,+CAAgF;AAOhF,SAAgB,SAAS,CAAC,IAAY,EAAE,IAAY;IAClD,MAAM,eAAe,GAAG,IAAA,eAAQ,EAAC,IAAA,gBAAS,EAAC,IAAI,CAAC,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,IAAA,cAAO,EAAC,IAAA,WAAI,EAAC,IAAA,gBAAS,EAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAEtD,OAAO;QACL,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,IAAA,gBAAS,EAAC,GAAG,GAAG,QAAQ,CAAC;KAChC,CAAC;AACJ,CAAC;AARD,8BAQC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\parse-name.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseName = void 0;
    const core_1 = require("@angular-devkit/core");
    function parseName(path, name) {
        const nameWithoutPath = (0, core_1.basename)((0, core_1.normalize)(name));
        const namePath = (0, core_1.dirname)((0, core_1.join)((0, core_1.normalize)(path), name));
        return {
            name: nameWithoutPath,
            path: (0, core_1.normalize)('/' + namePath),
        };
    }
    exports.parseName = parseName;
    //# sourceMappingURL=parse-name.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\parse-name.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Path } from '@angular-devkit/core';
    export interface Location {
        name: string;
        path: Path;
    }
    export declare function parseName(path: string, name: string): Location;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\ng-ast-utils.js.map"><![CDATA[
    {"version":3,"file":"ng-ast-utils.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/ng-ast-utils.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\ng-ast-utils.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isStandaloneApp = exports.getAppModulePath = exports.findBootstrapModuleCall = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const path_1 = require("path");
    const ts = require("typescript");
    const ast_utils_1 = require("./ast-utils");
    const util_1 = require("./standalone/util");
    function findBootstrapModuleCall(host, mainPath) {
        const mainText = host.readText(mainPath);
        const source = ts.createSourceFile(mainPath, mainText, ts.ScriptTarget.Latest, true);
        const allNodes = (0, ast_utils_1.getSourceNodes)(source);
        let bootstrapCall = null;
        for (const node of allNodes) {
            let bootstrapCallNode = null;
            bootstrapCallNode = (0, ast_utils_1.findNode)(node, ts.SyntaxKind.Identifier, 'bootstrapModule');
            // Walk up the parent until CallExpression is found.
            while (bootstrapCallNode &&
                bootstrapCallNode.parent &&
                bootstrapCallNode.parent.kind !== ts.SyntaxKind.CallExpression) {
                bootstrapCallNode = bootstrapCallNode.parent;
            }
            if (bootstrapCallNode !== null &&
                bootstrapCallNode.parent !== undefined &&
                bootstrapCallNode.parent.kind === ts.SyntaxKind.CallExpression) {
                bootstrapCall = bootstrapCallNode.parent;
                break;
            }
        }
        return bootstrapCall;
    }
    exports.findBootstrapModuleCall = findBootstrapModuleCall;
    function findBootstrapModulePath(host, mainPath) {
        const bootstrapCall = findBootstrapModuleCall(host, mainPath);
        if (!bootstrapCall) {
            throw new schematics_1.SchematicsException('Bootstrap call not found');
        }
        const bootstrapModule = bootstrapCall.arguments[0];
        const mainText = host.readText(mainPath);
        const source = ts.createSourceFile(mainPath, mainText, ts.ScriptTarget.Latest, true);
        const allNodes = (0, ast_utils_1.getSourceNodes)(source);
        const bootstrapModuleRelativePath = allNodes
            .filter(ts.isImportDeclaration)
            .filter(imp => {
            return (0, ast_utils_1.findNode)(imp, ts.SyntaxKind.Identifier, bootstrapModule.getText());
        })
            .map(imp => {
            const modulePathStringLiteral = imp.moduleSpecifier;
            return modulePathStringLiteral.text;
        })[0];
        return bootstrapModuleRelativePath;
    }
    function getAppModulePath(host, mainPath) {
        const moduleRelativePath = findBootstrapModulePath(host, mainPath);
        const mainDir = (0, path_1.dirname)(mainPath);
        const modulePath = (0, path_1.join)(mainDir, `${moduleRelativePath}.ts`);
        return modulePath;
    }
    exports.getAppModulePath = getAppModulePath;
    function isStandaloneApp(host, mainPath) {
        try {
            (0, util_1.findBootstrapApplicationCall)(host, mainPath);
            return true;
        }
        catch (error) {
            if (error instanceof schematics_1.SchematicsException) {
                return false;
            }
            throw error;
        }
    }
    exports.isStandaloneApp = isStandaloneApp;
    //# sourceMappingURL=ng-ast-utils.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\ng-ast-utils.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Tree } from '@angular-devkit/schematics';
    import * as ts from 'typescript';
    export declare function findBootstrapModuleCall(host: Tree, mainPath: string): ts.CallExpression | null;
    export declare function getAppModulePath(host: Tree, mainPath: string): string;
    export declare function isStandaloneApp(host: Tree, mainPath: string): boolean;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\latest-versions.js.map"><![CDATA[
    {"version":3,"file":"latest-versions.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/latest-versions.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,mGAAmG;AACnG,8CAA8C;AAC9C,MAAM,YAAY,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC,cAAc,CAAC,CAAC;AAElE,QAAA,cAAc,GAMvB;IACF,GAAG,YAAY;IAEf,oGAAoG;IACpG,OAAO,EAAE,0BAA0B;IACnC,SAAS,EAAE,0BAA0B;IACrC,kBAAkB,EAAE,oBAAoB;IACxC,YAAY,EAAE,oBAAoB;IAClC,UAAU,EAAE,oBAAoB;CACjC,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\latest-versions.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.latestVersions = void 0;
    // We could have used TypeScripts' `resolveJsonModule` to make the `latestVersion` object typesafe,
    // but ts_library doesn't support JSON inputs.
    const dependencies = require('./latest-versions/package.json')['dependencies'];
    exports.latestVersions = {
        ...dependencies,
        // As Angular CLI works with same minor versions of Angular Framework, a tilde match for the current
        Angular: '0.0.0-ANGULAR-FW-VERSION',
        NgPackagr: '0.0.0-NG-PACKAGR-VERSION',
        DevkitBuildAngular: '^0.0.0-PLACEHOLDER',
        AngularBuild: '^0.0.0-PLACEHOLDER',
        AngularSSR: '^0.0.0-PLACEHOLDER',
    };
    //# sourceMappingURL=latest-versions.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\latest-versions.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export declare const latestVersions: Record<string, string> & {
        Angular: string;
        DevkitBuildAngular: string;
        AngularBuild: string;
        AngularSSR: string;
        NgPackagr: string;
    };
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\json-file.js.map"><![CDATA[
    {"version":3,"file":"json-file.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/json-file.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\json-file.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JSONFile = void 0;
    const jsonc_parser_1 = require("jsonc-parser");
    const eol_1 = require("./eol");
    /** @private */
    class JSONFile {
        constructor(host, path) {
            this.host = host;
            this.path = path;
            this.content = this.host.readText(this.path);
            this.eol = (0, eol_1.getEOL)(this.content);
        }
        get JsonAst() {
            if (this._jsonAst) {
                return this._jsonAst;
            }
            const errors = [];
            this._jsonAst = (0, jsonc_parser_1.parseTree)(this.content, errors, { allowTrailingComma: true });
            if (errors.length) {
                const { error, offset } = errors[0];
                throw new Error(`Failed to parse "${this.path}" as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);
            }
            return this._jsonAst;
        }
        get(jsonPath) {
            const jsonAstNode = this.JsonAst;
            if (!jsonAstNode) {
                return undefined;
            }
            if (jsonPath.length === 0) {
                return (0, jsonc_parser_1.getNodeValue)(jsonAstNode);
            }
            const node = (0, jsonc_parser_1.findNodeAtLocation)(jsonAstNode, jsonPath);
            return node === undefined ? undefined : (0, jsonc_parser_1.getNodeValue)(node);
        }
        modify(jsonPath, value, insertInOrder) {
            let getInsertionIndex;
            if (insertInOrder === undefined) {
                const property = jsonPath.slice(-1)[0];
                getInsertionIndex = properties => [...properties, property].sort().findIndex(p => p === property);
            }
            else if (insertInOrder !== false) {
                getInsertionIndex = insertInOrder;
            }
            const edits = (0, jsonc_parser_1.modify)(this.content, jsonPath, value, {
                getInsertionIndex,
                formattingOptions: {
                    eol: this.eol,
                    insertSpaces: true,
                    tabSize: 2,
                },
            });
            this.content = (0, jsonc_parser_1.applyEdits)(this.content, edits);
            this.host.overwrite(this.path, this.content);
            this._jsonAst = undefined;
        }
        remove(jsonPath) {
            if (this.get(jsonPath) !== undefined) {
                this.modify(jsonPath, undefined);
            }
        }
    }
    exports.JSONFile = JSONFile;
    //# sourceMappingURL=json-file.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\json-file.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { JsonValue } from '@angular-devkit/core';
    import { Tree } from '@angular-devkit/schematics';
    export declare type InsertionIndex = (properties: string[]) => number;
    export declare type JSONPath = (string | number)[];
    /** @private */
    export declare class JSONFile {
        private readonly host;
        private readonly path;
        content: string;
        private eol;
        constructor(host: Tree, path: string);
        private _jsonAst;
        private get JsonAst();
        get(jsonPath: JSONPath): unknown;
        modify(jsonPath: JSONPath, value: JsonValue | undefined, insertInOrder?: InsertionIndex | false): void;
        remove(jsonPath: JSONPath): void;
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,+CAA6B;AAC7B,8CAA4B;AAC5B,2CAAyB;AACzB,iDAA+B;AAC/B,gDAA8B;AAC9B,wDAAsC;AACtC,8CAA4B;AAC5B,iDAA+B;AAC/B,+CAA6B;AAC7B,0CAAwB;AACxB,oDAAkC;AAClC,+CAA6B;AAC7B,8CAA4B;AAC5B,qDAAmC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\index.js"><![CDATA[
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require("./standalone"), exports);
    __exportStar(require("./ast-utils"), exports);
    __exportStar(require("./change"), exports);
    __exportStar(require("./dependencies"), exports);
    __exportStar(require("./find-module"), exports);
    __exportStar(require("./generate-from-files"), exports);
    __exportStar(require("./json-file"), exports);
    __exportStar(require("./ng-ast-utils"), exports);
    __exportStar(require("./parse-name"), exports);
    __exportStar(require("./paths"), exports);
    __exportStar(require("./project-targets"), exports);
    __exportStar(require("./validation"), exports);
    __exportStar(require("./workspace"), exports);
    __exportStar(require("./workspace-models"), exports);
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\index.d.ts"><![CDATA[
    export * from './standalone';
    export * from './ast-utils';
    export * from './change';
    export * from './dependencies';
    export * from './find-module';
    export * from './generate-from-files';
    export * from './json-file';
    export * from './ng-ast-utils';
    export * from './parse-name';
    export * from './paths';
    export * from './project-targets';
    export * from './validation';
    export * from './workspace';
    export * from './workspace-models';
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\generate-from-files.js.map"><![CDATA[
    {"version":3,"file":"generate-from-files.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/generate-from-files.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,2DAcoC;AACpC,6CAAyC;AACzC,6CAAiD;AACjD,2CAAgD;AAahD,SAAgB,iBAAiB,CAC/B,OAAiC,EACjC,sBAAwE,EAAE;IAE1E,OAAO,KAAK,EAAE,IAAU,EAAE,EAAE;QAC1B,OAAO,CAAC,IAAI,KAAZ,OAAO,CAAC,IAAI,GAAK,MAAM,IAAA,6BAAiB,EAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,EAAC;QAChE,OAAO,CAAC,MAAM,KAAd,OAAO,CAAC,MAAM,GAAK,EAAE,EAAC;QACtB,OAAO,CAAC,IAAI,KAAZ,OAAO,CAAC,IAAI,GAAK,IAAI,EAAC;QAEtB,MAAM,UAAU,GAAG,IAAA,sBAAS,EAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC/B,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAE/B,IAAA,8BAAiB,EAAC,oBAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAElD,MAAM,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,IAAI,SAAS,CAAC;QAC3E,MAAM,cAAc,GAAG,IAAA,kBAAK,EAAC,IAAA,gBAAG,EAAC,sBAAsB,CAAC,EAAE;YACxD,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAA,mBAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,iBAAI,GAAE;YAChF,IAAA,2BAAc,EAAC;gBACb,GAAG,oBAAO;gBACV,GAAG,OAAO;gBACV,GAAG,mBAAmB;aACvB,CAAC;YACF,CAAC,OAAO,CAAC,IAAI;gBACX,CAAC,CAAC,IAAA,oBAAO,EAAC,CAAC,IAAI,CAAC,EAAE;oBACd,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;wBAC7B,CAAC,CAAC;4BACE,OAAO,EAAE,IAAI,CAAC,OAAO;4BACrB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;yBACnC;wBACH,CAAC,CAAC,IAAI,CAAC;gBACX,CAAC,CAAiB,CAAC;gBACrB,CAAC,CAAC,IAAA,iBAAI,GAAE;YACV,IAAA,iBAAI,EAAC,UAAU,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,oBAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SACpF,CAAC,CAAC;QAEH,OAAO,IAAA,kBAAK,EAAC,CAAC,IAAA,sBAAS,EAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC;AACJ,CAAC;AAtCD,8CAsCC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\generate-from-files.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateFromFiles = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const parse_name_1 = require("./parse-name");
    const validation_1 = require("./validation");
    const workspace_1 = require("./workspace");
    function generateFromFiles(options, extraTemplateValues = {}) {
        return async (host) => {
            options.path ?? (options.path = await (0, workspace_1.createDefaultPath)(host, options.project));
            options.prefix ?? (options.prefix = '');
            options.flat ?? (options.flat = true);
            const parsedPath = (0, parse_name_1.parseName)(options.path, options.name);
            options.name = parsedPath.name;
            options.path = parsedPath.path;
            (0, validation_1.validateClassName)(schematics_1.strings.classify(options.name));
            const templateFilesDirectory = options.templateFilesDirectory ?? './files';
            const templateSource = (0, schematics_1.apply)((0, schematics_1.url)(templateFilesDirectory), [
                options.skipTests ? (0, schematics_1.filter)(path => !path.endsWith('.spec.ts.template')) : (0, schematics_1.noop)(),
                (0, schematics_1.applyTemplates)({
                    ...schematics_1.strings,
                    ...options,
                    ...extraTemplateValues,
                }),
                !options.type
                    ? (0, schematics_1.forEach)((file => {
                        return file.path.includes('..')
                            ? {
                                content: file.content,
                                path: file.path.replace('..', '.'),
                            }
                            : file;
                    }))
                    : (0, schematics_1.noop)(),
                (0, schematics_1.move)(parsedPath.path + (options.flat ? '' : '/' + schematics_1.strings.dasherize(options.name))),
            ]);
            return (0, schematics_1.chain)([(0, schematics_1.mergeWith)(templateSource)]);
        };
    }
    exports.generateFromFiles = generateFromFiles;
    //# sourceMappingURL=generate-from-files.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\generate-from-files.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Rule } from '@angular-devkit/schematics';
    export interface GenerateFromFilesOptions {
        flat?: boolean;
        name: string;
        path?: string;
        prefix?: string;
        project: string;
        skipTests?: boolean;
        templateFilesDirectory?: string;
        type?: string;
    }
    export declare function generateFromFiles(options: GenerateFromFilesOptions, extraTemplateValues?: Record<string, string | ((v: string) => string)>): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\find-module.js.map"><![CDATA[
    {"version":3,"file":"find-module.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/find-module.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\find-module.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildRelativePath = exports.findModule = exports.findModuleFromOptions = exports.ROUTING_MODULE_EXT = exports.MODULE_EXT = void 0;
    const core_1 = require("@angular-devkit/core");
    exports.MODULE_EXT = '.module.ts';
    exports.ROUTING_MODULE_EXT = '-routing.module.ts';
    /**
     * Find the module referred by a set of options passed to the schematics.
     */
    function findModuleFromOptions(host, options) {
        if (options.standalone || options.skipImport) {
            return undefined;
        }
        const moduleExt = options.moduleExt || exports.MODULE_EXT;
        const routingModuleExt = options.routingModuleExt || exports.ROUTING_MODULE_EXT;
        if (!options.module) {
            const pathToCheck = (options.path || '') + '/' + options.name;
            return (0, core_1.normalize)(findModule(host, pathToCheck, moduleExt, routingModuleExt));
        }
        else {
            const modulePath = (0, core_1.normalize)(`/${options.path}/${options.module}`);
            const componentPath = (0, core_1.normalize)(`/${options.path}/${options.name}`);
            const moduleBaseName = (0, core_1.normalize)(modulePath).split('/').pop();
            const candidateSet = new Set([(0, core_1.normalize)(options.path || '/')]);
            for (let dir = modulePath; dir != core_1.NormalizedRoot; dir = (0, core_1.dirname)(dir)) {
                candidateSet.add(dir);
            }
            for (let dir = componentPath; dir != core_1.NormalizedRoot; dir = (0, core_1.dirname)(dir)) {
                candidateSet.add(dir);
            }
            const candidatesDirs = [...candidateSet].sort((a, b) => b.length - a.length);
            for (const c of candidatesDirs) {
                const candidateFiles = ['', `${moduleBaseName}.ts`, `${moduleBaseName}${moduleExt}`].map(x => (0, core_1.join)(c, x));
                for (const sc of candidateFiles) {
                    if (host.exists(sc) && host.readText(sc).includes('@NgModule')) {
                        return (0, core_1.normalize)(sc);
                    }
                }
            }
            throw new Error(`Specified module '${options.module}' does not exist.\n` +
                `Looked in the following directories:\n    ${candidatesDirs.join('\n    ')}`);
        }
    }
    exports.findModuleFromOptions = findModuleFromOptions;
    /**
     * Function to find the "closest" module to a generated file's path.
     */
    function findModule(host, generateDir, moduleExt = exports.MODULE_EXT, routingModuleExt = exports.ROUTING_MODULE_EXT) {
        let dir = host.getDir('/' + generateDir);
        let foundRoutingModule = false;
        while (dir) {
            const allMatches = dir.subfiles.filter(p => p.endsWith(moduleExt));
            const filteredMatches = allMatches.filter(p => !p.endsWith(routingModuleExt));
            foundRoutingModule = foundRoutingModule || allMatches.length !== filteredMatches.length;
            if (filteredMatches.length == 1) {
                return (0, core_1.join)(dir.path, filteredMatches[0]);
            }
            else if (filteredMatches.length > 1) {
                throw new Error(`More than one module matches. Use the '--skip-import' option to skip importing ` +
                    'the component into the closest module or use the module option to specify a module.');
            }
            dir = dir.parent;
        }
        const errorMsg = foundRoutingModule
            ? 'Could not find a non Routing NgModule.' +
                `\nModules with suffix '${routingModuleExt}' are strictly reserved for routing.` +
                `\nUse the '--skip-import' option to skip importing in NgModule.`
            : `Could not find an NgModule. Use the '--skip-import' option to skip importing in NgModule.`;
        throw new Error(errorMsg);
    }
    exports.findModule = findModule;
    /**
     * Build a relative path from one file path to another file path.
     */
    function buildRelativePath(from, to) {
        from = (0, core_1.normalize)(from);
        to = (0, core_1.normalize)(to);
        // Convert to arrays.
        const fromParts = from.split('/');
        const toParts = to.split('/');
        // Remove file names (preserving destination)
        fromParts.pop();
        const toFileName = toParts.pop();
        const relativePath = (0, core_1.relative)((0, core_1.normalize)(fromParts.join('/') || '/'), (0, core_1.normalize)(toParts.join('/') || '/'));
        let pathPrefix = '';
        // Set the path prefix for same dir or child dir, parent dir starts with `..`
        if (!relativePath) {
            pathPrefix = '.';
        }
        else if (!relativePath.startsWith('.')) {
            pathPrefix = `./`;
        }
        if (pathPrefix && !pathPrefix.endsWith('/')) {
            pathPrefix += '/';
        }
        return pathPrefix + (relativePath ? relativePath + '/' : '') + toFileName;
    }
    exports.buildRelativePath = buildRelativePath;
    //# sourceMappingURL=find-module.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\find-module.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Path } from '@angular-devkit/core';
    import { Tree } from '@angular-devkit/schematics';
    export interface ModuleOptions {
        module?: string;
        name: string;
        flat?: boolean;
        path?: string;
        skipImport?: boolean;
        moduleExt?: string;
        routingModuleExt?: string;
        standalone?: boolean;
    }
    export declare const MODULE_EXT = ".module.ts";
    export declare const ROUTING_MODULE_EXT = "-routing.module.ts";
    /**
     * Find the module referred by a set of options passed to the schematics.
     */
    export declare function findModuleFromOptions(host: Tree, options: ModuleOptions): Path | undefined;
    /**
     * Function to find the "closest" module to a generated file's path.
     */
    export declare function findModule(host: Tree, generateDir: string, moduleExt?: string, routingModuleExt?: string): Path;
    /**
     * Build a relative path from one file path to another file path.
     */
    export declare function buildRelativePath(from: string, to: string): string;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\eol.js.map"><![CDATA[
    {"version":3,"file":"eol.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/eol.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,qCAA8B;AAE9B,MAAM,IAAI,GAAG,MAAM,CAAC;AACpB,MAAM,EAAE,GAAG,IAAI,CAAC;AAEhB,SAAgB,MAAM,CAAC,OAAe;IACpC,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAE7C,IAAI,QAAQ,EAAE,MAAM,EAAE;QACpB,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,MAAM,CAAC;QACvD,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;QAElC,OAAO,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;KAC9B;IAED,OAAO,aAAG,CAAC;AACb,CAAC;AAXD,wBAWC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\eol.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEOL = void 0;
    const node_os_1 = require("node:os");
    const CRLF = '\r\n';
    const LF = '\n';
    function getEOL(content) {
        const newlines = content.match(/(?:\r?\n)/g);
        if (newlines?.length) {
            const crlf = newlines.filter((l) => l === CRLF).length;
            const lf = newlines.length - crlf;
            return crlf > lf ? CRLF : LF;
        }
        return node_os_1.EOL;
    }
    exports.getEOL = getEOL;
    //# sourceMappingURL=eol.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\eol.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export declare function getEOL(content: string): string;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\dependency.js.map"><![CDATA[
    {"version":3,"file":"dependency.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/dependency.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\dependency.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addDependency = exports.ExistingBehavior = exports.InstallBehavior = exports.DependencyType = void 0;
    const tasks_1 = require("@angular-devkit/schematics/tasks");
    const path = require("path");
    const installTasks = new WeakMap();
    /**
     * An enum used to specify the type of a dependency found within a package manifest
     * file (`package.json`).
     */
    var DependencyType;
    (function (DependencyType) {
        DependencyType["Default"] = "dependencies";
        DependencyType["Dev"] = "devDependencies";
        DependencyType["Peer"] = "peerDependencies";
    })(DependencyType = exports.DependencyType || (exports.DependencyType = {}));
    /**
     * An enum used to specify the dependency installation behavior for the {@link addDependency}
     * schematics rule. The installation behavior affects if and when {@link NodePackageInstallTask}
     * will be scheduled when using the rule.
     */
    var InstallBehavior;
    (function (InstallBehavior) {
        /**
         * No installation will occur as a result of the rule when specified.
         *
         * NOTE: This does not prevent other rules from scheduling a {@link NodePackageInstallTask}
         * which may install the dependency.
         */
        InstallBehavior[InstallBehavior["None"] = 0] = "None";
        /**
         * Automatically determine the need to schedule a {@link NodePackageInstallTask} based on
         * previous usage of the {@link addDependency} within the schematic.
         */
        InstallBehavior[InstallBehavior["Auto"] = 1] = "Auto";
        /**
         * Always schedule a {@link NodePackageInstallTask} when the rule is executed.
         */
        InstallBehavior[InstallBehavior["Always"] = 2] = "Always";
    })(InstallBehavior = exports.InstallBehavior || (exports.InstallBehavior = {}));
    /**
     * An enum used to specify the existing dependency behavior for the {@link addDependency}
     * schematics rule. The existing behavior affects whether the named dependency will be added
     * to the `package.json` when the dependency is already present with a differing specifier.
     */
    var ExistingBehavior;
    (function (ExistingBehavior) {
        /**
         * The dependency will not be added or otherwise changed if it already exists.
         */
        ExistingBehavior[ExistingBehavior["Skip"] = 0] = "Skip";
        /**
         * The dependency's existing specifier will be replaced with the specifier provided in the
         * {@link addDependency} call. A warning will also be shown during schematic execution to
         * notify the user of the replacement.
         */
        ExistingBehavior[ExistingBehavior["Replace"] = 1] = "Replace";
    })(ExistingBehavior = exports.ExistingBehavior || (exports.ExistingBehavior = {}));
    /**
     * Adds a package as a dependency to a `package.json`. By default the `package.json` located
     * at the schematic's root will be used. The `manifestPath` option can be used to explicitly specify
     * a `package.json` in different location. The type of the dependency can also be specified instead
     * of the default of the `dependencies` section by using the `type` option for either `devDependencies`
     * or `peerDependencies`.
     *
     * When using this rule, {@link NodePackageInstallTask} does not need to be included directly by
     * a schematic. A package manager install task will be automatically scheduled as needed.
     *
     * @param name The name of the package to add.
     * @param specifier The package specifier for the package to add. Typically a SemVer range.
     * @param options An optional object that can contain the `type` of the dependency
     * and/or a path (`packageJsonPath`) of a manifest file (`package.json`) to modify.
     * @returns A Schematics {@link Rule}
     */
    function addDependency(name, specifier, options = {}) {
        const { type = DependencyType.Default, packageJsonPath = '/package.json', install = InstallBehavior.Auto, existing = ExistingBehavior.Replace, } = options;
        return (tree, context) => {
            const manifest = tree.readJson(packageJsonPath);
            const dependencySection = manifest[type];
            if (!dependencySection) {
                // Section is not present. The dependency can be added to a new object literal for the section.
                manifest[type] = { [name]: specifier };
            }
            else {
                const existingSpecifier = dependencySection[name];
                if (existingSpecifier === specifier) {
                    // Already present with same specifier
                    return;
                }
                if (existingSpecifier) {
                    // Already present but different specifier
                    if (existing === ExistingBehavior.Skip) {
                        return;
                    }
                    // ExistingBehavior.Replace is the only other behavior currently
                    context.logger.warn(`Package dependency "${name}" already exists with a different specifier. ` +
                        `"${existingSpecifier}" will be replaced with "${specifier}".`);
                }
                // Add new dependency in alphabetical order
                const entries = Object.entries(dependencySection);
                entries.push([name, specifier]);
                entries.sort((a, b) => a[0].localeCompare(b[0]));
                manifest[type] = Object.fromEntries(entries);
            }
            tree.overwrite(packageJsonPath, JSON.stringify(manifest, null, 2));
            const installPaths = installTasks.get(context) ?? new Set();
            if (install === InstallBehavior.Always ||
                (install === InstallBehavior.Auto && !installPaths.has(packageJsonPath))) {
                context.addTask(new tasks_1.NodePackageInstallTask({ workingDirectory: path.dirname(packageJsonPath) }));
                installPaths.add(packageJsonPath);
                installTasks.set(context, installPaths);
            }
        };
    }
    exports.addDependency = addDependency;
    //# sourceMappingURL=dependency.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\dependency.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Rule } from '@angular-devkit/schematics';
    /**
     * An enum used to specify the type of a dependency found within a package manifest
     * file (`package.json`).
     */
    export declare enum DependencyType {
        Default = "dependencies",
        Dev = "devDependencies",
        Peer = "peerDependencies"
    }
    /**
     * An enum used to specify the dependency installation behavior for the {@link addDependency}
     * schematics rule. The installation behavior affects if and when {@link NodePackageInstallTask}
     * will be scheduled when using the rule.
     */
    export declare enum InstallBehavior {
        /**
         * No installation will occur as a result of the rule when specified.
         *
         * NOTE: This does not prevent other rules from scheduling a {@link NodePackageInstallTask}
         * which may install the dependency.
         */
        None = 0,
        /**
         * Automatically determine the need to schedule a {@link NodePackageInstallTask} based on
         * previous usage of the {@link addDependency} within the schematic.
         */
        Auto = 1,
        /**
         * Always schedule a {@link NodePackageInstallTask} when the rule is executed.
         */
        Always = 2
    }
    /**
     * An enum used to specify the existing dependency behavior for the {@link addDependency}
     * schematics rule. The existing behavior affects whether the named dependency will be added
     * to the `package.json` when the dependency is already present with a differing specifier.
     */
    export declare enum ExistingBehavior {
        /**
         * The dependency will not be added or otherwise changed if it already exists.
         */
        Skip = 0,
        /**
         * The dependency's existing specifier will be replaced with the specifier provided in the
         * {@link addDependency} call. A warning will also be shown during schematic execution to
         * notify the user of the replacement.
         */
        Replace = 1
    }
    /**
     * Adds a package as a dependency to a `package.json`. By default the `package.json` located
     * at the schematic's root will be used. The `manifestPath` option can be used to explicitly specify
     * a `package.json` in different location. The type of the dependency can also be specified instead
     * of the default of the `dependencies` section by using the `type` option for either `devDependencies`
     * or `peerDependencies`.
     *
     * When using this rule, {@link NodePackageInstallTask} does not need to be included directly by
     * a schematic. A package manager install task will be automatically scheduled as needed.
     *
     * @param name The name of the package to add.
     * @param specifier The package specifier for the package to add. Typically a SemVer range.
     * @param options An optional object that can contain the `type` of the dependency
     * and/or a path (`packageJsonPath`) of a manifest file (`package.json`) to modify.
     * @returns A Schematics {@link Rule}
     */
    export declare function addDependency(name: string, specifier: string, options?: {
        /**
         * The type of the dependency determines the section of the `package.json` to which the
         * dependency will be added. Defaults to {@link DependencyType.Default} (`dependencies`).
         */
        type?: DependencyType;
        /**
         * The path of the package manifest file (`package.json`) that will be modified.
         * Defaults to `/package.json`.
         */
        packageJsonPath?: string;
        /**
         * The dependency installation behavior to use to determine whether a
         * {@link NodePackageInstallTask} should be scheduled after adding the dependency.
         * Defaults to {@link InstallBehavior.Auto}.
         */
        install?: InstallBehavior;
        /**
         * The behavior to use when the dependency already exists within the `package.json`.
         * Defaults to {@link ExistingBehavior.Replace}.
         */
        existing?: ExistingBehavior;
    }): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\dependencies.js.map"><![CDATA[
    {"version":3,"file":"dependencies.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/dependencies.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAGH,2CAAuC;AAEvC,MAAM,aAAa,GAAG,eAAe,CAAC;AACtC,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,8CAAwB,CAAA;IACxB,6CAAuB,CAAA;IACvB,+CAAyB,CAAA;IACzB,uDAAiC,CAAA;AACnC,CAAC,EALW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAK7B;AASD,MAAM,mBAAmB,GAAG;IAC1B,kBAAkB,CAAC,OAAO;IAC1B,kBAAkB,CAAC,GAAG;IACtB,kBAAkB,CAAC,QAAQ;IAC3B,kBAAkB,CAAC,IAAI;CACxB,CAAC;AAEF,SAAgB,wBAAwB,CACtC,IAAU,EACV,UAA0B,EAC1B,WAAW,GAAG,aAAa;IAE3B,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAE7C,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC;IACtD,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1B,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAChC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC5B;AACH,CAAC;AAZD,4DAYC;AAED,SAAgB,2BAA2B,CACzC,IAAU,EACV,IAAY,EACZ,WAAW,GAAG,aAAa;IAE3B,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAE7C,KAAK,MAAM,OAAO,IAAI,mBAAmB,EAAE;QACzC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;KAC9B;AACH,CAAC;AAVD,kEAUC;AAED,SAAgB,wBAAwB,CACtC,IAAU,EACV,IAAY,EACZ,WAAW,GAAG,aAAa;IAE3B,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAE7C,KAAK,MAAM,OAAO,IAAI,mBAAmB,EAAE;QACzC,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAE1C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO;gBACL,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,IAAI;gBACV,OAAO;aACR,CAAC;SACH;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,4DAoBC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\dependencies.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPackageJsonDependency = exports.removePackageJsonDependency = exports.addPackageJsonDependency = exports.NodeDependencyType = void 0;
    const json_file_1 = require("./json-file");
    const PKG_JSON_PATH = '/package.json';
    var NodeDependencyType;
    (function (NodeDependencyType) {
        NodeDependencyType["Default"] = "dependencies";
        NodeDependencyType["Dev"] = "devDependencies";
        NodeDependencyType["Peer"] = "peerDependencies";
        NodeDependencyType["Optional"] = "optionalDependencies";
    })(NodeDependencyType = exports.NodeDependencyType || (exports.NodeDependencyType = {}));
    const ALL_DEPENDENCY_TYPE = [
        NodeDependencyType.Default,
        NodeDependencyType.Dev,
        NodeDependencyType.Optional,
        NodeDependencyType.Peer,
    ];
    function addPackageJsonDependency(tree, dependency, pkgJsonPath = PKG_JSON_PATH) {
        const json = new json_file_1.JSONFile(tree, pkgJsonPath);
        const { overwrite, type, name, version } = dependency;
        const path = [type, name];
        if (overwrite || !json.get(path)) {
            json.modify(path, version);
        }
    }
    exports.addPackageJsonDependency = addPackageJsonDependency;
    function removePackageJsonDependency(tree, name, pkgJsonPath = PKG_JSON_PATH) {
        const json = new json_file_1.JSONFile(tree, pkgJsonPath);
        for (const depType of ALL_DEPENDENCY_TYPE) {
            json.remove([depType, name]);
        }
    }
    exports.removePackageJsonDependency = removePackageJsonDependency;
    function getPackageJsonDependency(tree, name, pkgJsonPath = PKG_JSON_PATH) {
        const json = new json_file_1.JSONFile(tree, pkgJsonPath);
        for (const depType of ALL_DEPENDENCY_TYPE) {
            const version = json.get([depType, name]);
            if (typeof version === 'string') {
                return {
                    type: depType,
                    name: name,
                    version,
                };
            }
        }
        return null;
    }
    exports.getPackageJsonDependency = getPackageJsonDependency;
    //# sourceMappingURL=dependencies.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\dependencies.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Tree } from '@angular-devkit/schematics';
    export declare enum NodeDependencyType {
        Default = "dependencies",
        Dev = "devDependencies",
        Peer = "peerDependencies",
        Optional = "optionalDependencies"
    }
    export interface NodeDependency {
        type: NodeDependencyType;
        name: string;
        version: string;
        overwrite?: boolean;
    }
    export declare function addPackageJsonDependency(tree: Tree, dependency: NodeDependency, pkgJsonPath?: string): void;
    export declare function removePackageJsonDependency(tree: Tree, name: string, pkgJsonPath?: string): void;
    export declare function getPackageJsonDependency(tree: Tree, name: string, pkgJsonPath?: string): NodeDependency | null;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\change.js.map"><![CDATA[
    {"version":3,"file":"change.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/change.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\change.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.applyToUpdateRecorder = exports.ReplaceChange = exports.RemoveChange = exports.InsertChange = exports.NoopChange = void 0;
    /**
     * An operation that does nothing.
     */
    class NoopChange {
        constructor() {
            this.description = 'No operation.';
            this.order = Infinity;
            this.path = null;
        }
        apply() {
            return Promise.resolve();
        }
    }
    exports.NoopChange = NoopChange;
    /**
     * Will add text to the source code.
     */
    class InsertChange {
        constructor(path, pos, toAdd) {
            this.path = path;
            this.pos = pos;
            this.toAdd = toAdd;
            if (pos < 0) {
                throw new Error('Negative positions are invalid');
            }
            this.description = `Inserted ${toAdd} into position ${pos} of ${path}`;
            this.order = pos;
        }
        /**
         * This method does not insert spaces if there is none in the original string.
         */
        apply(host) {
            return host.read(this.path).then(content => {
                const prefix = content.substring(0, this.pos);
                const suffix = content.substring(this.pos);
                return host.write(this.path, `${prefix}${this.toAdd}${suffix}`);
            });
        }
    }
    exports.InsertChange = InsertChange;
    /**
     * Will remove text from the source code.
     */
    class RemoveChange {
        constructor(path, pos, toRemove) {
            this.path = path;
            this.pos = pos;
            this.toRemove = toRemove;
            if (pos < 0) {
                throw new Error('Negative positions are invalid');
            }
            this.description = `Removed ${toRemove} into position ${pos} of ${path}`;
            this.order = pos;
        }
        apply(host) {
            return host.read(this.path).then(content => {
                const prefix = content.substring(0, this.pos);
                const suffix = content.substring(this.pos + this.toRemove.length);
                // TODO: throw error if toRemove doesn't match removed string.
                return host.write(this.path, `${prefix}${suffix}`);
            });
        }
    }
    exports.RemoveChange = RemoveChange;
    /**
     * Will replace text from the source code.
     */
    class ReplaceChange {
        constructor(path, pos, oldText, newText) {
            this.path = path;
            this.pos = pos;
            this.oldText = oldText;
            this.newText = newText;
            if (pos < 0) {
                throw new Error('Negative positions are invalid');
            }
            this.description = `Replaced ${oldText} into position ${pos} of ${path} with ${newText}`;
            this.order = pos;
        }
        apply(host) {
            return host.read(this.path).then(content => {
                const prefix = content.substring(0, this.pos);
                const suffix = content.substring(this.pos + this.oldText.length);
                const text = content.substring(this.pos, this.pos + this.oldText.length);
                if (text !== this.oldText) {
                    return Promise.reject(new Error(`Invalid replace: "${text}" != "${this.oldText}".`));
                }
                // TODO: throw error if oldText doesn't match removed string.
                return host.write(this.path, `${prefix}${this.newText}${suffix}`);
            });
        }
    }
    exports.ReplaceChange = ReplaceChange;
    function applyToUpdateRecorder(recorder, changes) {
        for (const change of changes) {
            if (change instanceof InsertChange) {
                recorder.insertLeft(change.pos, change.toAdd);
            }
            else if (change instanceof RemoveChange) {
                recorder.remove(change.order, change.toRemove.length);
            }
            else if (change instanceof ReplaceChange) {
                recorder.remove(change.order, change.oldText.length);
                recorder.insertLeft(change.order, change.newText);
            }
            else if (!(change instanceof NoopChange)) {
                throw new Error('Unknown Change type encountered when updating a recorder.');
            }
        }
    }
    exports.applyToUpdateRecorder = applyToUpdateRecorder;
    //# sourceMappingURL=change.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\change.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { UpdateRecorder } from '@angular-devkit/schematics';
    export interface Host {
        write(path: string, content: string): Promise<void>;
        read(path: string): Promise<string>;
    }
    export interface Change {
        apply(host: Host): Promise<void>;
        readonly path: string | null;
        readonly order: number;
        readonly description: string;
    }
    /**
     * An operation that does nothing.
     */
    export declare class NoopChange implements Change {
        description: string;
        order: number;
        path: null;
        apply(): Promise<void>;
    }
    /**
     * Will add text to the source code.
     */
    export declare class InsertChange implements Change {
        path: string;
        pos: number;
        toAdd: string;
        order: number;
        description: string;
        constructor(path: string, pos: number, toAdd: string);
        /**
         * This method does not insert spaces if there is none in the original string.
         */
        apply(host: Host): Promise<void>;
    }
    /**
     * Will remove text from the source code.
     */
    export declare class RemoveChange implements Change {
        path: string;
        private pos;
        toRemove: string;
        order: number;
        description: string;
        constructor(path: string, pos: number, toRemove: string);
        apply(host: Host): Promise<void>;
    }
    /**
     * Will replace text from the source code.
     */
    export declare class ReplaceChange implements Change {
        path: string;
        private pos;
        oldText: string;
        newText: string;
        order: number;
        description: string;
        constructor(path: string, pos: number, oldText: string, newText: string);
        apply(host: Host): Promise<void>;
    }
    export declare function applyToUpdateRecorder(recorder: UpdateRecorder, changes: Change[]): void;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\ast-utils.js.map"><![CDATA[
    {"version":3,"file":"ast-utils.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/ast-utils.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\ast-utils.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasTopLevelIdentifier = exports.addRouteDeclarationToModule = exports.getRouterModuleDeclaration = exports.isImported = exports.addBootstrapToModule = exports.addExportToModule = exports.addProviderToModule = exports.addImportToModule = exports.addDeclarationToModule = exports.addSymbolToNgModuleMetadata = exports.getMetadataField = exports.getDecoratorMetadata = exports.insertAfterLastOccurrence = exports.findNode = exports.getSourceNodes = exports.findNodes = exports.insertImport = void 0;
    const core_1 = require("@angular-devkit/core");
    const ts = require("typescript");
    const change_1 = require("./change");
    const eol_1 = require("./eol");
    /**
     * Add Import `import { symbolName } from fileName` if the import doesn't exit
     * already. Assumes fileToEdit can be resolved and accessed.
     * @param fileToEdit File we want to add import to.
     * @param symbolName Item to import.
     * @param fileName Path to the file.
     * @param isDefault If true, import follows style for importing default exports.
     * @param alias Alias that the symbol should be inserted under.
     * @return Change
     */
    function insertImport(source, fileToEdit, symbolName, fileName, isDefault = false, alias) {
        const rootNode = source;
        const allImports = findNodes(rootNode, ts.isImportDeclaration);
        const importExpression = alias ? `${symbolName} as ${alias}` : symbolName;
        // get nodes that map to import statements from the file fileName
        const relevantImports = allImports.filter(node => {
            return ts.isStringLiteralLike(node.moduleSpecifier) && node.moduleSpecifier.text === fileName;
        });
        if (relevantImports.length > 0) {
            const hasNamespaceImport = relevantImports.some(node => {
                return node.importClause?.namedBindings?.kind === ts.SyntaxKind.NamespaceImport;
            });
            // if imports * from fileName, don't add symbolName
            if (hasNamespaceImport) {
                return new change_1.NoopChange();
            }
            const imports = relevantImports.flatMap(node => {
                return node.importClause?.namedBindings && ts.isNamedImports(node.importClause.namedBindings)
                    ? node.importClause.namedBindings.elements
                    : [];
            });
            // insert import if it's not there
            if (!imports.some(node => (node.propertyName || node.name).text === symbolName)) {
                const fallbackPos = findNodes(relevantImports[0], ts.SyntaxKind.CloseBraceToken)[0].getStart() ||
                    findNodes(relevantImports[0], ts.SyntaxKind.FromKeyword)[0].getStart();
                return insertAfterLastOccurrence(imports, `, ${importExpression}`, fileToEdit, fallbackPos);
            }
            return new change_1.NoopChange();
        }
        // no such import declaration exists
        const useStrict = findNodes(rootNode, ts.isStringLiteral).filter(n => n.text === 'use strict');
        let fallbackPos = 0;
        if (useStrict.length > 0) {
            fallbackPos = useStrict[0].end;
        }
        const open = isDefault ? '' : '{ ';
        const close = isDefault ? '' : ' }';
        const eol = (0, eol_1.getEOL)(rootNode.getText());
        // if there are no imports or 'use strict' statement, insert import at beginning of file
        const insertAtBeginning = allImports.length === 0 && useStrict.length === 0;
        const separator = insertAtBeginning ? '' : `;${eol}`;
        const toInsert = `${separator}import ${open}${importExpression}${close}` +
            ` from '${fileName}'${insertAtBeginning ? `;${eol}` : ''}`;
        return insertAfterLastOccurrence(allImports, toInsert, fileToEdit, fallbackPos, ts.SyntaxKind.StringLiteral);
    }
    exports.insertImport = insertImport;
    function findNodes(node, kindOrGuard, max = Infinity, recursive = false) {
        if (!node || max == 0) {
            return [];
        }
        const test = typeof kindOrGuard === 'function'
            ? kindOrGuard
            : (node) => node.kind === kindOrGuard;
        const arr = [];
        if (test(node)) {
            arr.push(node);
            max--;
        }
        if (max > 0 && (recursive || !test(node))) {
            for (const child of node.getChildren()) {
                findNodes(child, test, max, recursive).forEach(node => {
                    if (max > 0) {
                        arr.push(node);
                    }
                    max--;
                });
                if (max <= 0) {
                    break;
                }
            }
        }
        return arr;
    }
    exports.findNodes = findNodes;
    /**
     * Get all the nodes from a source.
     * @param sourceFile The source file object.
     * @returns {Array<ts.Node>} An array of all the nodes in the source.
     */
    function getSourceNodes(sourceFile) {
        const nodes = [sourceFile];
        const result = [];
        while (nodes.length > 0) {
            const node = nodes.shift();
            if (node) {
                result.push(node);
                if (node.getChildCount(sourceFile) >= 0) {
                    nodes.unshift(...node.getChildren());
                }
            }
        }
        return result;
    }
    exports.getSourceNodes = getSourceNodes;
    function findNode(node, kind, text) {
        if (node.kind === kind && node.getText() === text) {
            return node;
        }
        let foundNode = null;
        ts.forEachChild(node, childNode => {
            foundNode = foundNode || findNode(childNode, kind, text);
        });
        return foundNode;
    }
    exports.findNode = findNode;
    /**
     * Helper for sorting nodes.
     * @return function to sort nodes in increasing order of position in sourceFile
     */
    function nodesByPosition(first, second) {
        return first.getStart() - second.getStart();
    }
    /**
     * Insert `toInsert` after the last occurence of `ts.SyntaxKind[nodes[i].kind]`
     * or after the last of occurence of `syntaxKind` if the last occurence is a sub child
     * of ts.SyntaxKind[nodes[i].kind] and save the changes in file.
     *
     * @param nodes insert after the last occurence of nodes
     * @param toInsert string to insert
     * @param file file to insert changes into
     * @param fallbackPos position to insert if toInsert happens to be the first occurence
     * @param syntaxKind the ts.SyntaxKind of the subchildren to insert after
     * @return Change instance
     * @throw Error if toInsert is first occurence but fall back is not set
     */
    function insertAfterLastOccurrence(nodes, toInsert, file, fallbackPos, syntaxKind) {
        let lastItem;
        for (const node of nodes) {
            if (!lastItem || lastItem.getStart() < node.getStart()) {
                lastItem = node;
            }
        }
        if (syntaxKind && lastItem) {
            lastItem = findNodes(lastItem, syntaxKind).sort(nodesByPosition).pop();
        }
        if (!lastItem && fallbackPos == undefined) {
            throw new Error(`tried to insert ${toInsert} as first occurence with no fallback position`);
        }
        const lastItemPosition = lastItem ? lastItem.getEnd() : fallbackPos;
        return new change_1.InsertChange(file, lastItemPosition, toInsert);
    }
    exports.insertAfterLastOccurrence = insertAfterLastOccurrence;
    function _angularImportsFromNode(node) {
        const ms = node.moduleSpecifier;
        let modulePath;
        switch (ms.kind) {
            case ts.SyntaxKind.StringLiteral:
                modulePath = ms.text;
                break;
            default:
                return {};
        }
        if (!modulePath.startsWith('@angular/')) {
            return {};
        }
        if (node.importClause) {
            if (node.importClause.name) {
                // This is of the form `import Name from 'path'`. Ignore.
                return {};
            }
            else if (node.importClause.namedBindings) {
                const nb = node.importClause.namedBindings;
                if (nb.kind == ts.SyntaxKind.NamespaceImport) {
                    // This is of the form `import * as name from 'path'`. Return `name.`.
                    return {
                        [nb.name.text + '.']: modulePath,
                    };
                }
                else {
                    // This is of the form `import {a,b,c} from 'path'`
                    const namedImports = nb;
                    return namedImports.elements
                        .map((is) => (is.propertyName ? is.propertyName.text : is.name.text))
                        .reduce((acc, curr) => {
                        acc[curr] = modulePath;
                        return acc;
                    }, {});
                }
            }
            return {};
        }
        else {
            // This is of the form `import 'path';`. Nothing to do.
            return {};
        }
    }
    function getDecoratorMetadata(source, identifier, module) {
        const angularImports = findNodes(source, ts.isImportDeclaration)
            .map(node => _angularImportsFromNode(node))
            .reduce((acc, current) => {
            for (const key of Object.keys(current)) {
                acc[key] = current[key];
            }
            return acc;
        }, {});
        return getSourceNodes(source)
            .filter(node => {
            return (node.kind == ts.SyntaxKind.Decorator &&
                node.expression.kind == ts.SyntaxKind.CallExpression);
        })
            .map(node => node.expression)
            .filter(expr => {
            if (expr.expression.kind == ts.SyntaxKind.Identifier) {
                const id = expr.expression;
                return id.text == identifier && angularImports[id.text] === module;
            }
            else if (expr.expression.kind == ts.SyntaxKind.PropertyAccessExpression) {
                // This covers foo.NgModule when importing * as foo.
                const paExpr = expr.expression;
                // If the left expression is not an identifier, just give up at that point.
                if (paExpr.expression.kind !== ts.SyntaxKind.Identifier) {
                    return false;
                }
                const id = paExpr.name.text;
                const moduleId = paExpr.expression.text;
                return id === identifier && angularImports[moduleId + '.'] === module;
            }
            return false;
        })
            .filter(expr => expr.arguments[0] && expr.arguments[0].kind == ts.SyntaxKind.ObjectLiteralExpression)
            .map(expr => expr.arguments[0]);
    }
    exports.getDecoratorMetadata = getDecoratorMetadata;
    function getMetadataField(node, metadataField) {
        return (node.properties
            .filter(ts.isPropertyAssignment)
            // Filter out every fields that's not "metadataField". Also handles string literals
            // (but not expressions).
            .filter(({ name }) => {
            return (ts.isIdentifier(name) || ts.isStringLiteral(name)) && name.text === metadataField;
        }));
    }
    exports.getMetadataField = getMetadataField;
    function addSymbolToNgModuleMetadata(source, ngModulePath, metadataField, symbolName, importPath = null) {
        const nodes = getDecoratorMetadata(source, 'NgModule', '@angular/core');
        const node = nodes[0];
        // Find the decorator declaration.
        if (!node || !ts.isObjectLiteralExpression(node)) {
            return [];
        }
        // Get all the children property assignment of object literals.
        const matchingProperties = getMetadataField(node, metadataField);
        if (matchingProperties.length == 0) {
            // We haven't found the field in the metadata declaration. Insert a new field.
            let position;
            let toInsert;
            if (node.properties.length == 0) {
                position = node.getEnd() - 1;
                toInsert = `\n  ${metadataField}: [\n${core_1.tags.indentBy(4) `${symbolName}`}\n  ]\n`;
            }
            else {
                const childNode = node.properties[node.properties.length - 1];
                position = childNode.getEnd();
                // Get the indentation of the last element, if any.
                const text = childNode.getFullText(source);
                const matches = text.match(/^(\r?\n)(\s*)/);
                if (matches) {
                    toInsert =
                        `,${matches[0]}${metadataField}: [${matches[1]}` +
                            `${core_1.tags.indentBy(matches[2].length + 2) `${symbolName}`}${matches[0]}]`;
                }
                else {
                    toInsert = `, ${metadataField}: [${symbolName}]`;
                }
            }
            if (importPath !== null) {
                return [
                    new change_1.InsertChange(ngModulePath, position, toInsert),
                    insertImport(source, ngModulePath, symbolName.replace(/\..*$/, ''), importPath),
                ];
            }
            else {
                return [new change_1.InsertChange(ngModulePath, position, toInsert)];
            }
        }
        const assignment = matchingProperties[0];
        // If it's not an array, nothing we can do really.
        if (!ts.isPropertyAssignment(assignment) ||
            !ts.isArrayLiteralExpression(assignment.initializer)) {
            return [];
        }
        let expression;
        const assignmentInit = assignment.initializer;
        const elements = assignmentInit.elements;
        if (elements.length) {
            const symbolsArray = elements.map(node => core_1.tags.oneLine `${node.getText()}`);
            if (symbolsArray.includes(core_1.tags.oneLine `${symbolName}`)) {
                return [];
            }
            expression = elements[elements.length - 1];
        }
        else {
            expression = assignmentInit;
        }
        let toInsert;
        let position = expression.getEnd();
        if (ts.isArrayLiteralExpression(expression)) {
            // We found the field but it's empty. Insert it just before the `]`.
            position--;
            toInsert = `\n${core_1.tags.indentBy(4) `${symbolName}`}\n  `;
        }
        else {
            // Get the indentation of the last element, if any.
            const text = expression.getFullText(source);
            const matches = text.match(/^(\r?\n)(\s*)/);
            if (matches) {
                toInsert = `,${matches[1]}${core_1.tags.indentBy(matches[2].length) `${symbolName}`}`;
            }
            else {
                toInsert = `, ${symbolName}`;
            }
        }
        if (importPath !== null) {
            return [
                new change_1.InsertChange(ngModulePath, position, toInsert),
                insertImport(source, ngModulePath, symbolName.replace(/\..*$/, ''), importPath),
            ];
        }
        return [new change_1.InsertChange(ngModulePath, position, toInsert)];
    }
    exports.addSymbolToNgModuleMetadata = addSymbolToNgModuleMetadata;
    /**
     * Custom function to insert a declaration (component, pipe, directive)
     * into NgModule declarations. It also imports the component.
     */
    function addDeclarationToModule(source, modulePath, classifiedName, importPath) {
        return addSymbolToNgModuleMetadata(source, modulePath, 'declarations', classifiedName, importPath);
    }
    exports.addDeclarationToModule = addDeclarationToModule;
    /**
     * Custom function to insert an NgModule into NgModule imports. It also imports the module.
     */
    function addImportToModule(source, modulePath, classifiedName, importPath) {
        return addSymbolToNgModuleMetadata(source, modulePath, 'imports', classifiedName, importPath);
    }
    exports.addImportToModule = addImportToModule;
    /**
     * Custom function to insert a provider into NgModule. It also imports it.
     */
    function addProviderToModule(source, modulePath, classifiedName, importPath) {
        return addSymbolToNgModuleMetadata(source, modulePath, 'providers', classifiedName, importPath);
    }
    exports.addProviderToModule = addProviderToModule;
    /**
     * Custom function to insert an export into NgModule. It also imports it.
     */
    function addExportToModule(source, modulePath, classifiedName, importPath) {
        return addSymbolToNgModuleMetadata(source, modulePath, 'exports', classifiedName, importPath);
    }
    exports.addExportToModule = addExportToModule;
    /**
     * Custom function to insert an export into NgModule. It also imports it.
     */
    function addBootstrapToModule(source, modulePath, classifiedName, importPath) {
        return addSymbolToNgModuleMetadata(source, modulePath, 'bootstrap', classifiedName, importPath);
    }
    exports.addBootstrapToModule = addBootstrapToModule;
    /**
     * Determine if an import already exists.
     */
    function isImported(source, classifiedName, importPath) {
        const allNodes = getSourceNodes(source);
        const matchingNodes = allNodes
            .filter(ts.isImportDeclaration)
            .filter(imp => ts.isStringLiteral(imp.moduleSpecifier) && imp.moduleSpecifier.text === importPath)
            .filter(imp => {
            if (!imp.importClause) {
                return false;
            }
            const nodes = findNodes(imp.importClause, ts.isImportSpecifier).filter(n => n.getText() === classifiedName);
            return nodes.length > 0;
        });
        return matchingNodes.length > 0;
    }
    exports.isImported = isImported;
    /**
     * Returns the RouterModule declaration from NgModule metadata, if any.
     */
    function getRouterModuleDeclaration(source) {
        const result = getDecoratorMetadata(source, 'NgModule', '@angular/core');
        const node = result[0];
        if (!node || !ts.isObjectLiteralExpression(node)) {
            return undefined;
        }
        const matchingProperties = getMetadataField(node, 'imports');
        if (!matchingProperties) {
            return;
        }
        const assignment = matchingProperties[0];
        if (assignment.initializer.kind !== ts.SyntaxKind.ArrayLiteralExpression) {
            return;
        }
        const arrLiteral = assignment.initializer;
        return arrLiteral.elements
            .filter(el => el.kind === ts.SyntaxKind.CallExpression)
            .find(el => el.getText().startsWith('RouterModule'));
    }
    exports.getRouterModuleDeclaration = getRouterModuleDeclaration;
    /**
     * Adds a new route declaration to a router module (i.e. has a RouterModule declaration)
     */
    function addRouteDeclarationToModule(source, fileToAdd, routeLiteral) {
        const routerModuleExpr = getRouterModuleDeclaration(source);
        if (!routerModuleExpr) {
            throw new Error(`Couldn't find a route declaration in ${fileToAdd}.\n` +
                `Use the '--module' option to specify a different routing module.`);
        }
        const scopeConfigMethodArgs = routerModuleExpr.arguments;
        if (!scopeConfigMethodArgs.length) {
            const { line } = source.getLineAndCharacterOfPosition(routerModuleExpr.getStart());
            throw new Error(`The router module method doesn't have arguments ` + `at line ${line} in ${fileToAdd}`);
        }
        let routesArr;
        const routesArg = scopeConfigMethodArgs[0];
        // Check if the route declarations array is
        // an inlined argument of RouterModule or a standalone variable
        if (ts.isArrayLiteralExpression(routesArg)) {
            routesArr = routesArg;
        }
        else {
            const routesVarName = routesArg.getText();
            let routesVar;
            if (routesArg.kind === ts.SyntaxKind.Identifier) {
                routesVar = source.statements.filter(ts.isVariableStatement).find(v => {
                    return v.declarationList.declarations[0].name.getText() === routesVarName;
                });
            }
            if (!routesVar) {
                const { line } = source.getLineAndCharacterOfPosition(routesArg.getStart());
                throw new Error(`No route declaration array was found that corresponds ` +
                    `to router module at line ${line} in ${fileToAdd}`);
            }
            routesArr = findNodes(routesVar, ts.SyntaxKind.ArrayLiteralExpression, 1)[0];
        }
        const occurrencesCount = routesArr.elements.length;
        const text = routesArr.getFullText(source);
        let route = routeLiteral;
        let insertPos = routesArr.elements.pos;
        if (occurrencesCount > 0) {
            const lastRouteLiteral = [...routesArr.elements].pop();
            const lastRouteIsWildcard = ts.isObjectLiteralExpression(lastRouteLiteral) &&
                lastRouteLiteral.properties.some(n => ts.isPropertyAssignment(n) &&
                    ts.isIdentifier(n.name) &&
                    n.name.text === 'path' &&
                    ts.isStringLiteral(n.initializer) &&
                    n.initializer.text === '**');
            const indentation = text.match(/\r?\n(\r?)\s*/) || [];
            const routeText = `${indentation[0] || ' '}${routeLiteral}`;
            // Add the new route before the wildcard route
            // otherwise we'll always redirect to the wildcard route
            if (lastRouteIsWildcard) {
                insertPos = lastRouteLiteral.pos;
                route = `${routeText},`;
            }
            else {
                insertPos = lastRouteLiteral.end;
                route = `,${routeText}`;
            }
        }
        return new change_1.InsertChange(fileToAdd, insertPos, route);
    }
    exports.addRouteDeclarationToModule = addRouteDeclarationToModule;
    /** Asserts if the specified node is a named declaration (e.g. class, interface). */
    function isNamedNode(node) {
        return !!node.name && ts.isIdentifier(node.name);
    }
    /**
     * Determines if a SourceFile has a top-level declaration whose name matches a specific symbol.
     * Can be used to avoid conflicts when inserting new imports into a file.
     * @param sourceFile File in which to search.
     * @param symbolName Name of the symbol to search for.
     * @param skipModule Path of the module that the symbol may have been imported from. Used to
     * avoid false positives where the same symbol we're looking for may have been imported.
     */
    function hasTopLevelIdentifier(sourceFile, symbolName, skipModule = null) {
        for (const node of sourceFile.statements) {
            if (isNamedNode(node) && node.name.text === symbolName) {
                return true;
            }
            if (ts.isVariableStatement(node) &&
                node.declarationList.declarations.some(decl => {
                    return isNamedNode(decl) && decl.name.text === symbolName;
                })) {
                return true;
            }
            if (ts.isImportDeclaration(node) &&
                ts.isStringLiteralLike(node.moduleSpecifier) &&
                node.moduleSpecifier.text !== skipModule &&
                node.importClause?.namedBindings &&
                ts.isNamedImports(node.importClause.namedBindings) &&
                node.importClause.namedBindings.elements.some(el => el.name.text === symbolName)) {
                return true;
            }
        }
        return false;
    }
    exports.hasTopLevelIdentifier = hasTopLevelIdentifier;
    //# sourceMappingURL=ast-utils.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\ast-utils.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import * as ts from 'typescript';
    import { Change } from './change';
    /**
     * Add Import `import { symbolName } from fileName` if the import doesn't exit
     * already. Assumes fileToEdit can be resolved and accessed.
     * @param fileToEdit File we want to add import to.
     * @param symbolName Item to import.
     * @param fileName Path to the file.
     * @param isDefault If true, import follows style for importing default exports.
     * @param alias Alias that the symbol should be inserted under.
     * @return Change
     */
    export declare function insertImport(source: ts.SourceFile, fileToEdit: string, symbolName: string, fileName: string, isDefault?: boolean, alias?: string): Change;
    /**
     * Find all nodes from the AST in the subtree of node of SyntaxKind kind.
     * @param node
     * @param kind
     * @param max The maximum number of items to return.
     * @param recursive Continue looking for nodes of kind recursive until end
     * the last child even when node of kind has been found.
     * @return all nodes of kind, or [] if none is found
     */
    export declare function findNodes(node: ts.Node, kind: ts.SyntaxKind, max?: number, recursive?: boolean): ts.Node[];
    /**
     * Find all nodes from the AST in the subtree that satisfy a type guard.
     * @param node
     * @param guard
     * @param max The maximum number of items to return.
     * @param recursive Continue looking for nodes of kind recursive until end
     * the last child even when node of kind has been found.
     * @return all nodes that satisfy the type guard, or [] if none is found
     */
    export declare function findNodes<T extends ts.Node>(node: ts.Node, guard: (node: ts.Node) => node is T, max?: number, recursive?: boolean): T[];
    /**
     * Get all the nodes from a source.
     * @param sourceFile The source file object.
     * @returns {Array<ts.Node>} An array of all the nodes in the source.
     */
    export declare function getSourceNodes(sourceFile: ts.SourceFile): ts.Node[];
    export declare function findNode(node: ts.Node, kind: ts.SyntaxKind, text: string): ts.Node | null;
    /**
     * Insert `toInsert` after the last occurence of `ts.SyntaxKind[nodes[i].kind]`
     * or after the last of occurence of `syntaxKind` if the last occurence is a sub child
     * of ts.SyntaxKind[nodes[i].kind] and save the changes in file.
     *
     * @param nodes insert after the last occurence of nodes
     * @param toInsert string to insert
     * @param file file to insert changes into
     * @param fallbackPos position to insert if toInsert happens to be the first occurence
     * @param syntaxKind the ts.SyntaxKind of the subchildren to insert after
     * @return Change instance
     * @throw Error if toInsert is first occurence but fall back is not set
     */
    export declare function insertAfterLastOccurrence(nodes: ts.Node[] | ts.NodeArray<ts.Node>, toInsert: string, file: string, fallbackPos: number, syntaxKind?: ts.SyntaxKind): Change;
    export declare function getDecoratorMetadata(source: ts.SourceFile, identifier: string, module: string): ts.Node[];
    export declare function getMetadataField(node: ts.ObjectLiteralExpression, metadataField: string): ts.ObjectLiteralElement[];
    export declare function addSymbolToNgModuleMetadata(source: ts.SourceFile, ngModulePath: string, metadataField: string, symbolName: string, importPath?: string | null): Change[];
    /**
     * Custom function to insert a declaration (component, pipe, directive)
     * into NgModule declarations. It also imports the component.
     */
    export declare function addDeclarationToModule(source: ts.SourceFile, modulePath: string, classifiedName: string, importPath: string): Change[];
    /**
     * Custom function to insert an NgModule into NgModule imports. It also imports the module.
     */
    export declare function addImportToModule(source: ts.SourceFile, modulePath: string, classifiedName: string, importPath: string): Change[];
    /**
     * Custom function to insert a provider into NgModule. It also imports it.
     */
    export declare function addProviderToModule(source: ts.SourceFile, modulePath: string, classifiedName: string, importPath: string): Change[];
    /**
     * Custom function to insert an export into NgModule. It also imports it.
     */
    export declare function addExportToModule(source: ts.SourceFile, modulePath: string, classifiedName: string, importPath: string): Change[];
    /**
     * Custom function to insert an export into NgModule. It also imports it.
     */
    export declare function addBootstrapToModule(source: ts.SourceFile, modulePath: string, classifiedName: string, importPath: string): Change[];
    /**
     * Determine if an import already exists.
     */
    export declare function isImported(source: ts.SourceFile, classifiedName: string, importPath: string): boolean;
    /**
     * Returns the RouterModule declaration from NgModule metadata, if any.
     */
    export declare function getRouterModuleDeclaration(source: ts.SourceFile): ts.Expression | undefined;
    /**
     * Adds a new route declaration to a router module (i.e. has a RouterModule declaration)
     */
    export declare function addRouteDeclarationToModule(source: ts.SourceFile, fileToAdd: string, routeLiteral: string): Change;
    /**
     * Determines if a SourceFile has a top-level declaration whose name matches a specific symbol.
     * Can be used to avoid conflicts when inserting new imports into a file.
     * @param sourceFile File in which to search.
     * @param symbolName Name of the symbol to search for.
     * @param skipModule Path of the module that the symbol may have been imported from. Used to
     * avoid false positives where the same symbol we're looking for may have been imported.
     */
    export declare function hasTopLevelIdentifier(sourceFile: ts.SourceFile, symbolName: string, skipModule?: string | null): boolean;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\add-declaration-to-ng-module.js.map"><![CDATA[
    {"version":3,"file":"add-declaration-to-ng-module.js","sourceRoot":"","sources":["../../../../../packages/suite/src/utils/angular/add-declaration-to-ng-module.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,2DAAiE;AACjE,iCAAiC;AACjC,2CAAkF;AAClF,qCAAwC;AACxC,+CAAkD;AAalD,SAAgB,wBAAwB,CAAC,OAAqC;IAC5E,OAAO,CAAC,IAAU,EAAE,EAAE;QACpB,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;QAElC,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,UAAU,EAAE;YAC3D,OAAO,IAAI,CAAC;SACb;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEzF,MAAM,QAAQ,GACZ,IAAI,OAAO,CAAC,IAAI,GAAG;YACnB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,oBAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;YAC3D,oBAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC;YAC/B,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACzB,oBAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAElC,MAAM,UAAU,GAAG,IAAA,+BAAiB,EAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC3D,MAAM,cAAc,GAAG,oBAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,oBAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvF,MAAM,OAAO,GAAG,IAAA,kCAAsB,EAAC,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;QAEvF,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAO,CAAC,IAAI,CAAC,GAAG,IAAA,uCAA2B,EAAC,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;SAC7F;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC9C,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,IAAI,MAAM,YAAY,qBAAY,EAAE;gBAClC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;aAC/C;SACF;QACD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AApCD,4DAoCC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\add-declaration-to-ng-module.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addDeclarationToNgModule = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const ts = require("typescript");
    const ast_utils_1 = require("./ast-utils");
    const change_1 = require("./change");
    const find_module_1 = require("./find-module");
    function addDeclarationToNgModule(options) {
        return (host) => {
            const modulePath = options.module;
            if (options.skipImport || options.standalone || !modulePath) {
                return host;
            }
            const sourceText = host.readText(modulePath);
            const source = ts.createSourceFile(modulePath, sourceText, ts.ScriptTarget.Latest, true);
            const filePath = `/${options.path}/` +
                (options.flat ? '' : schematics_1.strings.dasherize(options.name) + '/') +
                schematics_1.strings.dasherize(options.name) +
                (options.type ? '.' : '') +
                schematics_1.strings.dasherize(options.type);
            const importPath = (0, find_module_1.buildRelativePath)(modulePath, filePath);
            const classifiedName = schematics_1.strings.classify(options.name) + schematics_1.strings.classify(options.type);
            const changes = (0, ast_utils_1.addDeclarationToModule)(source, modulePath, classifiedName, importPath);
            if (options.export) {
                changes.push(...(0, ast_utils_1.addSymbolToNgModuleMetadata)(source, modulePath, 'exports', classifiedName));
            }
            const recorder = host.beginUpdate(modulePath);
            for (const change of changes) {
                if (change instanceof change_1.InsertChange) {
                    recorder.insertLeft(change.pos, change.toAdd);
                }
            }
            host.commitUpdate(recorder);
            return host;
        };
    }
    exports.addDeclarationToNgModule = addDeclarationToNgModule;
    //# sourceMappingURL=add-declaration-to-ng-module.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\add-declaration-to-ng-module.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    import { Rule } from '@angular-devkit/schematics';
    export interface DeclarationToNgModuleOptions {
        module?: string;
        path?: string;
        name: string;
        flat?: boolean;
        export?: boolean;
        type: string;
        skipImport?: boolean;
        standalone?: boolean;
    }
    export declare function addDeclarationToNgModule(options: DeclarationToNgModuleOptions): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\schema.json"><![CDATA[
    {
      "$schema": "http://json-schema.org/schema",
      "$id": "SchematicsAbpEntityModule",
      "title": "ABP Entity Module Schema",
      "type": "object",
      "properties": {
        "template": {
          "description": "Which template to use",
          "type": "string",
          "enum": ["app-pro", "app-nolayers-pro", "microservice-pro", "module-pro"],
          "$default": {
            "$source": "argv",
            "index": 0
          },
          "x-prompt": "Please choose a template."
        },
        "target": {
          "description": "The solution name to generate the code for",
          "type": "string",
          "$default": {
            "$source": "argv",
            "index": 1
          },
          "x-prompt": "Please enter complete solution name. (case-sensitive, e.g. Acme.BookStore)"
        },
        "source": {
          "description": "The path to read entity info from",
          "type": "string",
          "$default": {
            "$source": "argv",
            "index": 2
          },
          "x-prompt": "Please enter the absolute path to JSON file with entity information."
        },
        "selector": {
          "description": "A custom selector for entity CRUD component",
          "type": "string",
          "format": "html-selector",
          "visible": false
        }
      },
      "required": ["template", "source"]
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\schema.js.map"><![CDATA[
    {"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../../packages/suite/src/commands/generate-entity/schema.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\schema.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=schema.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\schema.d.ts"><![CDATA[
    import { Template } from '../../enums';
    export interface Schema {
        /**
         * A custom selector for entity CRUD component
         */
        selector?: string;
        /**
         * The path to read entity info from
         */
        source: string;
        /**
         * The solution name to generate the code for
         */
        target: string;
        /**
         * Which template to use
         */
        template: Template;
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../packages/suite/src/commands/generate-entity/index.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\index.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const enums_1 = require("../../enums");
    const paths = require("../../utils/path");
    const cases = require("../../utils/text");
    const utils_1 = require("../../utils");
    const entity_template_option_1 = require("../entity-template-option");
    const create_entity_files_factory_1 = require("./utils/create-entity-files-factory");
    const create_library_if_not_exists_1 = require("./utils/create-library-if-not-exists");
    const add_entity_to_route_1 = require("./utils/add-entity-to-route");
    const add_entity_to_routes_1 = require("./utils/standalone/add-entity-to-routes");
    const add_entity_to_providers_1 = require("./utils/standalone/add-entity-to-providers");
    function default_1(params) {
        const isMS = (0, utils_1.checkIsMS)(params.template);
        const entity = (0, utils_1.readSourceJson)(params.source);
        const preserveCustomCode = entity.PreserveCustomCode;
        const solution = params.target;
        const projectName = solution.split('.').pop(); // BookStore in Acme.BookStore
        const namespace = entity.Namespace;
        let createLib = (0, schematics_1.noop)();
        if (isMS) {
            createLib = (0, create_library_if_not_exists_1.crateLibIfNotExist)(projectName);
        }
        return async (tree) => {
            const { options, project } = await (0, utils_1.resolveModuleOptions)(tree, {
                project: projectName,
                name: entity.Name,
                route: core_1.strings.dasherize(entity.NamePlural),
                selector: params.selector,
            });
            const isModule = (0, utils_1.checkIsModule)(params.template, project);
            const path = namespace ? `${options.path}/${cases.dir(namespace)}` : options.path || '';
            const isProjectStandalone = Boolean(options.standalone);
            const targetPath = (0, core_1.normalize)(path + paths.relativePathToSrcRoot(namespace));
            const entityTemplateOptions = new entity_template_option_1.EntityTemplateOptions({
                solution,
                project: projectName,
                selector: options.selector,
                entity,
                projectTemplate: params.template,
                projectDefinition: project,
                targetPath,
                preserveCustomCode,
                projectPrefix: project.prefix || 'app',
            });
            const createEntityFiles = (0, create_entity_files_factory_1.createEntityFilesFactory)(entityTemplateOptions, isProjectStandalone);
            const chainItems = [createLib, createEntityFiles];
            if (entityTemplateOptions.type === enums_1.EntityType.Master) {
                let createEntityRoute = (0, utils_1.addRoutingToModule)({ ...options, path }, isModule);
                let addRouteProvider = (0, add_entity_to_route_1.addEntityToRoute)(tree, entity, isModule || isMS, project, isProjectStandalone);
                if (isProjectStandalone) {
                    const isModuleLibrary = (0, utils_1.isLibrary)(project);
                    addRouteProvider = await (0, add_entity_to_providers_1.addEntityToProviders)(tree, entity, projectName, isModuleLibrary);
                    createEntityRoute = await (0, add_entity_to_routes_1.addEntityToRoutes)(tree, projectName, entity, isModuleLibrary, options.route);
                }
                chainItems.push(createEntityRoute, addRouteProvider);
            }
            return (0, schematics_1.branchAndMerge)((0, schematics_1.chain)(chainItems));
        };
    }
    exports.default = default_1;
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\index.d.ts"><![CDATA[
    import { Tree } from '@angular-devkit/schematics';
    import { Schema as EntitySchema } from './schema';
    export default function (params: EntitySchema): (tree: Tree) => Promise<import("@angular-devkit/schematics").Rule>;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\schema.json"><![CDATA[
    {
      "$schema": "http://json-schema.org/schema",
      "$id": "SchematicsAbpEntityModule",
      "title": "ABP Entity Module Schema",
      "type": "object",
      "properties": {
        "template": {
          "description": "Which template to use",
          "type": "string",
          "enum": ["app-pro", "app-nolayers-pro", "microservice-pro", "module-pro"],
          "$default": {
            "$source": "argv",
            "index": 0
          },
          "x-prompt": "Please choose a template."
        },
        "target": {
          "description": "The solution name to generate the code for",
          "type": "string",
          "$default": {
            "$source": "argv",
            "index": 1
          },
          "x-prompt": "Please enter complete solution name. (case-sensitive, e.g. Acme.BookStore)"
        },
        "source": {
          "description": "The path to read entity info from",
          "type": "string",
          "$default": {
            "$source": "argv",
            "index": 2
          },
          "x-prompt": "Please enter the absolute path to JSON file with entity information."
        },
        "selector": {
          "description": "A custom selector for entity CRUD component",
          "type": "string",
          "format": "html-selector",
          "visible": false
        }
      },
      "required": ["template", "source"]
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\schema.js.map"><![CDATA[
    {"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../../packages/suite/src/commands/entity/schema.ts"],"names":[],"mappings":""}
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\schema.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //# sourceMappingURL=schema.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\schema.d.ts"><![CDATA[
    import { Template } from '../../enums';
    export interface Schema {
        /**
         * A custom selector for entity CRUD component
         */
        selector?: string;
        /**
         * The path to read entity info from
         */
        source: string;
        /**
         * The solution name to generate the code for
         */
        target: string;
        /**
         * Which template to use
         */
        template: Template;
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../packages/suite/src/commands/entity/index.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\index.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const constants_1 = require("../../constants");
    const enums_1 = require("../../enums");
    const cases = require("../../utils/text");
    const utils_1 = require("../../utils");
    function default_1(params) {
        let entity = (0, utils_1.readSourceJson)(params.source);
        const solution = params.target;
        if (!solution) {
            throw new Error(`No solution specified. Params:\n ${JSON.stringify(params, null, 2)}`);
        }
        const projectName = solution.split('.').pop(); // BookStore in Acme.BookStore
        if (!projectName) {
            throw new Error(`No project name specified. Project Name: ${projectName}`);
        }
        const namespace = entity.Namespace;
        return (0, schematics_1.chain)([
            async (tree, _context) => {
                const { options, project } = await (0, utils_1.resolveModuleOptions)(tree, {
                    project: projectName,
                    name: entity.Name,
                    route: core_1.strings.dasherize(entity.NamePlural),
                    selector: params.selector,
                });
                if (namespace)
                    options.path = `${options.path}/${cases.dir(namespace)}`;
                const isModule = (0, utils_1.checkIsModule)(params.template, project);
                const isMS = (0, utils_1.checkIsMS)(params.template, project);
                const { isModuleLibrary, isMicroserviceLibrary } = (0, utils_1.getProjectStructureFlags)(params.template, project);
                const createEntityFiles = (0, schematics_1.externalSchematic)(constants_1.ABP_COMMERCIAL_SCHEMATICS_PATH, enums_1.ABPSchematics.GenerateEntity, params);
                const apiName = isModule || isMS ? projectName : 'default';
                let moduleName = 'app';
                if (isModuleLibrary) {
                    moduleName = cases.camel(projectName);
                }
                if (isMicroserviceLibrary) {
                    moduleName = cases.lower(cases.removePostfix(projectName, 'Service'));
                }
                const generateProxyJsonTasks = [];
                const addTask = (e) => {
                    const proxyParam = new utils_1.ProxyJsonParams({
                        project,
                        solution,
                        moduleName,
                        apiName,
                        entity: e,
                        projectTemplate: params.template,
                        isMS,
                        isModule,
                    });
                    const proxyGeneratorTask = (0, utils_1.createProxyJsonGenerator)(proxyParam);
                    generateProxyJsonTasks.push(proxyGeneratorTask);
                };
                if (!!entity.MasterEntity) {
                    //Set entity variable as MasterEntity
                    entity = (0, utils_1.readSourceJson)(params.source.replace(entity.Name, entity.MasterEntity.Name));
                }
                addTask(entity);
                entity.ChildEntities.forEach(childEntity => addTask(childEntity));
                const sourceName = isModule || isMS ? '__default' : options.project;
                const serviceType = 'application';
                const generateProxy = (0, schematics_1.externalSchematic)(constants_1.ABP_SCHEMATICS_PATH, enums_1.ABPSchematics.Api, {
                    module: moduleName,
                    apiName: apiName,
                    source: sourceName,
                    target: options.project,
                    serviceType: serviceType,
                });
                const generateIndex = (0, schematics_1.externalSchematic)(constants_1.ABP_SCHEMATICS_PATH, enums_1.ABPSchematics.ProxyIndex, {
                    target: options.project,
                });
                const formatFilesFn = (_tree) => (0, utils_1.formatFiles)(_tree);
                return (0, schematics_1.branchAndMerge)((0, schematics_1.chain)([
                    createEntityFiles,
                    ...generateProxyJsonTasks,
                    generateProxy,
                    generateIndex,
                    formatFilesFn,
                ]));
            },
        ]);
    }
    exports.default = default_1;
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\entity\index.d.ts"><![CDATA[
    import { Rule } from '@angular-devkit/schematics';
    import { Schema as EntitySchema } from './schema';
    export default function (params: EntitySchema): Rule;
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\rabbitmq\templates\rabbitmq.yaml"><![CDATA[
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      serviceName: "{{ .Release.Name }}-{{ .Chart.Name }}"
      replicas: 1
      selector:
        matchLabels:
          app: "{{ .Release.Name }}-{{ .Chart.Name }}"
      template:
        metadata:
          labels:
            app: "{{ .Release.Name }}-{{ .Chart.Name }}"
        spec:
          containers:
            - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              name: "{{ .Release.Name }}-{{ .Chart.Name }}"
              ports:
                - name: "http"
                  protocol: TCP
                  containerPort: {{ .Values.ports.http }}
                - name: "amqp"
                  protocol: TCP
                  containerPort: {{ .Values.ports.amqp }}
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\rabbitmq\templates\rabbitmq-service.yaml"><![CDATA[
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      type: ClusterIP
      ports:
        - name: "http"
          protocol: TCP
          port: {{ .Values.ports.http }}
          targetPort: {{ .Values.ports.http }}
        - name: "amqp"
          protocol: TCP
          port: {{ .Values.ports.amqp }}
          targetPort: {{ .Values.ports.amqp }}
      selector:
        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
    
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\sqlserver\templates\sqlserver.yaml"><![CDATA[
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      serviceName: "{{ .Release.Name }}-{{ .Chart.Name }}"
      replicas: 1
      selector:
        matchLabels:
          app: "{{ .Release.Name }}-{{ .Chart.Name }}"
      template:
        metadata:
          labels:
            app: "{{ .Release.Name }}-{{ .Chart.Name }}"
        spec:
          containers:
            - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              name: "{{ .Release.Name }}-{{ .Chart.Name }}"
              ports:
                - name: "{{ .Chart.Name }}"
                  containerPort: {{ .Values.port }}
              env:
              - name: "SA_PASSWORD"
                value: "{{ .Values.sa_password }}"
              - name: "ACCEPT_EULA"
                value: "Y"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\sqlserver\templates\sqlserver-service.yaml"><![CDATA[
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      type: ClusterIP
      ports:
        - name: "{{ .Chart.Name }}"
          port: {{ .Values.port }}
      selector:
        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
    
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\httpapihost\templates\httpapihost.yaml"><![CDATA[
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      selector:
        matchLabels:
          app: "{{ .Release.Name }}-{{ .Chart.Name }}"
      template:
        metadata:
          labels:
            app: "{{ .Release.Name }}-{{ .Chart.Name }}"
        spec:
          containers:
          - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: "{{ .Values.image.pullPolicy }}"
            name: "{{ .Release.Name }}-{{ .Chart.Name }}"
            ports:
            - name: "http"
              containerPort: 80
            readinessProbe:
              httpGet:
                path: /health-status
                port: 80
              initialDelaySeconds: 10
              periodSeconds: 5
              timeoutSeconds: 2
              failureThreshold: 3
            env:
            - name: "DOTNET_ENVIRONMENT"
              value: "{{ .Values.global.dotnetEnvironment }}"
            - name: "App__SelfUrl"
              value: "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}"
            - name: "App__AngularUrl"
              value: "{{ include "exampleabpapplicationlayer.hosts.angular" . }}"
            - name: "App__CorsOrigins"
              value: "https://*.ExampleAbpApplicationLayer.com,{{ include "exampleabpapplicationlayer.hosts.angular" . }}"                      
            - name: "App__RedirectAllowedUrls"
              value: "https://*.TestAppBlazorWasm.com,{{ include "exampleabpapplicationlayer.hosts.angular" . }}"                 
            - name: App__DisablePII
              value: "{{ .Values.global.disablePII }}"
            - name: "App__HealthUiCheckUrl"
              value: "http://{{ .Release.Name }}-httpapihost/health-status" 
            - name: "ConnectionStrings__Default"
              value: "{{ .Values.global.connectionStrings.default | replace "[RELEASE_NAME]" .Release.Name }}"
            - name: "AuthServer__Authority"
              value: "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}"
            - name: "AuthServer__RequireHttpsMetadata"
              value: "false"
            - name: "StringEncryption__DefaultPassPhrase"
              value: "{{ .Values.global.stringEncryptionDefaultPassPhrase }}"
            - name: "AbpStudioClient__StudioUrl"
              value: "{{ .Values.global.abpStudioClient.studioUrl }}"
            - name: "AbpStudioClient__IsLinkEnabled"
              value: "{{ .Values.global.abpStudioClient.isLinkEnabled }}"
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\httpapihost\templates\httpapihost-service.yaml"><![CDATA[
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      ports:
        - name: "80"
          port: 80
      selector:
        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\httpapihost\templates\httpapihost-ingress.yaml"><![CDATA[
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: "/"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/proxy-buffer-size: "32k"
        nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
        cert-manager.io/cluster-issuer: "letsencrypt"
    spec:
      ingressClassName: "nginx"
      tls:
      - hosts:
          - "{{ (include "exampleabpapplicationlayer.hosts.httpapi" .) | trimPrefix "https://" }}"
        secretName: "{{ .Values.global.tlsSecret }}"
      rules:
      - host: "{{ (include "exampleabpapplicationlayer.hosts.httpapi" .) | trimPrefix "https://" }}"
        http:
          paths:
          - path: /
            pathType: "Prefix"
            backend:
              service:
                name: "{{ .Release.Name }}-{{ .Chart.Name }}"
                port:
                  number: 80
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular.yaml"><![CDATA[
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      selector:
        matchLabels:
          app: "{{ .Release.Name }}-{{ .Chart.Name }}"
      template:
        metadata:
          labels:
            app: "{{ .Release.Name }}-{{ .Chart.Name }}"
        spec:
          containers:
          - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: "{{ .Values.image.pullPolicy }}"
            name: "{{ .Release.Name }}-{{ .Chart.Name }}"
            ports:
            - name: "http"
              containerPort: 80
            volumeMounts:
            - name: config-volume
              mountPath: /usr/share/nginx/html/dynamic-env.json
              subPath: dynamic-env.json
          volumes:
          - name: config-volume
            configMap:
              name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular-service.yaml"><![CDATA[
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      ports:
        - name: "80"
          port: 80
      selector:
        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
    
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular-ingress.yaml"><![CDATA[
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: "/"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/proxy-buffer-size: "32k"
        nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
        cert-manager.io/cluster-issuer: "letsencrypt"
    spec:
      ingressClassName: "nginx"
      tls:
      - hosts:
          - "{{ (include "exampleabpapplicationlayer.hosts.angular" .) | trimPrefix "https://" }}"
        secretName: "{{ .Values.global.tlsSecret }}"
      rules:
      - host: "{{ (include "exampleabpapplicationlayer.hosts.angular" .) | trimPrefix "https://" }}"
        http:
          paths:
          - path: /
            pathType: "Prefix"
            backend:
              service:
                name: "{{ .Release.Name }}-{{ .Chart.Name }}"
                port:
                  number: 80
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular-configmap.yaml"><![CDATA[
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
    data:
      dynamic-env.json: |-
        {
            "production": "true",
            "application": {
                "baseUrl": "{{ include "exampleabpapplicationlayer.hosts.angular" . }}",
                "name": "ExampleAbpApplicationLayer",
                "logoUrl": ""
            },
            "oAuthConfig": {
                "issuer": "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}",
                "redirectUri": "{{ include "exampleabpapplicationlayer.hosts.angular" . }}",
                "requireHttps": "true",
                "clientId": "ExampleAbpApplicationLayer_App",
                "responseType": "code",
                "scope": "offline_access ExampleAbpApplicationLayer",
                "strictDiscoveryDocumentValidation": false,
                "skipIssuerCheck": true
            },
            "apis": {
                "default": {
                    "url": "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}",
                    "rootNamespace": "ExampleAbpApplicationLayer"
                }
            }
        }
    ]]></file>
  <file path="etc\helm\exampleabpapplicationlayer\charts\dbmigrator\templates\migrator.yaml"><![CDATA[
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      backoffLimit: 10
      manualSelector: true
      selector:
        matchLabels:
          app: "{{ .Release.Name }}-{{ .Chart.Name }}"
      template:
        metadata:
          labels:
            app: "{{ .Release.Name }}-{{ .Chart.Name }}"
        spec:
          activeDeadlineSeconds: 180
          restartPolicy: Never
          containers:
          - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: "{{ .Values.image.pullPolicy }}"
            name: "{{ .Release.Name }}-{{ .Chart.Name }}"
            ports:
            - name: "http"
              containerPort: 80
            env:
            - name: "DOTNET_ENVIRONMENT"
              value: "{{ .Values.global.dotnetEnvironment }}"
            - name: "ConnectionStrings__Default"
              value: "{{ .Values.global.connectionStrings.default | replace "[RELEASE_NAME]" .Release.Name }}"
            - name: "AbpStudioClient__StudioUrl"
              value: "{{ .Values.global.abpStudioClient.studioUrl }}"
            - name: "AbpStudioClient__IsLinkEnabled"
              value: "{{ .Values.global.abpStudioClient.isLinkEnabled }}" 
            - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_App__ClientId"
              value: "ExampleAbpApplicationLayer_App"
            - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_App__RootUrl"
              value: "{{ include "exampleabpapplicationlayer.hosts.angular" . }}"
            - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_Swagger__ClientId"
              value: "ExampleAbpApplicationLayer_Swagger"
            - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_Swagger__RootUrl"
              value: "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}"
    
    ]]></file>
  <file path="angular\src\app\proxy\enums\orders\order-status.enum.ts"><![CDATA[
    import { mapEnumToOptions } from '@abp/ng.core';
    
    export enum OrderStatus {
      Initialized = 0,
      Paid = 1,
      Processing = 2,
      Ordered = 3,
      Shipped = 4,
      Arrived = 5,
      Delivered = 6,
      Cancelled = 7,
      NotPaid = 8,
    }
    
    export const orderStatusOptions = mapEnumToOptions(OrderStatus);
    
    ]]></file>
  <file path="angular\src\app\proxy\enums\orders\index.ts"><![CDATA[
    export * from './order-status.enum';
    
    ]]></file>
  <file path="angular\src\app\orders\order\services\order.service.ts"><![CDATA[
    import { Injectable } from '@angular/core';
    import { AbstractOrderViewService } from './order.abstract.service';
    
    @Injectable()
    export class OrderViewService extends AbstractOrderViewService {}
    
    ]]></file>
  <file path="angular\src\app\orders\order\services\order.abstract.service.ts"><![CDATA[
    import { inject } from '@angular/core';
    import { ConfirmationService, Confirmation } from '@abp/ng.theme.shared';
    import { ABP, AbpWindowService, ListService, PagedResultDto } from '@abp/ng.core';
    import { filter, switchMap, finalize } from 'rxjs/operators';
    import type { GetOrdersInput, OrderDto } from '../../../proxy/orders/models';
    import { OrderService } from '../../../proxy/orders/order.service';
    
    export abstract class AbstractOrderViewService {
      protected readonly proxyService = inject(OrderService);
      protected readonly confirmationService = inject(ConfirmationService);
      protected readonly list = inject(ListService);
      protected readonly abpWindowService = inject(AbpWindowService);
    
      isExportToExcelBusy = false;
    
      data: PagedResultDto<OrderDto> = {
        items: [],
        totalCount: 0,
      };
    
      filters = {} as GetOrdersInput;
    
      delete(record: OrderDto) {
        this.confirmationService
          .warn('::DeleteConfirmationMessage', '::AreYouSure', { messageLocalizationParams: [] })
          .pipe(
            filter(status => status === Confirmation.Status.confirm),
            switchMap(() => this.proxyService.delete(record.id)),
          )
          .subscribe(this.list.get);
      }
    
      hookToQuery() {
        const getData = (query: ABP.PageQueryParams) =>
          this.proxyService.getList({
            ...query,
            ...this.filters,
            filterText: query.filter,
          });
    
        const setData = (list: PagedResultDto<OrderDto>) => {
          this.data = list;
        };
    
        this.list.hookToQuery(getData).subscribe(setData);
      }
    
      clearFilters() {
        this.filters = {} as GetOrdersInput;
        this.list.get();
      }
    
      exportToExcel() {
        this.isExportToExcelBusy = true;
        this.proxyService
          .getDownloadToken()
          .pipe(
            switchMap(({ token }) =>
              this.proxyService.getListAsExcelFile({
                downloadToken: token,
                filterText: this.list.filter,
                ...this.filters,
              }),
            ),
            finalize(() => (this.isExportToExcelBusy = false)),
          )
          .subscribe(result => {
            this.abpWindowService.downloadBlob(result, 'Order.xlsx');
          });
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order\services\order-detail.service.ts"><![CDATA[
    import { Injectable } from '@angular/core';
    import { AbstractOrderDetailViewService } from './order-detail.abstract.service';
    
    @Injectable()
    export class OrderDetailViewService extends AbstractOrderDetailViewService {}
    
    ]]></file>
  <file path="angular\src\app\orders\order\services\order-detail.abstract.service.ts"><![CDATA[
    import { inject } from '@angular/core';
    import { FormBuilder, FormGroup, Validators } from '@angular/forms';
    import { ListService, TrackByService } from '@abp/ng.core';
    
    import { finalize, tap } from 'rxjs/operators';
    
    import { orderStatusOptions } from '../../../proxy/enums/orders/order-status.enum';
    import type { OrderDto } from '../../../proxy/orders/models';
    import { OrderService } from '../../../proxy/orders/order.service';
    
    export abstract class AbstractOrderDetailViewService {
      protected readonly fb = inject(FormBuilder);
      protected readonly track = inject(TrackByService);
    
      public readonly proxyService = inject(OrderService);
      public readonly list = inject(ListService);
    
      orderStatusOptions = orderStatusOptions;
    
      isBusy = false;
      isVisible = false;
      selected = {} as any;
      form: FormGroup | undefined;
    
      protected createRequest() {
        const formValues = {
          ...this.form.value,
        };
    
        if (this.selected) {
          return this.proxyService.update(this.selected.id, {
            ...formValues,
            concurrencyStamp: this.selected.concurrencyStamp,
          });
        }
    
        return this.proxyService.create(formValues);
      }
    
      buildForm() {
        const { orderDate, totalAmount, status } = this.selected || {};
    
        this.form = this.fb.group({
          orderDate: [orderDate ?? null, [Validators.required]],
          totalAmount: [totalAmount ?? '0', [Validators.required]],
          status: [status ?? null, [Validators.required]],
        });
      }
    
      showForm() {
        this.buildForm();
        this.isVisible = true;
      }
    
      create() {
        this.selected = undefined;
        this.showForm();
      }
    
      update(record: OrderDto) {
        this.selected = record;
        this.showForm();
      }
    
      hideForm() {
        this.isVisible = false;
      }
    
      submitForm() {
        if (this.form.invalid) return;
    
        this.isBusy = true;
    
        const request = this.createRequest().pipe(
          finalize(() => (this.isBusy = false)),
          tap(() => this.hideForm()),
        );
    
        request.subscribe(this.list.get);
      }
    
      changeVisible($event: boolean) {
        this.isVisible = $event;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order\providers\order-route.provider.ts"><![CDATA[
    import { inject, provideAppInitializer } from '@angular/core';
    import { ABP, RoutesService } from '@abp/ng.core';
    import { ORDER_BASE_ROUTES } from './order-base.routes';
    
    export const ORDERS_ORDER_ROUTE_PROVIDER = [
      provideAppInitializer(() => {
        configureRoutes();
      }),
    ];
    
    function configureRoutes() {
      const routesService = inject(RoutesService);
      const routes: ABP.Route[] = [...ORDER_BASE_ROUTES];
      routesService.add(routes);
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order\providers\order-base.routes.ts"><![CDATA[
    import { ABP, eLayoutType } from '@abp/ng.core';
    
    export const ORDER_BASE_ROUTES: ABP.Route[] = [
      {
        path: '/orders',
        iconClass: 'fas fa-file-alt',
        name: '::Menu:Orders',
        layout: eLayoutType.application,
        requiredPolicy: 'ExampleAbpApplicationLayer.Orders',
        breadcrumbText: '::Orders',
      },
    ];
    
    ]]></file>
  <file path="angular\src\app\orders\order\components\order.component.ts"><![CDATA[
    import { ChangeDetectionStrategy, Component } from '@angular/core';
    import { CommonModule } from '@angular/common';
    import { FormsModule, ReactiveFormsModule } from '@angular/forms';
    import {
      NgbDateAdapter,
      NgbTimeAdapter,
      NgbCollapseModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDropdownModule,
    } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { NgxDatatableModule } from '@swimlane/ngx-datatable';
    import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
    import {
      DateAdapter,
      TimeAdapter,
      NgxDatatableDefaultDirective,
      NgxDatatableListDirective,
    } from '@abp/ng.theme.shared';
    import { PageComponent, PageToolbarContainerComponent } from '@abp/ng.components/page';
    import {
      AdvancedEntityFiltersComponent,
      AdvancedEntityFiltersFormComponent,
    } from '@volo/abp.commercial.ng.ui';
    import { OrderViewService } from '../services/order.service';
    import { OrderDetailViewService } from '../services/order-detail.service';
    import { OrderDetailModalComponent } from './order-detail.component';
    import {
      AbstractOrderComponent,
      ChildTabDependencies,
      ChildComponentDependencies,
    } from './order.abstract.component';
    
    @Component({
      selector: 'app-order',
      changeDetection: ChangeDetectionStrategy.Default,
      imports: [
        ...ChildTabDependencies,
        NgbCollapseModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbDropdownModule,
        NgxValidateCoreModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        NgxDatatableModule,
        NgxDatatableDefaultDirective,
        NgxDatatableListDirective,
        PermissionDirective,
        LocalizationPipe,
        PageComponent,
        PageToolbarContainerComponent,
        AdvancedEntityFiltersComponent,
        AdvancedEntityFiltersFormComponent,
    
        OrderDetailModalComponent,
        ...ChildComponentDependencies,
      ],
      providers: [
        ListService,
        OrderViewService,
        OrderDetailViewService,
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
      ],
      templateUrl: './order.component.html',
      styles: `
        ::ng-deep.datatable-row-detail {
          background: transparent !important;
        }
      `,
    })
    export class OrderComponent extends AbstractOrderComponent {}
    
    ]]></file>
  <file path="angular\src\app\orders\order\components\order.component.html"><![CDATA[
    <abp-page [title]="title | abpLocalization">
      <abp-page-toolbar-container class="col">
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <div class="text-lg-end pt-2">
          <!--<suite-custom-code-block-1>-->
          <!--</suite-custom-code-block-1>-->
    
          <button
            class="btn btn-primary btn-sm mx-2"
            type="button"
            [disabled]="service.isExportToExcelBusy"
            (click)="exportToExcel()"
          >
            {{ '::ExportToExcel' | abpLocalization }}
          </button>
    
          <button
            *abpPermission="'ExampleAbpApplicationLayer.Orders.Create'"
            class="btn btn-primary btn-sm"
            type="button"
            (click)="create()"
          >
            <i class="fa fa-plus me-1" aria-hidden="true"></i>
            {{ '::NewOrder' | abpLocalization }}
          </button>
          <!--<suite-custom-code-block-2>-->
          <!--</suite-custom-code-block-2>-->
        </div>
      </abp-page-toolbar-container>
    
      <abp-advanced-entity-filters localizationSourceName="" [list]="list">
        @if (service.filters; as filters) {
          <abp-advanced-entity-filters-form>
            <form #filterForm (keyup.enter)="list.get()">
              <!--<suite-custom-code-block-3>-->
              <!--</suite-custom-code-block-3>-->
              <div class="row">
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="minOrderDate">
                      {{ '::MinOrderDate' | abpLocalization }}
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        id="minOrderDate"
                        class="form-control"
                        #minOrderDateInput
                        #minOrderDateDatepicker="ngbDatepicker"
                        name="minOrderDate"
                        ngbDatepicker
                        container="body"
                        readonly
                        (click)="minOrderDateDatepicker.toggle()"
                        (keyup.space)="minOrderDateDatepicker.toggle()"
                        [(ngModel)]="filters.orderDateMin"
                        [ngModelOptions]="{ standalone: true }"
                      />
                      @if (minOrderDateInput.value) {
                        <div class="input-group-append">
                          <button
                            class="btn btn-link px-2"
                            type="button"
                            [title]="'AbpUi::Clear' | abpLocalization"
                            (click)="
                              minOrderDateDatepicker.writeValue(null);
                              minOrderDateDatepicker.manualDateChange(null, true)
                            "
                          >
                            <i class="fa fa-times" aria-hidden="true"></i>
                          </button>
                        </div>
                      }
                    </div>
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="maxOrderDate">
                      {{ '::MaxOrderDate' | abpLocalization }}
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        id="maxOrderDate"
                        class="form-control"
                        #maxOrderDateInput
                        #maxOrderDateDatepicker="ngbDatepicker"
                        name="maxOrderDate"
                        ngbDatepicker
                        readonly
                        (click)="maxOrderDateDatepicker.toggle()"
                        (keyup.space)="maxOrderDateDatepicker.toggle()"
                        [(ngModel)]="filters.orderDateMax"
                        [ngModelOptions]="{ standalone: true }"
                      />
                      @if (maxOrderDateInput.value) {
                        <div class="input-group-append">
                          <button
                            class="btn btn-link px-2"
                            type="button"
                            [title]="'AbpUi::Clear' | abpLocalization"
                            (click)="
                              maxOrderDateDatepicker.writeValue(null);
                              maxOrderDateDatepicker.manualDateChange(null, true)
                            "
                          >
                            <i class="fa fa-times" aria-hidden="true"></i>
                          </button>
                        </div>
                      }
                    </div>
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="minTotalAmount">
                      {{ '::MinTotalAmount' | abpLocalization }}
                    </label>
    
                    <input
                      id="minTotalAmount"
                      type="number"
                      class="form-control"
                      [(ngModel)]="filters.totalAmountMin"
                      [ngModelOptions]="{ standalone: true }"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="maxTotalAmount">
                      {{ '::MaxTotalAmount' | abpLocalization }}
                    </label>
    
                    <input
                      id="maxTotalAmount"
                      type="number"
                      class="form-control"
                      [(ngModel)]="filters.totalAmountMax"
                      [ngModelOptions]="{ standalone: true }"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="statusFilter">
                      {{ '::Status' | abpLocalization }}
                    </label>
    
                    <select
                      id="statusFilter"
                      class="form-select form-control"
                      [(ngModel)]="filters.status"
                      [ngModelOptions]="{ standalone: true }"
                    >
                      <option [ngValue]="null"></option>
                      <option
                        *ngFor="let option of orderStatusOptions; trackBy: track.by('value')"
                        [ngValue]="option.value"
                      >
                        {{ '::Enum:OrderStatus.' + option.value | abpLocalization }}
                      </option>
                    </select>
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto align-self-end mb-3">
                  <div class="row">
                    <div class="col-6 col-sm-auto d-grid">
                      <button type="button" class="btn btn-outline-primary" (click)="clearFilters()">
                        <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>
                      </button>
                    </div>
                    <div class="col-6 col-sm-auto d-grid">
                      <button type="button" class="btn btn-primary" (click)="list.get()">
                        <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <!--<suite-custom-code-block-4>-->
              <!--</suite-custom-code-block-4>-->
            </form>
          </abp-advanced-entity-filters-form>
        }
      </abp-advanced-entity-filters>
      <!--<suite-custom-code-block-5>-->
      <!--</suite-custom-code-block-5>-->
      <div class="card">
        <!--<suite-custom-code-block-6>-->
        <!--</suite-custom-code-block-6>-->
        <div class="card-body">
          <!--<suite-custom-code-block-7>-->
          <!--</suite-custom-code-block-7>-->
          <ngx-datatable
            #orderTable
            default
            [rows]="service.data.items"
            [count]="service.data.totalCount"
            [list]="list"
          >
            <!--<suite-custom-code-block-8>-->
            <!--</suite-custom-code-block-8>-->
    
            <!-- Row Detail Template -->
            <ngx-datatable-row-detail rowHeight="100%">
              <ng-template let-row="row" let-expanded="expanded" ngx-datatable-row-detail-template>
                <ul id="order-nav-tabs mb-0" ngbNav #nav="ngbNav" class="nav-tabs">
                  <li
                    *abpPermission="'ExampleAbpApplicationLayer.OrderItems'"
                    id="order-item-informations"
                    ngbNavItem
                  >
                    <a ngbNavLink>{{ '::OrderItem' | abpLocalization }}</a>
    
                    <ng-template ngbNavContent>
                      <app-order-item [orderId]="row.id" />
                    </ng-template>
                  </li>
                </ul>
    
                <div [ngbNavOutlet]="nav" class="m-0 fade-in-top"></div>
              </ng-template>
            </ngx-datatable-row-detail>
            @if (isChildEntitiesPermitted) {
              <ngx-datatable-column
                [width]="50"
                [resizeable]="false"
                [sortable]="false"
                [draggable]="false"
                [canAutoResize]="false"
              >
                <ng-template let-row="row" let-expanded="expanded" ngx-datatable-cell-template>
                  <a
                    href="javascript:void(0)"
                    class="ngx-datatable-toggle text-decoration-none text-muted fa"
                    [class.fa-angle-down]="!expanded"
                    [class.fa-angle-up]="expanded"
                    title="Expand/Collapse Row"
                    (click)="toggleExpandRow(row)"
                  >
                  </a>
                </ng-template>
              </ngx-datatable-column>
            }
    
            @if (isActionButtonVisible) {
              <ngx-datatable-column
                [name]="'AbpUi::Actions' | abpLocalization"
                [maxWidth]="150"
                [width]="150"
                [sortable]="false"
              >
                <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
                  <div ngbDropdown container="body" class="d-inline-block">
                    <button
                      class="btn btn-primary btn-sm dropdown-toggle"
                      data-toggle="dropdown"
                      aria-haspopup="true"
                      ngbDropdownToggle
                    >
                      <i class="fa fa-cog me-1" aria-hidden="true"></i>
                      {{ 'AbpUi::Actions' | abpLocalization }}
                    </button>
    
                    <div ngbDropdownMenu>
                      <button
                        ngbDropdownItem
                        *abpPermission="'ExampleAbpApplicationLayer.Orders.Edit'"
                        (click)="update(row)"
                      >
                        {{ 'AbpUi::Edit' | abpLocalization }}
                      </button>
    
                      <button
                        ngbDropdownItem
                        *abpPermission="'ExampleAbpApplicationLayer.Orders.Delete'"
                        (click)="delete(row)"
                      >
                        {{ 'AbpUi::Delete' | abpLocalization }}
                      </button>
                    </div>
                  </div>
                </ng-template>
              </ngx-datatable-column>
            }
            <ngx-datatable-column name="{{ '::OrderDate' | abpLocalization }}" prop="orderDate">
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.orderDate | abpUtcToLocal: 'date' }}
              </ng-template>
            </ngx-datatable-column>
            <ngx-datatable-column name="{{ '::TotalAmount' | abpLocalization }}" prop="totalAmount">
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.totalAmount }}
              </ng-template>
            </ngx-datatable-column>
            <ngx-datatable-column name="{{ '::Status' | abpLocalization }}" prop="status">
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.status !== null ? ('::Enum:OrderStatus.' + row.status | abpLocalization) : '' }}
              </ng-template>
            </ngx-datatable-column>
            <!--<suite-custom-code-block-9>-->
            <!--</suite-custom-code-block-9>-->
          </ngx-datatable>
          <!--<suite-custom-code-block-10>-->
          <!--</suite-custom-code-block-10>-->
        </div>
      </div>
      <!--<suite-custom-code-block-11>-->
      <!--</suite-custom-code-block-11>-->
    </abp-page>
    <!--<suite-custom-code-block-12>-->
    <!--</suite-custom-code-block-12>-->
    
    @defer (when serviceDetail.isVisible) {
      @if (serviceDetail.isVisible) {
        <app-order-detail-modal />
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order\components\order.abstract.component.ts"><![CDATA[
    import { Directive, OnInit, inject, ViewChild } from '@angular/core';
    
    import {
      NgbNav,
      NgbNavItem,
      NgbNavLink,
      NgbNavContent,
      NgbNavOutlet,
    } from '@ng-bootstrap/ng-bootstrap';
    import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
    
    import { orderStatusOptions } from '../../../proxy/enums/orders/order-status.enum';
    import type { OrderDto } from '../../../proxy/orders/models';
    import { OrderViewService } from '../services/order.service';
    import { OrderDetailViewService } from '../services/order-detail.service';
    import { OrderItemComponent } from '../../order-item/components/order-item-child.component';
    
    export const ChildTabDependencies = [NgbNav, NgbNavItem, NgbNavLink, NgbNavContent, NgbNavOutlet];
    
    export const ChildComponentDependencies = [OrderItemComponent];
    
    @Directive()
    export abstract class AbstractOrderComponent implements OnInit {
      public readonly list = inject(ListService);
      public readonly track = inject(TrackByService);
      public readonly service = inject(OrderViewService);
      public readonly serviceDetail = inject(OrderDetailViewService);
      public readonly permissionService = inject(PermissionService);
    
      protected title = '::Orders';
      protected isActionButtonVisible: boolean | null = null;
      protected isChildEntitiesPermitted: boolean | null = null;
    
      orderStatusOptions = orderStatusOptions;
    
      @ViewChild('orderTable') table: any;
    
      ngOnInit() {
        this.service.hookToQuery();
        this.checkActionButtonVisibility();
        this.checkChildEntityPermissions();
      }
    
      clearFilters() {
        this.service.clearFilters();
      }
    
      showForm() {
        this.serviceDetail.showForm();
      }
    
      create() {
        this.serviceDetail.selected = undefined;
        this.serviceDetail.showForm();
      }
    
      update(record: OrderDto) {
        this.serviceDetail.update(record);
      }
    
      delete(record: OrderDto) {
        this.service.delete(record);
      }
    
      exportToExcel() {
        this.service.exportToExcel();
      }
    
      toggleExpandRow(row) {
        this.table.rowDetail.toggleExpandRow(row);
      }
    
      checkChildEntityPermissions() {
        if (this.isChildEntitiesPermitted !== null) {
          return;
        }
    
        const childPermissions = ['ExampleAbpApplicationLayer.OrderItems'];
        this.isChildEntitiesPermitted = childPermissions.some(permission =>
          this.permissionService.getGrantedPolicy(permission),
        );
      }
    
      checkActionButtonVisibility() {
        if (this.isActionButtonVisible !== null) {
          return;
        }
    
        const canEdit = this.permissionService.getGrantedPolicy(
          'ExampleAbpApplicationLayer.Orders.Edit',
        );
        const canDelete = this.permissionService.getGrantedPolicy(
          'ExampleAbpApplicationLayer.Orders.Delete',
        );
        this.isActionButtonVisible = canEdit || canDelete;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order\components\order-detail.component.ts"><![CDATA[
    import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
    import { ReactiveFormsModule } from '@angular/forms';
    import { CommonModule } from '@angular/common';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
    import {
      DateAdapter,
      TimeAdapter,
      ModalComponent,
      ModalCloseDirective,
      ButtonComponent,
    } from '@abp/ng.theme.shared';
    
    import {
      NgbNavModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDateAdapter,
      NgbTimeAdapter,
    } from '@ng-bootstrap/ng-bootstrap';
    import { OrderDetailViewService } from '../services/order-detail.service';
    
    @Component({
      selector: 'app-order-detail-modal',
      changeDetection: ChangeDetectionStrategy.Default,
      imports: [
        CommonModule,
        ReactiveFormsModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbNavModule,
        NgxValidateCoreModule,
        AutofocusDirective,
        ModalCloseDirective,
        LocalizationPipe,
        ModalComponent,
        ButtonComponent,
      ],
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
      ],
      templateUrl: './order-detail.component.html',
      styles: [],
    })
    export class OrderDetailModalComponent {
      public readonly service = inject(OrderDetailViewService);
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order\components\order-detail.component.html"><![CDATA[
    <abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
      <ng-template #abpHeader>
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <h3>
          <!--<suite-custom-code-block-1>-->
          <!--</suite-custom-code-block-1>-->
          {{ (service.selected ? 'AbpUi::Edit' : '::NewOrder') | abpLocalization }}
          <!--<suite-custom-code-block-2>-->
          <!--</suite-custom-code-block-2>-->
        </h3>
        <!--<suite-custom-code-block-3>-->
        <!--</suite-custom-code-block-3>-->
      </ng-template>
    
      <ng-template #abpBody>
        <!--<suite-custom-code-block-4>-->
        <!--</suite-custom-code-block-4>-->
        <form [formGroup]="service.form" id="order" (ngSubmit)="service.submitForm()" validateOnSubmit>
          <!--<suite-custom-code-block-5>-->
          <!--</suite-custom-code-block-5>-->
    
          <ul ngbNav #nav="ngbNav" class="nav-tabs">
            <li ngbNavItem>
              <a ngbNavLink>
                {{ '::Order' | abpLocalization }}
              </a>
              <ng-template ngbNavContent>
                <div class="mt-2 fade-in-top">
                  <div class="mb-3">
                    <label class="form-label" for="order-order-date">
                      {{ '::OrderDate' | abpLocalization }} *
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        readonly
                        id="order-order-date"
                        formControlName="orderDate"
                        class="form-control"
                        ngbDatepicker
                        #orderDateInput
                        #orderDateDatepicker="ngbDatepicker"
                        (click)="orderDateDatepicker.open()"
                        (keyup.space)="orderDateDatepicker.open()"
                        autofocus
                      />
                      @if (orderDateInput.value) {
                        <div class="input-group-append">
                          <button
                            class="btn btn-link px-2"
                            type="button"
                            [title]="'AbpUi::Clear' | abpLocalization"
                            (click)="
                              orderDateDatepicker.writeValue(null);
                              orderDateDatepicker.manualDateChange(null, true)
                            "
                          >
                            <i class="fa fa-times" aria-hidden="true"></i>
                          </button>
                        </div>
                      }
                    </div>
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="order-total-amount">
                      {{ '::TotalAmount' | abpLocalization }} *
                    </label>
    
                    <input
                      type="number"
                      id="order-total-amount"
                      formControlName="totalAmount"
                      class="form-control"
                    />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="order-status">
                      {{ '::Status' | abpLocalization }} *
                    </label>
    
                    <select id="order-status" formControlName="status" class="form-select form-control">
                      <option [ngValue]="null"></option>
                      <option
                        *ngFor="
                          let option of service.orderStatusOptions;
                          trackBy: service.track.by('key')
                        "
                        [ngValue]="option.value"
                      >
                        {{ '::Enum:OrderStatus.' + option.value | abpLocalization }}
                      </option>
                    </select>
                  </div>
                </div>
              </ng-template>
            </li>
          </ul>
          <div [ngbNavOutlet]="nav"></div>
    
          <!--<suite-custom-code-block-6>-->
          <!--</suite-custom-code-block-6>-->
        </form>
      </ng-template>
    
      <ng-template #abpFooter>
        <!--<suite-custom-code-block-7>-->
        <!--</suite-custom-code-block-7>-->
        <button type="button" class="btn btn-secondary" abpClose>
          {{ 'AbpUi::Cancel' | abpLocalization }}
        </button>
        <!--<suite-custom-code-block-8>-->
        <!--</suite-custom-code-block-8>-->
        <abp-button iconClass="fa fa-check" buttonType="submit" formName="order">
          {{ 'AbpUi::Save' | abpLocalization }}
        </abp-button>
        <!--<suite-custom-code-block-9>-->
        <!--</suite-custom-code-block-9>-->
      </ng-template>
    </abp-modal>
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\services\order-item-child.service.ts"><![CDATA[
    import { Injectable } from '@angular/core';
    import { AbstractOrderItemViewService } from './order-item-child.abstract.service';
    
    @Injectable()
    export class OrderItemViewService extends AbstractOrderItemViewService {}
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\services\order-item-child.abstract.service.ts"><![CDATA[
    import { inject, ChangeDetectorRef } from '@angular/core';
    import { filter, switchMap } from 'rxjs/operators';
    import { ABP, ListService, PagedResultDto } from '@abp/ng.core';
    import { ConfirmationService, Confirmation } from '@abp/ng.theme.shared';
    import type {
      GetOrderItemListInput,
      OrderItemWithNavigationPropertiesDto,
    } from '../../../proxy/order-items/models';
    import { OrderItemService } from '../../../proxy/order-items/order-item.service';
    
    export abstract class AbstractOrderItemViewService {
      protected readonly cdr = inject(ChangeDetectorRef);
      protected readonly proxyService = inject(OrderItemService);
      protected readonly confirmationService = inject(ConfirmationService);
      protected readonly list = inject(ListService);
    
      data: PagedResultDto<OrderItemWithNavigationPropertiesDto> = {
        items: [],
        totalCount: 0,
      };
    
      delete(record: OrderItemWithNavigationPropertiesDto) {
        this.confirmationService
          .warn('::DeleteConfirmationMessage', '::AreYouSure', { messageLocalizationParams: [] })
          .pipe(
            filter(status => status === Confirmation.Status.confirm),
            switchMap(() => this.proxyService.delete(record.orderItem.id)),
          )
          .subscribe(this.list.get);
      }
    
      hookToQuery(orderId: string) {
        const getData = (query: ABP.PageQueryParams) =>
          this.proxyService.getListWithNavigationPropertiesByOrderId({
            ...(query as GetOrderItemListInput),
            orderId,
          });
    
        const setData = (list: PagedResultDto<OrderItemWithNavigationPropertiesDto>) =>
          (this.data = list);
    
        this.list.hookToQuery(getData).subscribe(list => {
          setData(list);
          this.cdr.markForCheck();
        });
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\services\order-item-child-detail.service.ts"><![CDATA[
    import { Injectable } from '@angular/core';
    import { AbstractOrderItemDetailViewService } from './order-item-child-detail.abstract.service';
    
    @Injectable()
    export class OrderItemDetailViewService extends AbstractOrderItemDetailViewService {}
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\services\order-item-child-detail.abstract.service.ts"><![CDATA[
    import { inject } from '@angular/core';
    import { FormBuilder, FormGroup, Validators } from '@angular/forms';
    import { ListService, TrackByService } from '@abp/ng.core';
    
    import { finalize, tap } from 'rxjs/operators';
    
    import type { OrderItemWithNavigationPropertiesDto } from '../../../proxy/order-items/models';
    import { OrderItemService } from '../../../proxy/order-items/order-item.service';
    
    export abstract class AbstractOrderItemDetailViewService {
      protected readonly fb = inject(FormBuilder);
      protected readonly track = inject(TrackByService);
    
      public readonly proxyService = inject(OrderItemService);
      public readonly list = inject(ListService);
    
      public readonly getProductLookup = this.proxyService.getProductLookup;
    
      orderId: string;
    
      isBusy = false;
      isVisible = false;
      selected = {} as any;
      form: FormGroup | undefined;
    
      protected createRequest() {
        if (this.selected) {
          return this.proxyService.update(this.selected.id, this.form.value);
        }
        return this.proxyService.create(this.form.value);
      }
    
      buildForm() {
        const { productId, qty, price, totalPrice, productName } = this.selected || {};
    
        this.form = this.fb.group({
          orderId: [this.orderId],
          productId: [productId ?? null, [Validators.required]],
          qty: [qty ?? '1', [Validators.required]],
          price: [price ?? '0', [Validators.required]],
          totalPrice: [totalPrice ?? null, [Validators.required]],
          productName: [productName ?? null, []],
        });
      }
    
      showForm() {
        this.buildForm();
        this.isVisible = true;
      }
    
      create() {
        this.selected = undefined;
        this.showForm();
      }
    
      update(record: OrderItemWithNavigationPropertiesDto) {
        this.selected = record.orderItem;
        this.showForm();
      }
    
      hideForm() {
        this.isVisible = false;
      }
    
      submitForm() {
        if (this.form.invalid) return;
    
        this.isBusy = true;
    
        const request = this.createRequest().pipe(
          finalize(() => (this.isBusy = false)),
          tap(() => this.hideForm()),
        );
    
        request.subscribe(this.list.get);
      }
    
      changeVisible(isVisible: boolean) {
        this.isVisible = isVisible;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\components\order-item-child.component.ts"><![CDATA[
    import { ChangeDetectionStrategy, Component } from '@angular/core';
    import {
      NgbDateAdapter,
      NgbCollapseModule,
      NgbDatepickerModule,
      NgbDropdownModule,
    } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { NgxDatatableModule, SelectionType } from '@swimlane/ngx-datatable';
    import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
    import {
      DateAdapter,
      NgxDatatableDefaultDirective,
      NgxDatatableListDirective,
    } from '@abp/ng.theme.shared';
    import { OrderItemViewService } from '../services/order-item-child.service';
    import { OrderItemDetailViewService } from '../services/order-item-child-detail.service';
    import { OrderItemDetailModalComponent } from './order-item-child-detail.component';
    import { AbstractOrderItemComponent } from './order-item-child.abstract.component';
    
    @Component({
      selector: 'app-order-item',
      imports: [
        NgbCollapseModule,
        NgbDatepickerModule,
        NgbDropdownModule,
        NgxValidateCoreModule,
        NgxDatatableModule,
        NgxDatatableDefaultDirective,
        NgxDatatableListDirective,
        PermissionDirective,
        LocalizationPipe,
        OrderItemDetailModalComponent,
      ],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        ListService,
        OrderItemViewService,
        OrderItemDetailViewService,
      ],
      templateUrl: './order-item-child.component.html',
    })
    export class OrderItemComponent extends AbstractOrderItemComponent {}
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\components\order-item-child.component.html"><![CDATA[
    <div class="text-lg-end py-1">
      <!--<suite-custom-code-block-0>-->
      <!--</suite-custom-code-block-0>-->
      <button
        *abpPermission="'ExampleAbpApplicationLayer.OrderItems.Create'"
        class="btn btn-primary btn-sm"
        type="button"
        (click)="create()"
      >
        <i class="fa fa-plus me-1" aria-hidden="true"></i>
        {{ '::NewOrderItem' | abpLocalization }}
      </button>
      <!--<suite-custom-code-block-1>-->
      <!--</suite-custom-code-block-1>-->
    </div>
    <!--<suite-custom-code-block-2>-->
    <!--</suite-custom-code-block-2>-->
    <ngx-datatable default [list]="list" [rows]="service.data.items" [count]="service.data.totalCount">
      @if (isActionButtonVisible) {
        <ngx-datatable-column
          [name]="'AbpUi::Actions' | abpLocalization"
          [maxWidth]="150"
          [width]="150"
          [sortable]="false"
        >
          <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
            <div ngbDropdown container="body" class="d-inline-block">
              <button
                class="btn btn-primary btn-sm dropdown-toggle"
                data-toggle="dropdown"
                aria-haspopup="true"
                ngbDropdownToggle
              >
                <i class="fa fa-cog me-1" aria-hidden="true"></i>
                {{ 'AbpUi::Actions' | abpLocalization }}
              </button>
    
              <div ngbDropdownMenu>
                <button
                  ngbDropdownItem
                  *abpPermission="'ExampleAbpApplicationLayer.OrderItems.Edit'"
                  (click)="update(row)"
                >
                  {{ 'AbpUi::Edit' | abpLocalization }}
                </button>
    
                <button
                  ngbDropdownItem
                  *abpPermission="'ExampleAbpApplicationLayer.OrderItems.Delete'"
                  (click)="delete(row)"
                >
                  {{ 'AbpUi::Delete' | abpLocalization }}
                </button>
              </div>
            </div>
          </ng-template>
    
          <!--<suite-custom-code-block-3>-->
          <!--</suite-custom-code-block-3>-->
        </ngx-datatable-column>
      }
      <ngx-datatable-column name="{{ '::Qty' | abpLocalization }}" prop="orderItem.qty">
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.orderItem.qty }}
        </ng-template>
      </ngx-datatable-column>
      <ngx-datatable-column name="{{ '::Price' | abpLocalization }}" prop="orderItem.price">
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.orderItem.price }}
        </ng-template>
      </ngx-datatable-column>
      <ngx-datatable-column name="{{ '::TotalPrice' | abpLocalization }}" prop="orderItem.totalPrice">
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.orderItem.totalPrice }}
        </ng-template>
      </ngx-datatable-column>
      <ngx-datatable-column name="{{ '::ProductName' | abpLocalization }}" prop="orderItem.productName">
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.orderItem.productName }}
        </ng-template>
      </ngx-datatable-column>
    
      <ngx-datatable-column name="{{ '::Product' | abpLocalization }}" prop="product.id">
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.product?.name }}
        </ng-template>
      </ngx-datatable-column>
      <!--<suite-custom-code-block-4>-->
      <!--</suite-custom-code-block-4>-->
    </ngx-datatable>
    
    <!--<suite-custom-code-block-5>-->
    <!--</suite-custom-code-block-5>-->
    
    @defer (when serviceDetail.isVisible) {
      @if (serviceDetail.isVisible) {
        <app-order-item-detail-modal />
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\components\order-item-child.abstract.component.ts"><![CDATA[
    import { Directive, OnInit, inject, Input } from '@angular/core';
    import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
    
    import type { OrderItemWithNavigationPropertiesDto } from '../../../proxy/order-items/models';
    import { OrderItemViewService } from '../services/order-item-child.service';
    import { OrderItemDetailViewService } from '../services/order-item-child-detail.service';
    
    @Directive()
    export abstract class AbstractOrderItemComponent implements OnInit {
      public readonly list = inject(ListService);
      public readonly track = inject(TrackByService);
      public readonly service = inject(OrderItemViewService);
      public readonly serviceDetail = inject(OrderItemDetailViewService);
      public readonly permissionService = inject(PermissionService);
    
      protected isActionButtonVisible: boolean | null = null;
    
      @Input() title = '::OrderItems';
      @Input() orderId: string;
    
      ngOnInit() {
        this.serviceDetail.orderId = this.orderId;
        this.service.hookToQuery(this.orderId);
        this.checkActionButtonVisibility();
      }
    
      create() {
        this.serviceDetail.selected = undefined;
        this.serviceDetail.showForm();
      }
    
      update(record: OrderItemWithNavigationPropertiesDto) {
        this.serviceDetail.update(record);
      }
    
      delete(record: OrderItemWithNavigationPropertiesDto) {
        this.service.delete(record);
      }
    
      checkActionButtonVisibility() {
        if (this.isActionButtonVisible !== null) {
          return;
        }
    
        const canEdit = this.permissionService.getGrantedPolicy(
          'ExampleAbpApplicationLayer.OrderItems.Edit',
        );
        const canDelete = this.permissionService.getGrantedPolicy(
          'ExampleAbpApplicationLayer.OrderItems.Delete',
        );
        this.isActionButtonVisible = canEdit || canDelete;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\components\order-item-child-detail.component.ts"><![CDATA[
    import { CommonModule } from '@angular/common';
    import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
    import { ReactiveFormsModule } from '@angular/forms';
    import {
      NgbNavModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDateAdapter,
      NgbTimeAdapter,
    } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
    import {
      DateAdapter,
      TimeAdapter,
      ModalComponent,
      ButtonComponent,
      ModalCloseDirective,
    } from '@abp/ng.theme.shared';
    
    import { LookupSelectComponent } from '@volo/abp.commercial.ng.ui';
    
    import { OrderItemDetailViewService } from '../services/order-item-child-detail.service';
    
    @Component({
      selector: 'app-order-item-detail-modal',
      imports: [
        CommonModule,
        ReactiveFormsModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbNavModule,
        NgxValidateCoreModule,
        AutofocusDirective,
        ModalCloseDirective,
        LocalizationPipe,
        ModalComponent,
        ButtonComponent,
        LookupSelectComponent,
      ],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
      ],
      templateUrl: './order-item-child-detail.component.html',
    })
    export class OrderItemDetailModalComponent {
      public readonly service = inject(OrderItemDetailViewService);
    }
    
    ]]></file>
  <file path="angular\src\app\orders\order-item\components\order-item-child-detail.component.html"><![CDATA[
    <abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
      <ng-template #abpHeader>
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <h3>
          <!--<suite-custom-code-block-1>-->
          <!--</suite-custom-code-block-1>-->
          {{ (service.selected ? 'AbpUi::Edit' : '::NewOrderItem') | abpLocalization }}
          <!--<suite-custom-code-block-2>-->
          <!--</suite-custom-code-block-2>-->
        </h3>
        <!--<suite-custom-code-block-3>-->
        <!--</suite-custom-code-block-3>-->
      </ng-template>
    
      <ng-template #abpBody>
        <!--<suite-custom-code-block-4>-->
        <!--</suite-custom-code-block-4>-->
        <form
          [formGroup]="service.form"
          id="order-item"
          (ngSubmit)="service.submitForm()"
          validateOnSubmit
        >
          <!--<suite-custom-code-block-5>-->
          <!--</suite-custom-code-block-5>-->
    
          <ul ngbNav #nav="ngbNav" class="nav-tabs">
            <li ngbNavItem>
              <a ngbNavLink>
                {{ '::OrderItem' | abpLocalization }}
              </a>
              <ng-template ngbNavContent>
                <div class="mt-2 fade-in-top">
                  <div class="mb-3">
                    <label class="form-label" for="order-item-qty">
                      {{ '::Qty' | abpLocalization }} *
                    </label>
    
                    <input
                      type="number"
                      id="order-item-qty"
                      formControlName="qty"
                      class="form-control"
                      autofocus
                    />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="order-item-price">
                      {{ '::Price' | abpLocalization }} *
                    </label>
    
                    <input
                      type="number"
                      id="order-item-price"
                      formControlName="price"
                      class="form-control"
                    />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="order-item-total-price">
                      {{ '::TotalPrice' | abpLocalization }} *
                    </label>
    
                    <input
                      type="number"
                      id="order-item-total-price"
                      formControlName="totalPrice"
                      class="form-control"
                    />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="order-item-product-name">
                      {{ '::ProductName' | abpLocalization }}
                    </label>
    
                    <input
                      id="order-item-product-name"
                      formControlName="productName"
                      class="form-control"
                    />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="order-item-product-id">
                      {{ '::Product' | abpLocalization }} *
                    </label>
                    <abp-lookup-select
                      cid="order-item-product-id"
                      formControlName="productId"
                      [getFn]="service.getProductLookup"
                    />
                  </div>
                </div>
              </ng-template>
            </li>
          </ul>
          <div [ngbNavOutlet]="nav"></div>
    
          <!--<suite-custom-code-block-6>-->
          <!--</suite-custom-code-block-6>-->
        </form>
      </ng-template>
    
      <ng-template #abpFooter>
        <!--<suite-custom-code-block-7>-->
        <!--</suite-custom-code-block-7>-->
        <button type="button" class="btn btn-secondary" abpClose>
          {{ 'AbpUi::Cancel' | abpLocalization }}
        </button>
        <!--<suite-custom-code-block-8>-->
        <!--</suite-custom-code-block-8>-->
        <abp-button iconClass="fa fa-check" buttonType="submit" formName="order-item">
          {{ 'AbpUi::Save' | abpLocalization }}
        </abp-button>
        <!--<suite-custom-code-block-9>-->
        <!--</suite-custom-code-block-9>-->
      </ng-template>
    </abp-modal>
    
    ]]></file>
  <file path="angular\src\app\products\product\services\product.service.ts"><![CDATA[
    import { Injectable } from '@angular/core';
    import { AbstractProductViewService } from './product.abstract.service';
    
    @Injectable()
    export class ProductViewService extends AbstractProductViewService {}
    
    ]]></file>
  <file path="angular\src\app\products\product\services\product.abstract.service.ts"><![CDATA[
    import { inject, computed, signal } from '@angular/core';
    import { SelectionType } from '@swimlane/ngx-datatable';
    import { ConfirmationService, Confirmation } from '@abp/ng.theme.shared';
    import { ABP, AbpWindowService, ListService, PagedResultDto } from '@abp/ng.core';
    import { filter, switchMap, finalize } from 'rxjs/operators';
    import type { GetProductsInput, ProductDto } from '../../../proxy/products/models';
    import { ProductService } from '../../../proxy/products/product.service';
    
    export abstract class AbstractProductViewService {
      protected readonly proxyService = inject(ProductService);
      protected readonly confirmationService = inject(ConfirmationService);
      protected readonly list = inject(ListService);
      protected readonly abpWindowService = inject(AbpWindowService);
    
      isExportToExcelBusy = false;
    
      data: PagedResultDto<ProductDto> = {
        items: [],
        totalCount: 0,
      };
    
      selectionType = SelectionType;
      selected = signal<ProductDto[]>([]);
      allSelected = signal(false);
      selectedCount = computed(() => this.selected().length);
    
      filters = {} as GetProductsInput;
    
      protected clearAllSelection() {
        this.selected.set([]);
        this.allSelected.set(false);
      }
    
      protected bulkDeleteRequest() {
        const ids = this.selected().map(({ id }) => id);
    
        const request = !this.allSelected()
          ? this.proxyService.deleteByIds(ids)
          : this.proxyService.deleteAll({
              filterText: this.list.filter,
              ...this.filters,
            });
    
        return request.pipe(finalize(this.list.get));
      }
    
      delete(record: ProductDto) {
        this.confirmationService
          .warn('::DeleteConfirmationMessage', '::AreYouSure', { messageLocalizationParams: [] })
          .pipe(
            filter(status => status === Confirmation.Status.confirm),
            switchMap(() => this.proxyService.delete(record.id)),
          )
          .subscribe(this.list.get);
      }
    
      bulkDelete() {
        if (this.selectedCount() < 1) {
          return;
        }
    
        let message = '::';
        let messageParam = null;
    
        if (this.allSelected()) {
          message += 'DeleteAllRecords';
        } else {
          message += 'DeleteSelectedRecords';
          messageParam = this.selectedCount().toString();
        }
    
        this.confirmationService
          .warn(message, 'AbpUi::AreYouSure', {
            messageLocalizationParams: [messageParam],
          })
          .pipe(
            filter(result => result === Confirmation.Status.confirm),
            switchMap(() => this.bulkDeleteRequest()),
          )
          .subscribe();
      }
    
      selectAll() {
        this.allSelected.set(!this.allSelected());
        this.selected.set(this.allSelected() ? [...this.data.items] : []);
      }
    
      onSelect({ selected }) {
        if (selected.length < 1) {
          this.clearAllSelection();
          return;
        }
    
        if (selected.length === this.data.totalCount) {
          this.allSelected.set(true);
          this.selected.set(selected);
          return;
        }
    
        if (selected.length !== this.data.totalCount && this.allSelected()) {
          this.allSelected.set(false);
        }
    
        if (selected.length === 1) {
          this.selected.set([...this.selected()]);
          return;
        }
    
        this.selected.set(selected);
      }
    
      hookToQuery() {
        const getData = (query: ABP.PageQueryParams) =>
          this.proxyService.getList({
            ...query,
            ...this.filters,
            filterText: query.filter,
          });
    
        const setData = (list: PagedResultDto<ProductDto>) => {
          this.data = list;
    
          if (this.selectedCount() > 0) {
            this.clearAllSelection();
          }
        };
    
        this.list.hookToQuery(getData).subscribe(setData);
      }
    
      clearFilters() {
        this.filters = {} as GetProductsInput;
        this.list.get();
      }
    
      exportToExcel() {
        this.isExportToExcelBusy = true;
        this.proxyService
          .getDownloadToken()
          .pipe(
            switchMap(({ token }) =>
              this.proxyService.getListAsExcelFile({
                downloadToken: token,
                filterText: this.list.filter,
                ...this.filters,
              }),
            ),
            finalize(() => (this.isExportToExcelBusy = false)),
          )
          .subscribe(result => {
            this.abpWindowService.downloadBlob(result, 'Product.xlsx');
          });
      }
    }
    
    ]]></file>
  <file path="angular\src\app\products\product\services\product-detail.service.ts"><![CDATA[
    import { Injectable } from '@angular/core';
    import { AbstractProductDetailViewService } from './product-detail.abstract.service';
    
    @Injectable()
    export class ProductDetailViewService extends AbstractProductDetailViewService {}
    
    ]]></file>
  <file path="angular\src\app\products\product\services\product-detail.abstract.service.ts"><![CDATA[
    import { inject } from '@angular/core';
    import { FormBuilder, FormGroup, Validators } from '@angular/forms';
    import { ListService, TrackByService } from '@abp/ng.core';
    
    import { finalize, tap } from 'rxjs/operators';
    
    import type { ProductDto } from '../../../proxy/products/models';
    import { ProductService } from '../../../proxy/products/product.service';
    
    export abstract class AbstractProductDetailViewService {
      protected readonly fb = inject(FormBuilder);
      protected readonly track = inject(TrackByService);
    
      public readonly proxyService = inject(ProductService);
      public readonly list = inject(ListService);
    
      isBusy = false;
      isVisible = false;
      selected = {} as any;
      form: FormGroup | undefined;
    
      protected createRequest() {
        const formValues = {
          ...this.form.value,
        };
    
        if (this.selected) {
          return this.proxyService.update(this.selected.id, {
            ...formValues,
            concurrencyStamp: this.selected.concurrencyStamp,
          });
        }
    
        return this.proxyService.create(formValues);
      }
    
      buildForm() {
        const { name, desc, price, isActive } = this.selected || {};
    
        this.form = this.fb.group({
          name: [name ?? null, [Validators.required]],
          desc: [desc ?? null, []],
          price: [price ?? '0', [Validators.required]],
          isActive: [isActive ?? true, []],
        });
      }
    
      showForm() {
        this.buildForm();
        this.isVisible = true;
      }
    
      create() {
        this.selected = undefined;
        this.showForm();
      }
    
      update(record: ProductDto) {
        this.selected = record;
        this.showForm();
      }
    
      hideForm() {
        this.isVisible = false;
      }
    
      submitForm() {
        if (this.form.invalid) return;
    
        this.isBusy = true;
    
        const request = this.createRequest().pipe(
          finalize(() => (this.isBusy = false)),
          tap(() => this.hideForm()),
        );
    
        request.subscribe(this.list.get);
      }
    
      changeVisible($event: boolean) {
        this.isVisible = $event;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\products\product\providers\product-route.provider.ts"><![CDATA[
    import { inject, provideAppInitializer } from '@angular/core';
    import { ABP, RoutesService } from '@abp/ng.core';
    import { PRODUCT_BASE_ROUTES } from './product-base.routes';
    
    export const PRODUCTS_PRODUCT_ROUTE_PROVIDER = [
      provideAppInitializer(() => {
        configureRoutes();
      }),
    ];
    
    function configureRoutes() {
      const routesService = inject(RoutesService);
      const routes: ABP.Route[] = [...PRODUCT_BASE_ROUTES];
      routesService.add(routes);
    }
    
    ]]></file>
  <file path="angular\src\app\products\product\providers\product-base.routes.ts"><![CDATA[
    import { ABP, eLayoutType } from '@abp/ng.core';
    
    export const PRODUCT_BASE_ROUTES: ABP.Route[] = [
      {
        path: '/products',
        iconClass: 'fas fa-file-alt',
        name: '::Menu:Products',
        layout: eLayoutType.application,
        requiredPolicy: 'ExampleAbpApplicationLayer.Products',
        breadcrumbText: '::Products',
      },
    ];
    
    ]]></file>
  <file path="angular\src\app\products\product\components\product.component.ts"><![CDATA[
    import { ChangeDetectionStrategy, Component } from '@angular/core';
    import { CommonModule } from '@angular/common';
    import { FormsModule, ReactiveFormsModule } from '@angular/forms';
    import {
      NgbDateAdapter,
      NgbTimeAdapter,
      NgbCollapseModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDropdownModule,
    } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { NgxDatatableModule } from '@swimlane/ngx-datatable';
    import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
    import {
      DateAdapter,
      TimeAdapter,
      NgxDatatableDefaultDirective,
      NgxDatatableListDirective,
    } from '@abp/ng.theme.shared';
    import { PageComponent, PageToolbarContainerComponent } from '@abp/ng.components/page';
    import {
      AdvancedEntityFiltersComponent,
      AdvancedEntityFiltersFormComponent,
    } from '@volo/abp.commercial.ng.ui';
    import { ProductViewService } from '../services/product.service';
    import { ProductDetailViewService } from '../services/product-detail.service';
    import { ProductDetailModalComponent } from './product-detail.component';
    import {
      AbstractProductComponent,
      ChildTabDependencies,
      ChildComponentDependencies,
    } from './product.abstract.component';
    
    @Component({
      selector: 'app-product',
      changeDetection: ChangeDetectionStrategy.Default,
      imports: [
        ...ChildTabDependencies,
        NgbCollapseModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbDropdownModule,
        NgxValidateCoreModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        NgxDatatableModule,
        NgxDatatableDefaultDirective,
        NgxDatatableListDirective,
        PermissionDirective,
        LocalizationPipe,
        PageComponent,
        PageToolbarContainerComponent,
        AdvancedEntityFiltersComponent,
        AdvancedEntityFiltersFormComponent,
    
        ProductDetailModalComponent,
        ...ChildComponentDependencies,
      ],
      providers: [
        ListService,
        ProductViewService,
        ProductDetailViewService,
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
      ],
      templateUrl: './product.component.html',
      styles: `
        ::ng-deep.datatable-row-detail {
          background: transparent !important;
        }
      `,
    })
    export class ProductComponent extends AbstractProductComponent {}
    
    ]]></file>
  <file path="angular\src\app\products\product\components\product.component.html"><![CDATA[
    <abp-page [title]="title | abpLocalization">
      <abp-page-toolbar-container class="col">
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <div class="text-lg-end pt-2">
          <!--<suite-custom-code-block-1>-->
          <!--</suite-custom-code-block-1>-->
    
          <button
            class="btn btn-primary btn-sm mx-2"
            type="button"
            [disabled]="service.isExportToExcelBusy"
            (click)="exportToExcel()"
          >
            {{ '::ExportToExcel' | abpLocalization }}
          </button>
    
          <button
            *abpPermission="'ExampleAbpApplicationLayer.Products.Create'"
            class="btn btn-primary btn-sm"
            type="button"
            (click)="create()"
          >
            <i class="fa fa-plus me-1" aria-hidden="true"></i>
            {{ '::NewProduct' | abpLocalization }}
          </button>
          <!--<suite-custom-code-block-2>-->
          <!--</suite-custom-code-block-2>-->
        </div>
      </abp-page-toolbar-container>
    
      <abp-advanced-entity-filters localizationSourceName="" [list]="list">
        @if (service.filters; as filters) {
          <abp-advanced-entity-filters-form>
            <form #filterForm (keyup.enter)="list.get()">
              <!--<suite-custom-code-block-3>-->
              <!--</suite-custom-code-block-3>-->
              <div class="row">
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="nameFilter">
                      {{ '::Name' | abpLocalization }}
                    </label>
    
                    <input
                      id="nameFilter"
                      class="form-control"
                      [(ngModel)]="filters.name"
                      [ngModelOptions]="{ standalone: true }"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="minPrice">
                      {{ '::MinPrice' | abpLocalization }}
                    </label>
    
                    <input
                      id="minPrice"
                      type="number"
                      class="form-control"
                      [(ngModel)]="filters.priceMin"
                      [ngModelOptions]="{ standalone: true }"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="maxPrice">
                      {{ '::MaxPrice' | abpLocalization }}
                    </label>
    
                    <input
                      id="maxPrice"
                      type="number"
                      class="form-control"
                      [(ngModel)]="filters.priceMax"
                      [ngModelOptions]="{ standalone: true }"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="isActiveFilter">
                      {{ '::IsActive' | abpLocalization }}
                    </label>
    
                    <select
                      name="isActive"
                      id="isActiveFilter"
                      class="form-select form-control"
                      [(ngModel)]="filters.isActive"
                      [ngModelOptions]="{ standalone: true }"
                      (change)="list.get()"
                    >
                      <option [ngValue]=""></option>
                      <option [ngValue]="true">{{ 'AbpUi::Yes' | abpLocalization }}</option>
                      <option [ngValue]="false">{{ 'AbpUi::No' | abpLocalization }}</option>
                    </select>
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto align-self-end mb-3">
                  <div class="row">
                    <div class="col-6 col-sm-auto d-grid">
                      <button type="button" class="btn btn-outline-primary" (click)="clearFilters()">
                        <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>
                      </button>
                    </div>
                    <div class="col-6 col-sm-auto d-grid">
                      <button type="button" class="btn btn-primary" (click)="list.get()">
                        <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <!--<suite-custom-code-block-4>-->
              <!--</suite-custom-code-block-4>-->
            </form>
          </abp-advanced-entity-filters-form>
        }
      </abp-advanced-entity-filters>
      <!--<suite-custom-code-block-5>-->
      <!--</suite-custom-code-block-5>-->
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          @if (service.selectedCount() > 0) {
            <h4 class="card-title">
              {{
                '::AllItemsAreSelected'
                  | abpLocalization
                    : (service.allSelected() ? service.data.totalCount : service.selectedCount())
              }}
            </h4>
    
            <div>
              <button class="btn btn-outline-primary btn-sm" (click)="service.selectAll()">
                @if (service.allSelected()) {
                  {{ '::ClearSelection' | abpLocalization }}
                } @else {
                  {{ '::SelectAllItems' | abpLocalization: service.data.totalCount }}
                }
              </button>
    
              <button
                *abpPermission="'ExampleAbpApplicationLayer.Products.Delete'"
                class="btn btn-danger btn-sm mx-1"
                (click)="service.bulkDelete()"
              >
                <i class="fa fa-trash me-1" aria-hidden="true"></i>
                {{ 'AbpUi::Delete' | abpLocalization: service.selectedCount() }}
              </button>
            </div>
          }
        </div>
    
        <!--<suite-custom-code-block-6>-->
        <!--</suite-custom-code-block-6>-->
        <div class="card-body">
          <!--<suite-custom-code-block-7>-->
          <!--</suite-custom-code-block-7>-->
          <ngx-datatable
            default
            [rows]="service.data.items"
            [count]="service.data.totalCount"
            [list]="list"
            [selected]="service.selected()"
            [selectionType]="service.selectionType.checkbox"
            (select)="service.onSelect($event)"
          >
            <!--<suite-custom-code-block-8>-->
            <!--</suite-custom-code-block-8>-->
    
            <ngx-datatable-column
              [width]="40"
              [sortable]="false"
              [canAutoResize]="false"
              [draggable]="false"
              [resizeable]="false"
            >
              <ng-template
                ngx-datatable-header-template
                let-value="value"
                let-allRowsSelected="allRowsSelected"
                let-selectFn="selectFn"
              >
                @if (service.data.items.length > 0) {
                  <input
                    type="checkbox"
                    class="form-check-input"
                    [checked]="allRowsSelected"
                    (change)="selectFn(!allRowsSelected)"
                  />
                }
              </ng-template>
              <ng-template
                ngx-datatable-cell-template
                let-value="value"
                let-isSelected="isSelected"
                let-onCheckboxChangeFn="onCheckboxChangeFn"
              >
                <input
                  class="form-check-input"
                  type="checkbox"
                  [checked]="isSelected"
                  (change)="onCheckboxChangeFn($event)"
                />
              </ng-template>
            </ngx-datatable-column>
    
            @if (isActionButtonVisible) {
              <ngx-datatable-column
                [name]="'AbpUi::Actions' | abpLocalization"
                [maxWidth]="150"
                [width]="150"
                [sortable]="false"
              >
                <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
                  <div ngbDropdown container="body" class="d-inline-block">
                    <button
                      class="btn btn-primary btn-sm dropdown-toggle"
                      data-toggle="dropdown"
                      aria-haspopup="true"
                      ngbDropdownToggle
                    >
                      <i class="fa fa-cog me-1" aria-hidden="true"></i>
                      {{ 'AbpUi::Actions' | abpLocalization }}
                    </button>
    
                    <div ngbDropdownMenu>
                      <button
                        ngbDropdownItem
                        *abpPermission="'ExampleAbpApplicationLayer.Products.Edit'"
                        (click)="update(row)"
                      >
                        {{ 'AbpUi::Edit' | abpLocalization }}
                      </button>
    
                      <button
                        ngbDropdownItem
                        *abpPermission="'ExampleAbpApplicationLayer.Products.Delete'"
                        (click)="delete(row)"
                      >
                        {{ 'AbpUi::Delete' | abpLocalization }}
                      </button>
                    </div>
                  </div>
                </ng-template>
              </ngx-datatable-column>
            }
            <ngx-datatable-column name="{{ '::Name' | abpLocalization }}" prop="name">
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.name }}
              </ng-template>
            </ngx-datatable-column>
            <ngx-datatable-column name="{{ '::Price' | abpLocalization }}" prop="price">
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.price }}
              </ng-template>
            </ngx-datatable-column>
            <ngx-datatable-column name="{{ '::IsActive' | abpLocalization }}" prop="isActive">
              <ng-template let-row="row" ngx-datatable-cell-template>
                <ng-template [ngIf]="row.isActive" [ngIfThen]="yes" [ngIfElse]="no"></ng-template>
    
                <ng-template #yes>
                  <div class="text-success">
                    <span [title]="'AbpUi::Yes' | abpLocalization">
                      <i class="fa fa-check" aria-hidden="true"></i>
                    </span>
                  </div>
                </ng-template>
    
                <ng-template #no>
                  <div class="text-danger">
                    <span [title]="'AbpUi::No' | abpLocalization">
                      <i class="fa fa-times" aria-hidden="true"></i>
                    </span>
                  </div>
                </ng-template>
              </ng-template>
            </ngx-datatable-column>
            <!--<suite-custom-code-block-9>-->
            <!--</suite-custom-code-block-9>-->
          </ngx-datatable>
          <!--<suite-custom-code-block-10>-->
          <!--</suite-custom-code-block-10>-->
        </div>
      </div>
      <!--<suite-custom-code-block-11>-->
      <!--</suite-custom-code-block-11>-->
    </abp-page>
    <!--<suite-custom-code-block-12>-->
    <!--</suite-custom-code-block-12>-->
    
    @defer (when serviceDetail.isVisible) {
      @if (serviceDetail.isVisible) {
        <app-product-detail-modal />
      }
    }
    
    ]]></file>
  <file path="angular\src\app\products\product\components\product.abstract.component.ts"><![CDATA[
    import { Directive, OnInit, inject } from '@angular/core';
    
    import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
    
    import type { ProductDto } from '../../../proxy/products/models';
    import { ProductViewService } from '../services/product.service';
    import { ProductDetailViewService } from '../services/product-detail.service';
    
    export const ChildTabDependencies = [];
    
    export const ChildComponentDependencies = [];
    
    @Directive()
    export abstract class AbstractProductComponent implements OnInit {
      public readonly list = inject(ListService);
      public readonly track = inject(TrackByService);
      public readonly service = inject(ProductViewService);
      public readonly serviceDetail = inject(ProductDetailViewService);
      public readonly permissionService = inject(PermissionService);
    
      protected title = '::Products';
      protected isActionButtonVisible: boolean | null = null;
    
      ngOnInit() {
        this.service.hookToQuery();
        this.checkActionButtonVisibility();
      }
    
      clearFilters() {
        this.service.clearFilters();
      }
    
      showForm() {
        this.serviceDetail.showForm();
      }
    
      create() {
        this.serviceDetail.selected = undefined;
        this.serviceDetail.showForm();
      }
    
      update(record: ProductDto) {
        this.serviceDetail.update(record);
      }
    
      delete(record: ProductDto) {
        this.service.delete(record);
      }
    
      exportToExcel() {
        this.service.exportToExcel();
      }
    
      checkActionButtonVisibility() {
        if (this.isActionButtonVisible !== null) {
          return;
        }
    
        const canEdit = this.permissionService.getGrantedPolicy(
          'ExampleAbpApplicationLayer.Products.Edit',
        );
        const canDelete = this.permissionService.getGrantedPolicy(
          'ExampleAbpApplicationLayer.Products.Delete',
        );
        this.isActionButtonVisible = canEdit || canDelete;
      }
    }
    
    ]]></file>
  <file path="angular\src\app\products\product\components\product-detail.component.ts"><![CDATA[
    import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
    import { ReactiveFormsModule } from '@angular/forms';
    import { CommonModule } from '@angular/common';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
    import {
      DateAdapter,
      TimeAdapter,
      ModalComponent,
      ModalCloseDirective,
      ButtonComponent,
    } from '@abp/ng.theme.shared';
    
    import {
      NgbNavModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDateAdapter,
      NgbTimeAdapter,
    } from '@ng-bootstrap/ng-bootstrap';
    import { ProductDetailViewService } from '../services/product-detail.service';
    
    @Component({
      selector: 'app-product-detail-modal',
      changeDetection: ChangeDetectionStrategy.Default,
      imports: [
        CommonModule,
        ReactiveFormsModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbNavModule,
        NgxValidateCoreModule,
        AutofocusDirective,
        ModalCloseDirective,
        LocalizationPipe,
        ModalComponent,
        ButtonComponent,
      ],
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
      ],
      templateUrl: './product-detail.component.html',
      styles: [],
    })
    export class ProductDetailModalComponent {
      public readonly service = inject(ProductDetailViewService);
    }
    
    ]]></file>
  <file path="angular\src\app\products\product\components\product-detail.component.html"><![CDATA[
    <abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
      <ng-template #abpHeader>
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <h3>
          <!--<suite-custom-code-block-1>-->
          <!--</suite-custom-code-block-1>-->
          {{ (service.selected ? 'AbpUi::Edit' : '::NewProduct') | abpLocalization }}
          <!--<suite-custom-code-block-2>-->
          <!--</suite-custom-code-block-2>-->
        </h3>
        <!--<suite-custom-code-block-3>-->
        <!--</suite-custom-code-block-3>-->
      </ng-template>
    
      <ng-template #abpBody>
        <!--<suite-custom-code-block-4>-->
        <!--</suite-custom-code-block-4>-->
        <form
          [formGroup]="service.form"
          id="product"
          (ngSubmit)="service.submitForm()"
          validateOnSubmit
        >
          <!--<suite-custom-code-block-5>-->
          <!--</suite-custom-code-block-5>-->
    
          <ul ngbNav #nav="ngbNav" class="nav-tabs">
            <li ngbNavItem>
              <a ngbNavLink>
                {{ '::Product' | abpLocalization }}
              </a>
              <ng-template ngbNavContent>
                <div class="mt-2 fade-in-top">
                  <div class="mb-3">
                    <label class="form-label" for="product-name">
                      {{ '::Name' | abpLocalization }} *
                    </label>
    
                    <input id="product-name" formControlName="name" class="form-control" autofocus />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="product-desc">
                      {{ '::Desc' | abpLocalization }}
                    </label>
    
                    <input id="product-desc" formControlName="desc" class="form-control" />
                  </div>
    
                  <div class="mb-3">
                    <label class="form-label" for="product-price">
                      {{ '::Price' | abpLocalization }} *
                    </label>
    
                    <input
                      type="number"
                      id="product-price"
                      formControlName="price"
                      class="form-control"
                    />
                  </div>
    
                  <div class="form-check mb-3">
                    <input
                      type="checkbox"
                      id="product-is-active"
                      formControlName="isActive"
                      class="form-check-input"
                    />
    
                    <label for="product-is-active" class="form-check-label">
                      {{ '::IsActive' | abpLocalization }}
                    </label>
                  </div>
                </div>
              </ng-template>
            </li>
          </ul>
          <div [ngbNavOutlet]="nav"></div>
    
          <!--<suite-custom-code-block-6>-->
          <!--</suite-custom-code-block-6>-->
        </form>
      </ng-template>
    
      <ng-template #abpFooter>
        <!--<suite-custom-code-block-7>-->
        <!--</suite-custom-code-block-7>-->
        <button type="button" class="btn btn-secondary" abpClose>
          {{ 'AbpUi::Cancel' | abpLocalization }}
        </button>
        <!--<suite-custom-code-block-8>-->
        <!--</suite-custom-code-block-8>-->
        <abp-button iconClass="fa fa-check" buttonType="submit" formName="product">
          {{ 'AbpUi::Save' | abpLocalization }}
        </abp-button>
        <!--<suite-custom-code-block-9>-->
        <!--</suite-custom-code-block-9>-->
      </ng-template>
    </abp-modal>
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\util.js.map"><![CDATA[
    {"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/utils/angular/standalone/util.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,2DAAuE;AACvE,iCAAiC;AACjC,sCAA0D;AAC1D,wDAA8D;AAC9D,4CAA4C;AAC5C,0DAA+C;AAE/C;;;;GAIG;AACI,KAAK,UAAU,eAAe,CAAC,IAAU,EAAE,WAAmB;IACnE,MAAM,SAAS,GAAG,MAAM,IAAA,wBAAY,EAAC,IAAI,CAAC,CAAC;IAC3C,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACpD,MAAM,WAAW,GAAG,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAElD,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAA,0CAAwB,GAAE,CAAC;KAClC;IAED,MAAM,OAAO,GAAG,WAAW,CAAC,OAAiC,CAAC;IAE9D,OAAO,WAAW,CAAC,OAAO,KAAK,2BAAQ,CAAC,WAAW;QACjD,WAAW,CAAC,OAAO,KAAK,2BAAQ,CAAC,gBAAgB;QACjD,CAAC,CAAC,OAAO,CAAC,OAAO;QACjB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;AACnB,CAAC;AAfD,0CAeC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAC,IAAU,EAAE,IAAY;IACpD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACpC,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAEhF,OAAO,MAAM,CAAC;AAChB,CAAC;AALD,sCAKC;AAED,8DAA8D;AAC9D,SAAgB,4BAA4B,CAAC,IAAU,EAAE,YAAoB;IAC3E,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IACrD,MAAM,SAAS,GAAG,mBAAmB,CACnC,UAAU,EACV,sBAAsB,EACtB,2BAA2B,CAC5B,CAAC;IAEF,IAAI,SAAS,EAAE;QACb,IAAI,MAAM,GAA6B,IAAI,CAAC;QAE5C,UAAU,CAAC,YAAY,CAAC,SAAS,IAAI,CAAC,IAAI;YACxC,IACE,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBACzB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,EAClC;gBACA,MAAM,GAAG,IAAI,CAAC;aACf;YAED,IAAI,CAAC,MAAM,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;KACF;IAED,MAAM,IAAI,gCAAmB,CAAC,+CAA+C,YAAY,EAAE,CAAC,CAAC;AAC/F,CAAC;AA/BD,oEA+BC;AAED;;;;;GAKG;AACH,SAAS,mBAAmB,CAC1B,UAAyB,EACzB,IAAY,EACZ,UAAkB;IAElB,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,UAAU,EAAE;QACxC,mCAAmC;QACnC,IACE,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAC7B,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,IAAI,KAAK,UAAU,EACxC;YACA,SAAS;SACV;QAED,sDAAsD;QACtD,IACE,CAAC,IAAI,CAAC,YAAY;YAClB,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa;YAChC,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EACnD;YACA,SAAS;SACV;QAED,wEAAwE;QACxE,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC9D,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBACxD,sCAAsC;gBACtC,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;aAC1B;SACF;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,SAAgB,kBAAkB,CAAC,IAAU,EAAE,IAAY,EAAE,OAAiB;IAC5E,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxC,IAAA,8BAAqB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;KAC7B;AACH,CAAC;AAND,gDAMC;AAED,mEAAmE;AACnE,SAAgB,oBAAoB,CAAC,IAAa;IAChD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;QAC9B,OAAO,KAAK,CAAC;KACd;IAED,MAAM,SAAS,GAAG,mBAAmB,CACnC,IAAI,CAAC,aAAa,EAAE,EACpB,wBAAwB,EACxB,eAAe,CAChB,CAAC;IAEF,OAAO,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,CAAC;AAC/F,CAAC;AAZD,oDAYC;AAED,wEAAwE;AACxE,SAAgB,oBAAoB,CAClC,MAAkC;IAElC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,UAAU,EAAE;QACpC,IACE,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAC7B,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW;YAC9B,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,EAC7C;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;SACzB;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAfD,oDAeC"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\util.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findProvidersLiteral = exports.isMergeAppConfigCall = exports.applyChangesToFile = exports.findBootstrapApplicationCall = exports.getSourceFile = exports.getMainFilePath = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const ts = require("typescript");
    const change_1 = require("../change");
    const project_targets_1 = require("../project-targets");
    const workspace_1 = require("../workspace");
    const workspace_models_1 = require("../workspace-models");
    /**
     * Finds the main file of a project.
     * @param tree File tree for the project.
     * @param projectName Name of the project in which to search.
     */
    async function getMainFilePath(tree, projectName) {
        const workspace = await (0, workspace_1.getWorkspace)(tree);
        const project = workspace.projects.get(projectName);
        const buildTarget = project?.targets.get('build');
        if (!buildTarget) {
            throw (0, project_targets_1.targetBuildNotFoundError)();
        }
        const options = buildTarget.options;
        return buildTarget.builder === workspace_models_1.Builders.Application ||
            buildTarget.builder === workspace_models_1.Builders.BuildApplication
            ? options.browser
            : options.main;
    }
    exports.getMainFilePath = getMainFilePath;
    /**
     * Gets a TypeScript source file at a specific path.
     * @param tree File tree of a project.
     * @param path Path to the file.
     */
    function getSourceFile(tree, path) {
        const content = tree.readText(path);
        const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
        return source;
    }
    exports.getSourceFile = getSourceFile;
    /** Finds the call to `bootstrapApplication` within a file. */
    function findBootstrapApplicationCall(tree, mainFilePath) {
        const sourceFile = getSourceFile(tree, mainFilePath);
        const localName = findImportLocalName(sourceFile, 'bootstrapApplication', '@angular/platform-browser');
        if (localName) {
            let result = null;
            sourceFile.forEachChild(function walk(node) {
                if (ts.isCallExpression(node) &&
                    ts.isIdentifier(node.expression) &&
                    node.expression.text === localName) {
                    result = node;
                }
                if (!result) {
                    node.forEachChild(walk);
                }
            });
            if (result) {
                return result;
            }
        }
        throw new schematics_1.SchematicsException(`Could not find bootstrapApplication call in ${mainFilePath}`);
    }
    exports.findBootstrapApplicationCall = findBootstrapApplicationCall;
    /**
     * Finds the local name of an imported symbol. Could be the symbol name itself or its alias.
     * @param sourceFile File within which to search for the import.
     * @param name Actual name of the import, not its local alias.
     * @param moduleName Name of the module from which the symbol is imported.
     */
    function findImportLocalName(sourceFile, name, moduleName) {
        for (const node of sourceFile.statements) {
            // Only look for top-level imports.
            if (!ts.isImportDeclaration(node) ||
                !ts.isStringLiteral(node.moduleSpecifier) ||
                node.moduleSpecifier.text !== moduleName) {
                continue;
            }
            // Filter out imports that don't have the right shape.
            if (!node.importClause ||
                !node.importClause.namedBindings ||
                !ts.isNamedImports(node.importClause.namedBindings)) {
                continue;
            }
            // Look through the elements of the declaration for the specific import.
            for (const element of node.importClause.namedBindings.elements) {
                if ((element.propertyName || element.name).text === name) {
                    // The local name is always in `name`.
                    return element.name.text;
                }
            }
        }
        return null;
    }
    /**
     * Applies a set of changes to a file.
     * @param tree File tree of the project.
     * @param path Path to the file that is being changed.
     * @param changes Changes that should be applied to the file.
     */
    function applyChangesToFile(tree, path, changes) {
        if (changes.length > 0) {
            const recorder = tree.beginUpdate(path);
            (0, change_1.applyToUpdateRecorder)(recorder, changes);
            tree.commitUpdate(recorder);
        }
    }
    exports.applyChangesToFile = applyChangesToFile;
    /** Checks whether a node is a call to `mergeApplicationConfig`. */
    function isMergeAppConfigCall(node) {
        if (!ts.isCallExpression(node)) {
            return false;
        }
        const localName = findImportLocalName(node.getSourceFile(), 'mergeApplicationConfig', '@angular/core');
        return !!localName && ts.isIdentifier(node.expression) && node.expression.text === localName;
    }
    exports.isMergeAppConfigCall = isMergeAppConfigCall;
    /** Finds the `providers` array literal within an application config. */
    function findProvidersLiteral(config) {
        for (const prop of config.properties) {
            if (ts.isPropertyAssignment(prop) &&
                ts.isIdentifier(prop.name) &&
                prop.name.text === 'providers' &&
                ts.isArrayLiteralExpression(prop.initializer)) {
                return prop.initializer;
            }
        }
        return null;
    }
    exports.findProvidersLiteral = findProvidersLiteral;
    //# sourceMappingURL=util.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\util.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Tree } from '@angular-devkit/schematics';
    import * as ts from 'typescript';
    import { Change } from '../change';
    /**
     * Finds the main file of a project.
     * @param tree File tree for the project.
     * @param projectName Name of the project in which to search.
     */
    export declare function getMainFilePath(tree: Tree, projectName: string): Promise<string>;
    /**
     * Gets a TypeScript source file at a specific path.
     * @param tree File tree of a project.
     * @param path Path to the file.
     */
    export declare function getSourceFile(tree: Tree, path: string): ts.SourceFile;
    /** Finds the call to `bootstrapApplication` within a file. */
    export declare function findBootstrapApplicationCall(tree: Tree, mainFilePath: string): ts.CallExpression;
    /**
     * Applies a set of changes to a file.
     * @param tree File tree of the project.
     * @param path Path to the file that is being changed.
     * @param changes Changes that should be applied to the file.
     */
    export declare function applyChangesToFile(tree: Tree, path: string, changes: Change[]): void;
    /** Checks whether a node is a call to `mergeApplicationConfig`. */
    export declare function isMergeAppConfigCall(node: ts.Node): node is ts.CallExpression;
    /** Finds the `providers` array literal within an application config. */
    export declare function findProvidersLiteral(config: ts.ObjectLiteralExpression): ts.ArrayLiteralExpression | null;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\rules_spec.js.map"><![CDATA[
    {"version":3,"file":"rules_spec.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/utils/angular/standalone/rules_spec.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\rules_spec.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    const schematics_1 = require("@angular-devkit/schematics");
    const testing_1 = require("@angular-devkit/schematics/testing");
    const node_path_1 = require("node:path");
    const rules_1 = require("./rules");
    describe('standalone utilities', () => {
        const projectName = 'test';
        let host;
        async function setupProject(standalone = false) {
            const schematicRunner = new testing_1.SchematicTestRunner('@schematics/angular', require.resolve('../../collection.json'));
            host = await schematicRunner.runSchematic('workspace', {
                name: 'workspace',
                newProjectRoot: '/',
                version: '6.0.0',
            });
            host = await schematicRunner.runSchematic('application', {
                name: projectName,
                standalone,
                routing: false,
            }, host);
        }
        afterEach(() => {
            // Clear the host so it doesn't leak between tests.
            host = null;
        });
        function stripWhitespace(str) {
            return str.replace(/\s/g, '');
        }
        function assertContains(source, targetString) {
            expect(stripWhitespace(source)).toContain(stripWhitespace(targetString));
        }
        function getPathWithinProject(path) {
            return (0, node_path_1.join)('/', projectName, 'src', path);
        }
        function readFile(projectPath) {
            return host.readText(getPathWithinProject(projectPath));
        }
        async function testRule(rule, tree) {
            await (0, schematics_1.callRule)(rule, tree, {}).toPromise();
        }
        describe('addRootImport', () => {
            it('should add a root import to an NgModule-based app', async () => {
                await setupProject();
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}.forRoot([])`), host);
                const content = readFile('app/app.module.ts');
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `imports: [BrowserModule, MyModule.forRoot([])]`);
            });
            it('should add a root import to a standalone app', async () => {
                await setupProject(true);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('app/app.config.ts');
                assertContains(content, `importProvidersFrom`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `importProvidersFrom(MyModule)`);
            });
            it('should add a root import to a standalone app whose app config does not have a providers array', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('app/app.config.ts'), `
              import { ApplicationConfig } from '@angular/core';
    
              export const appConfig: ApplicationConfig = {};
            `);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('app/app.config.ts');
                assertContains(content, `import { ApplicationConfig, importProvidersFrom } from '@angular/core';`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `providers: [importProvidersFrom(MyModule)]`);
            });
            it('should add a root import to a standalone app with a config with providers', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('app/app.config.ts'), `
              import { ApplicationConfig } from '@angular/core';
    
              export const appConfig: ApplicationConfig = {
                providers: [
                  {provide: 'foo', useValue: 123}
                ]
              };
            `);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('app/app.config.ts');
                assertContains(content, `import { ApplicationConfig, importProvidersFrom } from '@angular/core';`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `providers: [
            {provide: 'foo', useValue: 123},
            importProvidersFrom(MyModule)
          ]`);
            });
            it('should add a root import to a standalone app whose app config does not have have ' +
                'a providers array, but has another property', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('app/app.config.ts'), `
              import { ApplicationConfig } from '@angular/core';
    
              export const appConfig: ApplicationConfig = {
                otherProp: {},
              };
            `);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('app/app.config.ts');
                assertContains(content, `import { ApplicationConfig, importProvidersFrom } from '@angular/core';`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `
                export const appConfig: ApplicationConfig = {
                  otherProp: {},
                  providers: [importProvidersFrom(MyModule)]
                };
              `);
            });
            it('should add a root import to a standalone app with an inline app config', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('main.ts'), `
            import { bootstrapApplication } from '@angular/platform-browser';
            import { AppComponent } from './app/app.component';
    
            bootstrapApplication(AppComponent, {});
          `);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('main.ts');
                assertContains(content, `import { importProvidersFrom } from '@angular/core';`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `bootstrapApplication(AppComponent, {
              providers: [importProvidersFrom(MyModule)]
            });`);
            });
            it('should add a root import to a standalone app without an app config', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('main.ts'), `
            import { bootstrapApplication } from '@angular/platform-browser';
            import { AppComponent } from './app/app.component';
    
            bootstrapApplication(AppComponent);
          `);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('main.ts');
                assertContains(content, `import { importProvidersFrom } from '@angular/core';`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `bootstrapApplication(AppComponent, {
              providers: [importProvidersFrom(MyModule)]
            });`);
            });
            it('should add a root import to a standalone app with a merged app config', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('main.ts'), `
              import { mergeApplicationConfig } from '@angular/core';
              import { bootstrapApplication } from '@angular/platform-browser';
              import { AppComponent } from './app.component';
    
              bootstrapApplication(AppComponent, mergeApplicationConfig(a, b));
            `);
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('MyModule', '@my/module')}`), host);
                const content = readFile('main.ts');
                assertContains(content, `import { mergeApplicationConfig, importProvidersFrom } from '@angular/core';`);
                assertContains(content, `import { MyModule } from '@my/module';`);
                assertContains(content, `bootstrapApplication(AppComponent, mergeApplicationConfig(a, b, {
              providers: [importProvidersFrom(MyModule)]
            }));`);
            });
            it('should alias symbols that conflict with existing code', async () => {
                await setupProject();
                await testRule((0, rules_1.addRootImport)(projectName, ({ code, external }) => code `${external('BrowserModule', '@my/module')}.forRoot([])`), host);
                const content = readFile('app/app.module.ts');
                assertContains(content, `import { BrowserModule as BrowserModule_alias } from '@my/module';`);
                assertContains(content, `imports: [BrowserModule, BrowserModule_alias.forRoot([])]`);
            });
            it('should throw an error if the bootstrapApplication code has no arguments', async () => {
                await setupProject(true);
                const mainPath = getPathWithinProject('main.ts');
                host.overwrite(mainPath, `
            import { bootstrapApplication } from '@angular/platform-browser';
    
            bootstrapApplication();
          `);
                // const promise = testRule(
                //   addRootImport(
                //     projectName,
                //     ({ code, external }) => code`${external('MyModule', '@my/module')}`,
                //   ),
                //   host,
                // );
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                // await expectAsync(promise).toBeRejectedWithError(
                //   `Cannot add provider to invalid bootstrapApplication call in ${mainPath}`,
                // );
            });
            it('should throw an error if the bootstrapApplication call cannot be analyzed', async () => {
                await setupProject(true);
                const mainPath = getPathWithinProject('main.ts');
                host.overwrite(mainPath, `
            import { bootstrapApplication } from '@angular/platform-browser';
            import { AppComponent } from './app/app.component';
            import { appConfig } from '@external/app-config';
    
            bootstrapApplication(AppComponent, appConfig);
          `);
                // const promise = testRule(
                //   addRootImport(
                //     projectName,
                //     ({ code, external }) => code`${external('MyModule', '@my/module')}`,
                //   ),
                //   host,
                // );
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                // await expectAsync(promise).toBeRejectedWithError(
                //   `Cannot statically analyze bootstrapApplication call in ${mainPath}`,
                // );
            });
            it('should throw an error if there is no bootstrapApplication call', async () => {
                await setupProject(true);
                host.overwrite(getPathWithinProject('main.ts'), '');
                // const promise = testRule(
                //   addRootImport(
                //     projectName,
                //     ({ code, external }) => code`${external('MyModule', '@my/module')}`,
                //   ),
                //   host,
                // );
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                // await expectAsync(promise).toBeRejectedWithError('Bootstrap call not found');
            });
        });
        describe('addRootProvider', () => {
            it('should add a root provider to an NgModule-based app', async () => {
                await setupProject();
                await testRule((0, rules_1.addRootProvider)(projectName, ({ code, external }) => code `{ provide: ${external('SOME_TOKEN', '@my/module')}, useValue: 123 }`), host);
                const content = readFile('app/app.module.ts');
                assertContains(content, `import { SOME_TOKEN } from '@my/module';`);
                assertContains(content, `providers: [{ provide: SOME_TOKEN, useValue: 123 }]`);
            });
            it('should add a root provider to a standalone app', async () => {
                await setupProject(true);
                await testRule((0, rules_1.addRootProvider)(projectName, ({ code, external }) => code `${external('provideModule', '@my/module')}([])`), host);
                const content = readFile('app/app.config.ts');
                assertContains(content, `import { provideModule } from '@my/module';`);
                assertContains(content, `providers: [provideZoneChangeDetection({ eventCoalescing:true }),provideModule([])]`);
            });
            it('should add a root provider to a standalone app when providers contain a trailing comma', async () => {
                await setupProject(true);
                const configPath = 'app/app.config.ts';
                host.overwrite(getPathWithinProject(configPath), `
            import { ApplicationConfig } from '@angular/core';
            import { provideRouter } from '@angular/router';
    
            export const appConfig: ApplicationConfig = {
              providers: [
                provideRouter([]),
              ]
            };
          `);
                await testRule((0, rules_1.addRootProvider)(projectName, ({ code, external }) => code `${external('provideModule', '@my/module')}([])`), host);
                const content = readFile('app/app.config.ts');
                assertContains(content, `import { provideModule } from '@my/module';`);
                assertContains(content, `providers: [provideRouter([]),provideModule([]),]`);
            });
        });
    });
    //# sourceMappingURL=rules_spec.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\rules_spec.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\rules.js.map"><![CDATA[
    {"version":3,"file":"rules.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/utils/angular/standalone/rules.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\rules.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addRootProvider = exports.addRootImport = void 0;
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const ast_utils_1 = require("../ast-utils");
    const change_1 = require("../change");
    const ng_ast_utils_1 = require("../ng-ast-utils");
    const app_config_1 = require("./app_config");
    const code_block_1 = require("./code_block");
    const util_1 = require("./util");
    /**
     * Adds an import to the root of the project.
     * @param project Name of the project to which to add the import.
     * @param callback Function that generates the code block which should be inserted.
     * @example
     *
     * ```ts
     * import { Rule } from '@angular-devkit/schematics';
     * import { addRootImport } from '@schematics/angular/utility';
     *
     * export default function(): Rule {
     *   return addRootImport('default', ({code, external}) => {
     *     return code`${external('MyModule', '@my/module')}.forRoot({})`;
     *   });
     * }
     * ```
     */
    function addRootImport(project, callback) {
        return getRootInsertionRule(project, callback, 'imports', {
            name: 'importProvidersFrom',
            module: '@angular/core',
        });
    }
    exports.addRootImport = addRootImport;
    /**
     * Adds a provider to the root of the project.
     * @param project Name of the project to which to add the import.
     * @param callback Function that generates the code block which should be inserted.
     * @example
     *
     * ```ts
     * import { Rule } from '@angular-devkit/schematics';
     * import { addRootProvider } from '@schematics/angular/utility';
     *
     * export default function(): Rule {
     *   return addRootProvider('default', ({code, external}) => {
     *     return code`${external('provideLibrary', '@my/library')}({})`;
     *   });
     * }
     * ```
     */
    function addRootProvider(project, callback) {
        return getRootInsertionRule(project, callback, 'providers');
    }
    exports.addRootProvider = addRootProvider;
    /**
     * Creates a rule that inserts code at the root of either a standalone or NgModule-based project.
     * @param project Name of the project into which to inser tthe code.
     * @param callback Function that generates the code block which should be inserted.
     * @param ngModuleField Field of the root NgModule into which the code should be inserted, if the
     * app is based on NgModule
     * @param standaloneWrapperFunction Function with which to wrap the code if the app is standalone.
     */
    function getRootInsertionRule(project, callback, ngModuleField, standaloneWrapperFunction) {
        return async (host) => {
            const mainFilePath = await (0, util_1.getMainFilePath)(host, project);
            const codeBlock = new code_block_1.CodeBlock();
            if ((0, ng_ast_utils_1.isStandaloneApp)(host, mainFilePath)) {
                return tree => addProviderToStandaloneBootstrap(tree, callback(codeBlock), mainFilePath, standaloneWrapperFunction);
            }
            const modulePath = (0, ng_ast_utils_1.getAppModulePath)(host, mainFilePath);
            const pendingCode = code_block_1.CodeBlock.transformPendingCode(callback(codeBlock), modulePath);
            return (0, schematics_1.chain)([
                ...pendingCode.rules,
                tree => {
                    const changes = (0, ast_utils_1.addSymbolToNgModuleMetadata)((0, util_1.getSourceFile)(tree, modulePath), modulePath, ngModuleField, pendingCode.code.expression, 
                    // Explicitly set the import path to null since we deal with imports here separately.
                    null);
                    (0, util_1.applyChangesToFile)(tree, modulePath, changes);
                },
            ]);
        };
    }
    /**
     * Adds a provider to the root of a standalone project.
     * @param host Tree of the root rule.
     * @param pendingCode Code that should be inserted.
     * @param mainFilePath Path to the project's main file.
     * @param wrapperFunction Optional function with which to wrap the provider.
     */
    function addProviderToStandaloneBootstrap(host, pendingCode, mainFilePath, wrapperFunction) {
        const bootstrapCall = (0, util_1.findBootstrapApplicationCall)(host, mainFilePath);
        const fileToEdit = (0, app_config_1.findAppConfig)(bootstrapCall, host, mainFilePath)?.filePath || mainFilePath;
        const { code, rules } = code_block_1.CodeBlock.transformPendingCode(pendingCode, fileToEdit);
        return (0, schematics_1.chain)([
            ...rules,
            () => {
                let wrapped;
                let additionalRules;
                if (wrapperFunction) {
                    const block = new code_block_1.CodeBlock();
                    const result = code_block_1.CodeBlock.transformPendingCode(block.code `${block.external(wrapperFunction.name, wrapperFunction.module)}(${code.expression})`, fileToEdit);
                    wrapped = result.code;
                    additionalRules = result.rules;
                }
                else {
                    wrapped = code;
                    additionalRules = [];
                }
                return (0, schematics_1.chain)([
                    ...additionalRules,
                    tree => insertStandaloneRootProvider(tree, mainFilePath, wrapped.expression),
                ]);
            },
        ]);
    }
    /**
     * Inserts a string expression into the root of a standalone project.
     * @param tree File tree used to modify the project.
     * @param mainFilePath Path to the main file of the project.
     * @param expression Code expression to be inserted.
     */
    function insertStandaloneRootProvider(tree, mainFilePath, expression) {
        const bootstrapCall = (0, util_1.findBootstrapApplicationCall)(tree, mainFilePath);
        const appConfig = (0, app_config_1.findAppConfig)(bootstrapCall, tree, mainFilePath);
        if (bootstrapCall.arguments.length === 0) {
            throw new schematics_1.SchematicsException(`Cannot add provider to invalid bootstrapApplication call in ${bootstrapCall.getSourceFile().fileName}`);
        }
        if (appConfig) {
            addProvidersExpressionToAppConfig(tree, appConfig, expression);
            return;
        }
        const newAppConfig = `, {\n${core_1.tags.indentBy(2) `providers: [${expression}]`}\n}`;
        let targetCall;
        if (bootstrapCall.arguments.length === 1) {
            targetCall = bootstrapCall;
        }
        else if ((0, util_1.isMergeAppConfigCall)(bootstrapCall.arguments[1])) {
            targetCall = bootstrapCall.arguments[1];
        }
        else {
            throw new schematics_1.SchematicsException(`Cannot statically analyze bootstrapApplication call in ${bootstrapCall.getSourceFile().fileName}`);
        }
        (0, util_1.applyChangesToFile)(tree, mainFilePath, [
            (0, ast_utils_1.insertAfterLastOccurrence)(targetCall.arguments, newAppConfig, mainFilePath, targetCall.getEnd() - 1),
        ]);
    }
    /**
     * Adds a string expression to an app config object.
     * @param tree File tree used to modify the project.
     * @param appConfig Resolved configuration object of the project.
     * @param expression Code expression to be inserted.
     */
    function addProvidersExpressionToAppConfig(tree, appConfig, expression) {
        const { node, filePath } = appConfig;
        const configProps = node.properties;
        const providersLiteral = (0, util_1.findProvidersLiteral)(node);
        // If there's a `providers` property, we can add the provider
        // to it, otherwise we need to declare it ourselves.
        if (providersLiteral) {
            (0, util_1.applyChangesToFile)(tree, filePath, [
                (0, ast_utils_1.insertAfterLastOccurrence)(providersLiteral.elements, (providersLiteral.elements.length === 0 ? '' : ', ') + expression, filePath, providersLiteral.getStart() + 1),
            ]);
        }
        else {
            const prop = core_1.tags.indentBy(2) `providers: [${expression}]`;
            let toInsert;
            let insertPosition;
            if (configProps.length === 0) {
                toInsert = '\n' + prop + '\n';
                insertPosition = node.getEnd() - 1;
            }
            else {
                const hasTrailingComma = configProps.hasTrailingComma;
                toInsert = (hasTrailingComma ? '' : ',') + '\n' + prop;
                insertPosition = configProps[configProps.length - 1].getEnd() + (hasTrailingComma ? 1 : 0);
            }
            (0, util_1.applyChangesToFile)(tree, filePath, [new change_1.InsertChange(filePath, insertPosition, toInsert)]);
        }
    }
    //# sourceMappingURL=rules.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\rules.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Rule } from '@angular-devkit/schematics';
    import { CodeBlockCallback } from './code_block';
    /**
     * Adds an import to the root of the project.
     * @param project Name of the project to which to add the import.
     * @param callback Function that generates the code block which should be inserted.
     * @example
     *
     * ```ts
     * import { Rule } from '@angular-devkit/schematics';
     * import { addRootImport } from '@schematics/angular/utility';
     *
     * export default function(): Rule {
     *   return addRootImport('default', ({code, external}) => {
     *     return code`${external('MyModule', '@my/module')}.forRoot({})`;
     *   });
     * }
     * ```
     */
    export declare function addRootImport(project: string, callback: CodeBlockCallback): Rule;
    /**
     * Adds a provider to the root of the project.
     * @param project Name of the project to which to add the import.
     * @param callback Function that generates the code block which should be inserted.
     * @example
     *
     * ```ts
     * import { Rule } from '@angular-devkit/schematics';
     * import { addRootProvider } from '@schematics/angular/utility';
     *
     * export default function(): Rule {
     *   return addRootProvider('default', ({code, external}) => {
     *     return code`${external('provideLibrary', '@my/library')}({})`;
     *   });
     * }
     * ```
     */
    export declare function addRootProvider(project: string, callback: CodeBlockCallback): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\index.js.map"><![CDATA[
    {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/utils/angular/standalone/index.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,iCAAyD;AAAhD,sGAAA,aAAa,OAAA;AAAE,wGAAA,eAAe,OAAA"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\index.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addRootProvider = exports.addRootImport = void 0;
    var rules_1 = require("./rules");
    Object.defineProperty(exports, "addRootImport", { enumerable: true, get: function () { return rules_1.addRootImport; } });
    Object.defineProperty(exports, "addRootProvider", { enumerable: true, get: function () { return rules_1.addRootProvider; } });
    //# sourceMappingURL=index.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\index.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    export { addRootImport, addRootProvider } from './rules';
    export type { PendingCode, CodeBlockCallback, CodeBlock } from './code_block';
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\code_block.js.map"><![CDATA[
    {"version":3,"file":"code_block.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/utils/angular/standalone/code_block.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\code_block.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeBlock = void 0;
    const ts = require("typescript");
    const ast_utils_1 = require("../ast-utils");
    const change_1 = require("../change");
    /** Counter used to generate unique IDs. */
    let uniqueIdCounter = 0;
    /**
     * Utility class used to generate blocks of code that
     * can be inserted by the devkit into a user's app.
     */
    class CodeBlock {
        constructor() {
            this._imports = new Map();
            // Note: the methods here are defined as arrow function so that they can be destructured by
            // consumers without losing their context. This makes the API more concise.
            /** Function used to tag a code block in order to produce a `PendingCode` object. */
            this.code = (strings, ...params) => {
                return {
                    expression: strings.map((part, index) => part + (params[index] || '')).join(''),
                    imports: this._imports,
                };
            };
            /**
             * Used inside of a code block to mark external symbols and which module they should be imported
             * from. When the code is inserted, the required import statements will be produced automatically.
             * @param symbolName Name of the external symbol.
             * @param moduleName Module from which the symbol should be imported.
             */
            this.external = (symbolName, moduleName) => {
                if (!this._imports.has(moduleName)) {
                    this._imports.set(moduleName, new Map());
                }
                const symbolsPerModule = this._imports.get(moduleName);
                if (!symbolsPerModule.has(symbolName)) {
                    symbolsPerModule.set(symbolName, `@@__SCHEMATIC_PLACEHOLDER_${uniqueIdCounter++}__@@`);
                }
                return symbolsPerModule.get(symbolName);
            };
        }
        /**
         * Produces the necessary rules to transform a `PendingCode` object into valid code.
         * @param initialCode Code pending transformed.
         * @param filePath Path of the file in which the code will be inserted.
         */
        static transformPendingCode(initialCode, filePath) {
            const code = { ...initialCode };
            const rules = [];
            code.imports.forEach((symbols, moduleName) => {
                symbols.forEach((placeholder, symbolName) => {
                    rules.push((tree) => {
                        const recorder = tree.beginUpdate(filePath);
                        const sourceFile = ts.createSourceFile(filePath, tree.readText(filePath), ts.ScriptTarget.Latest, true);
                        // Note that this could still technically clash if there's a top-level symbol called
                        // `${symbolName}_alias`, however this is unlikely. We can revisit this if it becomes
                        // a problem.
                        const alias = (0, ast_utils_1.hasTopLevelIdentifier)(sourceFile, symbolName, moduleName)
                            ? symbolName + '_alias'
                            : undefined;
                        code.expression = code.expression.replace(new RegExp(placeholder, 'g'), alias || symbolName);
                        (0, change_1.applyToUpdateRecorder)(recorder, [
                            (0, ast_utils_1.insertImport)(sourceFile, filePath, symbolName, moduleName, false, alias),
                        ]);
                        tree.commitUpdate(recorder);
                    });
                });
            });
            return { code, rules };
        }
    }
    exports.CodeBlock = CodeBlock;
    //# sourceMappingURL=code_block.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\code_block.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Rule } from '@angular-devkit/schematics';
    /** Generated code that hasn't been interpolated yet. */
    export interface PendingCode {
        /** Code that will be inserted. */
        expression: string;
        /** Imports that need to be added to the file in which the code is inserted. */
        imports: PendingImports;
    }
    /** Map keeping track of imports and aliases under which they're referred to in an expression. */
    declare type PendingImports = Map<string, Map<string, string>>;
    /**
     * Callback invoked by a Rule that produces the code
     * that needs to be inserted somewhere in the app.
     */
    export declare type CodeBlockCallback = (block: CodeBlock) => PendingCode;
    /**
     * Utility class used to generate blocks of code that
     * can be inserted by the devkit into a user's app.
     */
    export declare class CodeBlock {
        private _imports;
        /** Function used to tag a code block in order to produce a `PendingCode` object. */
        code: (strings: TemplateStringsArray, ...params: unknown[]) => PendingCode;
        /**
         * Used inside of a code block to mark external symbols and which module they should be imported
         * from. When the code is inserted, the required import statements will be produced automatically.
         * @param symbolName Name of the external symbol.
         * @param moduleName Module from which the symbol should be imported.
         */
        external: (symbolName: string, moduleName: string) => string;
        /**
         * Produces the necessary rules to transform a `PendingCode` object into valid code.
         * @param initialCode Code pending transformed.
         * @param filePath Path of the file in which the code will be inserted.
         */
        static transformPendingCode(initialCode: PendingCode, filePath: string): {
            code: {
                /** Code that will be inserted. */
                expression: string;
                /** Imports that need to be added to the file in which the code is inserted. */
                imports: PendingImports;
            };
            rules: Rule[];
        };
    }
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\app_config.js.map"><![CDATA[
    {"version":3,"file":"app_config.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/utils/angular/standalone/app_config.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\app_config.js"><![CDATA[
    "use strict";
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findAppConfig = void 0;
    const node_path_1 = require("node:path");
    const ts = require("typescript");
    const util_1 = require("./util");
    /**
     * Resolves the node that defines the app config from a bootstrap call.
     * @param bootstrapCall Call for which to resolve the config.
     * @param tree File tree of the project.
     * @param filePath File path of the bootstrap call.
     */
    function findAppConfig(bootstrapCall, tree, filePath) {
        if (bootstrapCall.arguments.length > 1) {
            const config = bootstrapCall.arguments[1];
            if (ts.isObjectLiteralExpression(config)) {
                return { filePath, node: config };
            }
            if (ts.isIdentifier(config)) {
                return resolveAppConfigFromIdentifier(config, tree, filePath);
            }
        }
        return null;
    }
    exports.findAppConfig = findAppConfig;
    /**
     * Resolves the app config from an identifier referring to it.
     * @param identifier Identifier referring to the app config.
     * @param tree File tree of the project.
     * @param bootstapFilePath Path of the bootstrap call.
     */
    function resolveAppConfigFromIdentifier(identifier, tree, bootstapFilePath) {
        const sourceFile = identifier.getSourceFile();
        for (const node of sourceFile.statements) {
            // Only look at relative imports. This will break if the app uses a path
            // mapping to refer to the import, but in order to resolve those, we would
            // need knowledge about the entire program.
            if (!ts.isImportDeclaration(node) ||
                !node.importClause?.namedBindings ||
                !ts.isNamedImports(node.importClause.namedBindings) ||
                !ts.isStringLiteralLike(node.moduleSpecifier) ||
                !node.moduleSpecifier.text.startsWith('.')) {
                continue;
            }
            for (const specifier of node.importClause.namedBindings.elements) {
                if (specifier.name.text !== identifier.text) {
                    continue;
                }
                // Look for a variable with the imported name in the file. Note that ideally we would use
                // the type checker to resolve this, but we can't because these utilities are set up to
                // operate on individual files, not the entire program.
                const filePath = (0, node_path_1.join)((0, node_path_1.dirname)(bootstapFilePath), node.moduleSpecifier.text + '.ts');
                const importedSourceFile = (0, util_1.getSourceFile)(tree, filePath);
                const resolvedVariable = findAppConfigFromVariableName(importedSourceFile, (specifier.propertyName || specifier.name).text);
                if (resolvedVariable) {
                    return { filePath, node: resolvedVariable };
                }
            }
        }
        const variableInSameFile = findAppConfigFromVariableName(sourceFile, identifier.text);
        return variableInSameFile ? { filePath: bootstapFilePath, node: variableInSameFile } : null;
    }
    /**
     * Finds an app config within the top-level variables of a file.
     * @param sourceFile File in which to search for the config.
     * @param variableName Name of the variable containing the config.
     */
    function findAppConfigFromVariableName(sourceFile, variableName) {
        for (const node of sourceFile.statements) {
            if (ts.isVariableStatement(node)) {
                for (const decl of node.declarationList.declarations) {
                    if (ts.isIdentifier(decl.name) &&
                        decl.name.text === variableName &&
                        decl.initializer &&
                        ts.isObjectLiteralExpression(decl.initializer)) {
                        return decl.initializer;
                    }
                }
            }
        }
        return null;
    }
    //# sourceMappingURL=app_config.js.map
    ]]></file>
  <file path="angular\.suite\schematics\utils\angular\standalone\app_config.d.ts"><![CDATA[
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.dev/license
     */
    import { Tree } from '@angular-devkit/schematics';
    import * as ts from 'typescript';
    /** App config that was resolved to its source node. */
    export interface ResolvedAppConfig {
        /** Tree-relative path of the file containing the app config. */
        filePath: string;
        /** Node defining the app config. */
        node: ts.ObjectLiteralExpression;
    }
    /**
     * Resolves the node that defines the app config from a bootstrap call.
     * @param bootstrapCall Call for which to resolve the config.
     * @param tree File tree of the project.
     * @param filePath File path of the bootstrap call.
     */
    export declare function findAppConfig(bootstrapCall: ts.CallExpression, tree: Tree, filePath: string): ResolvedAppConfig | null;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\when-fn.js.map"><![CDATA[
    {"version":3,"file":"when-fn.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/when-fn.ts"],"names":[],"mappings":";;;AAAA,uCAAsE;AAE/D,MAAM,aAAa,GAAG,CAAC,YAAqB,EAAE,EAAE;IACrD,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC;KACnB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AALW,QAAA,aAAa,iBAKxB;AAEF,SAAgB,MAAM,CAAC,IAAY;IACjC,OAAO,yBAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,qBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,qBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxF,CAAC;AAFD,wBAEC"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\when-fn.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.whenFn = exports.whenFnFactory = void 0;
    const helpers_1 = require("./helpers");
    const whenFnFactory = (preserveCode) => {
        if (!preserveCode) {
            return () => true;
        }
        return whenFn;
    };
    exports.whenFnFactory = whenFnFactory;
    function whenFn(path) {
        return helpers_1.isAbstractRegex.test(path) || helpers_1.isBaseRegex.test(path) || helpers_1.isHtmlRegex.test(path);
    }
    exports.whenFn = whenFn;
    //# sourceMappingURL=when-fn.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\when-fn.d.ts"><![CDATA[
    export declare const whenFnFactory: (preserveCode: boolean) => typeof whenFn;
    export declare function whenFn(path: string): boolean;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\remove-custom-code-blocks.js.map"><![CDATA[
    {"version":3,"file":"remove-custom-code-blocks.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/remove-custom-code-blocks.ts"],"names":[],"mappings":";;;AACA,0CAAmD;AAEnD,uCAAkD;AAElD,SAAgB,sBAAsB;IACpC,MAAM,MAAM,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;IAC1B,MAAM,OAAO,GAAG,CAAC,IAAY,EAAE,UAAkB,EAAE,EAAE;QACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YAAE,OAAO,UAAU,CAAC;QAE/C,OAAO,UAAU,CAAC,OAAO,CAAC,+BAAqB,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC;IACF,OAAO,CAAC,IAAU,EAAE,EAAE,CAAC,IAAA,yBAAiB,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAClE,CAAC;AARD,wDAQC"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\remove-custom-code-blocks.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeCustomCodeBlocks = void 0;
    const utils_1 = require("../../../utils");
    const helpers_1 = require("./helpers");
    function removeCustomCodeBlocks() {
        const whenFn = () => true;
        const mergeFn = (path, newContent) => {
            if (!path.endsWith('.html'))
                return newContent;
            return newContent.replace(helpers_1.contentPatternForHtml, '');
        };
        return (tree) => (0, utils_1.overwriteFileWhen)(tree, whenFn, mergeFn);
    }
    exports.removeCustomCodeBlocks = removeCustomCodeBlocks;
    //# sourceMappingURL=remove-custom-code-blocks.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\remove-custom-code-blocks.d.ts"><![CDATA[
    import { Rule } from '@angular-devkit/schematics';
    export declare function removeCustomCodeBlocks(): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\merge-content-fn.js.map"><![CDATA[
    {"version":3,"file":"merge-content-fn.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/merge-content-fn.ts"],"names":[],"mappings":";;;AAAA,uCAA+D;AAQ/D,SAAgB,qBAAqB,CAAC,YAAqB;IACzD,IAAI,YAAY,EAAE;QAChB,OAAO,cAAc,CAAC;KACvB;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC;AALD,sDAKC;AAED,MAAM,sBAAsB,GAAG,CAAC,QAAgB,EAAE,UAAkB,EAAE,CAAS,EAAE,EAAE;IACjF,IAAI,CAAC,qBAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO,UAAU,CAAC;KACnB;IAED,OAAO,UAAU,CAAC,OAAO,CAAC,+BAAqB,EAAE,EAAE,CAAC,CAAC;AACvD,CAAC,CAAC;AAEF,SAAgB,cAAc,CAAC,QAAgB,EAAE,UAAkB,EAAE,UAAkB;IACrF,IAAI,CAAC,qBAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO,UAAU,CAAC;KACnB;IAED,MAAM,iBAAiB,GAAG,UAAU,CAAC,QAAQ,CAAC,+BAAqB,CAAC,CAAC;IACrE,MAAM,iBAAiB,GAAG,UAAU,CAAC,QAAQ,CAAC,+BAAqB,CAAC,CAAC;IACrE,MAAM,QAAQ,GAAG,CAAC,GAAG,iBAAiB,CAAC,CAAC;IACxC,MAAM,QAAQ,GAAG,CAAC,GAAG,iBAAiB,CAAC,CAAC;IAExC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE;QACrB,OAAO,UAAU,CAAC;KACnB;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACxC,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,KAAK,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC1E,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACnB,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SAC/E;QACD,IACE,CAAC,QAAQ;YACT,CAAC,QAAQ;YACT,CAAC,OAAO,CAAC,MAAM;YACf,CAAC,OAAO,EAAE,MAAM;YAChB,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG;YACpB,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EACpB;YACA,SAAS;SACV;QACD,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,EAAE;YACX,SAAS;SACV;QACD,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACjD;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AA1CD,wCA0CC"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\merge-content-fn.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeContentFn = exports.mergeContentFnFactory = void 0;
    const helpers_1 = require("./helpers");
    function mergeContentFnFactory(preserveCode) {
        if (preserveCode) {
            return mergeContentFn;
        }
        return removeCustomCodeBlocks;
    }
    exports.mergeContentFnFactory = mergeContentFnFactory;
    const removeCustomCodeBlocks = (fileName, newContent, _) => {
        if (!helpers_1.isHtmlRegex.test(fileName)) {
            return newContent;
        }
        return newContent.replace(helpers_1.contentPatternForHtml, '');
    };
    function mergeContentFn(fileName, newContent, oldContent) {
        if (!helpers_1.isHtmlRegex.test(fileName)) {
            return newContent;
        }
        const oldCodesIterative = oldContent.matchAll(helpers_1.contentPatternForHtml);
        const newCodesIterative = newContent.matchAll(helpers_1.contentPatternForHtml);
        const newCodes = [...newCodesIterative];
        const oldCodes = [...oldCodesIterative];
        if (!oldCodes?.length) {
            return newContent;
        }
        for (let i = 0; i < newCodes.length; i++) {
            const newCode = newCodes[i];
            const oldCode = oldCodes.find(c => c.groups?.tag === newCode.groups?.tag);
            if (!newCode.groups) {
                console.log('There is no suite-custom-code-block in html');
            }
            if (!oldCode?.groups) {
                console.log('New suite-custom-code-block added to html', newCode.groups?.tag);
            }
            if (!oldCodes ||
                !newCodes ||
                !newCode.groups ||
                !oldCode?.groups ||
                !newCode.groups?.tag ||
                !oldCode.groups?.tag) {
                continue;
            }
            const target = newCode[0];
            const source = oldCode[0];
            if (!source) {
                continue;
            }
            newContent = newContent.replace(target, source);
        }
        return newContent;
    }
    exports.mergeContentFn = mergeContentFn;
    //# sourceMappingURL=merge-content-fn.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\merge-content-fn.d.ts"><![CDATA[
    declare type MergeContentFnFactoryReturnType = (fileName: string, newContent: string, oldContent: string) => string;
    export declare function mergeContentFnFactory(preserveCode: boolean): MergeContentFnFactoryReturnType;
    export declare function mergeContentFn(fileName: string, newContent: string, oldContent: string): string;
    export {};
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\helpers.js.map"><![CDATA[
    {"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/helpers.ts"],"names":[],"mappings":";;;AAAA,+FAA+F;AAClF,QAAA,eAAe,GAAG,sCAAsC,CAAC;AACzD,QAAA,WAAW,GAAG,yBAAyB,CAAC;AACxC,QAAA,WAAW,GAAG,oBAAoB,CAAC;AACnC,QAAA,qBAAqB,GAChC,6FAA6F,CAAC"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\helpers.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contentPatternForHtml = exports.isHtmlRegex = exports.isBaseRegex = exports.isAbstractRegex = void 0;
    // const contentHolePatternForTs = /\/\/<(suite-custom-code-block-\d+)>([\s\S]*?)\/\/<\/\1>/gm;
    exports.isAbstractRegex = /\.abstract\.(component|service)\.ts$/;
    exports.isBaseRegex = /[.-]base\.(routes)\.ts$/;
    exports.isHtmlRegex = /\.component\.html$/;
    exports.contentPatternForHtml = /<!--\s*<(?<tag>suite-custom-code-block-\d+)>\s*-->(?<content>[\s\S]*?)<!--\s*<\/\1>\s*-->/gm;
    //# sourceMappingURL=helpers.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\helpers.d.ts"><![CDATA[
    export declare const isAbstractRegex: RegExp;
    export declare const isBaseRegex: RegExp;
    export declare const isHtmlRegex: RegExp;
    export declare const contentPatternForHtml: RegExp;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\create-library-if-not-exists.js.map"><![CDATA[
    {"version":3,"file":"create-library-if-not-exists.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/create-library-if-not-exists.ts"],"names":[],"mappings":";;;AAAA,2DAAkF;AAClF,0CAA8C;AAC9C,6CAA6C;AAC7C,kDAAyD;AACzD,0CAA+C;AAE/C,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,OAAO,KAAK,EAAE,IAAU,EAAE,EAAE;QAC1B,MAAM,SAAS,GAAG,MAAM,IAAA,oBAAY,EAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;YAC7C,OAAO;SACR;QACD,OAAO,IAAA,kBAAK,EAAC;YACX,IAAA,8BAAiB,EAAC,+BAAmB,EAAE,qBAAa,CAAC,SAAS,EAAE;gBAC9D,WAAW,EAAE,IAAI;gBACjB,gBAAgB,EAAE,IAAI;gBACtB,qBAAqB,EAAE,KAAK;gBAC5B,QAAQ,EAAE,KAAK;aAChB,CAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAfD,gDAeC"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\create-library-if-not-exists.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crateLibIfNotExist = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const utils_1 = require("../../../utils");
    const cases = require("../../../utils/text");
    const constants_1 = require("../../../constants");
    const enums_1 = require("../../../enums");
    function crateLibIfNotExist(name) {
        return async (tree) => {
            const workspace = await (0, utils_1.getWorkspace)(tree);
            if (workspace.projects.get(cases.kebab(name))) {
                return;
            }
            return (0, schematics_1.chain)([
                (0, schematics_1.externalSchematic)(constants_1.ABP_SCHEMATICS_PATH, enums_1.ABPSchematics.CreateLib, {
                    packageName: name,
                    isModuleTemplate: true,
                    isSecondaryEntrypoint: false,
                    override: false,
                }),
            ]);
        };
    }
    exports.crateLibIfNotExist = crateLibIfNotExist;
    //# sourceMappingURL=create-library-if-not-exists.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\create-library-if-not-exists.d.ts"><![CDATA[
    import { Rule } from '@angular-devkit/schematics';
    export declare function crateLibIfNotExist(name: string): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\create-entity-files-factory.js.map"><![CDATA[
    {"version":3,"file":"create-entity-files-factory.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/create-entity-files-factory.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\create-entity-files-factory.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createEntityFilesFactory = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const entity_template_option_1 = require("../../entity-template-option");
    const when_fn_1 = require("./when-fn");
    const merge_content_fn_1 = require("./merge-content-fn");
    const enums_1 = require("../../../enums");
    const utils_1 = require("../../../utils");
    const helpers_1 = require("./helpers");
    function createEntityFilesFactory(entityTemplateOptions, isProjectStandalone) {
        const preserveCustomCode = entityTemplateOptions.preserveCustomCode;
        const prefix = entityTemplateOptions.projectPrefix;
        const removeCustomCodes = preserveCustomCode ? schematics_1.noop : removeCommentsGenerator;
        const whenFn = (0, when_fn_1.whenFnFactory)(preserveCustomCode);
        const createEntityFiles = (options) => {
            const tasks = [
                (0, utils_1.applyWithOverwriteWhen)((0, schematics_1.url)('./files'), [
                    (0, schematics_1.filter)(path => {
                        const excludedFiles = isProjectStandalone
                            ? ['__name@kebab__-routing.module.ts.template', '__name@kebab__.module.ts.template']
                            : ['__name@kebab__-routes.ts.template'];
                        return !excludedFiles.some(excluded => path.endsWith(excluded));
                    }),
                    (0, schematics_1.applyTemplates)(options),
                    (0, schematics_1.move)(options.targetPath),
                    removeCustomCodes,
                ], whenFn, merge_content_fn_1.mergeContentFn),
            ];
            if (options.type === enums_1.EntityType.Master) {
                for (const entity of options.childEntities) {
                    const childEntityOptions = new entity_template_option_1.EntityTemplateOptions({
                        ...options,
                        selector: (0, utils_1.buildSelector)(entity.Name, prefix),
                        entity,
                    });
                    tasks.push((0, utils_1.applyWithOverwriteWhen)((0, schematics_1.url)('./child-files'), [(0, schematics_1.applyTemplates)(childEntityOptions), (0, schematics_1.move)(options.targetPath), removeCustomCodes], whenFn, merge_content_fn_1.mergeContentFn));
                }
            }
            return tasks;
        };
        if (!!entityTemplateOptions.masterEntity) {
            const masterEntityOptions = new entity_template_option_1.EntityTemplateOptions({
                ...entityTemplateOptions,
                selector: (0, utils_1.buildSelector)(entityTemplateOptions.masterEntity.Name, prefix),
                entity: entityTemplateOptions.masterEntity,
            });
            return (0, schematics_1.chain)(createEntityFiles(masterEntityOptions));
        }
        return (0, schematics_1.chain)(createEntityFiles(entityTemplateOptions));
    }
    exports.createEntityFilesFactory = createEntityFilesFactory;
    function removeCommentsGenerator(tree) {
        return (0, schematics_1.forEach)(fileEntry => {
            // read
            const isHtml = fileEntry.path.endsWith('component.html');
            if (!isHtml)
                return fileEntry;
            const content = fileEntry.content.toString();
            // remove
            const newContent = content.replace(helpers_1.contentPatternForHtml, '');
            //override
            tree.overwrite(fileEntry.path, newContent);
            return fileEntry;
        });
    }
    //# sourceMappingURL=create-entity-files-factory.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\create-entity-files-factory.d.ts"><![CDATA[
    import { Rule } from '@angular-devkit/schematics';
    import { EntityTemplateOptions } from '../../entity-template-option';
    export declare function createEntityFilesFactory(entityTemplateOptions: EntityTemplateOptions, isProjectStandalone: boolean): Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\add-entity-to-route.js.map"><![CDATA[
    {"version":3,"file":"add-entity-to-route.js","sourceRoot":"","sources":["../../../../../../packages/suite/src/commands/generate-entity/utils/add-entity-to-route.ts"],"names":[],"mappings":";;;AAAA,2DAAwD;AAExD,0CAOwB;AACxB,6CAA6C;AAC7C,+CAAiD;AAEjD,SAAgB,gBAAgB,CAC9B,IAAU,EACV,MAAc,EACd,YAAqB,EACrB,OAA0B,EAC1B,eAAwB;IAExB,IAAI,eAAe,EAAE;QACnB,OAAO,IAAA,iBAAI,GAAE,CAAC;KACf;IAED,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IACnC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAEzB,IAAI,YAAY,GAAG,KAAK,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;IAC5C,IAAI,YAAY,EAAE;QAChB,YAAY,GAAG,GAAG,CAAC;KACpB;SAAM,IAAI,SAAS,EAAE;QACpB,YAAY,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;KACjE;IAED,MAAM,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,uCAA+B,CAAC,CAAC,CAAC,6BAAqB,CAAC;IAC9F,OAAO,cAAc,CACnB,IAAA,kBAAU,EACR,IAAI,EACJ,IAAA,gBAAS,EAAC,YAAY,CAAC,CAAC,CAAC,IAAA,uBAAe,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAA,wBAAgB,EAAC,OAAO,CAAC,CAAC,CAC/E,EACD,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAC/D,GAAG,YAAY,cAAc,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAChE,CAAC;AACJ,CAAC;AA9BD,4CA8BC"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\add-entity-to-route.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addEntityToRoute = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const utils_1 = require("../../../utils");
    const cases = require("../../../utils/text");
    const core_1 = require("@angular-devkit/core");
    function addEntityToRoute(tree, entity, isModuleOrMS, project, isStandaloneApp) {
        if (isStandaloneApp) {
            return (0, schematics_1.noop)();
        }
        const namespace = entity.Namespace;
        const name = entity.Name;
        let providerPath = `./${cases.kebab(name)}`;
        if (isModuleOrMS) {
            providerPath = `.`;
        }
        else if (namespace) {
            providerPath = `./${cases.dir(namespace)}/${cases.kebab(name)}`;
        }
        const injectProvider = isModuleOrMS ? utils_1.addProviderToModuleWithProvider : utils_1.addProviderToNgModule;
        return injectProvider((0, utils_1.findModule)(tree, (0, core_1.normalize)(isModuleOrMS ? (0, utils_1.buildConfigPath)(project) : (0, utils_1.buildDefaultPath)(project))), `${cases.macro(namespace)}_${cases.macro(name)}_ROUTE_PROVIDER`, `${providerPath}/providers/${cases.kebab(name)}-route.provider`);
    }
    exports.addEntityToRoute = addEntityToRoute;
    //# sourceMappingURL=add-entity-to-route.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\add-entity-to-route.d.ts"><![CDATA[
    import { Tree } from '@angular-devkit/schematics';
    import { Entity } from '../../../models';
    import { ProjectDefinition } from '../../../utils';
    export declare function addEntityToRoute(tree: Tree, entity: Entity, isModuleOrMS: boolean, project: ProjectDefinition, isStandaloneApp: boolean): import("@angular-devkit/schematics").Rule;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\standalone\add-entity-to-routes.js.map"><![CDATA[
    {"version":3,"file":"add-entity-to-routes.js","sourceRoot":"","sources":["../../../../../../../packages/suite/src/commands/generate-entity/utils/standalone/add-entity-to-routes.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\standalone\add-entity-to-routes.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addEntityToRoutes = exports.APP_ROUTES_VAR = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const cases = require("../../../../utils/text");
    const utils_1 = require("../../../../utils");
    const util_1 = require("../../../../utils/angular/standalone/util");
    exports.APP_ROUTES_VAR = 'APP_ROUTES';
    /**
     * Adds route configuration for a given entity to the application's or module library's route array.
     *
     * This function determines the correct routing file based on the project type (application or module library),
     * constructs the route path and import path for the entity, and injects the route configuration accordingly.
     * If no route is provided or the routing file cannot be found, the function returns a no-op rule.
     *
     * @param tree - The file tree representing the project structure.
     * @param projectName - The name of the target project.
     * @param entity - The entity for which route configuration should be added.
     * @param isModuleLibrary - A flag indicating whether the project is a module library.
     * @param route - The route path where the entity routes should be mounted. If undefined, no changes are made.
     * @returns A Rule that applies the routing changes, or a no-op if no valid route path is found.
     */
    async function addEntityToRoutes(tree, projectName, entity, isModuleLibrary, route) {
        if (!route) {
            return (0, schematics_1.noop)();
        }
        const { routesPath } = isModuleLibrary
            ? await (0, utils_1.getLibEntryFilePaths)(tree, projectName)
            : await (0, utils_1.getAppEntryFilePaths)(tree, projectName);
        if (!routesPath) {
            return (0, schematics_1.noop)();
        }
        const { Name, NamePlural } = entity;
        const routesBasePath = `./${cases.kebab(NamePlural)}/${cases.kebab(Name)}`;
        return addEntityRoutes({
            targetFile: routesPath,
            routesArrayIdentifier: isModuleLibrary ? `${cases.macro(projectName)}_ROUTES` : exports.APP_ROUTES_VAR,
            path: route,
            importPath: `${routesBasePath}/${cases.kebab(Name)}-routes`,
            routesVariableName: `${cases.macro(Name)}_ROUTES`,
        });
    }
    exports.addEntityToRoutes = addEntityToRoutes;
    function addEntityRoutes(options) {
        const { targetFile, routesArrayIdentifier, path, importPath, routesVariableName } = options;
        return (host) => {
            const source = (0, util_1.getSourceFile)(host, targetFile);
            if (!source) {
                throw new schematics_1.SchematicsException(`Could not parse ${targetFile}.`);
            }
            if ((0, utils_1.isIdentifierInFile)(host, targetFile, path)) {
                return host;
            }
            const routesArray = (0, utils_1.findArray)(source, routesArrayIdentifier);
            if (!routesArray) {
                throw new schematics_1.SchematicsException(`Could not find ${routesArrayIdentifier} in ${targetFile}.`);
            }
            const recorder = host.beginUpdate(targetFile);
            const importStatement = (0, utils_1.insertImport)(source, targetFile, routesVariableName, importPath);
            if (importStatement instanceof utils_1.InsertChange) {
                recorder.insertLeft(importStatement.pos, importStatement.toAdd);
            }
            const comma = !routesArray.elements.hasTrailingComma ? ',' : '';
            const newRoute = `${comma}{ path: '${path}', children: ${routesVariableName} }`;
            recorder.insertLeft(routesArray.getEnd() - 1, newRoute);
            host.commitUpdate(recorder);
            return host;
        };
    }
    //# sourceMappingURL=add-entity-to-routes.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\standalone\add-entity-to-routes.d.ts"><![CDATA[
    import { Rule, Tree } from '@angular-devkit/schematics';
    import { Entity } from '../../../../models';
    export declare const APP_ROUTES_VAR = "APP_ROUTES";
    /**
     * Adds route configuration for a given entity to the application's or module library's route array.
     *
     * This function determines the correct routing file based on the project type (application or module library),
     * constructs the route path and import path for the entity, and injects the route configuration accordingly.
     * If no route is provided or the routing file cannot be found, the function returns a no-op rule.
     *
     * @param tree - The file tree representing the project structure.
     * @param projectName - The name of the target project.
     * @param entity - The entity for which route configuration should be added.
     * @param isModuleLibrary - A flag indicating whether the project is a module library.
     * @param route - The route path where the entity routes should be mounted. If undefined, no changes are made.
     * @returns A Rule that applies the routing changes, or a no-op if no valid route path is found.
     */
    export declare function addEntityToRoutes(tree: Tree, projectName: string, entity: Entity, isModuleLibrary: boolean, route?: string): Promise<Rule>;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\standalone\add-entity-to-providers.js.map"><![CDATA[
    {"version":3,"file":"add-entity-to-providers.js","sourceRoot":"","sources":["../../../../../../../packages/suite/src/commands/generate-entity/utils/standalone/add-entity-to-providers.ts"],"names":[],"mappings":"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"}
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\standalone\add-entity-to-providers.js"><![CDATA[
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addEntityToProviders = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const utils_1 = require("../../../../utils");
    const util_1 = require("../../../../utils/angular/standalone/util");
    const cases = require("../../../../utils/text");
    /**
     * Adds an entity to the providers array of a project based on its type.
     *
     * Depending on whether the project is a module library or an application,
     * this function delegates the operation to the appropriate handler.
     *
     * @param tree - The file tree representing the project structure.
     * @param entity - The entity information to be added as a provider.
     * @param projectName - The name of the project where the provider should be added.
     * @param isModuleLibrary - A flag indicating if the project is a module library.
     * @returns A Rule that applies the necessary changes to the project.
     */
    async function addEntityToProviders(tree, entity, projectName, isModuleLibrary) {
        return isModuleLibrary
            ? handleModuleLibrary(tree, entity, projectName)
            : handleApplication(tree, entity, projectName);
    }
    exports.addEntityToProviders = addEntityToProviders;
    async function handleModuleLibrary(tree, entity, projectName) {
        const { providerPath } = await (0, utils_1.getLibEntryFilePaths)(tree, projectName);
        if (!providerPath) {
            throw new schematics_1.SchematicsException(`Provider path not found for project ${projectName}`);
        }
        const source = (0, util_1.getSourceFile)(tree, providerPath);
        if (!source) {
            throw new schematics_1.SchematicsException(`Source file not found at ${providerPath}`);
        }
        const { Namespace, Name } = entity;
        const provider = `${cases.macro(Namespace)}_${cases.macro(Name)}_ROUTE_PROVIDER`;
        if ((0, utils_1.isIdentifierInFile)(tree, providerPath, provider)) {
            return (0, schematics_1.noop)();
        }
        const providersArrayIdentifier = `${cases.macro(projectName)}_PROVIDERS`;
        const providersArray = (0, utils_1.findArray)(source, providersArrayIdentifier);
        if (!providersArray) {
            throw new schematics_1.SchematicsException(`Could not find ${providersArrayIdentifier} in ${providerPath}`);
        }
        return (tree) => {
            const recorder = tree.beginUpdate(providerPath);
            const importPath = `./${cases.kebab(Name)}-route.provider`;
            const importStatement = (0, utils_1.insertImport)(source, providerPath, provider, importPath);
            if (importStatement instanceof utils_1.InsertChange) {
                recorder.insertLeft(importStatement.pos, importStatement.toAdd);
            }
            const comma = !providersArray.elements.hasTrailingComma ? ',' : '';
            recorder.insertLeft(providersArray.getEnd() - 1, `${comma}...${provider}`);
            tree.commitUpdate(recorder);
            return tree;
        };
    }
    async function handleApplication(tree, entity, projectName) {
        const { configPath } = await (0, utils_1.getAppEntryFilePaths)(tree, projectName);
        if (!configPath) {
            throw new schematics_1.SchematicsException(`Config path not found for project ${projectName}`);
        }
        const { Namespace, Name, NamePlural } = entity;
        const providerIdentifier = `${cases.macro(Namespace)}_${cases.macro(Name)}_ROUTE_PROVIDER`;
        if ((0, utils_1.isIdentifierInFile)(tree, configPath, providerIdentifier)) {
            return (0, schematics_1.noop)();
        }
        const providerFilePath = `./${cases.kebab(NamePlural)}/${cases.kebab(Name)}/providers/${cases.kebab(Name)}-route.provider`;
        return (0, utils_1.addRootProvider)(projectName, ({ code, external }) => code `${external(providerIdentifier, providerFilePath)}`);
    }
    //# sourceMappingURL=add-entity-to-providers.js.map
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\utils\standalone\add-entity-to-providers.d.ts"><![CDATA[
    import { Rule, Tree } from '@angular-devkit/schematics';
    import { Entity } from '../../../../models';
    /**
     * Adds an entity to the providers array of a project based on its type.
     *
     * Depending on whether the project is a module library or an application,
     * this function delegates the operation to the appropriate handler.
     *
     * @param tree - The file tree representing the project structure.
     * @param entity - The entity information to be added as a provider.
     * @param projectName - The name of the project where the provider should be added.
     * @param isModuleLibrary - A flag indicating if the project is a module library.
     * @returns A Rule that applies the necessary changes to the project.
     */
    export declare function addEntityToProviders(tree: Tree, entity: Entity, projectName: string, isModuleLibrary: boolean): Promise<Rule>;
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\__name@kebab__.module.ts.template"><![CDATA[
    import { NgModule } from '@angular/core';
    import { <%= name %>Component } from './components/<%= kebab(name) %>.component';
    import { <%= name %>RoutingModule } from './<%= kebab(name) %>-routing.module';
    
    @NgModule({
      declarations: [],
      imports: [
        <%= name %>Component,
        <%= name %>RoutingModule,
      ],
    })
    export class <%= name %>Module {}<%
    if (isModule) { %>
    
    export function load<%= name %>ModuleAsChild() {
      return Promise.resolve(<%= name %>Module);
    }<% } %>
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\__name@kebab__-routing.module.ts.template"><![CDATA[
    import { authGuard, permissionGuard } from '@abp/ng.core';
    import { NgModule } from '@angular/core';
    import { RouterModule, Routes } from '@angular/router';
    import { <%= name %>Component } from './components/<%= kebab(name) %>.component';
    
    export const routes: Routes = [
      {
        path: '',
        component: <%= name %>Component,
        canActivate: [authGuard, permissionGuard],
      },
    ];
    
    @NgModule({
      imports: [RouterModule.forChild(routes)],
      exports: [RouterModule],
    })
    export class <%= name %>RoutingModule {}
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\__name@kebab__-routes.ts.template"><![CDATA[
    import { Routes } from '@angular/router';
    import { authGuard, permissionGuard } from '@abp/ng.core';
    
    export const <%= macro(name) %>_ROUTES: Routes = [
      {
        path: '',
        loadComponent: () => {
          return import('./components/<%= kebab(name) %>.component').then(c => c.<%= name %>Component);
        },
        canActivate: [authGuard, permissionGuard],
      },
    ];
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\services\__name@kebab__.service.ts.template"><![CDATA[
    import { Injectable} from '@angular/core';
    import { Abstract<%= name %>ViewService  } from './<%= kebab(name) %>.abstract.service';
    
    @Injectable()
    export class <%= name %>ViewService extends Abstract<%= name %>ViewService {}
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\services\__name@kebab__.abstract.service.ts.template"><![CDATA[
    <% const hasFileProp = props.filter(p => p.formControl === 'file').length %>
    import { inject <%= bulkDeleteEnabled ? ', computed, signal ' :'' %>} from '@angular/core';
    <% if (bulkDeleteEnabled) { %> import { SelectionType } from '@swimlane/ngx-datatable' <% } %>;
    import { ConfirmationService,Confirmation } from '@abp/ng.theme.shared';
    import { ABP, <%= (entity.ShouldExportExcel || hasFileProp) ? 'AbpWindowService,' :''%> <%= hasFileProp ? ' EnvironmentService,' :'' %> ListService, PagedResultDto } from '@abp/ng.core';
    import { filter,switchMap <%= hasFileProp ? ', map' : '' %> <%= (entity.ShouldExportExcel || bulkDeleteEnabled) ? ',finalize' :''%>  } from 'rxjs/operators';
    import type {
      Get<%= namePlural %>Input,
      <%= name %><%= navPropsSuffix %>Dto,
    } from '<%= relativePathFromComponentToModel(scope, namespace, projectTemplate) %>';
    import { <%= name %>Service } from '<%= relativePathFromComponentToService(scope, namespace, name, projectTemplate) %>';
    
    export abstract class Abstract<%= name %>ViewService {
      protected readonly proxyService = inject( <%= name %>Service);
      protected readonly confirmationService = inject(ConfirmationService);
      protected readonly list = inject(ListService);
      <% if(entity.ShouldExportExcel || hasFileProp) { %> protected readonly abpWindowService = inject(AbpWindowService); <% }%>
      <% if(hasFileProp) { %> protected readonly environmentService = inject(EnvironmentService); <% }%>
      
      <% if(navConnections.length) { %>
      public readonly getWithNavigationProperties = this.proxyService.getWithNavigationProperties;
      <% }%>
      <% if(entity.ShouldExportExcel) {%>
      isExportToExcelBusy = false;
      <% } %>
      data: PagedResultDto<<%= name %><%= navPropsSuffix %>Dto> = {
        items: [],
        totalCount: 0,
      };
      <% if(bulkDeleteEnabled) { %>
      selectionType = SelectionType;
      selected = signal<<%= name %><%= navPropsSuffix %>Dto[]>([]);
      allSelected = signal(false);
      selectedCount = computed(() => this.selected().length);
      <% } %>
    
      filters = {} as Get<%= namePlural %>Input;
      <% if(bulkDeleteEnabled) { %>
      protected clearAllSelection() {
        this.selected.set([]);
        this.allSelected.set(false);
      }
    
      protected bulkDeleteRequest() {
        <% if(navConnections.length > 0 || navProps.length > 0) { %>
        const ids = this.selected().map(({ <%= camelize(name) %>: { id } }) => id);
        <% } else { %>
        const ids = this.selected().map(({ id }) => id);
        <% } %>
    
        const request = !this.allSelected()
          ? this.proxyService.deleteByIds(ids)
          : this.proxyService.deleteAll({
              filterText: this.list.filter,
              ...this.filters,
            });
    
        return request.pipe(finalize(this.list.get));
      }
      <% } %>
    
      delete(record: <%= name %><%= navPropsSuffix %>Dto) {
        this.confirmationService.warn(
          '<%= resourceName %>::DeleteConfirmationMessage',
          '<%= resourceName %>::AreYouSure',
          { messageLocalizationParams: [] }
        ).pipe(
          filter(status => status === Confirmation.Status.confirm),
          switchMap(() => this.proxyService.delete(record.<%= entityNamePrefix %>id)),
        ).subscribe(this.list.get);
      }
    
      <% if(bulkDeleteEnabled) { %>
      bulkDelete() {
        if (this.selectedCount() < 1) {
          return;
        }
    
        let message = '<%= resourceName %>::';
        let messageParam = null;
    
        if (this.allSelected()) {
          message += 'DeleteAllRecords';
        } else {
          message += 'DeleteSelectedRecords';
          messageParam = this.selectedCount().toString();
        }
    
        this.confirmationService
          .warn(message, 'AbpUi::AreYouSure', {
            messageLocalizationParams: [messageParam],
          })
          .pipe(
            filter(result => result === Confirmation.Status.confirm),
            switchMap(() => this.bulkDeleteRequest()),
          )
          .subscribe();
      }
      
      selectAll() {
        this.allSelected.set(!this.allSelected());
        this.selected.set(this.allSelected() ? [...this.data.items] : []);
      }
    
      onSelect({ selected }) {
        if (selected.length < 1) {
          this.clearAllSelection();
          return;
        }
    
        if (selected.length === this.data.totalCount) {
          this.allSelected.set(true);
          this.selected.set(selected);
          return;
        }
    
        if (selected.length !== this.data.totalCount && this.allSelected()) {
          this.allSelected.set(false);
        }
    
        if (selected.length === 1) {
          <% if(navConnections.length > 0 || navProps.length > 0) { %>
          if (this.selected().length < 1) {
            this.selected.set(selected);
            return;
          }
          <% } %>
    
          this.selected.set([...this.selected()]);
          return;
        }
    
        this.selected.set(selected);
      }
      <% } %>
    
      hookToQuery() {
        const getData = (query: ABP.PageQueryParams) =>
          this.proxyService.getList({
            ...query,
            ...this.filters,
            filterText: query.filter
          });
    
        const setData = (list: PagedResultDto<<%= name %><%= navPropsSuffix %>Dto>) => {
          this.data = list;
          <% if(bulkDeleteEnabled) { %>
           if (this.selectedCount() > 0) {
            this.clearAllSelection();
           }
          <% } %>
        };
    
        this.list.hookToQuery(getData).subscribe(setData);
      }
    
      clearFilters() {
        this.filters = {} as Get<%= namePlural %>Input;
        this.list.get();
      }
    
      <% if(entity.ShouldExportExcel) {%>
      exportToExcel() {
        this.isExportToExcelBusy  = true;
        this.proxyService
          .getDownloadToken()
          .pipe(
            switchMap(({ token }) => 
              this.proxyService.getListAsExcelFile({ 
                downloadToken: token,
                filterText:this.list.filter,
                ...this.filters,
              })
            ),
            finalize(() => this.isExportToExcelBusy  = false),
          )
          .subscribe(result => {
            this.abpWindowService.downloadBlob(result, '<%= name %>.xlsx');
          });
      }
      <% } %>
    
      <% if(hasFileProp) { %> 
      downloadFile(fileId: string): void {
        if (!fileId) {
          return;
        }
    
        this.proxyService
        .getDownloadToken()
        .pipe(map(result => result.token))
        .subscribe(token => {
          this.abpWindowService
            .open(
              `${this.environmentService.getApiUrl('default')}/api/app/<%= kebab(namePlural) %>/file?downloadToken=${token}&fileId=${fileId}`,
              '_blank',
            )
            .focus();
        });
      }
      <% } %>
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\services\__name@kebab__-detail.service.ts.template"><![CDATA[
    import { Injectable } from '@angular/core';
    import { Abstract<%= name %>DetailViewService  } from './<%= kebab(name) %>-detail.abstract.service';
    
    @Injectable()
    export class <%= name %>DetailViewService extends Abstract<%= name %>DetailViewService  {}
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\services\__name@kebab__-detail.abstract.service.ts.template"><![CDATA[
    <% const hasFileProp = props.filter(p => p.formControl === 'file').length %>
    import { inject } from '@angular/core';
    import { FormBuilder, FormGroup, Validators } from '@angular/forms';
    import { ListService, TrackByService, <% if(hasFileProp) { %> AbpWindowService, EnvironmentService <% } %> } from '@abp/ng.core';
    <% if(hasFileProp){ %> import { ConfirmationService } from '@abp/ng.theme.shared';  import { of } from 'rxjs'; <% } %>
    import { finalize, tap, <% if(hasFileProp) { %> map, catchError <% } %> } from 'rxjs/operators';
    <% for (let e of enums) { %>
    import { <%= camel(e.name) %>Options } from '<%= relativePathFromComponentToEnum(scope, namespace, e, projectTemplate) %>';<% } %>
    import type {
      <%= name %><%= navPropsSuffix %>Dto,
    } from '<%= relativePathFromComponentToModel(scope, namespace, projectTemplate) %>';
    import { <%= name %>Service } from '<%= relativePathFromComponentToService(scope, namespace, name, projectTemplate) %>';
    
    export abstract class Abstract<%= name %>DetailViewService {
      protected readonly fb = inject(FormBuilder);
      protected readonly track = inject(TrackByService);
      <% if(hasFileProp) { %> protected readonly abpWindowService = inject(AbpWindowService);
      protected readonly environmentService = inject(EnvironmentService);
      public readonly confirmation = inject(ConfirmationService);
      <% } %>
      public readonly proxyService = inject(<%= name %>Service);
      public readonly list = inject(ListService);
      <% for (let prop of navConnections) { %>
      public readonly get<%= prop.entityRef.name %>Lookup = this.proxyService.get<%= prop.entityRef.name %>Lookup
      <% } %>
    
      <% for (let prop of navProps.filter(navProp => !navConnections.some(navConnection => navConnection.entityRef.name === navProp.entityRef.name))) { %>
      public readonly get<%= prop.entityRef.name %>Lookup = this.proxyService.get<%= prop.entityRef.name %>Lookup
      <% } %>
    
      <% for (let e of enums) { %>
      <%= camel(e.name) %>Options = <%= camel(e.name) %>Options;<% } %>
    
      isBusy = false;
      isVisible = false;
      selected = {} as any;
      form: FormGroup | undefined;
      
      <% const dateProps = props.filter(({readonlyOnEditModal, ref: {Type}}) => !!readonlyOnEditModal && (Type === 'DateTime' || Type === 'DateOnly' || Type === 'TimeOnly')) %>
      <% if(dateProps?.length > 0) { %>
      protected disableControls() {
        [<% for(let prop of dateProps) { %> '<%= camel(prop.name) %>', <% } %>].forEach((prop) => this.form.get(prop)?.disable());
      }
      <% } %>
    
      protected createRequest() {
        const formValues = {
        ...this.form.value,<%
        for(let prop of navConnections) { %>
        <%= getLookupName(prop, true) %>s: this.form.value.<%= getLookupName(prop,true) %>s.map(({id})=> id), <% } %>
        };
    
        if (this.selected) {
            return this.proxyService.update(this.selected.<%= entityNamePrefix %>id, <% if(checkConcurrency){ %> { ...formValues,  concurrencyStamp: this.selected<%= navPropsSuffix ? '.' + camel(name) : '' %>.concurrencyStamp} <% } else { %> formValues <% }%>)
        }
    
        return this.proxyService.create(formValues);
      }
    
      <% if(hasFileProp) { %> 
      protected createFileRequest(file) {
        const formData = new FormData();
        formData.append('input', file);
    
        return this.proxyService.uploadFile(formData);
      }
      <% } %>
    
      buildForm() {
        const {<%
          for(let prop of props) { %>
          <%= camel(prop.name) %>,<% }
          for(let navProp of navProps) { %>
          <%= camel(navProp.name) %>,<% } %>
        } = this.selected<%= navPropsSuffix ? '?.' + camel(name) : '' %> || {};
        <% if(navConnections.length) { %>
         const {<%
              for(let navProp of navConnections) { %>
              <%= camel(navProp.name) %> = [],<% } %>
            } = this.selected || {};
         <% } %>
        this.form = this.fb.group({<%
          for(let prop of props) { %>
          <%= camel(prop.name) %>: [<%= prop.defaultValue %>, [<%= prop.validators.join(', ') %>]],<% }
          for(let prop of navProps) { %>
          <%= camel(prop.name) %>: [<%= prop.defaultValue %>, [<%= prop.validators.join(', ') %>]],<% }
          for(let prop of navConnections) { %>
          <%= getLookupName(prop, true) %>s: [<%= prop.defaultValue %>, [<%= prop.validators.join(', ') %>]],<% } %>
        });
        <% if(dateProps?.length > 0) { %>
        if(!!this.selected) {
          this.disableControls();
        }
        <% } %>
      }
    
      showForm() {
        this.buildForm();
        this.isVisible = true;
      }
    
      create() {
        this.selected = undefined;
        this.showForm();
      }
    
      update(record: <%= name %><%= navPropsSuffix %>Dto) {
        <% if(navConnections.length) { %>
        this.proxyService.getWithNavigationProperties(record.<%= entityNamePrefix %>id).subscribe(data => {
          this.selected = data;
          this.showForm();
        });
        <% } else { %>
        this.selected = record;
        this.showForm();
        <% } %>
      }
    
      hideForm() {
        this.isVisible = false;
      }
    
      submitForm() {
    
        if (this.form.invalid) return;
    
        this.isBusy = true;
    
        const request =  this.createRequest().pipe(
          finalize(() => (this.isBusy = false)),
          tap(() => this.hideForm())
        );
    
        request.subscribe(this.list.get)
      }
    
      changeVisible($event: boolean) {
        this.isVisible = $event;
      }
    
      <% if(hasFileProp) { %> 
      downloadFile(propName: string): void {
        if (!this.selected || !propName) {
          return;
        }
    
        const fileId = this.selected<%= navPropsSuffix ? '.' + camel(name) : '' %>[propName];
    
        this.proxyService
        .getDownloadToken()
        .pipe(map(result => result.token))
        .subscribe(token => {
          this.abpWindowService
            .open(
              `${this.environmentService.getApiUrl(
                'default',
              )}/api/app/<%= kebab(namePlural) %>/file?downloadToken=${token}&fileId=${fileId}`,
              '_blank',
            )
            .focus();
        });
      }
    
      onFileChange($event: any, propName: string, maxFileSize: number = 10) {
        if (!$event.target?.files?.length) {
          this.removeFile(propName);
          return;
        }
    
        const file = $event.target.files[0];
    
        if (file.size > maxFileSize * 1024 * 1024) {
          const input = $event.target as HTMLInputElement;
          this.removeFile(propName);
          input.value = null;
          this.confirmation.error(
            <% if(resourceName) { %> <%= resourceName %> + <% } %>
            '::UploadFailedMessage', '', {
            hideCancelBtn: true,
            yesText: 'AbpUi::Ok',
          });
          return;
        }
    
        this.createFileRequest(file)
          .pipe(
            catchError(() => {
              this.confirmation.error(
                <% if(resourceName) { %> <%= resourceName %> + <% } %> 
                '::UploadFailedMessage', '', {
                hideCancelBtn: true,
                yesText: 'AbpUi::Ok',
              });
              return of(null);
            })
          )
          .subscribe(response => {
            if (response) {
              this.form.patchValue({ [propName]: response.id });
            }
          });
      }
    
      removeFile(propName) {
        this.form.patchValue({ [propName]: null });
      }
      <% } %>
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\components\__name@kebab__.component.ts.template"><![CDATA[
    <% const { hasLookupSelect, hasLookupTypeahead, hasLookupModal } = getLookupComponents %>
    import { ChangeDetectionStrategy, Component } from '@angular/core';
    import { CommonModule } from '@angular/common';
    import { FormsModule, ReactiveFormsModule } from '@angular/forms';
    import {
      NgbDateAdapter,
      NgbTimeAdapter,
      NgbCollapseModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDropdownModule,
    } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { NgxDatatableModule } from '@swimlane/ngx-datatable';
    import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
    import { DateAdapter, TimeAdapter, NgxDatatableDefaultDirective, NgxDatatableListDirective } from '@abp/ng.theme.shared';
    import { PageComponent, PageToolbarContainerComponent } from '@abp/ng.components/page';
    import { 
      AdvancedEntityFiltersComponent,
      AdvancedEntityFiltersFormComponent,
      <% if(hasLookupSelect) { %>LookupSelectComponent, <% } %>
      <% if(hasLookupTypeahead) { %>LookupTypeaheadComponent, <% } %> 
      <% if(hasLookupModal) { %>LookupInputComponent <% } %> 
    } from '@volo/abp.commercial.ng.ui';
    import { <%= name %>ViewService } from '../services/<%= kebab(name) %>.service';
    import { <%= name %>DetailViewService } from '../services/<%= kebab(name) %>-detail.service';
    import { <%= name %>DetailModalComponent } from './<%= kebab(name) %>-detail.component';
    import { Abstract<%= name %>Component, ChildTabDependencies, ChildComponentDependencies } from './<%= kebab(name) %>.abstract.component';
    
    @Component({
      selector: '<%= selector %>',
      changeDetection: ChangeDetectionStrategy.Default,
      imports:[
        ...ChildTabDependencies,
        NgbCollapseModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbDropdownModule,
        NgxValidateCoreModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        NgxDatatableModule,
        NgxDatatableDefaultDirective,
        NgxDatatableListDirective,
        PermissionDirective,
        LocalizationPipe,
        PageComponent,
        PageToolbarContainerComponent,
        AdvancedEntityFiltersComponent,
        AdvancedEntityFiltersFormComponent,
        <% if(hasLookupSelect) { %> LookupSelectComponent, <% } %>
        <% if(hasLookupTypeahead) { %> LookupTypeaheadComponent, <% } %>
        <% if(hasLookupModal) { %> LookupInputComponent, <% } %>
        <%= name %>DetailModalComponent,
        ...ChildComponentDependencies,
      ],
      providers: [
        ListService,
        <%= name %>ViewService,
        <%= name %>DetailViewService,
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
      ],
      templateUrl: './<%= kebab(name) %>.component.html',
      styles:`::ng-deep.datatable-row-detail { background: transparent !important; }`
    })
    export class <%= name %>Component extends Abstract<%= name %>Component { }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\components\__name@kebab__.component.html.template"><![CDATA[
    <abp-page [title]="title | abpLocalization">
      <abp-page-toolbar-container class="col">
       <!--<suite-custom-code-block-0>-->
       <!--</suite-custom-code-block-0>-->
        <div class="text-lg-end pt-2">
         <!--<suite-custom-code-block-1>-->
         <!--</suite-custom-code-block-1>-->
          <% if(entity.ShouldExportExcel) { %>
          <button
            class="btn btn-primary btn-sm mx-2"
            type="button"
            [disabled]="service.isExportToExcelBusy"
            (click)="exportToExcel()">{{ '<%= resourceName %>::ExportToExcel' | abpLocalization }}</button>
          <% } %>
          <button
            *abpPermission="'<%= requiredPolicy %>.Create'"
            class="btn btn-primary btn-sm"
            type="button"
            (click)="create()"
          >
            <i class="fa fa-plus me-1" aria-hidden="true"></i>
            {{ '<%= resourceName %>::New<%= name %>' | abpLocalization }}
          </button>
           <!--<suite-custom-code-block-2>-->
           <!--</suite-custom-code-block-2>-->
        </div>
      </abp-page-toolbar-container>
    
      <abp-advanced-entity-filters localizationSourceName="<%= resourceName %>" [list]="list">
        <% if(hasAdvancedFilterItem) { %>
        @if (service.filters; as filters) {
          <abp-advanced-entity-filters-form>
            <form #filterForm (keyup.enter)="list.get()">
              <!--<suite-custom-code-block-3>-->
              <!--</suite-custom-code-block-3>-->
              <div class="row"><%
                for (let prop of props) { %>
                <% if(!prop.isFilterable) { continue; } %>
                 <div class="col-12 col-sm-auto">
                  <div class="mb-3"><%
                    if (prop.formControl === 'text') { %>
                    <label class="form-label" for="<%= camel(prop.name) %>Filter">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <input
                      id="<%= camel(prop.name) %>Filter"
                      class="form-control"
                      [(ngModel)]="filters.<%= camel(prop.name) %>"
                      [ngModelOptions]="{ standalone: true }"
                    /><% }
                    else if (prop.formControl === 'checkbox') { %>
                    <label class="form-label" for="<%= camel(prop.name) %>Filter">
                        {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <select
                      name="<%= camel(prop.name) %>"
                      id="<%= camel(prop.name) %>Filter"
                      class="form-select form-control"
                      [(ngModel)]="filters.<%= camel(prop.name) %>"
                      [ngModelOptions]="{ standalone: true }"
                      (change)="list.get()"
                    >
                      <option [ngValue]=""></option>
                      <option [ngValue]="true">{{ 'AbpUi::Yes' | abpLocalization }}</option>
                      <option [ngValue]="false">{{ 'AbpUi::No' | abpLocalization }}</option>
                    </select><% }
                    else if (prop.formControl === 'number') { %>
                    <label class="form-label" for="min<%= prop.name %>">
                      {{ '<%= resourceName %>::Min<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <input
                      id="min<%= prop.name %>"
                      type="number"
                      class="form-control"
                      [(ngModel)]="filters.<%= camel(prop.name) %>Min"
                      [ngModelOptions]="{ standalone: true }"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="max<%= prop.name %>">
                      {{ '<%= resourceName %>::Max<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <input
                      id="max<%= prop.name %>"
                      type="number"
                      class="form-control"
                      [(ngModel)]="filters.<%= camel(prop.name) %>Max"
                      [ngModelOptions]="{ standalone: true }"
                    /><% }
                    else if (prop.formControl === 'date') { %>
                    <label class="form-label" for="min<%= prop.name %>">
                        {{ '<%= resourceName %>::Min<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        id="min<%= prop.name %>"
                        class="form-control"
                        #min<%= prop.name %>Input
                        #min<%= prop.name %>Datepicker="ngbDatepicker"
                        name="min<%= prop.name %>"
                        ngbDatepicker
                        container="body"
                        readonly
                        (click)="min<%= prop.name %>Datepicker.toggle()"
                        (keyup.space)="min<%= prop.name %>Datepicker.toggle()"
                        [(ngModel)]="filters.<%= camel(prop.name) %>Min"
                        [ngModelOptions]="{ standalone: true }"
                      />
                      @if (min<%= prop.name %>Input.value) {
                        <div class="input-group-append">
                          <button
                            class="btn btn-link px-2"
                            type="button"
                            [title]="'AbpUi::Clear' | abpLocalization"
                            (click)="min<%= prop.name %>Datepicker.writeValue(null); min<%= prop.name %>Datepicker.manualDateChange(null, true)"
                          >
                            <i class="fa fa-times" aria-hidden="true"></i>
                          </button>
                        </div>
                      }
                    </div>
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="max<%= prop.name %>">
                      {{ '<%= resourceName %>::Max<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        id="max<%= prop.name %>"
                        class="form-control"
                        #max<%= prop.name %>Input
                        #max<%= prop.name %>Datepicker="ngbDatepicker"
                        name="max<%= prop.name %>"
                        ngbDatepicker
                        readonly
                        (click)="max<%= prop.name %>Datepicker.toggle()"
                        (keyup.space)="max<%= prop.name %>Datepicker.toggle()"
                        [(ngModel)]="filters.<%= camel(prop.name) %>Max"
                        [ngModelOptions]="{ standalone: true }"
                      />
                      @if (max<%= prop.name %>Input.value) {
                        <div class="input-group-append">
                          <button
                            class="btn btn-link px-2"
                            type="button"
                            [title]="'AbpUi::Clear' | abpLocalization"
                            (click)="max<%= prop.name %>Datepicker.writeValue(null); max<%= prop.name %>Datepicker.manualDateChange(null, true)"
                          >
                            <i class="fa fa-times" aria-hidden="true"></i>
                          </button>
                        </div>
                      }
                    </div><% }
    
                    else if (prop.formControl === 'time') { %>
                    <label class="form-label" for="min<%= prop.name %>">
                        {{ '<%= resourceName %>::Min<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <ngb-timepicker
                      id="min<%= prop.name %>"
                      name="min<%= prop.name %>"
                      [(ngModel)]="filters.<%= camel(prop.name) %>Min"
                      [ngModelOptions]="{ standalone: true }"
                      [spinners]="false"
                      [meridian]="true"
                    />
                  </div>
                </div>
    
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="max<%= prop.name %>">
                      {{ '<%= resourceName %>::Max<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <ngb-timepicker
                      id="max<%= prop.name %>"
                      name="max<%= prop.name %>"
                      [(ngModel)]="filters.<%= camel(prop.name) %>Max"
                      [ngModelOptions]="{ standalone: true }"
                      [spinners]="false"
                      [meridian]="true"
                      >
                    </ngb-timepicker>
                    <% }
                    else if (prop.formControl === 'select') { %>
                    <label class="form-label" for="<%= camel(prop.name) %>Filter">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
                    </label>
    
                    <select
                      id="<%= camel(prop.name) %>Filter"
                      class="form-select form-control"
                      [(ngModel)]="filters.<%= camel(prop.name) %>"
                      [ngModelOptions]="{ standalone: true }"
                    >
                      <option [ngValue]="null"></option>
                      <option
                        *ngFor="let option of <%= camel(prop.enumType) %>Options; trackBy: track.by('value')"
                        [ngValue]="option.value"
                      >
                        {{ '<%= resourceName %>::Enum:<%= prop.enumType %>.' + option.value  | abpLocalization }}
                      </option>
                    </select><% } %>
                  </div>
                </div><% }
                for (let prop of navProps.concat(markNavigationConnections(navConnections))) { %>
                <% if(!prop.isFilterable) { continue; } %>
                <div class="col-12 col-sm-auto">
                  <div class="mb-3">
                    <label class="form-label" for="<%= camel(prop.name) %>Filter">
                      {{ '<%= resourceName %>::<%= prop.entityRef.name %>' | abpLocalization }}
                    </label><%
                    if (prop.formControl === 'lookup.select') { %>
                    <abp-lookup-select
                      cid="<%= camel(prop.name) %>Filter"
                      [getFn]="serviceDetail.get<%= prop.entityRef.name %>Lookup"
                      [(ngModel)]="filters.<%= getLookupName(prop, prop.isNavigationConnection) %>"
                      [ngModelOptions]="{ standalone: true }"
                    ></abp-lookup-select><% }
                    else if (prop.formControl === 'lookup.typeahead') { %>
                    <abp-lookup-typeahead
                      cid="<%= camel(prop.name) %>Filter"
                      displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                      [getFn]="serviceDetail.get<%= prop.entityRef.name %>Lookup"
                      [(ngModel)]="filters.<%=  getLookupName(prop, prop.isNavigationConnection) %>"
                      [ngModelOptions]="{ standalone: true }"
                    ></abp-lookup-typeahead><% }
                    else if (prop.formControl === 'lookup.modal') { %>
                    <abp-lookup-input
                      cid="<%= camel(prop.name) %>Filter"
                      displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                      lookupNameProp="displayName"
                      [getFn]="serviceDetail.get<%= prop.entityRef.name %>Lookup"
                      [(ngModel)]="filters.<%=  getLookupName(prop, prop.isNavigationConnection) %>"
                      [ngModelOptions]="{ standalone: true }"
                    ></abp-lookup-input><% } %>
                  </div>
                </div><% } %>
    
                <div class="col-12 col-sm-auto align-self-end mb-3">
                  <div class="row">
                    <div class="col-6 col-sm-auto d-grid">
                      <button
                        type="button"
                        class="btn btn-outline-primary"
                        (click)="clearFilters()"
                      >
                        <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>
                      </button>
                    </div>
                    <div class="col-6 col-sm-auto d-grid">
                      <button type="button" class="btn btn-primary" (click)="list.get()">
                        <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <!--<suite-custom-code-block-4>-->
              <!--</suite-custom-code-block-4>-->
            </form>
          </abp-advanced-entity-filters-form>
        }
        <% } %>
      </abp-advanced-entity-filters>
         <!--<suite-custom-code-block-5>-->
         <!--</suite-custom-code-block-5>-->
      <div class="card">
        <% if(bulkDeleteEnabled) { %>
        <div class="card-header d-flex justify-content-between align-items-center">
          @if (service.selectedCount() > 0) {
            <h4 class="card-title">
              {{
                '<%= resourceName %>::AllItemsAreSelected'
                  | abpLocalization
                    : (service.allSelected() ? service.data.totalCount : service.selectedCount())
              }}
            </h4>
    
            <div>
              <button class="btn btn-outline-primary btn-sm" (click)="service.selectAll()">
                @if (service.allSelected()) {
                  {{ '<%= resourceName %>::ClearSelection' | abpLocalization }}
                } @else {
                  {{ '<%= resourceName %>::SelectAllItems' | abpLocalization: service.data.totalCount }}
                }
              </button>
    
              <button
                *abpPermission="'<%= requiredPolicy %>.Delete'"
                class="btn btn-danger btn-sm mx-1"
                (click)="service.bulkDelete()"
              >
                <i class="fa fa-trash me-1" aria-hidden="true"></i>
                {{ 'AbpUi::Delete' | abpLocalization: service.selectedCount() }}
              </button>
            </div>
          }
        </div>
        <% } %>
           <!--<suite-custom-code-block-6>-->
           <!--</suite-custom-code-block-6>-->
        <div class="card-body">
          <!--<suite-custom-code-block-7>-->
          <!--</suite-custom-code-block-7>-->
          <ngx-datatable
            <% if(childEntities.length > 0) { %> #<%= camel(name) %>Table<% } %>
            default
            [rows]="service.data.items"
            [count]="service.data.totalCount"
            [list]="list"<% if(bulkDeleteEnabled) { %>
            [selected]="service.selected()"
            [selectionType]="service.selectionType.checkbox"
            (select)="service.onSelect($event)"
            <% } %>
          >
            <!--<suite-custom-code-block-8>-->
            <!--</suite-custom-code-block-8>-->
            <% if(bulkDeleteEnabled) { %>
            <ngx-datatable-column
              [width]="40"
              [sortable]="false"
              [canAutoResize]="false"
              [draggable]="false"
              [resizeable]="false"
            >
              <ng-template
                ngx-datatable-header-template
                let-value="value"
                let-allRowsSelected="allRowsSelected"
                let-selectFn="selectFn"
              >
                @if (service.data.items.length > 0) {
                  <input
                    type="checkbox"
                    class="form-check-input"
                    [checked]="allRowsSelected"
                    (change)="selectFn(!allRowsSelected)"
                  />
                }
              </ng-template>
              <ng-template
                ngx-datatable-cell-template
                let-value="value"
                let-isSelected="isSelected"
                let-onCheckboxChangeFn="onCheckboxChangeFn"
              >
                <input
                  class="form-check-input"
                  type="checkbox"
                  [checked]="isSelected"
                  (change)="onCheckboxChangeFn($event)"
                />
              </ng-template>
            </ngx-datatable-column>
            <% } %>
    
            <% if(childEntities.length > 0) { %>
            <!-- Row Detail Template -->
            <ngx-datatable-row-detail rowHeight="100%">
              <ng-template let-row="row" let-expanded="expanded" ngx-datatable-row-detail-template>
                <ul id="<%= camel(name) %>-nav-tabs mb-0" ngbNav #nav="ngbNav" class="nav-tabs">
                  <% for(child of childEntities) { %>
                  <li *abpPermission="'<%= project %>.<%= child.NamePlural %>'" id="<%= kebab(child.Name) %>-informations" ngbNavItem>
                    <a ngbNavLink>{{ '<%= resourceName %>::<%= child.Name %>' | abpLocalization }}</a>
    
                    <ng-template ngbNavContent>
                     <<%= projectPrefix %>-<%= kebab(child.Name) %> [<%= camel(name)%>Id]="<% if(navProps.length > 0 || navConnections.length > 0) { %> row.<%= camel(name) %>.id<% } else { %>row.id <% } %>" />
                    </ng-template>
                  </li>
                  <% } %>
                </ul>
    
                <div [ngbNavOutlet]="nav" class="m-0 fade-in-top"></div>
              </ng-template>
            </ngx-datatable-row-detail>
            @if(isChildEntitiesPermitted){
            <ngx-datatable-column
              [width]="50"
              [resizeable]="false"
              [sortable]="false"
              [draggable]="false"
              [canAutoResize]="false"
            >
              <ng-template let-row="row" let-expanded="expanded" ngx-datatable-cell-template>
                <a
                  href="javascript:void(0)"
                  class="ngx-datatable-toggle text-decoration-none text-muted fa"
                  [class.fa-angle-down]="!expanded"
                  [class.fa-angle-up]="expanded"
                  title="Expand/Collapse Row"
                  (click)="toggleExpandRow(row)"
                >
                </a>
              </ng-template>
            </ngx-datatable-column>
            }
            <% } %>
    
            @if(isActionButtonVisible){
            <ngx-datatable-column
              [name]="'AbpUi::Actions' | abpLocalization"
              [maxWidth]="150"
              [width]="150"
              [sortable]="false"
            >
              <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
                <div ngbDropdown container="body" class="d-inline-block">
                  <button
                    class="btn btn-primary btn-sm dropdown-toggle"
                    data-toggle="dropdown"
                    aria-haspopup="true"
                    ngbDropdownToggle
                  >
                    <i class="fa fa-cog me-1" aria-hidden="true"></i>
                    {{ 'AbpUi::Actions' | abpLocalization }}
                  </button>
    
                  <div ngbDropdownMenu>
                    <button
                      ngbDropdownItem
                      *abpPermission="'<%= requiredPolicy %>.Edit'"
                      (click)="update(row)"
                    >
                      {{ 'AbpUi::Edit' | abpLocalization }}
                    </button>
    
                    <button
                      ngbDropdownItem
                      *abpPermission="'<%= requiredPolicy %>.Delete'"
                      (click)="delete(row)"
                    >
                      {{ 'AbpUi::Delete' | abpLocalization }}
                    </button>
                  </div>
                </div>
              </ng-template>
            </ngx-datatable-column> }<%
            for (let prop of props) {
             if(!prop.showOnList) { continue; }
             %>
            <ngx-datatable-column name="{{ '<%= resourceName %>::<%= removePostfix(prop.name, 'Id') %>' | abpLocalization }}" prop="<%= entityNamePrefix %><%= camel(prop.name) %>"><%
              if (prop.enumType) { %>
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.<%= entityNamePrefix %><%= camel(prop.name) %> !== null ? ('<%= resourceName %>::Enum:<%= prop.enumType %>.' + row.<%= entityNamePrefix %><%= camel(prop.name) %> | abpLocalization) : '' }}
              </ng-template><% }
              else if (prop.formControl === 'date') { %>
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.<%= entityNamePrefix %><%= camel(prop.name) %> | abpUtcToLocal:'date' }}
              </ng-template><% }
              else if (prop.type === 'boolean') { %>
              <ng-template let-row="row" ngx-datatable-cell-template>
                <ng-template [ngIf]="row.<%= entityNamePrefix %><%= camel(prop.name) %>" [ngIfThen]="yes" [ngIfElse]="no"></ng-template>
    
                <ng-template #yes>
                  <div class="text-success">
                    <span [title]="'AbpUi::Yes' | abpLocalization">
                      <i class="fa fa-check" aria-hidden="true"></i>
                    </span>
                  </div>
                </ng-template>
    
                <ng-template #no>
                  <div class="text-danger">
                    <span [title]="'AbpUi::No' | abpLocalization">
                      <i class="fa fa-times" aria-hidden="true"></i>
                    </span>
                  </div>
                </ng-template>
              </ng-template><% }
              else if (prop.formControl === 'file') { %>
                <ng-template let-row="row" ngx-datatable-cell-template>
                  @if(<% if(navProps.length > 0 || navConnections.length > 0) { %> row.<%= camel(name) %>.<%= camel(prop.name) %><% } else { %>row.<%= camel(prop.name) %> <% } %>) {
                    <span role="button" class="<%= kebab(name) %>-<%= kebab(removePostfix(prop.name, 'Id')) %>-file pe-auto" (click)="service.downloadFile(<% if(navProps.length > 0 || navConnections.length > 0) { %> row.<%= camel(name) %>.<%= camel(prop.name) %><% } else { %>row.<%= camel(prop.name) %> <% } %>)">
                      <i class="fa fa-file"></i>
                    </span>
                  }
                </ng-template><% }
              else { %>
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.<%= entityNamePrefix %><%= camel(prop.name) %> }}
              </ng-template><% } %>
            </ngx-datatable-column><% }
            for (let prop of navProps) { %>
            <ngx-datatable-column name="{{ '<%= resourceName %>::<%= prop.entityRef.name %>' | abpLocalization }}" prop="<%= camel(prop.entityRef.name) %>.<%= camel(prop.entityRef.displayProperty) %>">
              <ng-template let-row="row" ngx-datatable-cell-template>
                {{ row.<%= camel(prop.entityRef.name) %>?.<%= camel(prop.entityRef.displayProperty) %> }}
              </ng-template>
            </ngx-datatable-column><% } %>
           <!--<suite-custom-code-block-9>-->
           <!--</suite-custom-code-block-9>-->
          </ngx-datatable>
           <!--<suite-custom-code-block-10>-->
           <!--</suite-custom-code-block-10>-->
        </div>
      </div>
       <!--<suite-custom-code-block-11>-->
       <!--</suite-custom-code-block-11>-->
    </abp-page>
    <!--<suite-custom-code-block-12>-->
    <!--</suite-custom-code-block-12>-->
    
    @defer (when serviceDetail.isVisible) {
      @if (serviceDetail.isVisible) {
        <<%= selector %>-detail-modal />
      }
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\components\__name@kebab__.abstract.component.ts.template"><![CDATA[
    import { Directive, OnInit, inject  <% if(childEntities.length > 0) { %>, ViewChild <% } %>} from '@angular/core';
    <% if(childEntities.length > 0) { %>
    import {
      NgbNav,
      NgbNavItem,
      NgbNavLink,
      NgbNavContent,
      NgbNavOutlet,
    } from '@ng-bootstrap/ng-bootstrap';<% } %>
    import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
    <% for (let e of enums) { %>
    import { <%= camel(e.name) %>Options } from '<%= relativePathFromComponentToEnum(scope, namespace, e, projectTemplate) %>';<% } %>
    import type {
      <%= name %><%= navPropsSuffix %>Dto,
    } from '<%= relativePathFromComponentToModel(scope, namespace, projectTemplate) %>';
    import { <%= name %>ViewService } from '../services/<%= kebab(name) %>.service';
    import { <%= name %>DetailViewService } from '../services/<%= kebab(name) %>-detail.service';<% for(child of childEntities) { %>
    import {<%= child.Name %>Component} from '../../<%= kebab(child.Name) %>/components/<%= kebab(child.Name)%>-child.component';
    <% } %>
    
    export const ChildTabDependencies = [<% if(childEntities.length > 0) { %>
      NgbNav,
      NgbNavItem,
      NgbNavLink,
      NgbNavContent,
      NgbNavOutlet,<% }%>
    ];
    
    export const ChildComponentDependencies = [
      <%  for(child of childEntities) { %>
      <%= child.Name %>Component,
      <% } %>
    ];
    
    @Directive()
    export abstract class Abstract<%= name %>Component implements OnInit {
      public readonly list = inject(ListService);
      public readonly track = inject(TrackByService);
      public readonly service = inject(<%= name %>ViewService);
      public readonly serviceDetail = inject(<%= name %>DetailViewService);
      public readonly permissionService = inject(PermissionService);
    
      protected title = '<%= resourceName %>::<%= entity.PageTitle || namePlural %>';
      protected isActionButtonVisible: boolean | null = null;
      <% if(childEntities.length > 0){ %>protected isChildEntitiesPermitted: boolean | null = null;<% } %>
    
      <% for (let e of enums) { %>
      <%= camel(e.name) %>Options = <%= camel(e.name) %>Options;<% } %>
    
      <% if(childEntities.length > 0) { %>
      @ViewChild('<%= camel(name)%>Table') table: any;
      <% } %>
    
      ngOnInit() {
        this.service.hookToQuery();
        this.checkActionButtonVisibility();
        <% if(childEntities.length > 0){ %>this.checkChildEntityPermissions();<% } %>
      }
    
      clearFilters() {
        this.service.clearFilters();
      }
    
      showForm() {
        this.serviceDetail.showForm();
      }
    
      create() {
        this.serviceDetail.selected = undefined;
        this.serviceDetail.showForm();
      }
    
      update(record: <%= name %><%= navPropsSuffix %>Dto) {
       this.serviceDetail.update(record)
      }
    
      delete(record: <%= name %><%= navPropsSuffix %>Dto) {
          this.service.delete(record);
      }
      <% if(entity.ShouldExportExcel) {%>
      exportToExcel() {
        this.service.exportToExcel();
      }
      <% } %>
      <% if(childEntities.length > 0) {%>
      toggleExpandRow(row) {
        this.table.rowDetail.toggleExpandRow(row);
      }
    
      checkChildEntityPermissions(){
        if(this.isChildEntitiesPermitted !== null){
          return;
        }
    
        const childPermissions = [
          <% for(child of childEntities) { %>
            '<%= project %>.<%= child.NamePlural %>',
          <% } %>
        ];
        this.isChildEntitiesPermitted = childPermissions.some(permission =>
          this.permissionService.getGrantedPolicy(permission)
        );
      }
      <% } %>
    
      checkActionButtonVisibility() {
        if (this.isActionButtonVisible !== null) {
          return;
        }
    
        const canEdit = this.permissionService.getGrantedPolicy('<%= requiredPolicy %>.Edit');
        const canDelete = this.permissionService.getGrantedPolicy('<%= requiredPolicy %>.Delete');
        this.isActionButtonVisible = canEdit || canDelete;
      }
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\components\__name@kebab__-detail.component.ts.template"><![CDATA[
    <% const { hasLookupSelect, hasLookupTypeahead, hasLookupModal } = getLookupComponents %>
    <% const hasNavConnections = navConnections && navConnections.length %>
    import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
    import { ReactiveFormsModule } from '@angular/forms';
    import { CommonModule } from '@angular/common';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
    import { DateAdapter, TimeAdapter, ModalComponent, ModalCloseDirective, ButtonComponent } from '@abp/ng.theme.shared';
    <% if(hasLookupSelect || hasLookupTypeahead || hasLookupModal || hasNavConnections) { %>
    import { 
      <% if(hasLookupSelect) { %>LookupSelectComponent, <% } %>
      <% if(hasLookupTypeahead) { %>LookupTypeaheadComponent, <% } %> 
      <% if(hasLookupModal) { %>LookupInputComponent, <% } %> 
      <% if(hasNavConnections) { %>LookupTypeaheadMtmComponent <% } %> 
    } from '@volo/abp.commercial.ng.ui';
    <% } %>
    import { 
      NgbNavModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDateAdapter,
      NgbTimeAdapter,
    } from '@ng-bootstrap/ng-bootstrap';
    import { <%= name %>DetailViewService } from '../services/<%= kebab(name) %>-detail.service';
    
    @Component({
      selector: '<%= selector %>-detail-modal',
      changeDetection: ChangeDetectionStrategy.Default,
      imports: [
        CommonModule,
        ReactiveFormsModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbNavModule,
        NgxValidateCoreModule,
        AutofocusDirective,
        ModalCloseDirective,
        LocalizationPipe,
        ModalComponent,
        ButtonComponent,
        <% if(hasLookupSelect) { %> LookupSelectComponent, <% } %>
        <% if(hasLookupTypeahead) { %> LookupTypeaheadComponent, <% } %>
        <% if(hasLookupModal) { %> LookupInputComponent, <% } %>
        <% if(hasNavConnections) { %> LookupTypeaheadMtmComponent <% } %>
      ],
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter }
      ],
      templateUrl: './<%= kebab(name) %>-detail.component.html',
      styles: [],
    })
    export class <%= name %>DetailModalComponent {
      public readonly service = inject(<%= name %>DetailViewService);
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__modulePath__\components\__name@kebab__-detail.component.html.template"><![CDATA[
    <abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
      <ng-template #abpHeader>
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <h3>
          <!--<suite-custom-code-block-1>-->
          <!--</suite-custom-code-block-1>-->
          {{ (service.selected ? 'AbpUi::Edit' : '<%= resourceName %>::New<%= name %>') | abpLocalization }}
          <!--<suite-custom-code-block-2>-->
          <!--</suite-custom-code-block-2>-->
        </h3>
        <!--<suite-custom-code-block-3>-->
        <!--</suite-custom-code-block-3>-->
      </ng-template>
    
      <ng-template #abpBody>
        <!--<suite-custom-code-block-4>-->
        <!--</suite-custom-code-block-4>-->
        <form [formGroup]="service.form" id="<%= kebab(name) %>" (ngSubmit)="service.submitForm()" validateOnSubmit>
          <!--<suite-custom-code-block-5>-->
          <!--</suite-custom-code-block-5>-->
          <% if(props?.filter(p => p.showOnModal).length || navProps?.length || navConnections?.length) { %>
          <ul ngbNav #nav="ngbNav" class="nav-tabs">
            <% if(props.length || navProps.length){ %>
            <li ngbNavItem>
              <a ngbNavLink>
                {{ '<%= resourceName %>::<%= name %>' | abpLocalization }}
              </a>
              <ng-template ngbNavContent>
                <div class="mt-2 fade-in-top"><%
                 props.filter(p => p.showOnModal).forEach((prop, i) => {
                  const readonlyOnEditModal = prop.readonlyOnEditModal;
                  if (prop.formControl === 'text') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <% if(prop.ref.IsTextArea) {%>
                    <textarea
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-control"<% if (prop.ref.MaxLength) { %>
                      maxlength="<%= prop.ref.MaxLength %>"<% } if (prop.ref.MinLength) { %>
                      minlength="<%= prop.ref.MinLength %>"<% } if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    >
                    </textarea>
                    <% } else { %>
                    <input
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-control"<% if (prop.ref.MaxLength) { %>
                      maxlength="<%= prop.ref.MaxLength %>"<% } if (prop.ref.MinLength) { %>
                      minlength="<%= prop.ref.MinLength %>"<% } if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    />
                    <% } %>
                  </div><% }
                  else if (prop.formControl === 'checkbox') { %>
                  <div class="form-check mb-3" <%= prop.ngIf  %>>
                    <input
                      type="checkbox"
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-check-input"<% if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    />
    
                    <label
                      for="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      class="form-check-label"
                    >
                        {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
                  </div><% }
                  else if (prop.formControl === 'number') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <input
                      type="number"
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-control"<% if (prop.ref.MaxLength) { %>
                      max="<%= prop.ref.MaxLength %>"<% } if (prop.ref.MinLength) { %>
                      min="<%= prop.ref.MinLength %>"<% } if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    />
                  </div><% }
                  else if (prop.formControl === 'date') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        readonly
                        id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                        formControlName="<%= camel(prop.name) %>"
                        class="form-control"
                        ngbDatepicker
                        #<%= camel(prop.name) %>Input
                        #<%= camel(prop.name) %>Datepicker="ngbDatepicker"
                        (click)="<%= camel(prop.name) %>Datepicker.open()"
                        (keyup.space)="<%= camel(prop.name) %>Datepicker.open()"<% if (!i) { %>
                        autofocus<% } %>
                      />
                      @if (<%= camel(prop.name) %>Input.value) {
                        <div class="input-group-append">
                          <button
                            class="btn btn-link px-2"
                            type="button"
                            <% if (readonlyOnEditModal) { %>
                            [disabled]="service.selected" <% }%>
                            [title]="'AbpUi::Clear' | abpLocalization"
                            (click)="<%= camel(prop.name) %>Datepicker.writeValue(null); <%= camel(prop.name) %>Datepicker.manualDateChange(null, true)"
                          >
                            <i class="fa fa-times" aria-hidden="true"></i>
                          </button>
                        </div>
                      }
                    </div>
                  </div><% }
                  else if (prop.formControl === 'time') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <ngb-timepicker
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      [spinners]="false"
                      [meridian]="true"
                    />
                  </div><% }
                  else if (prop.formControl === 'select') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <select
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-select form-control"<% if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    >
                      <option [ngValue]="null"></option>
                      <option
                        *ngFor="let option of service.<%= camel(prop.enumType) %>Options; trackBy: service.track.by('key')"
                        [ngValue]="option.value"
                      >
                        {{ '<%= resourceName %>::Enum:<%= prop.enumType %>.' + option.value  | abpLocalization }}
                      </option>
                    </select>
                  </div><% }
                  else if (prop.formControl === 'file') { %>
                    <div class="mb-3" <%= prop.ngIf  %>>
                      <label class="form-label" for="<%= kebab(name) %>-<%= kebab(removePostfix(prop.name, 'Id')) %>">
                        {{ '<%= resourceName %>::<%= removePostfix(prop.name, 'Id') %>' | abpLocalization }} <%= prop.asterisk %>
                      </label>
                      @if (
                        !service.selected?<%= navPropsSuffix ? '.' + camel(name) : '' %>.<%= camel(prop.name) %> ||
                        (service.selected?<%= navPropsSuffix ? '.' + camel(name) : '' %>.id && !service.form.value.<%= camel(prop.name) %>) ||
                        (service.selected?<%= navPropsSuffix ? '.' + camel(name) : '' %>.id && service.form.value.<%= camel(prop.name) %> !== service.selected?<%= navPropsSuffix ? '.' + camel(name) : '' %>.<%= camel(prop.name) %>)
                      ) {
                        <input
                          accept="*/*"
                          type="file"
                          class="form-control"
                          id="<%= kebab(name) %>-<%= kebab(removePostfix(prop.name, 'Id')) %>"
                          (change)="service.onFileChange($event, '<%= camel(prop.name) %>', <%= prop.ref.MaxFileSize %> )"
                          <% if (readonlyOnEditModal) { %> [disabled]="service.selected" <% }%>
                        />
                        <% if(prop.asterisk) { %>
                        <input type="hidden" formControlName="<%= camel(prop.name) %>" /><% } %>
                        <p class="text-muted pt-1">
                          <i class="fa fa-info-circle"></i>
                          Max file size: <%= prop.ref.MaxFileSize %>mb
                        </p>
                      } @else {
                        <div class="mb-2">
                          <div class="btn-group" role="group">
                            <button
                              type="button"
                              class="btn btn-primary download-selected-file-btn"
                              (click)="service.downloadFile('<%= camel(prop.name) %>')"
                              <% if (readonlyOnEditModal) { %> [disabled]="service.selected" <% }%>
                            >
                              <i class="fa fa-file-alt"></i>
                            </button>
                            <button
                              type="button"
                              class="btn btn-primary btn-danger"
                              id="remove-selected-<%= kebab(removePostfix(prop.name, 'Id'))%>"
                              (click)="service.removeFile('<%= camel(prop.name) %>')"
                              <% if (readonlyOnEditModal) { %> [disabled]="service.selected" <% }%>
                            >
                              <i class="fa fa-trash"></i>
                            </button>
                          </div>
                        </div>
                      }
                    </div>
                    <% } %> 
                  <% })
                  for (let prop of navProps) { %>
                  <div class="mb-3">
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.entityRef.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label><%
                    if (prop.formControl === 'lookup.select') { %>
                    <abp-lookup-select
                      cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                    ></abp-lookup-select><% }
                    else if (prop.formControl === 'lookup.typeahead') { %>
                    <abp-lookup-typeahead
                      cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                      [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                      [editingData]="service.selected?.<%= camel(prop.entityRef.name) %>"
                    ></abp-lookup-typeahead><% }
                    else if (prop.formControl === 'lookup.modal') { %>
                    <abp-lookup-input
                      cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                      lookupNameProp="displayName"
                      [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                      [editingData]="service.selected?.<%= camel(prop.entityRef.name) %>"
                    ></abp-lookup-input><% } %>
                  </div><% } %>
                </div>
              </ng-template>
            </li><% } 
            for (let prop of navConnections) { %>
            <li ngbNavItem>
              <a ngbNavLink>
                {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
              @if(this.service.form.controls['<%= getLookupName(prop, true) %>s']; as control){
                <span>
                  ({{ control.value?.length }})
                </span>
              }
              </a>
              <ng-template ngbNavContent>
                <abp-lookup-typeahead-mtm
                  cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                  formControlName="<%= getLookupName(prop, true) %>s"
                  displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                  lookupNameProp="displayName"
                  [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                  [editingData]="service.selected?.<%= camel(prop.name) %>"
                ></abp-lookup-typeahead-mtm>
              </ng-template>
            </li><% } %>
          </ul>
          <div [ngbNavOutlet]="nav"></div>
          <% } %>
          <!--<suite-custom-code-block-6>-->
          <!--</suite-custom-code-block-6>-->
        </form>
      </ng-template>
    
      <ng-template #abpFooter>
        <!--<suite-custom-code-block-7>-->
        <!--</suite-custom-code-block-7>-->
        <button type="button" class="btn btn-secondary" abpClose>
          {{ 'AbpUi::Cancel' | abpLocalization }}
        </button>
        <!--<suite-custom-code-block-8>-->
        <!--</suite-custom-code-block-8>-->
        <abp-button iconClass="fa fa-check" buttonType="submit" formName="<%= kebab(name) %>">
          {{ 'AbpUi::Save' | abpLocalization }}
        </abp-button>
        <!--<suite-custom-code-block-9>-->
        <!--</suite-custom-code-block-9>-->
      </ng-template>
    </abp-modal>
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__configPath__\providers\__name@kebab__-route.provider.ts.template"><![CDATA[
    import { inject, provideAppInitializer } from '@angular/core';
    import { ABP, RoutesService } from '@abp/ng.core';
    import { <%= macro(name) %>_BASE_ROUTES } from './<%= kebab(name) %>-base.routes';
    
    export const <%= macro(namespace) %>_<%= macro(name) %>_ROUTE_PROVIDER = [
       provideAppInitializer(() => {
        configureRoutes();
      }),
    ];
    
    function configureRoutes() {
      const routesService = inject(RoutesService);
      const routes: ABP.Route[] = [...<%= macro(name) %>_BASE_ROUTES];
      routesService.add(routes);
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\files\__configPath__\providers\__name@kebab__-base.routes.ts.template"><![CDATA[
    import { ABP, eLayoutType } from '@abp/ng.core';
    <% if (isModule || isMS) { %>
    import { e<%= pascal(project) %>RouteNames } from '../enums/route-names';<% } %>
    
    export const <%= macro(name) %>_BASE_ROUTES: ABP.Route[] = [
      {<%
        if (isModule || isMS) { %>
        path: '/<%= kebab(project) %>/<%= kebab(namePlural) %>',
        parentName: e<%= pascal(project) %>RouteNames.<%= pascal(project) %>,<% }
        else { %>
        path: '/<%= kebab(namePlural) %>',
        iconClass: 'fas <%= menuIcon ? 'fa-'+menuIcon : 'fa-file-alt' %>',<% } %>
        name: '<%= resourceName %>::Menu:<%= namePlural %>',
        layout: eLayoutType.application,
        requiredPolicy: '<%= requiredPolicy %>',
        <% if(entity.PageTitle) { %>breadcrumbText: '<%= resourceName %>::<%= entity.PageTitle %>', <% } %>
      },
    ];
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\services\__name@kebab__-child.service.ts.template"><![CDATA[
    import { Injectable} from '@angular/core';
    import { Abstract<%= name %>ViewService  } from './<%= kebab(name) %>-child.abstract.service';
    
    @Injectable()
    export class <%= name %>ViewService extends Abstract<%= name %>ViewService {}
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\services\__name@kebab__-child.abstract.service.ts.template"><![CDATA[
    <% const hasFileProp = props.filter(p => p.formControl === 'file').length %>
    import { inject, ChangeDetectorRef } from '@angular/core';
    import { filter, switchMap  <%= hasFileProp ? ', map' : '' %>} from 'rxjs/operators';
    import { ABP, <%= hasFileProp ? 'AbpWindowService, EnvironmentService,' :''%> ListService, PagedResultDto } from '@abp/ng.core';
    import { ConfirmationService,Confirmation } from '@abp/ng.theme.shared';
    import type {
      Get<%= name %>ListInput,
      <%= name %><%= navPropsSuffix %>Dto,
    } from '<%= relativePathFromComponentToModel(scope, namespace, projectTemplate) %>';
    import { <%= name %>Service } from '<%= relativePathFromComponentToService(scope, namespace, name, projectTemplate) %>';
    
    export abstract class Abstract<%= name %>ViewService {
      protected readonly cdr = inject(ChangeDetectorRef);
      protected readonly proxyService = inject( <%= name %>Service);
      protected readonly confirmationService = inject(ConfirmationService);
      protected readonly list = inject(ListService);
      <% if(hasFileProp) { %> protected readonly abpWindowService = inject(AbpWindowService);
      protected readonly environmentService = inject(EnvironmentService); <% }%>
    
      <% if(navConnections.length) { %>
      public readonly getWithNavigationProperties = this.proxyService.getWithNavigationProperties;
      <% }%>
    
      data: PagedResultDto<<%= name %><%= navPropsSuffix %>Dto> = {
        items: [],
        totalCount: 0,
      };
    
      delete(record: <%= name %><%= navPropsSuffix %>Dto) {
        this.confirmationService.warn(
          '<%= resourceName %>::DeleteConfirmationMessage',
          '<%= resourceName %>::AreYouSure',
          { messageLocalizationParams: [] }
        ).pipe(
          filter(status => status === Confirmation.Status.confirm),
          switchMap(() => this.proxyService.delete(record.<%= entityNamePrefix %>id)),
        ).subscribe(this.list.get);
      }
    
      hookToQuery(<%= camel(masterEntity.Name) %>Id: <%= masterEntity.PrimaryKeyType %>) {
        const getData = (query: ABP.PageQueryParams) =>
          this.proxyService.<% if(navProps.length > 0) { %>getListWithNavigationPropertiesBy<%= masterEntity.Name %>Id<% } else { %>getListBy<%= masterEntity.Name %>Id<% } %>({
            ...(query as Get<%= name %>ListInput),
            <%= camel(masterEntity.Name) %>Id,
          });
    
        const setData = (list: PagedResultDto<<%= name %><%= navPropsSuffix %>Dto>) => (this.data = list);
    
        this.list.hookToQuery(getData).subscribe(list => {
          setData(list);
          this.cdr.markForCheck();
        })
      }
    
      <% if(hasFileProp) { %> 
      downloadFile(fileId: string): void {
        if (!fileId) {
          return;
        }
      
        this.proxyService
        .getDownloadToken()
        .pipe(map(result => result.token))
        .subscribe(token => {
          this.abpWindowService
            .open(
              `${this.environmentService.getApiUrl('default')}/api/app/<%= kebab(namePlural) %>/file?downloadToken=${token}&fileId=${fileId}`,
              '_blank',
            )
            .focus();
        });
      }
      <% } %>
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\services\__name@kebab__-child-detail.service.ts.template"><![CDATA[
    import { Injectable } from '@angular/core';
    import { Abstract<%= name %>DetailViewService  } from './<%= kebab(name) %>-child-detail.abstract.service';
    
    @Injectable()
    export class <%= name %>DetailViewService extends Abstract<%= name %>DetailViewService  {}
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\services\__name@kebab__-child-detail.abstract.service.ts.template"><![CDATA[
    <% const hasFileProp = props.filter(p => p.formControl === 'file').length %>
    import { inject } from '@angular/core';
    import { FormBuilder, FormGroup, Validators } from '@angular/forms';
    import { ListService, TrackByService, <% if(hasFileProp) { %> AbpWindowService, EnvironmentService <% } %> } from '@abp/ng.core';
    <% if(hasFileProp){  %> import { ConfirmationService } from '@abp/ng.theme.shared'; import { of } from 'rxjs'; <% } %>
    import { finalize, tap, <% if(hasFileProp) { %> map, catchError <% } %> } from 'rxjs/operators';
    <% for (let e of enums) { %>
    import { <%= camel(e.name) %>Options } from '<%= relativePathFromComponentToEnum(scope, namespace, e, projectTemplate) %>';<% } %>
    import type {
      <%= name %><%= navPropsSuffix %>Dto,
    } from '<%= relativePathFromComponentToModel(scope, namespace, projectTemplate) %>';
    import { <%= name %>Service } from '<%= relativePathFromComponentToService(scope, namespace, name, projectTemplate) %>';
    
    export abstract class Abstract<%= name %>DetailViewService {
      protected readonly fb = inject(FormBuilder);
      protected readonly track = inject(TrackByService);
      <% if(hasFileProp) { %> protected readonly abpWindowService = inject(AbpWindowService);
      protected readonly environmentService = inject(EnvironmentService);
      public readonly confirmation = inject(ConfirmationService);
      <% } %>
      public readonly proxyService = inject(<%= name %>Service);
      public readonly list = inject(ListService);
    
      <% for (let prop of navConnections) { %>
      public readonly get<%= prop.entityRef.name %>Lookup = this.proxyService.get<%= prop.entityRef.name %>Lookup;
      <% } %>
    
      <% for (let prop of navProps) { %>
      public readonly get<%= prop.entityRef.name %>Lookup = this.proxyService.get<%= prop.entityRef.name %>Lookup;
      <% } %>
    
      <% for (let e of enums) { %>
      <%= camel(e.name) %>Options = <%= camel(e.name) %>Options;<% } %>
    
      <%= camel(masterEntity.Name) %>Id: <%= masterEntity.PrimaryKeyType %>;
    
      isBusy = false;
      isVisible = false;
      selected = {} as any;
      form: FormGroup | undefined;
    
      <% if(hasFileProp) { %> 
      protected createFileRequest(file) {
        const formData = new FormData();
        formData.append('input', file);
    
        return this.proxyService.uploadFile(formData);
      }
      <% } %>
    
      protected createRequest() {
        if (this.selected) {
          return this.proxyService.update(this.selected.id, <% if(checkConcurrency){ %> { ...this.form.value,  concurrencyStamp: this.selected<%= navPropsSuffix ? '.' + camel(name) : '' %>.concurrencyStamp} <% } else { %> this.form.value <% }%>)
        }
        return this.proxyService.create(this.form.value);
      }
    
      <% const dateProps = props.filter(({readonlyOnEditModal, ref: {Type}}) => !!readonlyOnEditModal && (Type === 'DateTime' || Type === 'DateOnly' || Type === 'TimeOnly')) %>
      <% if(dateProps?.length > 0) { %>
      protected disableControls() {
        [<% for(let prop of dateProps) { %> '<%= camel(prop.name) %>', <% } %>].forEach((prop) => this.form.get(prop)?.disable());
      }
      <% } %>
    
      buildForm() {
        const {<%
          for(let navProp of navProps) { %>
          <%= camel(navProp.name) %>,<% }
          for(let prop of props) { %>
          <%= camel(prop.name) %>,<% }%>
        } = this.selected || {};
        <% if(navConnections.length) { %>
         const {
            <% for(let navProp of navConnections) { %>
            <%= camel(navProp.name) %> = [],<% } %>
         } = this.selected || {};<% } %>
    
        this.form = this.fb.group({
          <%= camel(masterEntity.Name) %>Id: [this.<%= camel(masterEntity.Name) %>Id], <% for(let prop of navConnections) { %>
          <%= getLookupName(prop, true) %>s: [<%= prop.defaultValue %>, [<%= prop.validators.join(', ') %>]],<% } 
          for(let prop of navProps) { %>
          <%= camel(prop.name) %>: [<%= prop.defaultValue %>, [<%= prop.validators.join(', ') %>]],<% } 
          for(let prop of props) { %>
          <%= camel(prop.name) %>: [<%= prop.defaultValue %>, [<%= prop.validators.join(', ') %>]],<% } %>
        });
        <% if(dateProps?.length > 0) { %>
        if(!!this.selected) {
          this.disableControls();
        }
        <% } %>
      }
    
      showForm() {
        this.buildForm();
        this.isVisible = true;
      }
    
      create() {
        this.selected = undefined;
        this.showForm();
      }
    
      update(record: <%= name %><%= navPropsSuffix %>Dto) {
        <% if(navProps.length) { %>
          this.selected = record.<%= camel(name) %>;
          this.showForm();
        <% } else { %>
        this.selected = record;
        this.showForm();
        <% } %>
      }
    
      hideForm() {
        this.isVisible = false;
      }
    
      submitForm() {
        if (this.form.invalid) return;
    
        this.isBusy = true;
    
        const request =  this.createRequest().pipe(
          finalize(() => (this.isBusy = false)),
          tap(() => this.hideForm())
        );
    
        request.subscribe(this.list.get)
      }
    
      changeVisible(isVisible: boolean) {
        this.isVisible = isVisible;
      }
    
      <% if(hasFileProp) { %> 
      downloadFile(propName: string): void {
        if (!this.selected || !propName) {
          return;
        }
    
        const fileId = this.selected[propName];
    
        this.proxyService
        .getDownloadToken()
        .pipe(map(result => result.token))
        .subscribe(token => {
          this.abpWindowService
            .open(
              `${this.environmentService.getApiUrl(
                'default',
              )}/api/app/<%= kebab(namePlural) %>/file?downloadToken=${token}&fileId=${fileId}`,
              '_blank',
            )
            .focus();
        });
      }
    
      onFileChange($event: any, propName: string, maxFileSize: number = 10) {
        if (!$event.target?.files?.length) {
          this.removeFile(propName);
          return;
        }
    
        const file = $event.target.files[0];
    
        if (file.size > maxFileSize * 1024 * 1024) {
          const input = $event.target as HTMLInputElement;
          this.removeFile(propName);
          input.value = null;
          this.confirmation.error(
            <% if(resourceName) { %> <%= resourceName %> + <% } %>
            '::UploadFailedMessage', '', {
            hideCancelBtn: true,
            yesText: 'AbpUi::Ok',
          });
          return;
        }
    
        this.createFileRequest(file)
          .pipe(
            catchError(() => {
              this.confirmation.error(
                <% if(resourceName) { %> <%= resourceName %> + <% } %>
                '::UploadFailedMessage', '', {
                hideCancelBtn: true,
                yesText: 'AbpUi::Ok',
              });
              return of(null);
            })
          )
          .subscribe(response => {
            if (response) {
              this.form.patchValue({ [propName]: response.id });
            }
          });
      }
    
      removeFile(propName) {
        this.form.patchValue({ [propName]: null });
      }
      <% } %>
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\components\__name@kebab__-child.component.ts.template"><![CDATA[
    import { ChangeDetectionStrategy, Component } from '@angular/core';
    import { NgbDateAdapter, NgbCollapseModule, NgbDatepickerModule, NgbDropdownModule <%= navConnections.length ? ',NgbNavModule' : '' %> } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { NgxDatatableModule, SelectionType } from '@swimlane/ngx-datatable';
    import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
    import { DateAdapter, NgxDatatableDefaultDirective, NgxDatatableListDirective } from '@abp/ng.theme.shared';
    import { <%= name %>ViewService } from '../services/<%= kebab(name) %>-child.service';
    import { <%= name %>DetailViewService } from '../services/<%= kebab(name) %>-child-detail.service';
    import { <%= name %>DetailModalComponent } from './<%= kebab(name) %>-child-detail.component';
    import { Abstract<%= name %>Component } from './<%= kebab(name) %>-child.abstract.component';
    
    @Component({
      selector: '<%= selector %>',
      imports:[
        NgbCollapseModule,
        NgbDatepickerModule,
        NgbDropdownModule,
        NgxValidateCoreModule,
        NgxDatatableModule,
        NgxDatatableDefaultDirective,
        NgxDatatableListDirective,
        PermissionDirective,
        LocalizationPipe,
        <%= name %>DetailModalComponent,
        <%= navConnections.length ? 'NgbNavModule,' : '' %>
      ],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        ListService,
        <%= name %>ViewService,
        <%= name %>DetailViewService],
      templateUrl: './<%= kebab(name) %>-child.component.html',
    })
    export class <%= name %>Component extends Abstract<%= name %>Component {}
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\components\__name@kebab__-child.component.html.template"><![CDATA[
    <div class="text-lg-end py-1">
      <!--<suite-custom-code-block-0>-->
      <!--</suite-custom-code-block-0>-->
      <button
        *abpPermission="'<%= requiredPolicy %>.Create'"
        class="btn btn-primary btn-sm"
        type="button"
        (click)="create()"
      >
        <i class="fa fa-plus me-1" aria-hidden="true"></i>
        {{ '<%= resourceName %>::New<%= name %>' | abpLocalization }}
      </button>
      <!--<suite-custom-code-block-1>-->
      <!--</suite-custom-code-block-1>-->
    </div>
    <!--<suite-custom-code-block-2>-->
    <!--</suite-custom-code-block-2>-->
    <ngx-datatable default [list]="list" [rows]="service.data.items" [count]="service.data.totalCount">
      @if(isActionButtonVisible){
      <ngx-datatable-column
        [name]="'AbpUi::Actions' | abpLocalization"
        [maxWidth]="150"
        [width]="150"
        [sortable]="false"
      >
      <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
          <div ngbDropdown container="body" class="d-inline-block">
            <button
              class="btn btn-primary btn-sm dropdown-toggle"
              data-toggle="dropdown"
              aria-haspopup="true"
              ngbDropdownToggle
            >
              <i class="fa fa-cog me-1" aria-hidden="true"></i>
              {{ 'AbpUi::Actions' | abpLocalization }}
            </button>
    
            <div ngbDropdownMenu>
              <button
                ngbDropdownItem
                *abpPermission="'<%= requiredPolicy %>.Edit'"
                (click)="update(row)"
              >
                {{ 'AbpUi::Edit' | abpLocalization }}
              </button>
    
              <button
                ngbDropdownItem
                *abpPermission="'<%= requiredPolicy %>.Delete'"
                (click)="delete(row)"
              >
                {{ 'AbpUi::Delete' | abpLocalization }}
              </button>
            </div>
          </div>
      </ng-template>
    
      <!--<suite-custom-code-block-3>-->
      <!--</suite-custom-code-block-3>-->
      </ngx-datatable-column> }<%
      for (let prop of props) {
        if(!prop.showOnList) { continue; }
        %>
      <ngx-datatable-column name="{{ '<%= resourceName %>::<%= removePostfix(prop.name, 'Id') %>' | abpLocalization }}" prop="<%= entityNamePrefix %><%= camel(prop.name) %>"><%
        if (prop.enumType) { %>
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.<%= entityNamePrefix %><%= camel(prop.name) %> !== null ? ('<%= resourceName %>::Enum:<%= prop.enumType %>.' + row.<%= entityNamePrefix %><%= camel(prop.name) %> | abpLocalization) : '' }}
        </ng-template><% }
        else if (prop.formControl === 'date') { %>
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.<%= entityNamePrefix %><%= camel(prop.name) %> | abpUtcToLocal:'date' }}
        </ng-template><% }
        else if (prop.type === 'boolean') { %>
        <ng-template let-row="row" ngx-datatable-cell-template>
          <ng-template [ngIf]="row.<%= entityNamePrefix %><%= camel(prop.name) %>" [ngIfThen]="yes" [ngIfElse]="no"></ng-template>
    
          <ng-template #yes>
            <div class="text-success">
              <span [title]="'AbpUi::Yes' | abpLocalization">
                <i class="fa fa-check" aria-hidden="true"></i>
              </span>
            </div>
          </ng-template>
    
          <ng-template #no>
            <div class="text-danger">
              <span [title]="'AbpUi::No' | abpLocalization">
                <i class="fa fa-times" aria-hidden="true"></i>
              </span>
            </div>
          </ng-template>
        </ng-template><% }
        else if (prop.formControl === 'file') { %>
          <ng-template let-row="row" ngx-datatable-cell-template>
            @if(<% if(navProps.length > 0 || navConnections.length > 0) { %> row.<%= camel(name) %>.<%= camel(prop.name) %><% } else { %>row.<%= camel(prop.name) %> <% } %>) {
              <span role="button" class="<%= kebab(name) %>-<%= kebab(removePostfix(prop.name, 'Id')) %>-file pe-auto" (click)="service.downloadFile(<% if(navProps.length > 0 || navConnections.length > 0) { %> row.<%= camel(name) %>.<%= camel(prop.name) %><% } else { %>row.<%= camel(prop.name) %> <% } %>)">
                <i class="fa fa-file"></i>
              </span>
            }
          </ng-template><% }
        else { %>
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.<%= entityNamePrefix %><%= camel(prop.name) %> }}
        </ng-template><% } %>
      </ngx-datatable-column><% }
      for (let prop of navProps) { %>
    
      <ngx-datatable-column name="{{ '<%= resourceName %>::<%= prop.entityRef.name %>' | abpLocalization }}" prop="<%= camel(prop.entityRef.name) %>.id">
        <ng-template let-row="row" ngx-datatable-cell-template>
          {{ row.<%= camel(prop.entityRef.name) %>?.<%= camel(prop.entityRef.displayProperty) %> }}
        </ng-template>
      </ngx-datatable-column><% } %>
      <!--<suite-custom-code-block-4>-->
      <!--</suite-custom-code-block-4>-->
    </ngx-datatable>
    
    <!--<suite-custom-code-block-5>-->
    <!--</suite-custom-code-block-5>-->
    
    @defer (when serviceDetail.isVisible) {
      @if (serviceDetail.isVisible) {
        <<%= selector %>-detail-modal />
      }
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\components\__name@kebab__-child.abstract.component.ts.template"><![CDATA[
    import { Directive, OnInit, inject, Input } from '@angular/core';
    import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
    <% for (let e of enums) { %>
    import { <%= camel(e.name) %>Options } from '<%= relativePathFromComponentToEnum(scope, namespace, e, projectTemplate) %>';<% } %>
    import type {
      <%= name %><%= navPropsSuffix %>Dto,
    } from '<%= relativePathFromComponentToModel(scope, namespace, projectTemplate) %>';
    import { <%= name %>ViewService } from '../services/<%= kebab(name) %>-child.service';
    import { <%= name %>DetailViewService } from '../services/<%= kebab(name) %>-child-detail.service';
    
    @Directive()
    export abstract class Abstract<%= name %>Component implements OnInit {
      public readonly list = inject(ListService);
      public readonly track = inject(TrackByService);
      public readonly service = inject(<%= name %>ViewService);
      public readonly serviceDetail = inject(<%= name %>DetailViewService);
      public readonly permissionService = inject(PermissionService);
      
      protected isActionButtonVisible: boolean | null = null;
    
      @Input() title = '<%= resourceName %>::<%= namePlural %>'
      @Input() <%= camel(masterEntity.Name) %>Id: <%= masterEntity.PrimaryKeyType %>;
    
      <% for (let e of enums) { %>
      <%= camel(e.name) %>Options = <%= camel(e.name) %>Options;<% } %>
    
      ngOnInit() {
        this.serviceDetail.<%= camel(masterEntity.Name) %>Id = this.<%= camel(masterEntity.Name) %>Id;
        this.service.hookToQuery(this.<%= camel(masterEntity.Name) %>Id);
        this.checkActionButtonVisibility();
      }
    
      create() {
        this.serviceDetail.selected = undefined;
        this.serviceDetail.showForm();
      }
    
      update(record: <%= name %><%= navPropsSuffix %>Dto) {
        this.serviceDetail.update(record);
      }
    
      delete(record: <%= name %><%= navPropsSuffix %>Dto) {
        this.service.delete(record);
      }
    
      checkActionButtonVisibility() {
        if (this.isActionButtonVisible !== null) {
          return;
        }
    
        const canEdit = this.permissionService.getGrantedPolicy('<%= requiredPolicy %>.Edit');
        const canDelete = this.permissionService.getGrantedPolicy('<%= requiredPolicy %>.Delete');
        this.isActionButtonVisible = canEdit || canDelete;
      }
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\components\__name@kebab__-child-detail.component.ts.template"><![CDATA[
    <% const { hasLookupSelect, hasLookupTypeahead, hasLookupModal } = getLookupComponents %>
    import { CommonModule } from '@angular/common';
    import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
    import { ReactiveFormsModule } from '@angular/forms';
    import { 
      NgbNavModule,
      NgbDatepickerModule,
      NgbTimepickerModule,
      NgbDateAdapter,
      NgbTimeAdapter,
    } from '@ng-bootstrap/ng-bootstrap';
    import { NgxValidateCoreModule } from '@ngx-validate/core';
    import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
    import {
      DateAdapter, 
      TimeAdapter, 
      ModalComponent, 
      ButtonComponent, 
      ModalCloseDirective 
    } from '@abp/ng.theme.shared';
    <% if(hasLookupSelect || hasLookupTypeahead || hasLookupModal) { %>
    import { 
      <% if(hasLookupSelect) { %>LookupSelectComponent, <% } %>
      <% if(hasLookupTypeahead) { %>LookupTypeaheadComponent, <% } %> 
      <% if(hasLookupModal) { %>LookupInputComponent, <% } %> 
    } from '@volo/abp.commercial.ng.ui';
    <% } %>
    import { <%= name %>DetailViewService } from '../services/<%= kebab(name) %>-child-detail.service';
    
    @Component({
      selector: '<%= selector %>-detail-modal',
      imports:[
        CommonModule,
        ReactiveFormsModule,
        NgbDatepickerModule,
        NgbTimepickerModule,
        NgbNavModule,
        NgxValidateCoreModule,
        AutofocusDirective,
        ModalCloseDirective,
        LocalizationPipe,
        ModalComponent,
        ButtonComponent,
        <% if(hasLookupSelect) { %> LookupSelectComponent, <% } %>
        <% if(hasLookupTypeahead) { %> LookupTypeaheadComponent, <% } %>
        <% if(hasLookupModal) { %> LookupInputComponent <% } %>
      ],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter }
      ],
      templateUrl: './<%= kebab(name) %>-child-detail.component.html',
    })
    export class <%= name %>DetailModalComponent {
      public readonly service = inject(<%= name %>DetailViewService);
    }
    
    ]]></file>
  <file path="angular\.suite\schematics\commands\generate-entity\child-files\__modulePath__\components\__name@kebab__-child-detail.component.html.template"><![CDATA[
    <abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
      <ng-template #abpHeader>
        <!--<suite-custom-code-block-0>-->
        <!--</suite-custom-code-block-0>-->
        <h3>
         <!--<suite-custom-code-block-1>-->
         <!--</suite-custom-code-block-1>-->
         {{ (service.selected ? 'AbpUi::Edit' : '<%= resourceName %>::New<%= name %>') | abpLocalization }}
         <!--<suite-custom-code-block-2>-->
         <!--</suite-custom-code-block-2>-->
        </h3>
         <!--<suite-custom-code-block-3>-->
         <!--</suite-custom-code-block-3>-->
      </ng-template>
    
      <ng-template #abpBody>
        <!--<suite-custom-code-block-4>-->
        <!--</suite-custom-code-block-4>-->
        <form [formGroup]="service.form" id="<%= kebab(name) %>" (ngSubmit)="service.submitForm()" validateOnSubmit>
          <!--<suite-custom-code-block-5>-->
          <!--</suite-custom-code-block-5>-->
          <% if(props.filter(p => p.showOnModal).length || navProps.length) { %>
          <ul ngbNav #nav="ngbNav" class="nav-tabs">
            <li ngbNavItem>
              <a ngbNavLink>
                {{ '<%= resourceName %>::<%= name %>' | abpLocalization }}
              </a>
              <ng-template ngbNavContent>
                <div class="mt-2 fade-in-top"><%
                  props.filter(p => p.showOnModal).forEach((prop, i) => {
                  const readonlyOnEditModal = prop.readonlyOnEditModal;
                  if (prop.formControl === 'text') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <% if(prop.ref.IsTextArea) {%>
                    <textarea
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-control"<% if (prop.ref.MaxLength) { %>
                      maxlength="<%= prop.ref.MaxLength %>"<% } if (prop.ref.MinLength) { %>
                      minlength="<%= prop.ref.MinLength %>"<% } if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    >
                    </textarea>
                    <% } else { %>
                    <input
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-control"<% if (prop.ref.MaxLength) { %>
                      maxlength="<%= prop.ref.MaxLength %>"<% } if (prop.ref.MinLength) { %>
                      minlength="<%= prop.ref.MinLength %>"<% } if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    />
                    <% } %>
                  </div><% }
                  else if (prop.formControl === 'checkbox') { %>
                  <div class="form-check mb-3" <%= prop.ngIf  %>>
                    <input
                      type="checkbox"
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-check-input"<% if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    />
    
                    <label
                      for="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      class="form-check-label"
                    >
                        {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
                  </div><% }
                  else if (prop.formControl === 'number') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <input
                      type="number"
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-control"<% if (prop.ref.MaxLength) { %>
                      max="<%= prop.ref.MaxLength %>"<% } if (prop.ref.MinLength) { %>
                      min="<%= prop.ref.MinLength %>"<% } if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    />
                  </div><% }
                  else if (prop.formControl === 'date') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <div class="input-group" validationTarget>
                      <input
                        readonly
                        id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                        formControlName="<%= camel(prop.name) %>"
                        class="form-control"
                        ngbDatepicker
                        #<%= camel(prop.name) %>Input
                        #<%= camel(prop.name) %>Datepicker="ngbDatepicker"
                        (click)="<%= camel(prop.name) %>Datepicker.open()"
                        (keyup.space)="<%= camel(prop.name) %>Datepicker.open()"<% if (!i) { %>
                        autofocus<% } %>
                      />
                      <div *ngIf="<%= camel(prop.name) %>Input.value" class="input-group-append">
                        <button
                          class="btn btn-link px-2"
                          type="button"
                          <% if (readonlyOnEditModal) { %>
                          [disabled]="service.selected" <% }%>
                          [title]="'AbpUi::Clear' | abpLocalization"
                          (click)="<%= camel(prop.name) %>Datepicker.writeValue(null); <%= camel(prop.name) %>Datepicker.manualDateChange(null, true)"
                        >
                          <i class="fa fa-times" aria-hidden="true"></i>
                        </button>
                      </div>
                    </div>
                  </div><% }
                  else if (prop.formControl === 'time') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <ngb-timepicker
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      [spinners]="false"
                      [meridian]="true"
                    />
                  </div><% }
                  else if (prop.formControl === 'select') { %>
                  <div class="mb-3" <%= prop.ngIf  %>>
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label>
    
                    <select
                      id="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      class="form-select form-control"<% if (!i) { %>
                      autofocus<% } if (readonlyOnEditModal) { %>
                      [readonly]="service.selected" <% }%>
                    >
                      <option [ngValue]="null"></option>
                      <option
                        *ngFor="let option of service.<%= camel(prop.enumType) %>Options; trackBy: service.track.by('key')"
                        [ngValue]="option.value"
                      >
                        {{ '<%= resourceName %>::Enum:<%= prop.enumType %>.' + option.value  | abpLocalization }}
                      </option>
                    </select>
                  </div><% }
                  else if (prop.formControl === 'file') { %>
                    <div class="mb-3" <%= prop.ngIf  %>>
                      <label class="form-label" for="<%= kebab(name) %>-<%= kebab(removePostfix(prop.name, 'Id')) %>">
                        {{ '<%= resourceName %>::<%= removePostfix(prop.name, 'Id') %>' | abpLocalization }} <%= prop.asterisk %>
                      </label>
                      @if (
                        !service.selected?.<%= camel(prop.name) %> ||
                        (service.selected?.id && !service.form.value.<%= camel(prop.name) %>) ||
                        (service.selected.id && service.form.value.<%= camel(prop.name) %> !== service.selected.<%= camel(prop.name) %>)
                      ) {
                        <input
                          accept="*/*"
                          type="file"
                          class="form-control"
                          id="<%= kebab(name) %>-<%= kebab(removePostfix(prop.name, 'Id')) %>"
                          (change)="service.onFileChange($event, '<%= camel(prop.name) %>')"
                          <% if (readonlyOnEditModal) { %> [disabled]="service.selected" <% }%>
                        />
                        <% if(prop.asterisk) { %>
                        <input type="hidden" formControlName="<%= camel(prop.name) %>" /><% } %>
                        <p class="text-muted pt-1">
                          <i class="fa fa-info-circle"></i>
                          Max file size: <%= prop.ref.MaxFileSize %>mb
                        </p>
                      } @else {
                        <div class="mb-2">
                          <div class="btn-group" role="group">
                            <button
                              type="button"
                              class="btn btn-primary download-selected-file-btn"
                              (click)="service.downloadFile('<%= camel(prop.name) %>')"
                              <% if (readonlyOnEditModal) { %> [disabled]="service.selected" <% }%>
                            >
                              <i class="fa fa-file-alt"></i>
                            </button>
                            <button
                              type="button"
                              class="btn btn-primary btn-danger"
                              id="remove-selected-<%= kebab(removePostfix(prop.name, 'Id'))%>"
                              (click)="service.removeFile('<%= camel(prop.name) %>')"
                              <% if (readonlyOnEditModal) { %> [disabled]="service.selected" <% }%>
                            >
                              <i class="fa fa-trash"></i>
                            </button>
                          </div>
                        </div>
                      }
                    </div><% } %> 
                  <% }) 
                  for (let prop of navProps) { %>
                  <div class="mb-3">
                    <label class="form-label" for="<%= kebab(name) %>-<%= kebab(prop.name) %>">
                      {{ '<%= resourceName %>::<%= prop.entityRef.name %>' | abpLocalization }} <%= prop.asterisk %>
                    </label><%
                    if (prop.formControl === 'lookup.select') { %>
                    <abp-lookup-select
                      cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                    /><% }
                    else if (prop.formControl === 'lookup.typeahead') { %>
                    <abp-lookup-typeahead
                      cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                      [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                      [editingData]="service.selected?.<%= camel(prop.entityRef.name) %>"
                    /><% }
                    else if (prop.formControl === 'lookup.modal') { %>
                    <abp-lookup-input
                      cid="<%= kebab(name) %>-<%= kebab(prop.name) %>"
                      formControlName="<%= camel(prop.name) %>"
                      displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                      lookupNameProp="displayName"
                      [getFn]="service.get<%= prop.entityRef.name %>Lookup"
                      [editingData]="service.selected?.<%= camel(prop.entityRef.name) %>"
                    /><% } %>
                  </div><% } %>
                </div>
              </ng-template>
            </li>
          </ul>
          <div [ngbNavOutlet]="nav"></div>
          <% } %>
          <!--<suite-custom-code-block-6>-->
          <!--</suite-custom-code-block-6>-->
        </form>
      </ng-template>
    
      <ng-template #abpFooter>
        <!--<suite-custom-code-block-7>-->
        <!--</suite-custom-code-block-7>-->
        <button type="button" class="btn btn-secondary" abpClose>
          {{ 'AbpUi::Cancel' | abpLocalization }}
        </button>
        <!--<suite-custom-code-block-8>-->
        <!--</suite-custom-code-block-8>-->
        <abp-button iconClass="fa fa-check" buttonType="submit" formName="<%= kebab(name) %>">
          {{ 'AbpUi::Save' | abpLocalization }}
        </abp-button>
        <!--<suite-custom-code-block-9>-->
        <!--</suite-custom-code-block-9>-->
      </ng-template>
    </abp-modal>
    
    ]]></file>
</files>
