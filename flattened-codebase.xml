<?xml version="1.0" encoding="UTF-8"?>
<files>
	<file path='.editorconfig'>
		[*.csproj]
		indent_size = 2</file>
	<file path='.filenesting.json'>
		{
		  "help": "https://go.microsoft.com/fwlink/?linkid=866610",
		  "root": true,
		
		  "dependentFileProviders": {
		    "add": {
		      "addedExtension": {},
		      "pathSegment": {
		        "add": {
		          ".*": [
		            ".js",
		            ".css",
		            ".html",
		            ".htm",
		            ".less",
		            ".scss",
		            ".coffee",
		            ".iced",
		            ".config",
		            ".cs",
		            ".vb",
		            ".json"
		          ],
		          ".Extended.cs": [
		            ".cs"
		          ],
		          ".Extended.cshtml.cs": [
		            ".cs"
		          ],
		          ".Extended.razor.cs": [
		            ".cs"
		          ]
		        }
		      },
		      "extensionToExtension": {
		        "add": {
		          ".js": [
		            ".coffee",
		            ".iced",
		            ".ts",
		            ".tsx",
		            ".jsx"
		          ],
		          ".css": [
		            ".less",
		            ".scss",
		            ".sass",
		            ".styl"
		          ],
		          ".html": [
		            ".md",
		            ".mdown",
		            ".markdown",
		            ".mdwn"
		          ],
		          ".map": [
		            ".js",
		            ".css"
		          ],
		          ".svgz": [
		            ".svg"
		          ],
		          ".designer.cs": [
		            ".resx"
		          ],
		          ".cs.d.ts": [
		            ".cs"
		          ],
		          ".Extended.razor.cs": [
		            ".razor"
		          ]
		        }
		      },
		      "fileToFile": {
		        "add": {
		          ".bowerrc": [
		            "bower.json"
		          ],
		          ".npmrc": [
		            "package.json"
		          ],
		          "npm-shrinkwrap.json": [
		            "package.json"
		          ],
		          "yarn.lock": [
		            "package.json"
		          ],
		          ".yarnclean": [
		            "package.json"
		          ],
		          ".yarnignore": [
		            "package.json"
		          ],
		          ".yarn-integrity": [
		            "package.json"
		          ],
		          ".yarnrc": [
		            "package.json"
		          ],
		          "package-lock.json": [
		            "package.json"
		          ]
		        }
		      },
		      "fileSuffixToExtension": {
		        "add": {
		          "-vsdoc.js": [
		            ".js"
		          ]
		        }
		      },
		      "allExtensions": {
		        "add": {
		        }
		      }
		    }
		  }
		}</file>
	<file path='.gitattributes'>
		**/wwwroot/libs/** linguist-vendored</file>
	<file path='.gitignore'><![CDATA[
		## Ignore Visual Studio temporary files, build results, and
		## files generated by popular Visual Studio add-ons.
		
		# User-specific files
		*.suo
		*.user
		*.userosscache
		*.sln.docstates
		
		# User-specific files (MonoDevelop/Xamarin Studio)
		*.userprefs
		
		# Build results
		[Dd]ebug/
		[Dd]ebugPublic/
		[Rr]elease/
		[Rr]eleases/
		x64/
		x86/
		bld/
		[Bb]in/
		[Oo]bj/
		[Ll]og/
		
		# Visual Studio 2015 cache/options directory
		.vs/
		# Uncomment if you have tasks that create the project's static files in wwwroot
		#wwwroot/
		
		# MSTest test Results
		[Tt]est[Rr]esult*/
		[Bb]uild[Ll]og.*
		
		# NUNIT
		*.VisualState.xml
		TestResult.xml
		
		# Build Results of an ATL Project
		[Dd]ebugPS/
		[Rr]eleasePS/
		dlldata.c
		
		# DNX
		project.lock.json
		artifacts/
		
		*_i.c
		*_p.c
		*_i.h
		*.ilk
		*.meta
		*.obj
		*.pch
		*.pdb
		*.pgc
		*.pgd
		*.rsp
		*.sbr
		*.tlb
		*.tli
		*.tlh
		*.tmp
		*.tmp_proj
		*.log
		*.vspscc
		*.vssscc
		.builds
		*.pidb
		*.svclog
		*.scc
		
		# Chutzpah Test files
		_Chutzpah*
		
		# Visual C++ cache files
		ipch/
		*.aps
		*.ncb
		*.opendb
		*.opensdf
		*.sdf
		*.cachefile
		*.VC.db
		*.VC.VC.opendb
		
		# Visual Studio profiler
		*.psess
		*.vsp
		*.vspx
		*.sap
		
		# TFS 2012 Local Workspace
		$tf/
		
		# Guidance Automation Toolkit
		*.gpState
		
		# ReSharper is a .NET coding add-in
		_ReSharper*/
		*.[Rr]e[Ss]harper
		*.DotSettings.user
		
		# JustCode is a .NET coding add-in
		.JustCode
		
		# TeamCity is a build add-in
		_TeamCity*
		
		# DotCover is a Code Coverage Tool
		*.dotCover
		
		# NCrunch
		_NCrunch_*
		.*crunch*.local.xml
		nCrunchTemp_*
		
		# MightyMoose
		*.mm.*
		AutoTest.Net/
		
		# Web workbench (sass)
		.sass-cache/
		
		# Installshield output folder
		[Ee]xpress/
		
		# DocProject is a documentation generator add-in
		DocProject/buildhelp/
		DocProject/Help/*.HxT
		DocProject/Help/*.HxC
		DocProject/Help/*.hhc
		DocProject/Help/*.hhk
		DocProject/Help/*.hhp
		DocProject/Help/Html2
		DocProject/Help/html
		
		# Click-Once directory
		publish/
		
		# Publish Web Output
		*.[Pp]ublish.xml
		*.azurePubxml
		# TODO: Comment the next line if you want to checkin your web deploy settings
		# but database connection strings (with potential passwords) will be unencrypted
		*.pubxml
		*.publishproj
		
		# Microsoft Azure Web App publish settings. Comment the next line if you want to
		# checkin your Azure Web App publish settings, but sensitive information contained
		# in these scripts will be unencrypted
		PublishScripts/
		
		# NuGet Packages
		*.nupkg
		# The packages folder can be ignored because of Package Restore
		**/packages/*
		# except build/, which is used as an MSBuild target.
		!**/packages/build/
		# Uncomment if necessary however generally it will be regenerated when needed
		#!**/packages/repositories.config
		# NuGet v3's project.json files produces more ignoreable files
		*.nuget.props
		*.nuget.targets
		
		# Microsoft Azure Build Output
		csx/
		*.build.csdef
		
		# Microsoft Azure Emulator
		ecf/
		rcf/
		
		# Windows Store app package directories and files
		AppPackages/
		BundleArtifacts/
		Package.StoreAssociation.xml
		_pkginfo.txt
		
		# Visual Studio cache files
		# files ending in .cache can be ignored
		*.[Cc]ache
		# but keep track of directories ending in .cache
		!*.[Cc]ache/
		
		# Others
		ClientBin/
		~$*
		*~
		*.dbmdl
		*.dbproj.schemaview
		*.pfx
		*.publishsettings
		node_modules/
		orleans.codegen.cs
		
		# Since there are multiple workflows, uncomment next line to ignore bower_components
		# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
		#bower_components/
		
		# RIA/Silverlight projects
		Generated_Code/
		
		# Backup & report files from converting an old project file
		# to a newer Visual Studio version. Backup files are not needed,
		# because we have git ;-)
		_UpgradeReport_Files/
		Backup*/
		UpgradeLog*.XML
		UpgradeLog*.htm
		
		# SQL Server files
		*.mdf
		*.ldf
		
		# Business Intelligence projects
		*.rdl.data
		*.bim.layout
		*.bim_*.settings
		
		# Microsoft Fakes
		FakesAssemblies/
		
		# GhostDoc plugin setting file
		*.GhostDoc.xml
		
		# Node.js Tools for Visual Studio
		.ntvs_analysis.dat
		
		# Visual Studio 6 build log
		*.plg
		
		# Visual Studio 6 workspace options file
		*.opt
		
		# Visual Studio LightSwitch build output
		**/*.HTMLClient/GeneratedArtifacts
		**/*.DesktopClient/GeneratedArtifacts
		**/*.DesktopClient/ModelManifest.xml
		**/*.Server/GeneratedArtifacts
		**/*.Server/ModelManifest.xml
		_Pvt_Extensions
		
		# Paket dependency manager
		.paket/paket.exe
		paket-files/
		
		# FAKE - F# Make
		.fake/
		
		# JetBrains Rider
		**/.idea/
		*.sln.iml
		
		# ABP Studio
		**/.abpstudio/
		
		# ExampleAbpApplicationLayer
		src/ExampleAbpApplicationLayer.Web/Logs/*
		src/ExampleAbpApplicationLayer.Web.Host/Logs/*
		src/ExampleAbpApplicationLayer.Web.Public/Logs/*
		src/ExampleAbpApplicationLayer.Web.Public.Host/Logs/*
		src/ExampleAbpApplicationLayer.AuthServer/Logs/*
		src/ExampleAbpApplicationLayer.HttpApi.Host/Logs/*
		src/ExampleAbpApplicationLayer.HttpApi.Host/Logs/*
		src/ExampleAbpApplicationLayer.DbMigrator/Logs/*
		src/ExampleAbpApplicationLayer.Blazor.Server/Logs/*
		src/ExampleAbpApplicationLayer.Blazor.Server.Tiered/Logs/*
		
		# Use abp install-libs to restore.
		**/wwwroot/libs/*
		
		# IdentityServer temp files
		tempkey.rsa
		tempkey.jwk]]></file>
	<file path='.suite\entities\Order.json'><![CDATA[
		{
		  "Id": "5ae7091c-e271-4e74-a469-a4f63e0d8118",
		  "Name": "Order",
		  "OriginalName": "Order",
		  "NamePlural": "Orders",
		  "DatabaseTableName": "Orders",
		  "Namespace": "Orders",
		  "Type": 1,
		  "MasterEntityName": null,
		  "MasterEntity": null,
		  "BaseClass": "FullAuditedAggregateRoot",
		  "PageTitle": "Orders",
		  "MenuIcon": "file-alt",
		  "PrimaryKeyType": "Guid",
		  "PreserveCustomCode": true,
		  "IsMultiTenant": true,
		  "CheckConcurrency": true,
		  "BulkDeleteEnabled": false,
		  "ShouldCreateUserInterface": true,
		  "ShouldCreateBackend": true,
		  "ShouldExportExcel": true,
		  "ShouldAddMigration": true,
		  "ShouldUpdateDatabase": false,
		  "CreateTests": true,
		  "Properties": [
		    {
		      "Id": "8510c2c8-974c-4391-a1b6-4068243e248e",
		      "Name": "OrderDate",
		      "Type": "DateTime",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": null,
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "22eed0de-9129-4767-9a76-96eea378e280",
		      "Name": "TotalAmount",
		      "Type": "float",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": "0",
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "44c5862c-ae78-4593-9602-cf13aeca3d60",
		      "Name": "Status",
		      "Type": "enum",
		      "EnumType": "OrderStatus",
		      "EnumNamespace": "ExampleAbpApplicationLayer.Enums.Orders",
		      "EnumAngularImport": "shared/enums/order-status",
		      "EnumFilePath": "/src/ExampleAbpApplicationLayer.Domain.Shared/Enum/Orders/OrderStatus.cs",
		      "DefaultValue": null,
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": {
		        "Initialized": 0,
		        "Paid": 1,
		        "Processing": 2,
		        "Ordered": 3,
		        "Shipped": 4,
		        "Arrived": 5,
		        "Delivered": 6,
		        "Cancelled": 7,
		        "NotPaid": 8
		      },
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    }
		  ],
		  "NavigationProperties": [
		    {
		      "EntityNameWithDuplicationNumber": "IdentityUser",
		      "EntitySetNameWithDuplicationNumber": "IdentityUsers",
		      "ReferencePropertyName": "IdentityUser",
		      "UiPickType": "Dropdown",
		      "IsRequired": false,
		      "IncludeEntitiesFromModules": true,
		      "FromAbpModule": true,
		      "Name": "IdentityUserId",
		      "DisplayProperty": "UserName",
		      "Namespace": "Volo.Abp.Identity",
		      "EntityName": "IdentityUser",
		      "EntitySetName": "IdentityUsers",
		      "DtoNamespace": "Volo.Abp.Identity",
		      "DtoEntityName": "IdentityUserDto",
		      "Type": "Guid",
		      "IsFilterable": true
		    }
		  ],
		  "NavigationConnections": [],
		  "ChildEntities": [
		    {
		      "Id": "4e63f026-1218-4131-8892-99fbbf105565",
		      "Name": "OrderItem",
		      "OriginalName": "OrderItem",
		      "NamePlural": "OrderItems",
		      "DatabaseTableName": "OrderItems",
		      "Namespace": "OrderItems",
		      "Type": 2,
		      "MasterEntityName": "Order.cs",
		      "MasterEntity": {
		        "Id": "5ae7091c-e271-4e74-a469-a4f63e0d8118",
		        "Name": "Order",
		        "OriginalName": "Order",
		        "NamePlural": "Orders",
		        "DatabaseTableName": "Orders",
		        "Namespace": "Orders",
		        "Type": 1,
		        "MasterEntityName": null,
		        "MasterEntity": null,
		        "BaseClass": "FullAuditedAggregateRoot",
		        "PageTitle": "Orders",
		        "MenuIcon": "file-alt",
		        "PrimaryKeyType": "Guid",
		        "PreserveCustomCode": true,
		        "IsMultiTenant": true,
		        "CheckConcurrency": true,
		        "BulkDeleteEnabled": false,
		        "ShouldCreateUserInterface": true,
		        "ShouldCreateBackend": true,
		        "ShouldExportExcel": true,
		        "ShouldAddMigration": true,
		        "ShouldUpdateDatabase": false,
		        "CreateTests": true,
		        "Properties": [
		          {
		            "Id": "8510c2c8-974c-4391-a1b6-4068243e248e",
		            "Name": "OrderDate",
		            "Type": "DateTime",
		            "EnumType": "",
		            "EnumNamespace": "",
		            "EnumAngularImport": "shared/enums",
		            "EnumFilePath": null,
		            "DefaultValue": null,
		            "IsNullable": false,
		            "IsRequired": false,
		            "IsFilterable": true,
		            "AllowEmptyStrings": false,
		            "IsTextArea": false,
		            "MinLength": null,
		            "MaxLength": null,
		            "SortOrder": 0,
		            "SortType": 0,
		            "Regex": "",
		            "EmailValidation": false,
		            "ShowOnList": true,
		            "ShowOnCreateModal": true,
		            "ShowOnEditModal": true,
		            "ReadonlyOnEditModal": false,
		            "EnumValues": null,
		            "IsSelected": true,
		            "MaxFileSize": null,
		            "OrdinalIndex": 0
		          },
		          {
		            "Id": "22eed0de-9129-4767-9a76-96eea378e280",
		            "Name": "TotalAmount",
		            "Type": "float",
		            "EnumType": "",
		            "EnumNamespace": "",
		            "EnumAngularImport": "shared/enums",
		            "EnumFilePath": null,
		            "DefaultValue": "0",
		            "IsNullable": false,
		            "IsRequired": false,
		            "IsFilterable": true,
		            "AllowEmptyStrings": false,
		            "IsTextArea": false,
		            "MinLength": null,
		            "MaxLength": null,
		            "SortOrder": 0,
		            "SortType": 0,
		            "Regex": "",
		            "EmailValidation": false,
		            "ShowOnList": true,
		            "ShowOnCreateModal": true,
		            "ShowOnEditModal": true,
		            "ReadonlyOnEditModal": false,
		            "EnumValues": null,
		            "IsSelected": true,
		            "MaxFileSize": null,
		            "OrdinalIndex": 0
		          },
		          {
		            "Id": "44c5862c-ae78-4593-9602-cf13aeca3d60",
		            "Name": "Status",
		            "Type": "enum",
		            "EnumType": "OrderStatus",
		            "EnumNamespace": "ExampleAbpApplicationLayer.Enums.Orders",
		            "EnumAngularImport": "shared/enums/order-status",
		            "EnumFilePath": "/src/ExampleAbpApplicationLayer.Domain.Shared/Enum/Orders/OrderStatus.cs",
		            "DefaultValue": null,
		            "IsNullable": false,
		            "IsRequired": false,
		            "IsFilterable": true,
		            "AllowEmptyStrings": false,
		            "IsTextArea": false,
		            "MinLength": null,
		            "MaxLength": null,
		            "SortOrder": 0,
		            "SortType": 0,
		            "Regex": "",
		            "EmailValidation": false,
		            "ShowOnList": true,
		            "ShowOnCreateModal": true,
		            "ShowOnEditModal": true,
		            "ReadonlyOnEditModal": false,
		            "EnumValues": {
		              "Initialized": 0,
		              "Paid": 1,
		              "Processing": 2,
		              "Ordered": 3,
		              "Shipped": 4,
		              "Arrived": 5,
		              "Delivered": 6,
		              "Cancelled": 7,
		              "NotPaid": 8
		            },
		            "IsSelected": true,
		            "MaxFileSize": null,
		            "OrdinalIndex": 0
		          }
		        ],
		        "NavigationProperties": [],
		        "NavigationConnections": [],
		        "ChildEntities": [],
		        "PhysicalFileName": "Order.json"
		      },
		      "BaseClass": "FullAuditedEntity",
		      "PageTitle": "OrderItems",
		      "MenuIcon": "<none>",
		      "PrimaryKeyType": "Guid",
		      "PreserveCustomCode": true,
		      "IsMultiTenant": true,
		      "CheckConcurrency": false,
		      "BulkDeleteEnabled": false,
		      "ShouldCreateUserInterface": false,
		      "ShouldCreateBackend": true,
		      "ShouldExportExcel": false,
		      "ShouldAddMigration": true,
		      "ShouldUpdateDatabase": false,
		      "CreateTests": false,
		      "Properties": [
		        {
		          "Id": "c0d25a75-6f71-4cce-a812-2a460d96012c",
		          "Name": "Qty",
		          "Type": "int",
		          "EnumType": "",
		          "EnumNamespace": "",
		          "EnumAngularImport": "shared/enums",
		          "EnumFilePath": null,
		          "DefaultValue": "1",
		          "IsNullable": false,
		          "IsRequired": false,
		          "IsFilterable": true,
		          "AllowEmptyStrings": false,
		          "IsTextArea": false,
		          "MinLength": null,
		          "MaxLength": null,
		          "SortOrder": 0,
		          "SortType": 0,
		          "Regex": "",
		          "EmailValidation": false,
		          "ShowOnList": true,
		          "ShowOnCreateModal": true,
		          "ShowOnEditModal": true,
		          "ReadonlyOnEditModal": false,
		          "EnumValues": null,
		          "IsSelected": true,
		          "MaxFileSize": null,
		          "OrdinalIndex": 0
		        },
		        {
		          "Id": "db2ff822-2339-4a77-ab47-48b722490e3e",
		          "Name": "Price",
		          "Type": "float",
		          "EnumType": "",
		          "EnumNamespace": "",
		          "EnumAngularImport": "shared/enums",
		          "EnumFilePath": null,
		          "DefaultValue": "0",
		          "IsNullable": false,
		          "IsRequired": false,
		          "IsFilterable": true,
		          "AllowEmptyStrings": false,
		          "IsTextArea": false,
		          "MinLength": null,
		          "MaxLength": null,
		          "SortOrder": 0,
		          "SortType": 0,
		          "Regex": "",
		          "EmailValidation": false,
		          "ShowOnList": true,
		          "ShowOnCreateModal": true,
		          "ShowOnEditModal": true,
		          "ReadonlyOnEditModal": false,
		          "EnumValues": null,
		          "IsSelected": true,
		          "MaxFileSize": null,
		          "OrdinalIndex": 0
		        },
		        {
		          "Id": "feca3529-fbf3-4481-ac79-fd289724a559",
		          "Name": "TotalPrice",
		          "Type": "float",
		          "EnumType": "",
		          "EnumNamespace": "",
		          "EnumAngularImport": "shared/enums",
		          "EnumFilePath": null,
		          "DefaultValue": null,
		          "IsNullable": false,
		          "IsRequired": false,
		          "IsFilterable": true,
		          "AllowEmptyStrings": false,
		          "IsTextArea": false,
		          "MinLength": null,
		          "MaxLength": null,
		          "SortOrder": 0,
		          "SortType": 0,
		          "Regex": "",
		          "EmailValidation": false,
		          "ShowOnList": true,
		          "ShowOnCreateModal": true,
		          "ShowOnEditModal": true,
		          "ReadonlyOnEditModal": false,
		          "EnumValues": null,
		          "IsSelected": true,
		          "MaxFileSize": null,
		          "OrdinalIndex": 0
		        },
		        {
		          "Id": "40259171-cb2b-4448-9675-8b5f2db5d780",
		          "Name": "ProductName",
		          "Type": "string",
		          "EnumType": "",
		          "EnumNamespace": "",
		          "EnumAngularImport": "shared/enums",
		          "EnumFilePath": null,
		          "DefaultValue": null,
		          "IsNullable": false,
		          "IsRequired": false,
		          "IsFilterable": false,
		          "AllowEmptyStrings": false,
		          "IsTextArea": false,
		          "MinLength": null,
		          "MaxLength": null,
		          "SortOrder": 0,
		          "SortType": 0,
		          "Regex": "",
		          "EmailValidation": false,
		          "ShowOnList": true,
		          "ShowOnCreateModal": true,
		          "ShowOnEditModal": true,
		          "ReadonlyOnEditModal": false,
		          "EnumValues": null,
		          "IsSelected": true,
		          "MaxFileSize": null,
		          "OrdinalIndex": 0
		        }
		      ],
		      "NavigationProperties": [
		        {
		          "EntityNameWithDuplicationNumber": "Product",
		          "EntitySetNameWithDuplicationNumber": "Products",
		          "ReferencePropertyName": "Product",
		          "UiPickType": "Dropdown",
		          "IsRequired": true,
		          "IncludeEntitiesFromModules": false,
		          "FromAbpModule": false,
		          "Name": "ProductId",
		          "DisplayProperty": "Name",
		          "Namespace": "ExampleAbpApplicationLayer.Products",
		          "EntityName": "Product",
		          "EntitySetName": "Products",
		          "DtoNamespace": "ExampleAbpApplicationLayer.Products",
		          "DtoEntityName": "ProductDto",
		          "Type": "Guid",
		          "IsFilterable": true
		        }
		      ],
		      "NavigationConnections": [],
		      "ChildEntities": [],
		      "PhysicalFileName": "OrderItem.json"
		    }
		  ],
		  "PhysicalFileName": "Order.json"
		}]]></file>
	<file path='.suite\entities\OrderItem.json'><![CDATA[
		{
		  "Id": "4e63f026-1218-4131-8892-99fbbf105565",
		  "Name": "OrderItem",
		  "OriginalName": "OrderItem",
		  "NamePlural": "OrderItems",
		  "DatabaseTableName": "OrderItems",
		  "Namespace": "OrderItems",
		  "Type": 2,
		  "MasterEntityName": "Order.cs",
		  "MasterEntity": {
		    "Id": "5ae7091c-e271-4e74-a469-a4f63e0d8118",
		    "Name": "Order",
		    "OriginalName": "Order",
		    "NamePlural": "Orders",
		    "DatabaseTableName": "Orders",
		    "Namespace": "Orders",
		    "Type": 1,
		    "MasterEntityName": null,
		    "MasterEntity": null,
		    "BaseClass": "FullAuditedAggregateRoot",
		    "PageTitle": "Orders",
		    "MenuIcon": "file-alt",
		    "PrimaryKeyType": "Guid",
		    "PreserveCustomCode": true,
		    "IsMultiTenant": true,
		    "CheckConcurrency": true,
		    "BulkDeleteEnabled": false,
		    "ShouldCreateUserInterface": true,
		    "ShouldCreateBackend": true,
		    "ShouldExportExcel": true,
		    "ShouldAddMigration": true,
		    "ShouldUpdateDatabase": false,
		    "CreateTests": true,
		    "Properties": [
		      {
		        "Id": "8510c2c8-974c-4391-a1b6-4068243e248e",
		        "Name": "OrderDate",
		        "Type": "DateTime",
		        "EnumType": "",
		        "EnumNamespace": "",
		        "EnumAngularImport": "shared/enums",
		        "EnumFilePath": null,
		        "DefaultValue": null,
		        "IsNullable": false,
		        "IsRequired": false,
		        "IsFilterable": true,
		        "AllowEmptyStrings": false,
		        "IsTextArea": false,
		        "MinLength": null,
		        "MaxLength": null,
		        "SortOrder": 0,
		        "SortType": 0,
		        "Regex": "",
		        "EmailValidation": false,
		        "ShowOnList": true,
		        "ShowOnCreateModal": true,
		        "ShowOnEditModal": true,
		        "ReadonlyOnEditModal": false,
		        "EnumValues": null,
		        "IsSelected": true,
		        "MaxFileSize": null,
		        "OrdinalIndex": 0
		      },
		      {
		        "Id": "22eed0de-9129-4767-9a76-96eea378e280",
		        "Name": "TotalAmount",
		        "Type": "float",
		        "EnumType": "",
		        "EnumNamespace": "",
		        "EnumAngularImport": "shared/enums",
		        "EnumFilePath": null,
		        "DefaultValue": "0",
		        "IsNullable": false,
		        "IsRequired": false,
		        "IsFilterable": true,
		        "AllowEmptyStrings": false,
		        "IsTextArea": false,
		        "MinLength": null,
		        "MaxLength": null,
		        "SortOrder": 0,
		        "SortType": 0,
		        "Regex": "",
		        "EmailValidation": false,
		        "ShowOnList": true,
		        "ShowOnCreateModal": true,
		        "ShowOnEditModal": true,
		        "ReadonlyOnEditModal": false,
		        "EnumValues": null,
		        "IsSelected": true,
		        "MaxFileSize": null,
		        "OrdinalIndex": 0
		      },
		      {
		        "Id": "44c5862c-ae78-4593-9602-cf13aeca3d60",
		        "Name": "Status",
		        "Type": "enum",
		        "EnumType": "OrderStatus",
		        "EnumNamespace": "ExampleAbpApplicationLayer.Enums.Orders",
		        "EnumAngularImport": "shared/enums/order-status",
		        "EnumFilePath": "/src/ExampleAbpApplicationLayer.Domain.Shared/Enum/Orders/OrderStatus.cs",
		        "DefaultValue": null,
		        "IsNullable": false,
		        "IsRequired": false,
		        "IsFilterable": true,
		        "AllowEmptyStrings": false,
		        "IsTextArea": false,
		        "MinLength": null,
		        "MaxLength": null,
		        "SortOrder": 0,
		        "SortType": 0,
		        "Regex": "",
		        "EmailValidation": false,
		        "ShowOnList": true,
		        "ShowOnCreateModal": true,
		        "ShowOnEditModal": true,
		        "ReadonlyOnEditModal": false,
		        "EnumValues": {
		          "Initialized": 0,
		          "Paid": 1,
		          "Processing": 2,
		          "Ordered": 3,
		          "Shipped": 4,
		          "Arrived": 5,
		          "Delivered": 6,
		          "Cancelled": 7,
		          "NotPaid": 8
		        },
		        "IsSelected": true,
		        "MaxFileSize": null,
		        "OrdinalIndex": 0
		      }
		    ],
		    "NavigationProperties": [],
		    "NavigationConnections": [],
		    "ChildEntities": [],
		    "PhysicalFileName": "Order.json"
		  },
		  "BaseClass": "FullAuditedEntity",
		  "PageTitle": "OrderItems",
		  "MenuIcon": "<none>",
		  "PrimaryKeyType": "Guid",
		  "PreserveCustomCode": true,
		  "IsMultiTenant": true,
		  "CheckConcurrency": false,
		  "BulkDeleteEnabled": false,
		  "ShouldCreateUserInterface": false,
		  "ShouldCreateBackend": true,
		  "ShouldExportExcel": false,
		  "ShouldAddMigration": true,
		  "ShouldUpdateDatabase": false,
		  "CreateTests": false,
		  "Properties": [
		    {
		      "Id": "c0d25a75-6f71-4cce-a812-2a460d96012c",
		      "Name": "Qty",
		      "Type": "int",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": "1",
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "db2ff822-2339-4a77-ab47-48b722490e3e",
		      "Name": "Price",
		      "Type": "float",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": "0",
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "feca3529-fbf3-4481-ac79-fd289724a559",
		      "Name": "TotalPrice",
		      "Type": "float",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": null,
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "40259171-cb2b-4448-9675-8b5f2db5d780",
		      "Name": "ProductName",
		      "Type": "string",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": null,
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": false,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    }
		  ],
		  "NavigationProperties": [
		    {
		      "EntityNameWithDuplicationNumber": "Product",
		      "EntitySetNameWithDuplicationNumber": "Products",
		      "ReferencePropertyName": "Product",
		      "UiPickType": "Dropdown",
		      "IsRequired": true,
		      "IncludeEntitiesFromModules": false,
		      "FromAbpModule": false,
		      "Name": "ProductId",
		      "DisplayProperty": "Name",
		      "Namespace": "ExampleAbpApplicationLayer.Products",
		      "EntityName": "Product",
		      "EntitySetName": "Products",
		      "DtoNamespace": "ExampleAbpApplicationLayer.Products",
		      "DtoEntityName": "ProductDto",
		      "Type": "Guid",
		      "IsFilterable": true
		    }
		  ],
		  "NavigationConnections": [],
		  "ChildEntities": [],
		  "PhysicalFileName": "OrderItem.json"
		}]]></file>
	<file path='.suite\entities\Product.json'>
		{
		  "Id": "42cd0707-142b-45e7-af5a-3bea1befd7e3",
		  "Name": "Product",
		  "OriginalName": "Product",
		  "NamePlural": "Products",
		  "DatabaseTableName": "Products",
		  "Namespace": "Products",
		  "Type": 1,
		  "MasterEntityName": null,
		  "MasterEntity": null,
		  "BaseClass": "FullAuditedAggregateRoot",
		  "PageTitle": "Products",
		  "MenuIcon": "file-alt",
		  "PrimaryKeyType": "Guid",
		  "PreserveCustomCode": true,
		  "IsMultiTenant": true,
		  "CheckConcurrency": true,
		  "BulkDeleteEnabled": true,
		  "ShouldCreateUserInterface": true,
		  "ShouldCreateBackend": true,
		  "ShouldExportExcel": true,
		  "ShouldAddMigration": true,
		  "ShouldUpdateDatabase": false,
		  "CreateTests": true,
		  "Properties": [
		    {
		      "Id": "59c6ebe4-048b-487a-aebd-cb669f682e58",
		      "Name": "Name",
		      "Type": "string",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": null,
		      "IsNullable": false,
		      "IsRequired": true,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "e6a712db-6d00-4429-bce4-4655379d7c62",
		      "Name": "Desc",
		      "Type": "string",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": null,
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": false,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": false,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "5851438c-2b6d-4721-9f07-354e4c5ce1c8",
		      "Name": "Price",
		      "Type": "float",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": "0",
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    },
		    {
		      "Id": "1ab295a0-1b47-4323-a4e0-3d0ff88e301b",
		      "Name": "IsActive",
		      "Type": "bool",
		      "EnumType": "",
		      "EnumNamespace": "",
		      "EnumAngularImport": "shared/enums",
		      "EnumFilePath": null,
		      "DefaultValue": "true",
		      "IsNullable": false,
		      "IsRequired": false,
		      "IsFilterable": true,
		      "AllowEmptyStrings": false,
		      "IsTextArea": false,
		      "MinLength": null,
		      "MaxLength": null,
		      "SortOrder": 0,
		      "SortType": 0,
		      "Regex": "",
		      "EmailValidation": false,
		      "ShowOnList": true,
		      "ShowOnCreateModal": true,
		      "ShowOnEditModal": true,
		      "ReadonlyOnEditModal": false,
		      "EnumValues": null,
		      "IsSelected": true,
		      "MaxFileSize": null,
		      "OrdinalIndex": 0
		    }
		  ],
		  "NavigationProperties": [],
		  "NavigationConnections": [],
		  "ChildEntities": [],
		  "PhysicalFileName": "Product.json"
		}</file>
	<file path='.suite\module-entity-extension.json'>
		{
		  "Modules": [
		    {
		      "DomainProjectDllFileName": "MySampleModule.MyProject.Domain.dll"
		    }
		  ]
		}</file>
	<file path='angular\.editorconfig'>
		# Editor configuration, see https://editorconfig.org
		root = true
		
		[*]
		charset = utf-8
		indent_style = space
		indent_size = 2
		insert_final_newline = true
		trim_trailing_whitespace = true
		
		[*.ts]
		quote_type = single
		
		[*.md]
		max_line_length = off
		trim_trailing_whitespace = false</file>
	<file path='angular\.eslintrc.json'>
		{
		  "root": true,
		  "ignorePatterns": [
		    "projects/**/*"
		  ],
		  "overrides": [
		    {
		      "files": [
		        "*.ts"
		      ],
		      "parserOptions": {
		        "project": [
		          "tsconfig.json"
		        ],
		        "createDefaultProgram": true
		      },
		      "extends": [
		        "plugin:@angular-eslint/recommended",
		        "plugin:@angular-eslint/template/process-inline-templates"
		      ],
		      "rules": {
		        "@angular-eslint/directive-selector": [
		          "error",
		          {
		            "type": "attribute",
		            "prefix": "app",
		            "style": "camelCase"
		          }
		        ],
		        "@angular-eslint/component-selector": [
		          "error",
		          {
		            "type": "element",
		            "prefix": "app",
		            "style": "kebab-case"
		          }
		        ]
		      }
		    },
		    {
		      "files": [
		        "*.html"
		      ],
		      "extends": [
		        "plugin:@angular-eslint/template/recommended"
		      ],
		      "rules": {}
		    }
		  ]
		}</file>
	<file path='angular\.gitignore'>
		﻿# See http://help.github.com/ignore-files/ for more about ignoring files.
		
		/.suite
		# compiled output
		/dist
		/tmp
		/out-tsc
		# Only exists if Bazel was run
		/bazel-out
		
		# dependencies
		/node_modules
		
		# profiling files
		chrome-profiler-events*.json
		
		# IDEs and editors
		/.idea
		.project
		.classpath
		.c9/
		*.launch
		.settings/
		*.sublime-workspace
		
		# IDE - VSCode
		.vscode/*
		!.vscode/settings.json
		!.vscode/tasks.json
		!.vscode/launch.json
		!.vscode/extensions.json
		.history/*
		
		# misc
		/.angular/cache
		/.sass-cache
		/connect.lock
		/coverage
		/libpeerconnection.log
		npm-debug.log
		yarn-error.log
		testem.log
		/typings
		
		# System Files
		.DS_Store
		Thumbs.db
		/.suite/</file>
	<file path='angular\.prettierrc'>
		{
		  "singleQuote": true,
		  "printWidth": 100,
		  "arrowParens": "avoid"
		}</file>
	<file path='angular\angular.json'>
		{
		  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
		  "cli": {
		    "analytics": false,
		    "schematicCollections": ["@angular-eslint/schematics"]
		  },
		  "version": 1,
		  "newProjectRoot": "projects",
		  "projects": {
		    "ExampleAbpApplicationLayer": {
		      "projectType": "application",
		      "schematics": {
		        "@schematics/angular:component": {
		          "style": "scss"
		        }
		      },
		      "root": "",
		      "sourceRoot": "src",
		      "prefix": "app",
		      "architect": {
		        "build": {
		          "builder": "@angular-devkit/build-angular:browser",
		          "options": {
		            "outputPath": "dist/ExampleAbpApplicationLayer",
		            "index": "src/index.html",
		            "main": "src/main.ts",
		            "polyfills": "src/polyfills.ts",
		            "tsConfig": "tsconfig.app.json",
		            "inlineStyleLanguage": "scss",
		            "allowedCommonJsDependencies": [
		              "@ant-design/colors",
		              "chart.js",
		              "js-sha256",
		              "@uppy/xhr-upload",
		              "@uppy/dashboard",
		              "@uppy/core"
		            ],
		            "assets": [
		              "src/favicon.ico",
		              "src/assets",
		              {
		                "glob": "web.config",
		                "input": ".",
		                "output": "."
		              },
		              {
		                "glob": "dynamic-env.json",
		                "input": ".",
		                "output": "."
		              }
		            ],
		            "styles": [
		              {
		                "input": "node_modules/@swimlane/ngx-datatable/index.css",
		                "inject": true,
		                "bundleName": "ngx-datatable-index"
		              },
		              {
		                "input": "node_modules/@swimlane/ngx-datatable/assets/icons.css",
		                "inject": true,
		                "bundleName": "ngx-datatable-icons"
		              },
		              {
		                "input": "node_modules/@swimlane/ngx-datatable/themes/material.css",
		                "inject": true,
		                "bundleName": "ngx-datatable-material"
		              },
		              {
		                "input": "node_modules/@fortawesome/fontawesome-free/css/all.min.css",
		                "inject": true,
		                "bundleName": "fontawesome-all.min"
		              },
		              {
		                "input": "node_modules/@fortawesome/fontawesome-free/css/v4-shims.min.css",
		                "inject": true,
		                "bundleName": "fontawesome-v4-shims.min"
		              },
		              {
		                "input": "node_modules/ng-zorro-antd/tree/style/index.min.css",
		                "inject": false,
		                "bundleName": "ng-zorro-antd-tree"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/font-bundle.css",
		                "inject": false,
		                "bundleName": "font-bundle"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/font-bundle.rtl.css",
		                "inject": false,
		                "bundleName": "font-bundle.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/abp.ng.theme.lepton-x/assets/css/abp-bundle.css",
		                "inject": false,
		                "bundleName": "abp-bundle"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dark.css",
		                "inject": false,
		                "bundleName": "dark"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/light.css",
		                "inject": false,
		                "bundleName": "light"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dim.css",
		                "inject": false,
		                "bundleName": "dim"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dim.css",
		                "inject": false,
		                "bundleName": "bootstrap-dim"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dark.css",
		                "inject": false,
		                "bundleName": "bootstrap-dark"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-light.css",
		                "inject": false,
		                "bundleName": "bootstrap-light"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/ng-bundle.css",
		                "inject": false,
		                "bundleName": "ng-bundle"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/side-menu/layout-bundle.css",
		                "inject": false,
		                "bundleName": "layout-bundle"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dark.rtl.css",
		                "inject": false,
		                "bundleName": "dark.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/light.rtl.css",
		                "inject": false,
		                "bundleName": "light.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/dim.rtl.css",
		                "inject": false,
		                "bundleName": "dim.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dim.rtl.css",
		                "inject": false,
		                "bundleName": "bootstrap-dim.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-dark.rtl.css",
		                "inject": false,
		                "bundleName": "bootstrap-dark.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/bootstrap-light.rtl.css",
		                "inject": false,
		                "bundleName": "bootstrap-light.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/ng-bundle.rtl.css",
		                "inject": false,
		                "bundleName": "ng-bundle.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/ngx-lepton-x/assets/css/side-menu/layout-bundle.rtl.css",
		                "inject": false,
		                "bundleName": "layout-bundle.rtl"
		              },
		              {
		                "input": "node_modules/@volosoft/abp.ng.theme.lepton-x/assets/css/abp-bundle.rtl.css",
		                "inject": false,
		                "bundleName": "abp-bundle.rtl"
		              },
		              "node_modules/bootstrap-icons/font/bootstrap-icons.css",
		              "src/styles.scss"
		            ],
		            "scripts": []
		          },
		          "configurations": {
		            "production": {
		              "budgets": [
		                {
		                  "type": "initial",
		                  "maximumWarning": "2mb",
		                  "maximumError": "2.5mb"
		                },
		                {
		                  "type": "anyComponentStyle",
		                  "maximumWarning": "2kb",
		                  "maximumError": "100kb"
		                }
		              ],
		              "fileReplacements": [
		                {
		                  "replace": "src/environments/environment.ts",
		                  "with": "src/environments/environment.prod.ts"
		                }
		              ],
		              "outputHashing": "all"
		            },
		            "development": {
		              "buildOptimizer": false,
		              "optimization": false,
		              "vendorChunk": true,
		              "extractLicenses": false,
		              "sourceMap": true,
		              "namedChunks": true
		            }
		          },
		          "defaultConfiguration": "production"
		        },
		        "serve": {
		          "builder": "@angular-devkit/build-angular:dev-server",
		          "configurations": {
		            "production": {
		              "buildTarget": "ExampleAbpApplicationLayer:build:production"
		            },
		            "development": {
		              "buildTarget": "ExampleAbpApplicationLayer:build:development"
		            }
		          },
		          "defaultConfiguration": "development"
		        },
		        "extract-i18n": {
		          "builder": "@angular-devkit/build-angular:extract-i18n",
		          "options": {
		            "buildTarget": "ExampleAbpApplicationLayer:build"
		          }
		        },
		        "test": {
		          "builder": "@angular-devkit/build-angular:karma",
		          "options": {
		            "main": "src/test.ts",
		            "polyfills": "src/polyfills.ts",
		            "tsConfig": "tsconfig.spec.json",
		            "karmaConfig": "karma.conf.js",
		            "inlineStyleLanguage": "scss",
		            "assets": ["src/favicon.ico", "src/assets"],
		            "styles": ["src/styles.scss"],
		            "scripts": []
		          }
		        },
		        "lint": {
		          "builder": "@angular-eslint/builder:lint",
		          "options": {
		            "lintFilePatterns": ["src/**/*.ts", "src/**/*.html"]
		          }
		        }
		      }
		    }
		  }
		}</file>
	<file path='angular\Dockerfile'>
		FROM node:18-alpine AS build
		
		WORKDIR /app
		COPY package*.json /app/
		
		RUN yarn
		COPY . /app
		
		RUN yarn build:prod
		
		FROM nginx:alpine
		COPY dynamic-env.json /usr/share/nginx/html
		COPY nginx.conf  /etc/nginx/conf.d/default.conf
		
		COPY --from=build /app/dist/ExampleAbpApplicationLayer /usr/share/nginx/html</file>
	<file path='angular\Dockerfile.local'>
		FROM nginx:alpine
		WORKDIR /app
		COPY dist/ExampleAbpApplicationLayer /usr/share/nginx/html
		COPY dynamic-env.json /usr/share/nginx/html
		COPY /nginx.conf  /etc/nginx/conf.d/default.conf</file>
	<file path='angular\dynamic-env.json'>
		{
		}</file>
	<file path='angular\e2e\protractor.conf.js'>
		// @ts-check
		// Protractor configuration file, see link for more information
		// https://github.com/angular/protractor/blob/master/lib/config.ts
		
		const { SpecReporter } = require('jasmine-spec-reporter');
		
		/**
		 * @type { import("protractor").Config }
		 */
		exports.config = {
		  allScriptsTimeout: 11000,
		  specs: [
		    './src/**/*.e2e-spec.ts'
		  ],
		  capabilities: {
		    browserName: 'chrome'
		  },
		  directConnect: true,
		  baseUrl: 'http://localhost:4200/',
		  framework: 'jasmine',
		  jasmineNodeOpts: {
		    showColors: true,
		    defaultTimeoutInterval: 30000,
		    print: function() {}
		  },
		  onPrepare() {
		    require('ts-node').register({
		      project: require('path').join(__dirname, './tsconfig.json')
		    });
		    jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));
		  }
		};</file>
	<file path='angular\e2e\src\app.e2e-spec.ts'>
		import { AppPage } from "./app.po";
		import { browser, logging } from "protractor";
		
		describe("workspace-project App", () => {
		  let page: AppPage;
		
		  beforeEach(() => {
		    page = new AppPage();
		  });
		
		  it("should display welcome message", () => {
		    page.navigateTo();
		    expect(page.getTitleText()).toEqual("ExampleAbpApplicationLayer app is running!");
		  });
		
		  afterEach(async () => {
		    // Assert that there are no errors emitted from the browser
		    const logs = await browser
		      .manage()
		      .logs()
		      .get(logging.Type.BROWSER);
		    expect(logs).not.toContain(
		      jasmine.objectContaining({
		        level: logging.Level.SEVERE
		      } as logging.Entry)
		    );
		  });
		});</file>
	<file path='angular\e2e\src\app.po.ts'><![CDATA[
		import { browser, by, element } from 'protractor';
		
		export class AppPage {
		  navigateTo(): Promise<unknown> {
		    return browser.get(browser.baseUrl) as Promise<unknown>;
		  }
		
		  getTitleText(): Promise<string> {
		    return element(by.css('app-root .content span')).getText() as Promise<string>;
		  }
		}]]></file>
	<file path='angular\e2e\tsconfig.json'>
		{
		  "extends": "../tsconfig.json",
		  "compilerOptions": {
		    "outDir": "../out-tsc/e2e",
		    "module": "commonjs",
		    "target": "es2018",
		    "types": [
		      "jasmine",
		      "jasminewd2",
		      "node"
		    ]
		  }
		}</file>
	<file path='angular\karma.conf.js'>
		// Karma configuration file, see link for more information
		// https://karma-runner.github.io/1.0/config/configuration-file.html
		
		module.exports = function (config) {
		  config.set({
		    basePath: '',
		    frameworks: ['jasmine', '@angular-devkit/build-angular'],
		    plugins: [
		      require('karma-jasmine'),
		      require('karma-chrome-launcher'),
		      require('karma-jasmine-html-reporter'),
		      require('karma-coverage'),
		      require('@angular-devkit/build-angular/plugins/karma')
		    ],
		    client: {
		      jasmine: {
		        // you can add configuration options for Jasmine here
		        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
		        // for example, you can disable the random execution with `random: false`
		        // or set a specific seed with `seed: 4321`
		      },
		      clearContext: false // leave Jasmine Spec Runner output visible in browser
		    },
		    jasmineHtmlReporter: {
		      suppressAll: true // removes the duplicated traces
		    },
		    coverageReporter: {
		      dir: require('path').join(__dirname, './coverage/ExampleAbpApplicationLayer'),
		      subdir: '.',
		      reporters: [
		        { type: 'html' },
		        { type: 'text-summary' }
		      ]
		    },
		    reporters: ['progress', 'kjhtml'],
		    port: 9876,
		    colors: true,
		    logLevel: config.LOG_INFO,
		    autoWatch: true,
		    browsers: ['Chrome'],
		    singleRun: false,
		    restartOnFileChange: true
		  });
		};</file>
	<file path='angular\nginx.conf'>
		server {
		    listen       80;
		    listen  [::]:80;
		    server_name  _;
		
		    #access_log  /var/log/nginx/host.access.log  main;
		    
			location / {
		        root   /usr/share/nginx/html;        
		        index  index.html index.htm;
		        try_files $uri $uri/ /index.html =404;		
			}
			
			location /getEnvConfig {
				default_type 'application/json';
		        add_header 'Access-Control-Allow-Origin' '*' always;
		        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
		        add_header 'Content-Type' 'application/json';
				try_files $uri /dynamic-env.json;
		    }
		
		    #error_page  404              /404.html;
		
		    # redirect server error pages to the static page /50x.html
		    #
		    error_page   500 502 503 504  /50x.html;
		    location = /50x.html {
		        root   /usr/share/nginx/html;
		    }
		}</file>
	<file path='angular\package.json'>
		{
		  "name": "ExampleAbpApplicationLayer",
		  "version": "0.0.0",
		  "scripts": {
		    "ng": "ng",
		    "start": "ng serve",
		    "build": "ng build",
		    "build:prod": "ng build --configuration production",
		    "watch": "ng build --watch --configuration development",
		    "test": "ng test",
		    "lint": "ng lint"
		  },
		  "private": true,
		  "dependencies": {
		    "@abp/ng.components": "~9.3.1",
		    "@abp/ng.core": "~9.3.1",
		    "@abp/ng.oauth": "~9.3.1",
		    "@abp/ng.setting-management": "~9.3.1",
		    "@abp/ng.theme.shared": "~9.3.1",
		    "@abp/ng.feature-management": "~9.3.1",
		    "@volo/abp.commercial.ng.ui": "~9.3.1",
		    "@volo/abp.ng.account": "~9.3.1",
		    "@volo/abp.ng.audit-logging": "~9.3.1",
		    "@volo/abp.ng.gdpr": "~9.3.1",
		    "@volo/abp.ng.chat": "~9.3.1",
		    "@volo/abp.ng.identity": "~9.3.1",
		    "@volo/abp.ng.openiddictpro": "~9.3.1",
		    "@volo/abp.ng.language-management": "~9.3.1",
		    "@volo/abp.ng.file-management": "~9.3.1",
		    "@volo/abp.ng.saas": "~9.3.1",
		    "@volo/abp.ng.text-template-management": "~9.3.1",
		    "@volosoft/abp.ng.theme.lepton-x": "~4.3.1",
		    "@angular/animations": "~20.0.0",
		    "@angular/common": "~20.0.0",
		    "@angular/compiler": "~20.0.0",
		    "@angular/core": "~20.0.0",
		    "@angular/forms": "~20.0.0",
		    "@angular/localize": "~20.0.0",
		    "@angular/platform-browser-dynamic": "~20.0.0",
		    "@angular/platform-browser": "~20.0.0",
		    "@angular/router": "~20.0.0",
		    "rxjs": "~7.8.0",
		    "tslib": "^2.0.0",
		    "zone.js": "~0.15.0"
		  },
		  "devDependencies": {
		    "@abp/ng.schematics": "~9.3.1",
		    "@angular-devkit/build-angular": "~20.0.0",
		    "@angular-eslint/builder": "~20.0.0",
		    "@angular-eslint/eslint-plugin": "~20.0.0",
		    "@angular-eslint/eslint-plugin-template": "~20.0.0",
		    "@angular-eslint/schematics": "~20.0.0",
		    "@angular-eslint/template-parser": "~20.0.0",
		    "@angular/cli": "~20.0.0",
		    "@angular/compiler-cli": "~20.0.0",
		    "@angular/language-service": "~20.0.0",
		    "@types/jasmine": "~3.6.0",
		    "@types/node": "^20.0.0",
		    "@typescript-eslint/eslint-plugin": "^7.0.0",
		    "@typescript-eslint/parser": "^7.0.0",
		    "eslint": "^8.0.0",
		    "jasmine-core": "~4.0.0",
		    "karma": "~6.3.0",
		    "karma-chrome-launcher": "~3.1.0",
		    "karma-coverage": "~2.1.0",
		    "karma-jasmine": "~4.0.0",
		    "karma-jasmine-html-reporter": "^1.0.0",
		    "typescript": "~5.8.0"
		  }
		}</file>
	<file path='angular\README.md'><![CDATA[
		# ExampleAbpApplicationLayer
		
		This is a startup project based on the ABP framework. For more information, visit <a href="https://abp.io/" target="_blank">abp.io</a>
		
		## Development server
		
		Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.
		
		## Code scaffolding
		
		Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.
		
		## Build
		
		Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.
		
		## Running unit tests
		
		Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).
		
		## Running end-to-end tests
		
		Run `ng e2e` to execute the end-to-end tests via a platform of your choice.
		
		## Further help
		
		To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.
		
		## Remote Environment
		
		The application provides a remote environment for production. we use `dynamic-env.json` file to set the environment variables and configured web server's `getEnvConfig` endpoint by default.
		
		See [Environment](https://abp.io/docs/latest/framework/ui/angular/environment) for more information.]]></file>
	<file path='angular\src\app\app.component.ts'><![CDATA[
		import { Component } from '@angular/core';
		import { GdprCookieConsentComponent } from '@volo/abp.ng.gdpr/config';
		import { DynamicLayoutComponent } from '@abp/ng.core';
		import { LoaderBarComponent } from '@abp/ng.theme.shared';
		
		@Component({
		  selector: 'app-root',
		  template: `
		    <abp-loader-bar />
		    <abp-dynamic-layout />
		    <abp-gdpr-cookie-consent />
		  `,
		  imports: [LoaderBarComponent, DynamicLayoutComponent, GdprCookieConsentComponent],
		})
		export class AppComponent {}]]></file>
	<file path='angular\src\app\app.config.ts'>
		import { provideAbpCore, withOptions } from '@abp/ng.core';
		import { provideAbpOAuth } from '@abp/ng.oauth';
		import { provideSettingManagementConfig } from '@abp/ng.setting-management/config';
		import { provideFeatureManagementConfig } from '@abp/ng.feature-management';
		import {
		  provideAbpThemeShared,
		  withValidationBluePrint,
		  withHttpErrorConfig,
		} from '@abp/ng.theme.shared';
		import { provideIdentityConfig } from '@volo/abp.ng.identity/config';
		import { provideCommercialUiConfig } from '@volo/abp.commercial.ng.ui/config';
		import { provideAccountAdminConfig } from '@volo/abp.ng.account/admin/config';
		import { provideAccountPublicConfig } from '@volo/abp.ng.account/public/config';
		import { provideGdprConfig, withCookieConsentOptions } from '@volo/abp.ng.gdpr/config';
		import { provideAuditLoggingConfig } from '@volo/abp.ng.audit-logging/config';
		import { provideLanguageManagementConfig } from '@volo/abp.ng.language-management/config';
		import { registerLocale } from '@volo/abp.ng.language-management/locale';
		import { provideFileManagementConfig } from '@volo/abp.ng.file-management/config';
		import { provideChatConfig } from '@volo/abp.ng.chat/config';
		import { provideSaasConfig } from '@volo/abp.ng.saas/config';
		import { provideTextTemplateManagementConfig } from '@volo/abp.ng.text-template-management/config';
		import { provideOpeniddictproConfig } from '@volo/abp.ng.openiddictpro/config';
		import { HttpErrorComponent, provideThemeLeptonX } from '@volosoft/abp.ng.theme.lepton-x';
		import { provideSideMenuLayout } from '@volosoft/abp.ng.theme.lepton-x/layouts';
		import { provideLogo, withEnvironmentOptions } from '@volo/ngx-lepton-x.core';
		import { ApplicationConfig } from '@angular/core';
		import { provideAnimations } from '@angular/platform-browser/animations';
		import { provideRouter } from '@angular/router';
		import { environment } from '../environments/environment';
		import { APP_ROUTES } from './app.routes';
		import { APP_ROUTE_PROVIDER } from './route.provider';
		import { ORDERS_ORDER_ROUTE_PROVIDER } from './orders/order/providers/order-route.provider';
		import { PRODUCTS_PRODUCT_ROUTE_PROVIDER } from './products/product/providers/product-route.provider';
		
		export const appConfig: ApplicationConfig = {
		  providers: [
		    provideRouter(APP_ROUTES),
		    APP_ROUTE_PROVIDER,
		    provideAnimations(),
		    provideAbpCore(
		      withOptions({
		        environment,
		        registerLocaleFn: registerLocale(),
		      }),
		    ),
		    provideAbpOAuth(),
		    provideIdentityConfig(),
		    provideSettingManagementConfig(),
		    provideFeatureManagementConfig(),
		    provideAccountAdminConfig(),
		    provideAccountPublicConfig(),
		    provideCommercialUiConfig(),
		    provideThemeLeptonX(),
		    provideSideMenuLayout(),
		    provideAbpThemeShared(
		      withHttpErrorConfig({
		        errorScreen: {
		          component: HttpErrorComponent,
		          forWhichErrors: [401, 403, 404, 500],
		          hideCloseIcon: true,
		        },
		      }),
		      withValidationBluePrint({
		        wrongPassword: 'Please choose 1q2w3E*',
		      }),
		    ),
		    provideLogo(withEnvironmentOptions(environment)),
		    provideGdprConfig(
		      withCookieConsentOptions({
		        cookiePolicyUrl: '/gdpr-cookie-consent/cookie',
		        privacyPolicyUrl: '/gdpr-cookie-consent/privacy',
		      }),
		    ),
		    provideLanguageManagementConfig(),
		    provideFileManagementConfig(),
		    provideSaasConfig(),
		    provideChatConfig(),
		    provideAuditLoggingConfig(),
		    provideOpeniddictproConfig(),
		    provideTextTemplateManagementConfig(),
		    ORDERS_ORDER_ROUTE_PROVIDER,
		    PRODUCTS_PRODUCT_ROUTE_PROVIDER,
		  ],
		};</file>
	<file path='angular\src\app\app.routes.ts'>
		import { authGuard, permissionGuard } from '@abp/ng.core';
		import { Routes } from '@angular/router';
		import { GDPR_COOKIE_CONSENT_ROUTES } from './gdpr-cookie-consent/gdpr-cookie-consent.routes';
		import { ORDER_ROUTES } from './orders/order/order-routes';
		import { PRODUCT_ROUTES } from './products/product/product-routes';
		
		export const APP_ROUTES: Routes = [
		  {
		    path: '',
		    pathMatch: 'full',
		    loadComponent: () => import('./home/home.component').then(c => c.HomeComponent),
		  },
		  {
		    path: 'dashboard',
		    loadComponent: () => import('./dashboard/dashboard.component').then(c => c.DashboardComponent),
		    canActivate: [authGuard, permissionGuard],
		  },
		  {
		    path: 'account',
		    loadChildren: () => import('@volo/abp.ng.account/public').then(c => c.createRoutes()),
		  },
		  {
		    path: 'gdpr',
		    loadChildren: () => import('@volo/abp.ng.gdpr').then(c => c.createRoutes()),
		  },
		  {
		    path: 'identity',
		    loadChildren: () => import('@volo/abp.ng.identity').then(c => c.createRoutes()),
		  },
		  {
		    path: 'language-management',
		    loadChildren: () => import('@volo/abp.ng.language-management').then(c => c.createRoutes()),
		  },
		  {
		    path: 'saas',
		    loadChildren: () => import('@volo/abp.ng.saas').then(c => c.createRoutes()),
		  },
		  {
		    path: 'chat',
		    loadChildren: () => import('@volo/abp.ng.chat').then(c => c.createRoutes()),
		  },
		  {
		    path: 'audit-logs',
		    loadChildren: () => import('@volo/abp.ng.audit-logging').then(c => c.createRoutes()),
		  },
		  {
		    path: 'openiddict',
		    loadChildren: () => import('@volo/abp.ng.openiddictpro').then(c => c.createRoutes()),
		  },
		  {
		    path: 'text-template-management',
		    loadChildren: () => import('@volo/abp.ng.text-template-management').then(c => c.createRoutes()),
		  },
		  {
		    path: 'file-management',
		    loadChildren: () => import('@volo/abp.ng.file-management').then(c => c.createRoutes()),
		  },
		  {
		    path: 'gdpr-cookie-consent',
		    children: GDPR_COOKIE_CONSENT_ROUTES,
		  },
		  {
		    path: 'setting-management',
		    loadChildren: () => import('@abp/ng.setting-management').then(c => c.createRoutes()),
		  },
		  { path: 'orders', children: ORDER_ROUTES },
		  { path: 'products', children: PRODUCT_ROUTES },
		];</file>
	<file path='angular\src\app\dashboard\dashboard.component.ts'><![CDATA[
		import { Component } from '@angular/core';
		import { PermissionDirective } from '@abp/ng.core';
		import { HostDashboardComponent } from './host-dashboard/host-dashboard.component';
		import { TenantDashboardComponent } from './tenant-dashboard/tenant-dashboard.component';
		
		@Component({
		  selector: 'app-dashboard',
		  template: `
		    <app-host-dashboard *abpPermission="'ExampleAbpApplicationLayer.Dashboard.Host'" />
		    <app-tenant-dashboard *abpPermission="'ExampleAbpApplicationLayer.Dashboard.Tenant'" />
		  `,
		  imports: [HostDashboardComponent,TenantDashboardComponent, PermissionDirective]
		})
		export class DashboardComponent {}]]></file>
	<file path='angular\src\app\dashboard\host-dashboard\host-dashboard.component.html'><![CDATA[
		<abp-page [title]="'::Menu:Dashboard' | abpLocalization">
		  <div class="card">
		    <div class="card-body">
		      <form [formGroup]="formFilters" (ngSubmit)="refresh()">
		        <div id="datepicker" class="input-daterange row align-items-center justify-content-center">
		          <div class="col-12 col-lg-auto col-md-6 mb-3 mb-lg-0">
		            <abp-date-range-picker
		              formControlName="times"
		              id="times"
		              [labelText]="'::Date' | abpLocalization"
		              startDateProp="fromDate"
		              endDateProp="toDate"
		            />
		          </div>
		          <div class="col-12 col-lg-2 col-md-12">
		            <button type="submit" class="btn btn-primary btn-block">
		              <i class="fa fa-refresh me-1" aria-hidden="true"></i>
		              <span>{{ 'AbpAuditLogging::Refresh' | abpLocalization }}</span>
		            </button>
		          </div>
		        </div>
		      </form>
		    </div>
		  </div>
		
		  <div id="DashboardWidgetsArea">
		    <div class="row">
		      <div class="col col-md-12 col-lg-6" *abpPermission="'AuditLogging.AuditLogs'">
		        <abp-error-rate-widget #errorRateWidget [height]="250" />
		      </div>
		
		      <div class="col col-md-12 col-lg-6" *abpPermission="'AuditLogging.AuditLogs'">
		        <abp-average-execution-duration-widget #averageExecutionDurationWidget [height]="250" />
		      </div>
		
		      <div class="col col-md-12 col-lg-6" *abpPermission="'Saas.Tenants'">
		        <abp-editions-usage-widget #editionsUsageWidget [height]="250" />
		      </div>
		
		      <div class="col col-md-12 col-lg-6" *abpPermission="'Saas.Tenants'">
		        <abp-latest-tenants-widget #latestTenantsWidget [minHeight]="250" />
		      </div>
		
		    </div>
		  </div>
		</abp-page>]]></file>
	<file path='angular\src\app\dashboard\host-dashboard\host-dashboard.component.scss'/>
	<file path='angular\src\app\dashboard\host-dashboard\host-dashboard.component.ts'>
		import { AfterViewInit, Component, ViewChild, inject } from '@angular/core';
		import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
		import {
		  NgbDateAdapter,
		  NgbDateNativeAdapter,
		  NgbDatepickerModule,
		} from '@ng-bootstrap/ng-bootstrap';
		import { LocalizationPipe, PermissionDirective } from '@abp/ng.core';
		import { PageComponent } from '@abp/ng.components/page';
		import { DateRangePickerComponent } from '@volo/abp.commercial.ng.ui';
		import {
		  AverageExecutionDurationWidgetComponent,
		  ErrorRateWidgetComponent,
		} from '@volo/abp.ng.audit-logging';
		import { EditionsUsageWidgetComponent, LatestTenantsWidgetComponent } from '@volo/abp.ng.saas';
		
		const now = new Date();
		const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
		
		@Component({
		  selector: 'app-host-dashboard',
		  templateUrl: './host-dashboard.component.html',
		  styleUrls: ['./host-dashboard.component.scss'],
		  imports: [
		    AverageExecutionDurationWidgetComponent,
		    ErrorRateWidgetComponent,
		    EditionsUsageWidgetComponent,
		    LatestTenantsWidgetComponent,
		    FormsModule,
		    ReactiveFormsModule,
		    NgbDatepickerModule,
		    PageComponent,
		    DateRangePickerComponent,
		    PermissionDirective,
		    LocalizationPipe,
		  ],
		  providers: [{ provide: NgbDateAdapter, useClass: NgbDateNativeAdapter }],
		})
		
		export class HostDashboardComponent implements AfterViewInit {
		  fb = inject(FormBuilder);
		
		  @ViewChild('errorRateWidget', { static: false })
		  errorRateWidget: ErrorRateWidgetComponent;
		
		  @ViewChild('averageExecutionDurationWidget', { static: false })
		  averageExecutionDurationWidget: AverageExecutionDurationWidgetComponent;
		
		  @ViewChild('editionsUsageWidget', { static: false })
		  editionsUsageWidget: EditionsUsageWidgetComponent;
		
		  @ViewChild('latestTenantsWidget', { static: false })
		  latestTenantsWidget: LatestTenantsWidgetComponent;
		
		  toDate = now;
		  fromDate = oneMonthAgo;
		
		  formFilters = this.fb.group({
		    times: [
		      {
		        fromDate: this.fromDate,
		        toDate: this.toDate,
		      },
		    ],
		  });
		  
		  ngAfterViewInit() {
		    this.refresh();
		  }
		
		  refresh() {
		    const { fromDate, toDate } = {
		      ...this.formFilters.value.times,
		    };
		
		    const startDate = this.convertToString(fromDate);
		    const endDate = this.convertToString(toDate);
		    this.errorRateWidget?.draw({ startDate, endDate });
		    this.averageExecutionDurationWidget?.draw({ startDate, endDate });
		    this.editionsUsageWidget?.draw();
		    this.latestTenantsWidget?.draw();
		  }
		  
		  private convertToString(value: Date): string {
		    return value.toLocalISOString();
		  }
		}</file>
	<file path='angular\src\app\dashboard\tenant-dashboard\tenant-dashboard.component.html'><![CDATA[
		<div class="row entry-row">
		  <div class="col">
		    <div class="card">
		      <div class="card-body">
		        Add your Tenant related charts/widgets to this page !
		      </div>
		    </div>
		  </div>
		</div>]]></file>
	<file path='angular\src\app\dashboard\tenant-dashboard\tenant-dashboard.component.scss'/>
	<file path='angular\src\app\dashboard\tenant-dashboard\tenant-dashboard.component.ts'>
		import { Component, OnDestroy } from '@angular/core';
		
		@Component({
		  selector: 'app-tenant-dashboard',
		  templateUrl: './tenant-dashboard.component.html',
		  styleUrls: ['./tenant-dashboard.component.scss'],
		})
		export class TenantDashboardComponent implements OnDestroy {
		
		  ngOnDestroy(): void {}
		}</file>
	<file path='angular\src\app\gdpr-cookie-consent\cookie-policy\cookie-policy.component.html'><![CDATA[
		<div class="container">
		  <h1 class="text-center">Cookie Policy</h1>
		
		  <div class="section-1 my-5">
		    <p>
		      This cookie policy explains how cookies and similar technologies are used by
		      ExampleAbpApplicationLayer ("we", "or" or "us") on our websites and other online services
		      (like applications, portals or other services that use cookies).
		    </p>
		  </div>
		
		  <div class="section-2 my-5">
		    <h2>What are cookies and why do we use them?</h2>
		
		    <p>
		      Cookies are small text files stored in your browser’s memory by our websites. They are
		      commonly used to support various functions on our websites.
		    </p>
		
		    <p>
		      Cookies do other very useful jobs, such as tell us which pages you visited the most,
		      understand how effective our website has been to you, and improve our communication to you on
		      our products and services.
		    </p>
		
		    <p>
		      We do not use cookies to collect information that directly identifies you as an individual.
		      However, some information collected by cookies may be treated as personal data (such as your
		      browsing history, or your device information).
		    </p>
		
		    <p>
		      Depending on the job the cookie needs to perform, it may be a session or persistent cookie:
		    </p>
		
		    <ul>
		      <li>
		        Persistent cookies are retained on your device until you either erase them or your browser
		        erases them when the cookie reaches its expiration date.
		      </li>
		      <li>
		        Session cookies are temporary and expire once you close your browser or once your session
		        ends.
		      </li>
		    </ul>
		  </div>
		
		  <div class="section-3 my-5">
		    <h2>What type of cookies do we use?</h2>
		
		    <p>
		      We only use the "Strictly Necessary" cookies on our website to improve user experience and
		      these cookies are required to websites effectively run.
		    </p>
		
		    <div>
		      <h3>Strictly Neccessary Cookies</h3>
		
		      <table class="table">
		        <thead>
		          <tr>
		            <th>Cookie</th>
		            <th>Description</th>
		          </tr>
		        </thead>
		        <tbody>
		          <tr>
		            <td>AspNetCore.Antiforgery.*</td>
		            <td>Helps prevent Cross-Site Request Forgery (CSRF) attacks.</td>
		          </tr>
		          <tr>
		            <td>XSRF-TOKEN</td>
		            <td>
		              Ensures visitor browsing-security by preventing cross-site request forgery. This
		              cookie is essential for the security of the website and visitor.
		            </td>
		          </tr>
		        </tbody>
		      </table>
		    </div>
		  </div>
		</div>]]></file>
	<file path='angular\src\app\gdpr-cookie-consent\cookie-policy\cookie-policy.component.ts'>
		import { Component } from '@angular/core';
		
		@Component({
		  selector: 'abp-cookie-policy',
		  templateUrl: './cookie-policy.component.html',
		})
		export class CookiePolicyComponent {}</file>
	<file path='angular\src\app\gdpr-cookie-consent\gdpr-cookie-consent.routes.ts'>
		import { Routes } from '@angular/router';
		
		export const GDPR_COOKIE_CONSENT_ROUTES: Routes = [
		  {
		    path: 'privacy',
		    loadComponent: () =>
		      import('./privacy-policy/privacy-policy.component').then(c => c.PrivacyPolicyComponent),
		  },
		  {
		    path: 'cookie',
		    loadComponent: () =>
		      import('./cookie-policy/cookie-policy.component').then(c => c.CookiePolicyComponent),
		  },
		];</file>
	<file path='angular\src\app\gdpr-cookie-consent\privacy-policy\privacy-policy.component.html'><![CDATA[
		<div class="container">
		  <h1 class="text-center">Privacy Policy</h1>
		
		  <div class="section-1 my-5">
		    <h2>Privacy Notice</h2>
		    <p>
		      This privacy notice for ExampleAbpApplicationLayer ("Company," "we," "us," or "our"),
		      describes how and why we might collect, store, use, and/or share ("process") your information
		      when you use our services ("Services"), such as when you:
		    </p>
		
		    <ul>
		      <li>Visit our website, or any website of ours that links to this privacy notice</li>
		      <li>Engage with us in other related ways, including any sales, marketing, or events</li>
		    </ul>
		
		    <p>
		      <b>Questions or concerns?</b> Reading this privacy notice will help you understand your
		      privacy rights and choices. If you do not agree with our policies and practices, please do not
		      use our Services. If you still have any questions or concerns, please contact us at
		      __________.
		    </p>
		  </div>
		
		  <div class="section-2 my-5">
		    <h2>Summary of Key Points</h2>
		
		    <p>
		      <b>What personal information do we process?</b> When you visit, use, or navigate our Services,
		      we may process personal information depending on how you interact with
		      ExampleAbpApplicationLayer and the Services, the choices you make, and the products and
		      features you use.
		    </p>
		
		    <p>
		      <b>Do we process any sensitive personal information?</b> We do not process sensitive personal
		      information.
		    </p>
		
		    <p><b>Do we receive any information from third parties?</b> No, we don't.</p>
		
		    <p>
		      <b>How do we process your information?</b> We process your information to provide, improve,
		      and administer our Services, communicate with you, for security and fraud prevention, and to
		      comply with law. We may also process your information for other purposes with your consent. We
		      process your information only when we have a valid legal reason to do so.
		    </p>
		
		    <p>
		      <b>What are your rights?</b> Depending on where you are located geographically, the applicable
		      privacy law may mean you have certain rights regarding your personal information.
		    </p>
		  </div>
		
		  <div class="section-3 my-5">
		    <h2>1. What Information Do We Collect?</h2>
		
		    <p></p>
		    <h4>Personal information you disclose to us</h4>
		
		    <p>
		      We collect personal information that you voluntarily provide to us when you register on the
		      Services, express an interest in obtaining information about us or our products and Services,
		      when you participate in activities on the Services, or otherwise when you contact us.
		    </p>
		  </div>
		
		  <div class="section-4 my-5">
		    <h2>2. HOW DO WE PROCESS YOUR INFORMATION?</h2>
		
		    <p>
		      We process your information to provide, improve, and administer our Services, communicate with
		      you, for security and fraud prevention, and to comply with law. We may also process your
		      information for other purposes with your consent.
		    </p>
		  </div>
		
		  <div class="section-5 my-5">
		    <h2>3. WHAT ARE YOUR PRIVACY RIGHTS?</h2>
		
		    <p>
		      In some regions, such as the European Economic Area (EEA), United Kingdom (UK), and Canada,
		      you have rights that allow you greater access to and control over your personal information.
		      You may review, change, or terminate your account at any time.
		    </p>
		  </div>
		
		  <div class="section-6 my-5">
		    <h2>4. HOW CAN YOU CONTACT US ABOUT THIS NOTICE?</h2>
		
		    <p>If you have questions or comments about this notice, you may email us at __________.</p>
		  </div>
		
		  <div class="section-7 my-5">
		    <h2>5. HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU?</h2>
		
		    <p>
		      Based on the applicable laws of your country, you may have the right to request access to the
		      personal information we collect from you, change that information, or delete it. To request to
		      review, or delete your personal information, please visit the personal data page.
		    </p>
		  </div>
		</div>]]></file>
	<file path='angular\src\app\gdpr-cookie-consent\privacy-policy\privacy-policy.component.ts'>
		import { Component } from '@angular/core';
		
		@Component({
		  selector: 'abp-privacy-policy',
		  templateUrl: './privacy-policy.component.html',
		})
		export class PrivacyPolicyComponent {}</file>
	<file path='angular\src\app\home\home.component.html'><![CDATA[
		<div class="row mb-3">
		  <div class="col-xl-6 col-12 d-flex">
		    <div class="card h-lg-100 w-100 overflow-hidden">
		      <div class="card-body">
		        <div class="starting-content pe-5">
		          @if(!hasLoggedIn){
		          <h3>Welcome</h3>
		          <p class="lead text-muted mb-2">
		            {{ '::LongWelcomeMessage' | abpLocalization }}
		          </p>
		          <a (click)="login()" class="px-4 btn btn-primary mb-4" role="button">
		            <i class="fa fa-sign-in"></i>
		            {{ 'AbpAccount::Login' | abpLocalization }}
		          </a>
		          }
		
		          <h4>Getting Started</h4>
		          <p class="lead text-muted mb-2">
		            Learn how to create and run a new web application using the application startup
		            template.
		          </p>
		          <a
		            href="https://abp.io/docs/latest/getting-started"
		            class="btn btn-brand mb-4"
		            target="_blank"
		          >
		            Getting Started
		          </a>
		
		          <h4>Web Application Development Tutorial</h4>
		          <p class="lead text-muted mb-2">
		            Learn how to build an ABP based web application named Acme.BookStore.
		          </p>
		          <a
		            href="https://abp.io/docs/latest/tutorials/book-store/part-01?UI=NG&DB=EF"
		            class="btn btn-brand mb-4"
		            target="_blank"
		          >
		            Explore Tutorial
		          </a>
		
		          <h4>Customize Lepton Theme</h4>
		          <p class="text-muted mb-2">Learn how to customize LeptonX Theme as you wish.</p>
		          <a
		            href="https://abp.io/docs/commercial/latest/themes/lepton-x/index"
		            class="btn btn-primary soft mb-5 mb-xl-0"
		            target="_blank"
		          >
		            Customize Lepton
		          </a>
		        </div>
		        <img class="card-bg-image" src="assets/images/getting-started/bg-01.png" />
		      </div>
		    </div>
		  </div>
		  <div class="col-xl-3 col-md-6 d-flex">
		    <div class="row">
		      <div class="col-12 d-flex">
		        <div class="card overflow-hidden mb-3">
		          <div class="card-body d-flex flex-column">
		            <div class="abp-support abp-logo mb-2"></div>
		            <p class="text-muted mb-2">
		              You can check for similar problems and solutions, or open a new topic to discuss your
		              specific issue.
		            </p>
		            <a
		              class="btn btn-brand soft w-50"
		              href="https://abp.io/support/questions"
		              target="_blank"
		            >
		              Visit Support
		            </a>
		            <img
		              style="margin-bottom: -24px"
		              class="w-100 mt-auto"
		              src="assets/images/getting-started/img-support.png"
		            />
		          </div>
		        </div>
		      </div>
		      <div class="col-12 d-flex">
		        <div class="card h-md-100 overflow-hidden">
		          <div class="card-body d-flex flex-column">
		            <div class="abp-blog abp-logo mb-2"></div>
		            <p class="text-muted mb-2">
		              You can find content on .NET development, cross-platform, ASP.NET application
		              templates, ABP-related news, and more.
		            </p>
		            <a
		              class="btn btn-brand soft w-50"
		              href="https://abp.io/blog"
		              target="_blank"
		            >
		              Visit Blog
		            </a>
		            <img
		              style="margin-bottom: -24px"
		              class="w-100 mt-auto"
		              src="assets/images/getting-started/img-blog.png"
		            />
		          </div>
		        </div>
		      </div>
		    </div>
		  </div>
		  <div class="col-xl-3 col-md-6 d-flex">
		    <div class="card h-100 overflow-hidden">
		      <div class="card-body">
		        <div class="abp-community abp-logo mb-2"></div>
		        <p class="lead text-muted">
		          A unique community platform for <span class="fw-bold">ABP Lovers!</span>
		        </p>
		        <p class="text-muted mb-2">
		          Explore all ABP users' experiences with the ABP Framework, discover articles and videos on
		          how to use ABP, and join raffles for a chance to win surprise gifts!
		        </p>
		        <a
		          class="btn btn-brand soft mb-3"
		          href="https://abp.io/community/"
		          target="_blank"
		        >
		          Join ABP Community
		        </a>
		      </div>
		      <img class="mt-3 w-100" src="assets/images/getting-started/img-community.png" />
		    </div>
		  </div>
		</div>
		
		<div class="row">
		  <div class="col-xl-3 col-lg-4">
		    <div class="card">
		      <div class="card-header">
		        <div class="card-title text-body">More from ABP.IO</div>
		      </div>
		      <div class="card-body pt-0">
		        <div>
		          <table class="table mb-0">
		            <tbody>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <div
		                    class="rounded-circle me-2 flex-center bg-brand soft"
		                    style="width: 20px; height: 20px"
		                  >
		                    <i class="bi bi-check fs-4"></i>
		                  </div>
		                  <div>Latest Release Logs</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://github.com/abpframework/abp/releases" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <div
		                    class="rounded-circle me-2 flex-center bg-brand soft"
		                    style="width: 20px; height: 20px"
		                  >
		                    <i class="bi bi-check fs-4"></i>
		                  </div>
		                  <div>Video Courses</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://abp.io/video-courses/essentials" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <div
		                    class="rounded-circle me-2 flex-center bg-brand soft"
		                    style="width: 20px; height: 20px"
		                  >
		                    <i class="bi bi-check fs-4"></i>
		                  </div>
		                  <div>Samples</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://abp.io/docs/latest/Samples/Index" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <div
		                    class="rounded-circle me-2 flex-center bg-brand soft"
		                    style="width: 20px; height: 20px"
		                  >
		                    <i class="bi bi-check fs-4"></i>
		                  </div>
		                  <div>Books</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://abp.io/books" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex border-bottom-0">
		                  <div
		                    class="rounded-circle me-2 flex-center bg-brand soft"
		                    style="width: 20px; height: 20px"
		                  >
		                    <i class="bi bi-check fs-4"></i>
		                  </div>
		                  <div>FAQ</div>
		                </td>
		                <td class="text-end pe-0 opacity-25 border-bottom-0">
		                  <a href="https://abp.io/faq" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		            </tbody>
		          </table>
		        </div>
		      </div>
		    </div>
		  </div>
		  <div class="col-xl-6 col-lg-8 d-flex">
		    <div class="card">
		      <div class="card-body d-flex">
		        <div class="row align-items-center">
		          <div class="col-md-8">
		            <p class="text-muted mb-0">THE OFFICIAL GUIDE</p>
		            <h3>Mastering ABP Framework</h3>
		            <p class="text-muted">
		              Written by the creator of the ABP Framework, this book will help you gain a complete
		              understanding of the framework and modern web application development techniques.
		            </p>
		            <div class="d-md-flex mb-2 mb-md-0">
		              <a
		                href="https://www.amazon.com/gp/product/B097Z2DM8Q"
		                target="_blank"
		                class="btn btn-primary soft me-md-2 mb-2 mb-md-0"
		              >
		                Buy on Amazon US
		              </a>
		              <a
		                href="https://www.packtpub.com/product/mastering-abp-framework/9781801079242"
		                target="_blank"
		                class="btn btn-primary soft mb-2 mb-md-0"
		              >
		                Buy on PACKT
		              </a>
		            </div>
		          </div>
		          <div class="col">
		            <img class="w-100" src="assets/images/getting-started/book.png" />
		          </div>
		        </div>
		      </div>
		    </div>
		  </div>
		  <div class="col-xl-3 col-lg-4">
		    <div class="card">
		      <div class="card-header">
		        <div class="card-title text-body">Follow us on Social Media</div>
		      </div>
		      <div class="card-body pt-0">
		        <div>
		          <table class="table mb-0">
		            <tbody>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <div class="logo-x me-2"></div>
		                  <div>X.com</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://twitter.com/abpframework" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <img src="assets/images/getting-started/discord.svg" class="me-2" />
		                  <div>Discord</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://abp.io/community/discord" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <img src="assets/images/getting-started/stack-overflow.svg" class="me-2" />
		                  <div>Stack Overflow</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://stackoverflow.com/questions/tagged/abp" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex">
		                  <img src="assets/images/getting-started/youtube.svg" class="me-2" />
		                  <div>YouTube</div>
		                </td>
		                <td class="text-end pe-0 opacity-25">
		                  <a href="https://www.youtube.com/@Volosoft" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		              <tr>
		                <td class="ps-0 d-flex border-bottom-0">
		                  <img src="assets/images/getting-started/instagram.svg" class="me-2" />
		                  <div>Instagram</div>
		                </td>
		                <td class="text-end pe-0 opacity-25 border-bottom-0">
		                  <a href="https://www.instagram.com/abpframework/" target="_blank">
		                    <i class="fa fa-external-link text-dark"></i>
		                  </a>
		                </td>
		              </tr>
		            </tbody>
		          </table>
		        </div>
		      </div>
		    </div>
		  </div>
		</div>]]></file>
	<file path='angular\src\app\home\home.component.scss'>
		/* Styles for the home component */
		.card-bg-image {
		  position: absolute;
		  width: 630px;
		  height: auto;
		  bottom: 0;
		  right: 0;
		  z-index: 1;
		}
		
		.starting-content {
		  position: relative;
		  z-index: 2;
		}
		
		
		@media (min-width: 1199px) {
		  .h-lg-100 {
		    height: 100% !important;
		  }
		}
		
		@media (min-width: 768px) {
		  .h-md-100 {
		    height: 100% !important;
		  }
		}</file>
	<file path='angular\src\app\home\home.component.ts'>
		import { Component, inject } from '@angular/core';
		import { AuthService, LocalizationPipe } from '@abp/ng.core';
		
		@Component({
		  selector: 'app-home',
		  templateUrl: './home.component.html',
		  styleUrls: ['./home.component.scss'],
		  imports: [LocalizationPipe]
		})
		export class HomeComponent {
		  private authService = inject(AuthService);
		
		  get hasLoggedIn(): boolean {
		    return this.authService.isAuthenticated
		  }
		
		  login() {
		    this.authService.navigateToLogin();
		  }
		}</file>
	<file path='angular\src\app\orders\order-item\components\order-item-child-detail.component.html'><![CDATA[
		<abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
		  <ng-template #abpHeader>
		    <!--<suite-custom-code-block-0>-->
		    <!--</suite-custom-code-block-0>-->
		    <h3>
		      <!--<suite-custom-code-block-1>-->
		      <!--</suite-custom-code-block-1>-->
		      {{ (service.selected ? 'AbpUi::Edit' : '::NewOrderItem') | abpLocalization }}
		      <!--<suite-custom-code-block-2>-->
		      <!--</suite-custom-code-block-2>-->
		    </h3>
		    <!--<suite-custom-code-block-3>-->
		    <!--</suite-custom-code-block-3>-->
		  </ng-template>
		
		  <ng-template #abpBody>
		    <!--<suite-custom-code-block-4>-->
		    <!--</suite-custom-code-block-4>-->
		    <form
		      [formGroup]="service.form"
		      id="order-item"
		      (ngSubmit)="service.submitForm()"
		      validateOnSubmit
		    >
		      <!--<suite-custom-code-block-5>-->
		      <!--</suite-custom-code-block-5>-->
		
		      <ul ngbNav #nav="ngbNav" class="nav-tabs">
		        <li ngbNavItem>
		          <a ngbNavLink>
		            {{ '::OrderItem' | abpLocalization }}
		          </a>
		          <ng-template ngbNavContent>
		            <div class="mt-2 fade-in-top">
		              <div class="mb-3">
		                <label class="form-label" for="order-item-qty">
		                  {{ '::Qty' | abpLocalization }} *
		                </label>
		
		                <input
		                  type="number"
		                  id="order-item-qty"
		                  formControlName="qty"
		                  class="form-control"
		                  autofocus
		                />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-item-price">
		                  {{ '::Price' | abpLocalization }} *
		                </label>
		
		                <input
		                  type="number"
		                  id="order-item-price"
		                  formControlName="price"
		                  class="form-control"
		                />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-item-total-price">
		                  {{ '::TotalPrice' | abpLocalization }} *
		                </label>
		
		                <input
		                  type="number"
		                  id="order-item-total-price"
		                  formControlName="totalPrice"
		                  class="form-control"
		                />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-item-product-name">
		                  {{ '::ProductName' | abpLocalization }}
		                </label>
		
		                <input
		                  id="order-item-product-name"
		                  formControlName="productName"
		                  class="form-control"
		                />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-item-product-id">
		                  {{ '::Product' | abpLocalization }} *
		                </label>
		                <abp-lookup-select
		                  cid="order-item-product-id"
		                  formControlName="productId"
		                  [getFn]="service.getProductLookup"
		                />
		              </div>
		            </div>
		          </ng-template>
		        </li>
		      </ul>
		      <div [ngbNavOutlet]="nav"></div>
		
		      <!--<suite-custom-code-block-6>-->
		      <!--</suite-custom-code-block-6>-->
		    </form>
		  </ng-template>
		
		  <ng-template #abpFooter>
		    <!--<suite-custom-code-block-7>-->
		    <!--</suite-custom-code-block-7>-->
		    <button type="button" class="btn btn-secondary" abpClose>
		      {{ 'AbpUi::Cancel' | abpLocalization }}
		    </button>
		    <!--<suite-custom-code-block-8>-->
		    <!--</suite-custom-code-block-8>-->
		    <abp-button iconClass="fa fa-check" buttonType="submit" formName="order-item">
		      {{ 'AbpUi::Save' | abpLocalization }}
		    </abp-button>
		    <!--<suite-custom-code-block-9>-->
		    <!--</suite-custom-code-block-9>-->
		  </ng-template>
		</abp-modal>]]></file>
	<file path='angular\src\app\orders\order-item\components\order-item-child-detail.component.ts'>
		import { CommonModule } from '@angular/common';
		import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
		import { ReactiveFormsModule } from '@angular/forms';
		import {
		  NgbNavModule,
		  NgbDatepickerModule,
		  NgbTimepickerModule,
		  NgbDateAdapter,
		  NgbTimeAdapter,
		} from '@ng-bootstrap/ng-bootstrap';
		import { NgxValidateCoreModule } from '@ngx-validate/core';
		import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
		import {
		  DateAdapter,
		  TimeAdapter,
		  ModalComponent,
		  ButtonComponent,
		  ModalCloseDirective,
		} from '@abp/ng.theme.shared';
		
		import { LookupSelectComponent } from '@volo/abp.commercial.ng.ui';
		
		import { OrderItemDetailViewService } from '../services/order-item-child-detail.service';
		
		@Component({
		  selector: 'app-order-item-detail-modal',
		  imports: [
		    CommonModule,
		    ReactiveFormsModule,
		    NgbDatepickerModule,
		    NgbTimepickerModule,
		    NgbNavModule,
		    NgxValidateCoreModule,
		    AutofocusDirective,
		    ModalCloseDirective,
		    LocalizationPipe,
		    ModalComponent,
		    ButtonComponent,
		    LookupSelectComponent,
		  ],
		  changeDetection: ChangeDetectionStrategy.OnPush,
		  providers: [
		    { provide: NgbDateAdapter, useClass: DateAdapter },
		    { provide: NgbTimeAdapter, useClass: TimeAdapter },
		  ],
		  templateUrl: './order-item-child-detail.component.html',
		})
		export class OrderItemDetailModalComponent {
		  public readonly service = inject(OrderItemDetailViewService);
		}</file>
	<file path='angular\src\app\orders\order-item\components\order-item-child.abstract.component.ts'>
		import { Directive, OnInit, inject, Input } from '@angular/core';
		import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
		
		import type { OrderItemWithNavigationPropertiesDto } from '../../../proxy/order-items/models';
		import { OrderItemViewService } from '../services/order-item-child.service';
		import { OrderItemDetailViewService } from '../services/order-item-child-detail.service';
		
		@Directive()
		export abstract class AbstractOrderItemComponent implements OnInit {
		  public readonly list = inject(ListService);
		  public readonly track = inject(TrackByService);
		  public readonly service = inject(OrderItemViewService);
		  public readonly serviceDetail = inject(OrderItemDetailViewService);
		  public readonly permissionService = inject(PermissionService);
		
		  protected isActionButtonVisible: boolean | null = null;
		
		  @Input() title = '::OrderItems';
		  @Input() orderId: string;
		
		  ngOnInit() {
		    this.serviceDetail.orderId = this.orderId;
		    this.service.hookToQuery(this.orderId);
		    this.checkActionButtonVisibility();
		  }
		
		  create() {
		    this.serviceDetail.selected = undefined;
		    this.serviceDetail.showForm();
		  }
		
		  update(record: OrderItemWithNavigationPropertiesDto) {
		    this.serviceDetail.update(record);
		  }
		
		  delete(record: OrderItemWithNavigationPropertiesDto) {
		    this.service.delete(record);
		  }
		
		  checkActionButtonVisibility() {
		    if (this.isActionButtonVisible !== null) {
		      return;
		    }
		
		    const canEdit = this.permissionService.getGrantedPolicy(
		      'ExampleAbpApplicationLayer.OrderItems.Edit',
		    );
		    const canDelete = this.permissionService.getGrantedPolicy(
		      'ExampleAbpApplicationLayer.OrderItems.Delete',
		    );
		    this.isActionButtonVisible = canEdit || canDelete;
		  }
		}</file>
	<file path='angular\src\app\orders\order-item\components\order-item-child.component.html'><![CDATA[
		<div class="text-lg-end py-1">
		  <!--<suite-custom-code-block-0>-->
		  <!--</suite-custom-code-block-0>-->
		  <button
		    *abpPermission="'ExampleAbpApplicationLayer.OrderItems.Create'"
		    class="btn btn-primary btn-sm"
		    type="button"
		    (click)="create()"
		  >
		    <i class="fa fa-plus me-1" aria-hidden="true"></i>
		    {{ '::NewOrderItem' | abpLocalization }}
		  </button>
		  <!--<suite-custom-code-block-1>-->
		  <!--</suite-custom-code-block-1>-->
		</div>
		<!--<suite-custom-code-block-2>-->
		<!--</suite-custom-code-block-2>-->
		<ngx-datatable default [list]="list" [rows]="service.data.items" [count]="service.data.totalCount">
		  @if (isActionButtonVisible) {
		    <ngx-datatable-column
		      [name]="'AbpUi::Actions' | abpLocalization"
		      [maxWidth]="150"
		      [width]="150"
		      [sortable]="false"
		    >
		      <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
		        <div ngbDropdown container="body" class="d-inline-block">
		          <button
		            class="btn btn-primary btn-sm dropdown-toggle"
		            data-toggle="dropdown"
		            aria-haspopup="true"
		            ngbDropdownToggle
		          >
		            <i class="fa fa-cog me-1" aria-hidden="true"></i>
		            {{ 'AbpUi::Actions' | abpLocalization }}
		          </button>
		
		          <div ngbDropdownMenu>
		            <button
		              ngbDropdownItem
		              *abpPermission="'ExampleAbpApplicationLayer.OrderItems.Edit'"
		              (click)="update(row)"
		            >
		              {{ 'AbpUi::Edit' | abpLocalization }}
		            </button>
		
		            <button
		              ngbDropdownItem
		              *abpPermission="'ExampleAbpApplicationLayer.OrderItems.Delete'"
		              (click)="delete(row)"
		            >
		              {{ 'AbpUi::Delete' | abpLocalization }}
		            </button>
		          </div>
		        </div>
		      </ng-template>
		
		      <!--<suite-custom-code-block-3>-->
		      <!--</suite-custom-code-block-3>-->
		    </ngx-datatable-column>
		  }
		  <ngx-datatable-column name="{{ '::Qty' | abpLocalization }}" prop="orderItem.qty">
		    <ng-template let-row="row" ngx-datatable-cell-template>
		      {{ row.orderItem.qty }}
		    </ng-template>
		  </ngx-datatable-column>
		  <ngx-datatable-column name="{{ '::Price' | abpLocalization }}" prop="orderItem.price">
		    <ng-template let-row="row" ngx-datatable-cell-template>
		      {{ row.orderItem.price }}
		    </ng-template>
		  </ngx-datatable-column>
		  <ngx-datatable-column name="{{ '::TotalPrice' | abpLocalization }}" prop="orderItem.totalPrice">
		    <ng-template let-row="row" ngx-datatable-cell-template>
		      {{ row.orderItem.totalPrice }}
		    </ng-template>
		  </ngx-datatable-column>
		  <ngx-datatable-column name="{{ '::ProductName' | abpLocalization }}" prop="orderItem.productName">
		    <ng-template let-row="row" ngx-datatable-cell-template>
		      {{ row.orderItem.productName }}
		    </ng-template>
		  </ngx-datatable-column>
		
		  <ngx-datatable-column name="{{ '::Product' | abpLocalization }}" prop="product.id">
		    <ng-template let-row="row" ngx-datatable-cell-template>
		      {{ row.product?.name }}
		    </ng-template>
		  </ngx-datatable-column>
		  <!--<suite-custom-code-block-4>-->
		  <!--</suite-custom-code-block-4>-->
		</ngx-datatable>
		
		<!--<suite-custom-code-block-5>-->
		<!--</suite-custom-code-block-5>-->
		
		@defer (when serviceDetail.isVisible) {
		  @if (serviceDetail.isVisible) {
		    <app-order-item-detail-modal />
		  }
		}]]></file>
	<file path='angular\src\app\orders\order-item\components\order-item-child.component.ts'>
		import { ChangeDetectionStrategy, Component } from '@angular/core';
		import {
		  NgbDateAdapter,
		  NgbCollapseModule,
		  NgbDatepickerModule,
		  NgbDropdownModule,
		} from '@ng-bootstrap/ng-bootstrap';
		import { NgxValidateCoreModule } from '@ngx-validate/core';
		import { NgxDatatableModule, SelectionType } from '@swimlane/ngx-datatable';
		import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
		import {
		  DateAdapter,
		  NgxDatatableDefaultDirective,
		  NgxDatatableListDirective,
		} from '@abp/ng.theme.shared';
		import { OrderItemViewService } from '../services/order-item-child.service';
		import { OrderItemDetailViewService } from '../services/order-item-child-detail.service';
		import { OrderItemDetailModalComponent } from './order-item-child-detail.component';
		import { AbstractOrderItemComponent } from './order-item-child.abstract.component';
		
		@Component({
		  selector: 'app-order-item',
		  imports: [
		    NgbCollapseModule,
		    NgbDatepickerModule,
		    NgbDropdownModule,
		    NgxValidateCoreModule,
		    NgxDatatableModule,
		    NgxDatatableDefaultDirective,
		    NgxDatatableListDirective,
		    PermissionDirective,
		    LocalizationPipe,
		    OrderItemDetailModalComponent,
		  ],
		  changeDetection: ChangeDetectionStrategy.OnPush,
		  providers: [
		    { provide: NgbDateAdapter, useClass: DateAdapter },
		    ListService,
		    OrderItemViewService,
		    OrderItemDetailViewService,
		  ],
		  templateUrl: './order-item-child.component.html',
		})
		export class OrderItemComponent extends AbstractOrderItemComponent {}</file>
	<file path='angular\src\app\orders\order-item\services\order-item-child-detail.abstract.service.ts'>
		import { inject } from '@angular/core';
		import { FormBuilder, FormGroup, Validators } from '@angular/forms';
		import { ListService, TrackByService } from '@abp/ng.core';
		
		import { finalize, tap } from 'rxjs/operators';
		
		import type { OrderItemWithNavigationPropertiesDto } from '../../../proxy/order-items/models';
		import { OrderItemService } from '../../../proxy/order-items/order-item.service';
		
		export abstract class AbstractOrderItemDetailViewService {
		  protected readonly fb = inject(FormBuilder);
		  protected readonly track = inject(TrackByService);
		
		  public readonly proxyService = inject(OrderItemService);
		  public readonly list = inject(ListService);
		
		  public readonly getProductLookup = this.proxyService.getProductLookup;
		
		  orderId: string;
		
		  isBusy = false;
		  isVisible = false;
		  selected = {} as any;
		  form: FormGroup | undefined;
		
		  protected createRequest() {
		    if (this.selected) {
		      return this.proxyService.update(this.selected.id, this.form.value);
		    }
		    return this.proxyService.create(this.form.value);
		  }
		
		  buildForm() {
		    const { productId, qty, price, totalPrice, productName } = this.selected || {};
		
		    this.form = this.fb.group({
		      orderId: [this.orderId],
		      productId: [productId ?? null, [Validators.required]],
		      qty: [qty ?? '1', [Validators.required]],
		      price: [price ?? '0', [Validators.required]],
		      totalPrice: [totalPrice ?? null, [Validators.required]],
		      productName: [productName ?? null, []],
		    });
		  }
		
		  showForm() {
		    this.buildForm();
		    this.isVisible = true;
		  }
		
		  create() {
		    this.selected = undefined;
		    this.showForm();
		  }
		
		  update(record: OrderItemWithNavigationPropertiesDto) {
		    this.selected = record.orderItem;
		    this.showForm();
		  }
		
		  hideForm() {
		    this.isVisible = false;
		  }
		
		  submitForm() {
		    if (this.form.invalid) return;
		
		    this.isBusy = true;
		
		    const request = this.createRequest().pipe(
		      finalize(() => (this.isBusy = false)),
		      tap(() => this.hideForm()),
		    );
		
		    request.subscribe(this.list.get);
		  }
		
		  changeVisible(isVisible: boolean) {
		    this.isVisible = isVisible;
		  }
		}</file>
	<file path='angular\src\app\orders\order-item\services\order-item-child-detail.service.ts'>
		import { Injectable } from '@angular/core';
		import { AbstractOrderItemDetailViewService } from './order-item-child-detail.abstract.service';
		
		@Injectable()
		export class OrderItemDetailViewService extends AbstractOrderItemDetailViewService {}</file>
	<file path='angular\src\app\orders\order-item\services\order-item-child.abstract.service.ts'><![CDATA[
		import { inject, ChangeDetectorRef } from '@angular/core';
		import { filter, switchMap } from 'rxjs/operators';
		import { ABP, ListService, PagedResultDto } from '@abp/ng.core';
		import { ConfirmationService, Confirmation } from '@abp/ng.theme.shared';
		import type {
		  GetOrderItemListInput,
		  OrderItemWithNavigationPropertiesDto,
		} from '../../../proxy/order-items/models';
		import { OrderItemService } from '../../../proxy/order-items/order-item.service';
		
		export abstract class AbstractOrderItemViewService {
		  protected readonly cdr = inject(ChangeDetectorRef);
		  protected readonly proxyService = inject(OrderItemService);
		  protected readonly confirmationService = inject(ConfirmationService);
		  protected readonly list = inject(ListService);
		
		  data: PagedResultDto<OrderItemWithNavigationPropertiesDto> = {
		    items: [],
		    totalCount: 0,
		  };
		
		  delete(record: OrderItemWithNavigationPropertiesDto) {
		    this.confirmationService
		      .warn('::DeleteConfirmationMessage', '::AreYouSure', { messageLocalizationParams: [] })
		      .pipe(
		        filter(status => status === Confirmation.Status.confirm),
		        switchMap(() => this.proxyService.delete(record.orderItem.id)),
		      )
		      .subscribe(this.list.get);
		  }
		
		  hookToQuery(orderId: string) {
		    const getData = (query: ABP.PageQueryParams) =>
		      this.proxyService.getListWithNavigationPropertiesByOrderId({
		        ...(query as GetOrderItemListInput),
		        orderId,
		      });
		
		    const setData = (list: PagedResultDto<OrderItemWithNavigationPropertiesDto>) =>
		      (this.data = list);
		
		    this.list.hookToQuery(getData).subscribe(list => {
		      setData(list);
		      this.cdr.markForCheck();
		    });
		  }
		}]]></file>
	<file path='angular\src\app\orders\order-item\services\order-item-child.service.ts'>
		import { Injectable } from '@angular/core';
		import { AbstractOrderItemViewService } from './order-item-child.abstract.service';
		
		@Injectable()
		export class OrderItemViewService extends AbstractOrderItemViewService {}</file>
	<file path='angular\src\app\orders\order\components\order-detail.component.html'><![CDATA[
		<abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
		  <ng-template #abpHeader>
		    <!--<suite-custom-code-block-0>-->
		    <!--</suite-custom-code-block-0>-->
		    <h3>
		      <!--<suite-custom-code-block-1>-->
		      <!--</suite-custom-code-block-1>-->
		      {{ (service.selected ? 'AbpUi::Edit' : '::NewOrder') | abpLocalization }}
		      <!--<suite-custom-code-block-2>-->
		      <!--</suite-custom-code-block-2>-->
		    </h3>
		    <!--<suite-custom-code-block-3>-->
		    <!--</suite-custom-code-block-3>-->
		  </ng-template>
		
		  <ng-template #abpBody>
		    <!--<suite-custom-code-block-4>-->
		    <!--</suite-custom-code-block-4>-->
		    <form [formGroup]="service.form" id="order" (ngSubmit)="service.submitForm()" validateOnSubmit>
		      <!--<suite-custom-code-block-5>-->
		      <!--</suite-custom-code-block-5>-->
		
		      <ul ngbNav #nav="ngbNav" class="nav-tabs">
		        <li ngbNavItem>
		          <a ngbNavLink>
		            {{ '::Order' | abpLocalization }}
		          </a>
		          <ng-template ngbNavContent>
		            <div class="mt-2 fade-in-top">
		              <div class="mb-3">
		                <label class="form-label" for="order-order-date">
		                  {{ '::OrderDate' | abpLocalization }} *
		                </label>
		
		                <div class="input-group" validationTarget>
		                  <input
		                    readonly
		                    id="order-order-date"
		                    formControlName="orderDate"
		                    class="form-control"
		                    ngbDatepicker
		                    #orderDateInput
		                    #orderDateDatepicker="ngbDatepicker"
		                    (click)="orderDateDatepicker.open()"
		                    (keyup.space)="orderDateDatepicker.open()"
		                    autofocus
		                  />
		                  @if (orderDateInput.value) {
		                    <div class="input-group-append">
		                      <button
		                        class="btn btn-link px-2"
		                        type="button"
		                        [title]="'AbpUi::Clear' | abpLocalization"
		                        (click)="
		                          orderDateDatepicker.writeValue(null);
		                          orderDateDatepicker.manualDateChange(null, true)
		                        "
		                      >
		                        <i class="fa fa-times" aria-hidden="true"></i>
		                      </button>
		                    </div>
		                  }
		                </div>
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-total-amount">
		                  {{ '::TotalAmount' | abpLocalization }} *
		                </label>
		
		                <input
		                  type="number"
		                  id="order-total-amount"
		                  formControlName="totalAmount"
		                  class="form-control"
		                />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-status">
		                  {{ '::Status' | abpLocalization }} *
		                </label>
		
		                <select id="order-status" formControlName="status" class="form-select form-control">
		                  <option [ngValue]="null"></option>
		                  <option
		                    *ngFor="
		                      let option of service.orderStatusOptions;
		                      trackBy: service.track.by('key')
		                    "
		                    [ngValue]="option.value"
		                  >
		                    {{ '::Enum:OrderStatus.' + option.value | abpLocalization }}
		                  </option>
		                </select>
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="order-identity-user-id">
		                  {{ '::IdentityUser' | abpLocalization }}
		                </label>
		                <abp-lookup-select
		                  cid="order-identity-user-id"
		                  formControlName="identityUserId"
		                  [getFn]="service.getIdentityUserLookup"
		                ></abp-lookup-select>
		              </div>
		            </div>
		          </ng-template>
		        </li>
		      </ul>
		      <div [ngbNavOutlet]="nav"></div>
		
		      <!--<suite-custom-code-block-6>-->
		      <!--</suite-custom-code-block-6>-->
		    </form>
		  </ng-template>
		
		  <ng-template #abpFooter>
		    <!--<suite-custom-code-block-7>-->
		    <!--</suite-custom-code-block-7>-->
		    <button type="button" class="btn btn-secondary" abpClose>
		      {{ 'AbpUi::Cancel' | abpLocalization }}
		    </button>
		    <!--<suite-custom-code-block-8>-->
		    <!--</suite-custom-code-block-8>-->
		    <abp-button iconClass="fa fa-check" buttonType="submit" formName="order">
		      {{ 'AbpUi::Save' | abpLocalization }}
		    </abp-button>
		    <!--<suite-custom-code-block-9>-->
		    <!--</suite-custom-code-block-9>-->
		  </ng-template>
		</abp-modal>]]></file>
	<file path='angular\src\app\orders\order\components\order-detail.component.ts'>
		import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
		import { ReactiveFormsModule } from '@angular/forms';
		import { CommonModule } from '@angular/common';
		import { NgxValidateCoreModule } from '@ngx-validate/core';
		import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
		import {
		  DateAdapter,
		  TimeAdapter,
		  ModalComponent,
		  ModalCloseDirective,
		  ButtonComponent,
		} from '@abp/ng.theme.shared';
		
		import {
		  NgbNavModule,
		  NgbDatepickerModule,
		  NgbTimepickerModule,
		  NgbDateAdapter,
		  NgbTimeAdapter,
		} from '@ng-bootstrap/ng-bootstrap';
		import { OrderDetailViewService } from '../services/order-detail.service';
		
		@Component({
		  selector: 'app-order-detail-modal',
		  changeDetection: ChangeDetectionStrategy.Default,
		  imports: [
		    CommonModule,
		    ReactiveFormsModule,
		    NgbDatepickerModule,
		    NgbTimepickerModule,
		    NgbNavModule,
		    NgxValidateCoreModule,
		    AutofocusDirective,
		    ModalCloseDirective,
		    LocalizationPipe,
		    ModalComponent,
		    ButtonComponent,
		  ],
		  providers: [
		    { provide: NgbDateAdapter, useClass: DateAdapter },
		    { provide: NgbTimeAdapter, useClass: TimeAdapter },
		  ],
		  templateUrl: './order-detail.component.html',
		  styles: [],
		})
		export class OrderDetailModalComponent {
		  public readonly service = inject(OrderDetailViewService);
		}</file>
	<file path='angular\src\app\orders\order\components\order.abstract.component.ts'>
		import { Directive, OnInit, inject, ViewChild } from '@angular/core';
		
		import {
		  NgbNav,
		  NgbNavItem,
		  NgbNavLink,
		  NgbNavContent,
		  NgbNavOutlet,
		} from '@ng-bootstrap/ng-bootstrap';
		import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
		
		import { orderStatusOptions } from '../../../proxy/enums/orders/order-status.enum';
		import type { OrderWithNavigationPropertiesDto } from '../../../proxy/orders/models';
		import { OrderViewService } from '../services/order.service';
		import { OrderDetailViewService } from '../services/order-detail.service';
		import { OrderItemComponent } from '../../order-item/components/order-item-child.component';
		
		export const ChildTabDependencies = [NgbNav, NgbNavItem, NgbNavLink, NgbNavContent, NgbNavOutlet];
		
		export const ChildComponentDependencies = [OrderItemComponent];
		
		@Directive()
		export abstract class AbstractOrderComponent implements OnInit {
		  public readonly list = inject(ListService);
		  public readonly track = inject(TrackByService);
		  public readonly service = inject(OrderViewService);
		  public readonly serviceDetail = inject(OrderDetailViewService);
		  public readonly permissionService = inject(PermissionService);
		
		  protected title = '::Orders';
		  protected isActionButtonVisible: boolean | null = null;
		  protected isChildEntitiesPermitted: boolean | null = null;
		
		  orderStatusOptions = orderStatusOptions;
		
		  @ViewChild('orderTable') table: any;
		
		  ngOnInit() {
		    this.service.hookToQuery();
		    this.checkActionButtonVisibility();
		    this.checkChildEntityPermissions();
		  }
		
		  clearFilters() {
		    this.service.clearFilters();
		  }
		
		  showForm() {
		    this.serviceDetail.showForm();
		  }
		
		  create() {
		    this.serviceDetail.selected = undefined;
		    this.serviceDetail.showForm();
		  }
		
		  update(record: OrderWithNavigationPropertiesDto) {
		    this.serviceDetail.update(record);
		  }
		
		  delete(record: OrderWithNavigationPropertiesDto) {
		    this.service.delete(record);
		  }
		
		  exportToExcel() {
		    this.service.exportToExcel();
		  }
		
		  toggleExpandRow(row) {
		    this.table.rowDetail.toggleExpandRow(row);
		  }
		
		  checkChildEntityPermissions() {
		    if (this.isChildEntitiesPermitted !== null) {
		      return;
		    }
		
		    const childPermissions = ['ExampleAbpApplicationLayer.OrderItems'];
		    this.isChildEntitiesPermitted = childPermissions.some(permission =>
		      this.permissionService.getGrantedPolicy(permission),
		    );
		  }
		
		  checkActionButtonVisibility() {
		    if (this.isActionButtonVisible !== null) {
		      return;
		    }
		
		    const canEdit = this.permissionService.getGrantedPolicy(
		      'ExampleAbpApplicationLayer.Orders.Edit',
		    );
		    const canDelete = this.permissionService.getGrantedPolicy(
		      'ExampleAbpApplicationLayer.Orders.Delete',
		    );
		    this.isActionButtonVisible = canEdit || canDelete;
		  }
		}</file>
	<file path='angular\src\app\orders\order\components\order.component.html'><![CDATA[
		<abp-page [title]="title | abpLocalization">
		  <abp-page-toolbar-container class="col">
		    <!--<suite-custom-code-block-0>-->
		    <!--</suite-custom-code-block-0>-->
		    <div class="text-lg-end pt-2">
		      <!--<suite-custom-code-block-1>-->
		      <!--</suite-custom-code-block-1>-->
		
		      <button
		        class="btn btn-primary btn-sm mx-2"
		        type="button"
		        [disabled]="service.isExportToExcelBusy"
		        (click)="exportToExcel()"
		      >
		        {{ '::ExportToExcel' | abpLocalization }}
		      </button>
		
		      <button
		        *abpPermission="'ExampleAbpApplicationLayer.Orders.Create'"
		        class="btn btn-primary btn-sm"
		        type="button"
		        (click)="create()"
		      >
		        <i class="fa fa-plus me-1" aria-hidden="true"></i>
		        {{ '::NewOrder' | abpLocalization }}
		      </button>
		      <!--<suite-custom-code-block-2>-->
		      <!--</suite-custom-code-block-2>-->
		    </div>
		  </abp-page-toolbar-container>
		
		  <abp-advanced-entity-filters localizationSourceName="" [list]="list">
		    @if (service.filters; as filters) {
		      <abp-advanced-entity-filters-form>
		        <form #filterForm (keyup.enter)="list.get()">
		          <!--<suite-custom-code-block-3>-->
		          <!--</suite-custom-code-block-3>-->
		          <div class="row">
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="minOrderDate">
		                  {{ '::MinOrderDate' | abpLocalization }}
		                </label>
		
		                <div class="input-group" validationTarget>
		                  <input
		                    id="minOrderDate"
		                    class="form-control"
		                    #minOrderDateInput
		                    #minOrderDateDatepicker="ngbDatepicker"
		                    name="minOrderDate"
		                    ngbDatepicker
		                    container="body"
		                    readonly
		                    (click)="minOrderDateDatepicker.toggle()"
		                    (keyup.space)="minOrderDateDatepicker.toggle()"
		                    [(ngModel)]="filters.orderDateMin"
		                    [ngModelOptions]="{ standalone: true }"
		                  />
		                  @if (minOrderDateInput.value) {
		                    <div class="input-group-append">
		                      <button
		                        class="btn btn-link px-2"
		                        type="button"
		                        [title]="'AbpUi::Clear' | abpLocalization"
		                        (click)="
		                          minOrderDateDatepicker.writeValue(null);
		                          minOrderDateDatepicker.manualDateChange(null, true)
		                        "
		                      >
		                        <i class="fa fa-times" aria-hidden="true"></i>
		                      </button>
		                    </div>
		                  }
		                </div>
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="maxOrderDate">
		                  {{ '::MaxOrderDate' | abpLocalization }}
		                </label>
		
		                <div class="input-group" validationTarget>
		                  <input
		                    id="maxOrderDate"
		                    class="form-control"
		                    #maxOrderDateInput
		                    #maxOrderDateDatepicker="ngbDatepicker"
		                    name="maxOrderDate"
		                    ngbDatepicker
		                    readonly
		                    (click)="maxOrderDateDatepicker.toggle()"
		                    (keyup.space)="maxOrderDateDatepicker.toggle()"
		                    [(ngModel)]="filters.orderDateMax"
		                    [ngModelOptions]="{ standalone: true }"
		                  />
		                  @if (maxOrderDateInput.value) {
		                    <div class="input-group-append">
		                      <button
		                        class="btn btn-link px-2"
		                        type="button"
		                        [title]="'AbpUi::Clear' | abpLocalization"
		                        (click)="
		                          maxOrderDateDatepicker.writeValue(null);
		                          maxOrderDateDatepicker.manualDateChange(null, true)
		                        "
		                      >
		                        <i class="fa fa-times" aria-hidden="true"></i>
		                      </button>
		                    </div>
		                  }
		                </div>
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="minTotalAmount">
		                  {{ '::MinTotalAmount' | abpLocalization }}
		                </label>
		
		                <input
		                  id="minTotalAmount"
		                  type="number"
		                  class="form-control"
		                  [(ngModel)]="filters.totalAmountMin"
		                  [ngModelOptions]="{ standalone: true }"
		                />
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="maxTotalAmount">
		                  {{ '::MaxTotalAmount' | abpLocalization }}
		                </label>
		
		                <input
		                  id="maxTotalAmount"
		                  type="number"
		                  class="form-control"
		                  [(ngModel)]="filters.totalAmountMax"
		                  [ngModelOptions]="{ standalone: true }"
		                />
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="statusFilter">
		                  {{ '::Status' | abpLocalization }}
		                </label>
		
		                <select
		                  id="statusFilter"
		                  class="form-select form-control"
		                  [(ngModel)]="filters.status"
		                  [ngModelOptions]="{ standalone: true }"
		                >
		                  <option [ngValue]="null"></option>
		                  <option
		                    *ngFor="let option of orderStatusOptions; trackBy: track.by('value')"
		                    [ngValue]="option.value"
		                  >
		                    {{ '::Enum:OrderStatus.' + option.value | abpLocalization }}
		                  </option>
		                </select>
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="identityUserIdFilter">
		                  {{ '::IdentityUser' | abpLocalization }}
		                </label>
		                <abp-lookup-select
		                  cid="identityUserIdFilter"
		                  [getFn]="serviceDetail.getIdentityUserLookup"
		                  [(ngModel)]="filters.identityUserId"
		                  [ngModelOptions]="{ standalone: true }"
		                ></abp-lookup-select>
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto align-self-end mb-3">
		              <div class="row">
		                <div class="col-6 col-sm-auto d-grid">
		                  <button type="button" class="btn btn-outline-primary" (click)="clearFilters()">
		                    <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>
		                  </button>
		                </div>
		                <div class="col-6 col-sm-auto d-grid">
		                  <button type="button" class="btn btn-primary" (click)="list.get()">
		                    <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>
		                  </button>
		                </div>
		              </div>
		            </div>
		          </div>
		          <!--<suite-custom-code-block-4>-->
		          <!--</suite-custom-code-block-4>-->
		        </form>
		      </abp-advanced-entity-filters-form>
		    }
		  </abp-advanced-entity-filters>
		  <!--<suite-custom-code-block-5>-->
		  <!--</suite-custom-code-block-5>-->
		  <div class="card">
		    <!--<suite-custom-code-block-6>-->
		    <!--</suite-custom-code-block-6>-->
		    <div class="card-body">
		      <!--<suite-custom-code-block-7>-->
		      <!--</suite-custom-code-block-7>-->
		      <ngx-datatable
		        #orderTable
		        default
		        [rows]="service.data.items"
		        [count]="service.data.totalCount"
		        [list]="list"
		      >
		        <!--<suite-custom-code-block-8>-->
		        <!--</suite-custom-code-block-8>-->
		
		        <!-- Row Detail Template -->
		        <ngx-datatable-row-detail rowHeight="100%">
		          <ng-template let-row="row" let-expanded="expanded" ngx-datatable-row-detail-template>
		            <ul id="order-nav-tabs mb-0" ngbNav #nav="ngbNav" class="nav-tabs">
		              <li
		                *abpPermission="'ExampleAbpApplicationLayer.OrderItems'"
		                id="order-item-informations"
		                ngbNavItem
		              >
		                <a ngbNavLink>{{ '::OrderItem' | abpLocalization }}</a>
		
		                <ng-template ngbNavContent>
		                  <app-order-item [orderId]="row.order.id" />
		                </ng-template>
		              </li>
		            </ul>
		
		            <div [ngbNavOutlet]="nav" class="m-0 fade-in-top"></div>
		          </ng-template>
		        </ngx-datatable-row-detail>
		        @if (isChildEntitiesPermitted) {
		          <ngx-datatable-column
		            [width]="50"
		            [resizeable]="false"
		            [sortable]="false"
		            [draggable]="false"
		            [canAutoResize]="false"
		          >
		            <ng-template let-row="row" let-expanded="expanded" ngx-datatable-cell-template>
		              <a
		                href="javascript:void(0)"
		                class="ngx-datatable-toggle text-decoration-none text-muted fa"
		                [class.fa-angle-down]="!expanded"
		                [class.fa-angle-up]="expanded"
		                title="Expand/Collapse Row"
		                (click)="toggleExpandRow(row)"
		              >
		              </a>
		            </ng-template>
		          </ngx-datatable-column>
		        }
		
		        @if (isActionButtonVisible) {
		          <ngx-datatable-column
		            [name]="'AbpUi::Actions' | abpLocalization"
		            [maxWidth]="150"
		            [width]="150"
		            [sortable]="false"
		          >
		            <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
		              <div ngbDropdown container="body" class="d-inline-block">
		                <button
		                  class="btn btn-primary btn-sm dropdown-toggle"
		                  data-toggle="dropdown"
		                  aria-haspopup="true"
		                  ngbDropdownToggle
		                >
		                  <i class="fa fa-cog me-1" aria-hidden="true"></i>
		                  {{ 'AbpUi::Actions' | abpLocalization }}
		                </button>
		
		                <div ngbDropdownMenu>
		                  <button
		                    ngbDropdownItem
		                    *abpPermission="'ExampleAbpApplicationLayer.Orders.Edit'"
		                    (click)="update(row)"
		                  >
		                    {{ 'AbpUi::Edit' | abpLocalization }}
		                  </button>
		
		                  <button
		                    ngbDropdownItem
		                    *abpPermission="'ExampleAbpApplicationLayer.Orders.Delete'"
		                    (click)="delete(row)"
		                  >
		                    {{ 'AbpUi::Delete' | abpLocalization }}
		                  </button>
		                </div>
		              </div>
		            </ng-template>
		          </ngx-datatable-column>
		        }
		        <ngx-datatable-column name="{{ '::OrderDate' | abpLocalization }}" prop="order.orderDate">
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            {{ row.order.orderDate | abpUtcToLocal: 'date' }}
		          </ng-template>
		        </ngx-datatable-column>
		        <ngx-datatable-column
		          name="{{ '::TotalAmount' | abpLocalization }}"
		          prop="order.totalAmount"
		        >
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            {{ row.order.totalAmount }}
		          </ng-template>
		        </ngx-datatable-column>
		        <ngx-datatable-column name="{{ '::Status' | abpLocalization }}" prop="order.status">
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            {{
		              row.order.status !== null
		                ? ('::Enum:OrderStatus.' + row.order.status | abpLocalization)
		                : ''
		            }}
		          </ng-template>
		        </ngx-datatable-column>
		        <ngx-datatable-column
		          name="{{ '::IdentityUser' | abpLocalization }}"
		          prop="identityUser.userName"
		        >
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            {{ row.identityUser?.userName }}
		          </ng-template>
		        </ngx-datatable-column>
		        <!--<suite-custom-code-block-9>-->
		        <!--</suite-custom-code-block-9>-->
		      </ngx-datatable>
		      <!--<suite-custom-code-block-10>-->
		      <!--</suite-custom-code-block-10>-->
		    </div>
		  </div>
		  <!--<suite-custom-code-block-11>-->
		  <!--</suite-custom-code-block-11>-->
		</abp-page>
		<!--<suite-custom-code-block-12>-->
		<!--</suite-custom-code-block-12>-->
		
		@defer (when serviceDetail.isVisible) {
		  @if (serviceDetail.isVisible) {
		    <app-order-detail-modal />
		  }
		}]]></file>
	<file path='angular\src\app\orders\order\components\order.component.ts'>
		import { ChangeDetectionStrategy, Component } from '@angular/core';
		import { CommonModule } from '@angular/common';
		import { FormsModule, ReactiveFormsModule } from '@angular/forms';
		import {
		  NgbDateAdapter,
		  NgbTimeAdapter,
		  NgbCollapseModule,
		  NgbDatepickerModule,
		  NgbTimepickerModule,
		  NgbDropdownModule,
		} from '@ng-bootstrap/ng-bootstrap';
		import { NgxValidateCoreModule } from '@ngx-validate/core';
		import { NgxDatatableModule } from '@swimlane/ngx-datatable';
		import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
		import {
		  DateAdapter,
		  TimeAdapter,
		  NgxDatatableDefaultDirective,
		  NgxDatatableListDirective,
		} from '@abp/ng.theme.shared';
		import { PageComponent, PageToolbarContainerComponent } from '@abp/ng.components/page';
		import {
		  AdvancedEntityFiltersComponent,
		  AdvancedEntityFiltersFormComponent,
		} from '@volo/abp.commercial.ng.ui';
		import { OrderViewService } from '../services/order.service';
		import { OrderDetailViewService } from '../services/order-detail.service';
		import { OrderDetailModalComponent } from './order-detail.component';
		import {
		  AbstractOrderComponent,
		  ChildTabDependencies,
		  ChildComponentDependencies,
		} from './order.abstract.component';
		
		@Component({
		  selector: 'app-order',
		  changeDetection: ChangeDetectionStrategy.Default,
		  imports: [
		    ...ChildTabDependencies,
		    NgbCollapseModule,
		    NgbDatepickerModule,
		    NgbTimepickerModule,
		    NgbDropdownModule,
		    NgxValidateCoreModule,
		    CommonModule,
		    FormsModule,
		    ReactiveFormsModule,
		    NgxDatatableModule,
		    NgxDatatableDefaultDirective,
		    NgxDatatableListDirective,
		    PermissionDirective,
		    LocalizationPipe,
		    PageComponent,
		    PageToolbarContainerComponent,
		    AdvancedEntityFiltersComponent,
		    AdvancedEntityFiltersFormComponent,
		
		    OrderDetailModalComponent,
		    ...ChildComponentDependencies,
		  ],
		  providers: [
		    ListService,
		    OrderViewService,
		    OrderDetailViewService,
		    { provide: NgbDateAdapter, useClass: DateAdapter },
		    { provide: NgbTimeAdapter, useClass: TimeAdapter },
		  ],
		  templateUrl: './order.component.html',
		  styles: `
		    ::ng-deep.datatable-row-detail {
		      background: transparent !important;
		    }
		  `,
		})
		export class OrderComponent extends AbstractOrderComponent {}</file>
	<file path='angular\src\app\orders\order\order-routes.ts'>
		import { Routes } from '@angular/router';
		import { authGuard, permissionGuard } from '@abp/ng.core';
		
		export const ORDER_ROUTES: Routes = [
		  {
		    path: '',
		    loadComponent: () => {
		      return import('./components/order.component').then(c => c.OrderComponent);
		    },
		    canActivate: [authGuard, permissionGuard],
		  },
		];</file>
	<file path='angular\src\app\orders\order\providers\order-base.routes.ts'>
		import { ABP, eLayoutType } from '@abp/ng.core';
		
		export const ORDER_BASE_ROUTES: ABP.Route[] = [
		  {
		    path: '/orders',
		    iconClass: 'fas fa-file-alt',
		    name: '::Menu:Orders',
		    layout: eLayoutType.application,
		    requiredPolicy: 'ExampleAbpApplicationLayer.Orders',
		    breadcrumbText: '::Orders',
		  },
		];</file>
	<file path='angular\src\app\orders\order\providers\order-route.provider.ts'>
		import { inject, provideAppInitializer } from '@angular/core';
		import { ABP, RoutesService } from '@abp/ng.core';
		import { ORDER_BASE_ROUTES } from './order-base.routes';
		
		export const ORDERS_ORDER_ROUTE_PROVIDER = [
		  provideAppInitializer(() => {
		    configureRoutes();
		  }),
		];
		
		function configureRoutes() {
		  const routesService = inject(RoutesService);
		  const routes: ABP.Route[] = [...ORDER_BASE_ROUTES];
		  routesService.add(routes);
		}</file>
	<file path='angular\src\app\orders\order\services\order-detail.abstract.service.ts'>
		import { inject } from '@angular/core';
		import { FormBuilder, FormGroup, Validators } from '@angular/forms';
		import { ListService, TrackByService } from '@abp/ng.core';
		
		import { finalize, tap } from 'rxjs/operators';
		
		import { orderStatusOptions } from '../../../proxy/enums/orders/order-status.enum';
		import type { OrderWithNavigationPropertiesDto } from '../../../proxy/orders/models';
		import { OrderService } from '../../../proxy/orders/order.service';
		
		export abstract class AbstractOrderDetailViewService {
		  protected readonly fb = inject(FormBuilder);
		  protected readonly track = inject(TrackByService);
		
		  public readonly proxyService = inject(OrderService);
		  public readonly list = inject(ListService);
		
		  public readonly getIdentityUserLookup = this.proxyService.getIdentityUserLookup;
		
		  orderStatusOptions = orderStatusOptions;
		
		  isBusy = false;
		  isVisible = false;
		  selected = {} as any;
		  form: FormGroup | undefined;
		
		  protected createRequest() {
		    const formValues = {
		      ...this.form.value,
		    };
		
		    if (this.selected) {
		      return this.proxyService.update(this.selected.order.id, {
		        ...formValues,
		        concurrencyStamp: this.selected.order.concurrencyStamp,
		      });
		    }
		
		    return this.proxyService.create(formValues);
		  }
		
		  buildForm() {
		    const { orderDate, totalAmount, status, identityUserId } = this.selected?.order || {};
		
		    this.form = this.fb.group({
		      orderDate: [orderDate ?? null, [Validators.required]],
		      totalAmount: [totalAmount ?? '0', [Validators.required]],
		      status: [status ?? null, [Validators.required]],
		      identityUserId: [identityUserId ?? null, []],
		    });
		  }
		
		  showForm() {
		    this.buildForm();
		    this.isVisible = true;
		  }
		
		  create() {
		    this.selected = undefined;
		    this.showForm();
		  }
		
		  update(record: OrderWithNavigationPropertiesDto) {
		    this.selected = record;
		    this.showForm();
		  }
		
		  hideForm() {
		    this.isVisible = false;
		  }
		
		  submitForm() {
		    if (this.form.invalid) return;
		
		    this.isBusy = true;
		
		    const request = this.createRequest().pipe(
		      finalize(() => (this.isBusy = false)),
		      tap(() => this.hideForm()),
		    );
		
		    request.subscribe(this.list.get);
		  }
		
		  changeVisible($event: boolean) {
		    this.isVisible = $event;
		  }
		}</file>
	<file path='angular\src\app\orders\order\services\order-detail.service.ts'>
		import { Injectable } from '@angular/core';
		import { AbstractOrderDetailViewService } from './order-detail.abstract.service';
		
		@Injectable()
		export class OrderDetailViewService extends AbstractOrderDetailViewService {}</file>
	<file path='angular\src\app\orders\order\services\order.abstract.service.ts'><![CDATA[
		import { inject } from '@angular/core';
		import { ConfirmationService, Confirmation } from '@abp/ng.theme.shared';
		import { ABP, AbpWindowService, ListService, PagedResultDto } from '@abp/ng.core';
		import { filter, switchMap, finalize } from 'rxjs/operators';
		import type {
		  GetOrdersInput,
		  OrderWithNavigationPropertiesDto,
		} from '../../../proxy/orders/models';
		import { OrderService } from '../../../proxy/orders/order.service';
		
		export abstract class AbstractOrderViewService {
		  protected readonly proxyService = inject(OrderService);
		  protected readonly confirmationService = inject(ConfirmationService);
		  protected readonly list = inject(ListService);
		  protected readonly abpWindowService = inject(AbpWindowService);
		
		  isExportToExcelBusy = false;
		
		  data: PagedResultDto<OrderWithNavigationPropertiesDto> = {
		    items: [],
		    totalCount: 0,
		  };
		
		  filters = {} as GetOrdersInput;
		
		  delete(record: OrderWithNavigationPropertiesDto) {
		    this.confirmationService
		      .warn('::DeleteConfirmationMessage', '::AreYouSure', { messageLocalizationParams: [] })
		      .pipe(
		        filter(status => status === Confirmation.Status.confirm),
		        switchMap(() => this.proxyService.delete(record.order.id)),
		      )
		      .subscribe(this.list.get);
		  }
		
		  hookToQuery() {
		    const getData = (query: ABP.PageQueryParams) =>
		      this.proxyService.getList({
		        ...query,
		        ...this.filters,
		        filterText: query.filter,
		      });
		
		    const setData = (list: PagedResultDto<OrderWithNavigationPropertiesDto>) => {
		      this.data = list;
		    };
		
		    this.list.hookToQuery(getData).subscribe(setData);
		  }
		
		  clearFilters() {
		    this.filters = {} as GetOrdersInput;
		    this.list.get();
		  }
		
		  exportToExcel() {
		    this.isExportToExcelBusy = true;
		    this.proxyService
		      .getDownloadToken()
		      .pipe(
		        switchMap(({ token }) =>
		          this.proxyService.getListAsExcelFile({
		            downloadToken: token,
		            filterText: this.list.filter,
		            ...this.filters,
		          }),
		        ),
		        finalize(() => (this.isExportToExcelBusy = false)),
		      )
		      .subscribe(result => {
		        this.abpWindowService.downloadBlob(result, 'Order.xlsx');
		      });
		  }
		}]]></file>
	<file path='angular\src\app\orders\order\services\order.service.ts'>
		import { Injectable } from '@angular/core';
		import { AbstractOrderViewService } from './order.abstract.service';
		
		@Injectable()
		export class OrderViewService extends AbstractOrderViewService {}</file>
	<file path='angular\src\app\products\product\components\product-detail.component.html'><![CDATA[
		<abp-modal [busy]="service.isBusy" [(visible)]="service.isVisible">
		  <ng-template #abpHeader>
		    <!--<suite-custom-code-block-0>-->
		    <!--</suite-custom-code-block-0>-->
		    <h3>
		      <!--<suite-custom-code-block-1>-->
		      <!--</suite-custom-code-block-1>-->
		      {{ (service.selected ? 'AbpUi::Edit' : '::NewProduct') | abpLocalization }}
		      <!--<suite-custom-code-block-2>-->
		      <!--</suite-custom-code-block-2>-->
		    </h3>
		    <!--<suite-custom-code-block-3>-->
		    <!--</suite-custom-code-block-3>-->
		  </ng-template>
		
		  <ng-template #abpBody>
		    <!--<suite-custom-code-block-4>-->
		    <!--</suite-custom-code-block-4>-->
		    <form
		      [formGroup]="service.form"
		      id="product"
		      (ngSubmit)="service.submitForm()"
		      validateOnSubmit
		    >
		      <!--<suite-custom-code-block-5>-->
		      <!--</suite-custom-code-block-5>-->
		
		      <ul ngbNav #nav="ngbNav" class="nav-tabs">
		        <li ngbNavItem>
		          <a ngbNavLink>
		            {{ '::Product' | abpLocalization }}
		          </a>
		          <ng-template ngbNavContent>
		            <div class="mt-2 fade-in-top">
		              <div class="mb-3">
		                <label class="form-label" for="product-name">
		                  {{ '::Name' | abpLocalization }} *
		                </label>
		
		                <input id="product-name" formControlName="name" class="form-control" autofocus />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="product-desc">
		                  {{ '::Desc' | abpLocalization }}
		                </label>
		
		                <input id="product-desc" formControlName="desc" class="form-control" />
		              </div>
		
		              <div class="mb-3">
		                <label class="form-label" for="product-price">
		                  {{ '::Price' | abpLocalization }} *
		                </label>
		
		                <input
		                  type="number"
		                  id="product-price"
		                  formControlName="price"
		                  class="form-control"
		                />
		              </div>
		
		              <div class="form-check mb-3">
		                <input
		                  type="checkbox"
		                  id="product-is-active"
		                  formControlName="isActive"
		                  class="form-check-input"
		                />
		
		                <label for="product-is-active" class="form-check-label">
		                  {{ '::IsActive' | abpLocalization }}
		                </label>
		              </div>
		            </div>
		          </ng-template>
		        </li>
		      </ul>
		      <div [ngbNavOutlet]="nav"></div>
		
		      <!--<suite-custom-code-block-6>-->
		      <!--</suite-custom-code-block-6>-->
		    </form>
		  </ng-template>
		
		  <ng-template #abpFooter>
		    <!--<suite-custom-code-block-7>-->
		    <!--</suite-custom-code-block-7>-->
		    <button type="button" class="btn btn-secondary" abpClose>
		      {{ 'AbpUi::Cancel' | abpLocalization }}
		    </button>
		    <!--<suite-custom-code-block-8>-->
		    <!--</suite-custom-code-block-8>-->
		    <abp-button iconClass="fa fa-check" buttonType="submit" formName="product">
		      {{ 'AbpUi::Save' | abpLocalization }}
		    </abp-button>
		    <!--<suite-custom-code-block-9>-->
		    <!--</suite-custom-code-block-9>-->
		  </ng-template>
		</abp-modal>]]></file>
	<file path='angular\src\app\products\product\components\product-detail.component.ts'>
		import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
		import { ReactiveFormsModule } from '@angular/forms';
		import { CommonModule } from '@angular/common';
		import { NgxValidateCoreModule } from '@ngx-validate/core';
		import { LocalizationPipe, AutofocusDirective } from '@abp/ng.core';
		import {
		  DateAdapter,
		  TimeAdapter,
		  ModalComponent,
		  ModalCloseDirective,
		  ButtonComponent,
		} from '@abp/ng.theme.shared';
		
		import {
		  NgbNavModule,
		  NgbDatepickerModule,
		  NgbTimepickerModule,
		  NgbDateAdapter,
		  NgbTimeAdapter,
		} from '@ng-bootstrap/ng-bootstrap';
		import { ProductDetailViewService } from '../services/product-detail.service';
		
		@Component({
		  selector: 'app-product-detail-modal',
		  changeDetection: ChangeDetectionStrategy.Default,
		  imports: [
		    CommonModule,
		    ReactiveFormsModule,
		    NgbDatepickerModule,
		    NgbTimepickerModule,
		    NgbNavModule,
		    NgxValidateCoreModule,
		    AutofocusDirective,
		    ModalCloseDirective,
		    LocalizationPipe,
		    ModalComponent,
		    ButtonComponent,
		  ],
		  providers: [
		    { provide: NgbDateAdapter, useClass: DateAdapter },
		    { provide: NgbTimeAdapter, useClass: TimeAdapter },
		  ],
		  templateUrl: './product-detail.component.html',
		  styles: [],
		})
		export class ProductDetailModalComponent {
		  public readonly service = inject(ProductDetailViewService);
		}</file>
	<file path='angular\src\app\products\product\components\product.abstract.component.ts'>
		import { Directive, OnInit, inject } from '@angular/core';
		
		import { ListService, PermissionService, TrackByService } from '@abp/ng.core';
		
		import type { ProductDto } from '../../../proxy/products/models';
		import { ProductViewService } from '../services/product.service';
		import { ProductDetailViewService } from '../services/product-detail.service';
		
		export const ChildTabDependencies = [];
		
		export const ChildComponentDependencies = [];
		
		@Directive()
		export abstract class AbstractProductComponent implements OnInit {
		  public readonly list = inject(ListService);
		  public readonly track = inject(TrackByService);
		  public readonly service = inject(ProductViewService);
		  public readonly serviceDetail = inject(ProductDetailViewService);
		  public readonly permissionService = inject(PermissionService);
		
		  protected title = '::Products';
		  protected isActionButtonVisible: boolean | null = null;
		
		  ngOnInit() {
		    this.service.hookToQuery();
		    this.checkActionButtonVisibility();
		  }
		
		  clearFilters() {
		    this.service.clearFilters();
		  }
		
		  showForm() {
		    this.serviceDetail.showForm();
		  }
		
		  create() {
		    this.serviceDetail.selected = undefined;
		    this.serviceDetail.showForm();
		  }
		
		  update(record: ProductDto) {
		    this.serviceDetail.update(record);
		  }
		
		  delete(record: ProductDto) {
		    this.service.delete(record);
		  }
		
		  exportToExcel() {
		    this.service.exportToExcel();
		  }
		
		  checkActionButtonVisibility() {
		    if (this.isActionButtonVisible !== null) {
		      return;
		    }
		
		    const canEdit = this.permissionService.getGrantedPolicy(
		      'ExampleAbpApplicationLayer.Products.Edit',
		    );
		    const canDelete = this.permissionService.getGrantedPolicy(
		      'ExampleAbpApplicationLayer.Products.Delete',
		    );
		    this.isActionButtonVisible = canEdit || canDelete;
		  }
		}</file>
	<file path='angular\src\app\products\product\components\product.component.html'><![CDATA[
		<abp-page [title]="title | abpLocalization">
		  <abp-page-toolbar-container class="col">
		    <!--<suite-custom-code-block-0>-->
		    <!--</suite-custom-code-block-0>-->
		    <div class="text-lg-end pt-2">
		      <!--<suite-custom-code-block-1>-->
		      <!--</suite-custom-code-block-1>-->
		
		      <button
		        class="btn btn-primary btn-sm mx-2"
		        type="button"
		        [disabled]="service.isExportToExcelBusy"
		        (click)="exportToExcel()"
		      >
		        {{ '::ExportToExcel' | abpLocalization }}
		      </button>
		
		      <button
		        *abpPermission="'ExampleAbpApplicationLayer.Products.Create'"
		        class="btn btn-primary btn-sm"
		        type="button"
		        (click)="create()"
		      >
		        <i class="fa fa-plus me-1" aria-hidden="true"></i>
		        {{ '::NewProduct' | abpLocalization }}
		      </button>
		      <!--<suite-custom-code-block-2>-->
		      <!--</suite-custom-code-block-2>-->
		    </div>
		  </abp-page-toolbar-container>
		
		  <abp-advanced-entity-filters localizationSourceName="" [list]="list">
		    @if (service.filters; as filters) {
		      <abp-advanced-entity-filters-form>
		        <form #filterForm (keyup.enter)="list.get()">
		          <!--<suite-custom-code-block-3>-->
		          <!--</suite-custom-code-block-3>-->
		          <div class="row">
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="nameFilter">
		                  {{ '::Name' | abpLocalization }}
		                </label>
		
		                <input
		                  id="nameFilter"
		                  class="form-control"
		                  [(ngModel)]="filters.name"
		                  [ngModelOptions]="{ standalone: true }"
		                />
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="minPrice">
		                  {{ '::MinPrice' | abpLocalization }}
		                </label>
		
		                <input
		                  id="minPrice"
		                  type="number"
		                  class="form-control"
		                  [(ngModel)]="filters.priceMin"
		                  [ngModelOptions]="{ standalone: true }"
		                />
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="maxPrice">
		                  {{ '::MaxPrice' | abpLocalization }}
		                </label>
		
		                <input
		                  id="maxPrice"
		                  type="number"
		                  class="form-control"
		                  [(ngModel)]="filters.priceMax"
		                  [ngModelOptions]="{ standalone: true }"
		                />
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto">
		              <div class="mb-3">
		                <label class="form-label" for="isActiveFilter">
		                  {{ '::IsActive' | abpLocalization }}
		                </label>
		
		                <select
		                  name="isActive"
		                  id="isActiveFilter"
		                  class="form-select form-control"
		                  [(ngModel)]="filters.isActive"
		                  [ngModelOptions]="{ standalone: true }"
		                  (change)="list.get()"
		                >
		                  <option [ngValue]=""></option>
		                  <option [ngValue]="true">{{ 'AbpUi::Yes' | abpLocalization }}</option>
		                  <option [ngValue]="false">{{ 'AbpUi::No' | abpLocalization }}</option>
		                </select>
		              </div>
		            </div>
		
		            <div class="col-12 col-sm-auto align-self-end mb-3">
		              <div class="row">
		                <div class="col-6 col-sm-auto d-grid">
		                  <button type="button" class="btn btn-outline-primary" (click)="clearFilters()">
		                    <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>
		                  </button>
		                </div>
		                <div class="col-6 col-sm-auto d-grid">
		                  <button type="button" class="btn btn-primary" (click)="list.get()">
		                    <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>
		                  </button>
		                </div>
		              </div>
		            </div>
		          </div>
		          <!--<suite-custom-code-block-4>-->
		          <!--</suite-custom-code-block-4>-->
		        </form>
		      </abp-advanced-entity-filters-form>
		    }
		  </abp-advanced-entity-filters>
		  <!--<suite-custom-code-block-5>-->
		  <!--</suite-custom-code-block-5>-->
		  <div class="card">
		    <div class="card-header d-flex justify-content-between align-items-center">
		      @if (service.selectedCount() > 0) {
		        <h4 class="card-title">
		          {{
		            '::AllItemsAreSelected'
		              | abpLocalization
		                : (service.allSelected() ? service.data.totalCount : service.selectedCount())
		          }}
		        </h4>
		
		        <div>
		          <button class="btn btn-outline-primary btn-sm" (click)="service.selectAll()">
		            @if (service.allSelected()) {
		              {{ '::ClearSelection' | abpLocalization }}
		            } @else {
		              {{ '::SelectAllItems' | abpLocalization: service.data.totalCount }}
		            }
		          </button>
		
		          <button
		            *abpPermission="'ExampleAbpApplicationLayer.Products.Delete'"
		            class="btn btn-danger btn-sm mx-1"
		            (click)="service.bulkDelete()"
		          >
		            <i class="fa fa-trash me-1" aria-hidden="true"></i>
		            {{ 'AbpUi::Delete' | abpLocalization: service.selectedCount() }}
		          </button>
		        </div>
		      }
		    </div>
		
		    <!--<suite-custom-code-block-6>-->
		    <!--</suite-custom-code-block-6>-->
		    <div class="card-body">
		      <!--<suite-custom-code-block-7>-->
		      <!--</suite-custom-code-block-7>-->
		      <ngx-datatable
		        default
		        [rows]="service.data.items"
		        [count]="service.data.totalCount"
		        [list]="list"
		        [selected]="service.selected()"
		        [selectionType]="service.selectionType.checkbox"
		        (select)="service.onSelect($event)"
		      >
		        <!--<suite-custom-code-block-8>-->
		        <!--</suite-custom-code-block-8>-->
		
		        <ngx-datatable-column
		          [width]="40"
		          [sortable]="false"
		          [canAutoResize]="false"
		          [draggable]="false"
		          [resizeable]="false"
		        >
		          <ng-template
		            ngx-datatable-header-template
		            let-value="value"
		            let-allRowsSelected="allRowsSelected"
		            let-selectFn="selectFn"
		          >
		            @if (service.data.items.length > 0) {
		              <input
		                type="checkbox"
		                class="form-check-input"
		                [checked]="allRowsSelected"
		                (change)="selectFn(!allRowsSelected)"
		              />
		            }
		          </ng-template>
		          <ng-template
		            ngx-datatable-cell-template
		            let-value="value"
		            let-isSelected="isSelected"
		            let-onCheckboxChangeFn="onCheckboxChangeFn"
		          >
		            <input
		              class="form-check-input"
		              type="checkbox"
		              [checked]="isSelected"
		              (change)="onCheckboxChangeFn($event)"
		            />
		          </ng-template>
		        </ngx-datatable-column>
		
		        @if (isActionButtonVisible) {
		          <ngx-datatable-column
		            [name]="'AbpUi::Actions' | abpLocalization"
		            [maxWidth]="150"
		            [width]="150"
		            [sortable]="false"
		          >
		            <ng-template let-row="row" let-i="rowIndex" ngx-datatable-cell-template>
		              <div ngbDropdown container="body" class="d-inline-block">
		                <button
		                  class="btn btn-primary btn-sm dropdown-toggle"
		                  data-toggle="dropdown"
		                  aria-haspopup="true"
		                  ngbDropdownToggle
		                >
		                  <i class="fa fa-cog me-1" aria-hidden="true"></i>
		                  {{ 'AbpUi::Actions' | abpLocalization }}
		                </button>
		
		                <div ngbDropdownMenu>
		                  <button
		                    ngbDropdownItem
		                    *abpPermission="'ExampleAbpApplicationLayer.Products.Edit'"
		                    (click)="update(row)"
		                  >
		                    {{ 'AbpUi::Edit' | abpLocalization }}
		                  </button>
		
		                  <button
		                    ngbDropdownItem
		                    *abpPermission="'ExampleAbpApplicationLayer.Products.Delete'"
		                    (click)="delete(row)"
		                  >
		                    {{ 'AbpUi::Delete' | abpLocalization }}
		                  </button>
		                </div>
		              </div>
		            </ng-template>
		          </ngx-datatable-column>
		        }
		        <ngx-datatable-column name="{{ '::Name' | abpLocalization }}" prop="name">
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            {{ row.name }}
		          </ng-template>
		        </ngx-datatable-column>
		        <ngx-datatable-column name="{{ '::Price' | abpLocalization }}" prop="price">
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            {{ row.price }}
		          </ng-template>
		        </ngx-datatable-column>
		        <ngx-datatable-column name="{{ '::IsActive' | abpLocalization }}" prop="isActive">
		          <ng-template let-row="row" ngx-datatable-cell-template>
		            <ng-template [ngIf]="row.isActive" [ngIfThen]="yes" [ngIfElse]="no"></ng-template>
		
		            <ng-template #yes>
		              <div class="text-success">
		                <span [title]="'AbpUi::Yes' | abpLocalization">
		                  <i class="fa fa-check" aria-hidden="true"></i>
		                </span>
		              </div>
		            </ng-template>
		
		            <ng-template #no>
		              <div class="text-danger">
		                <span [title]="'AbpUi::No' | abpLocalization">
		                  <i class="fa fa-times" aria-hidden="true"></i>
		                </span>
		              </div>
		            </ng-template>
		          </ng-template>
		        </ngx-datatable-column>
		        <!--<suite-custom-code-block-9>-->
		        <!--</suite-custom-code-block-9>-->
		      </ngx-datatable>
		      <!--<suite-custom-code-block-10>-->
		      <!--</suite-custom-code-block-10>-->
		    </div>
		  </div>
		  <!--<suite-custom-code-block-11>-->
		  <!--</suite-custom-code-block-11>-->
		</abp-page>
		<!--<suite-custom-code-block-12>-->
		<!--</suite-custom-code-block-12>-->
		
		@defer (when serviceDetail.isVisible) {
		  @if (serviceDetail.isVisible) {
		    <app-product-detail-modal />
		  }
		}]]></file>
	<file path='angular\src\app\products\product\components\product.component.ts'>
		import { ChangeDetectionStrategy, Component } from '@angular/core';
		import { CommonModule } from '@angular/common';
		import { FormsModule, ReactiveFormsModule } from '@angular/forms';
		import {
		  NgbDateAdapter,
		  NgbTimeAdapter,
		  NgbCollapseModule,
		  NgbDatepickerModule,
		  NgbTimepickerModule,
		  NgbDropdownModule,
		} from '@ng-bootstrap/ng-bootstrap';
		import { NgxValidateCoreModule } from '@ngx-validate/core';
		import { NgxDatatableModule } from '@swimlane/ngx-datatable';
		import { ListService, LocalizationPipe, PermissionDirective } from '@abp/ng.core';
		import {
		  DateAdapter,
		  TimeAdapter,
		  NgxDatatableDefaultDirective,
		  NgxDatatableListDirective,
		} from '@abp/ng.theme.shared';
		import { PageComponent, PageToolbarContainerComponent } from '@abp/ng.components/page';
		import {
		  AdvancedEntityFiltersComponent,
		  AdvancedEntityFiltersFormComponent,
		} from '@volo/abp.commercial.ng.ui';
		import { ProductViewService } from '../services/product.service';
		import { ProductDetailViewService } from '../services/product-detail.service';
		import { ProductDetailModalComponent } from './product-detail.component';
		import {
		  AbstractProductComponent,
		  ChildTabDependencies,
		  ChildComponentDependencies,
		} from './product.abstract.component';
		
		@Component({
		  selector: 'app-product',
		  changeDetection: ChangeDetectionStrategy.Default,
		  imports: [
		    ...ChildTabDependencies,
		    NgbCollapseModule,
		    NgbDatepickerModule,
		    NgbTimepickerModule,
		    NgbDropdownModule,
		    NgxValidateCoreModule,
		    CommonModule,
		    FormsModule,
		    ReactiveFormsModule,
		    NgxDatatableModule,
		    NgxDatatableDefaultDirective,
		    NgxDatatableListDirective,
		    PermissionDirective,
		    LocalizationPipe,
		    PageComponent,
		    PageToolbarContainerComponent,
		    AdvancedEntityFiltersComponent,
		    AdvancedEntityFiltersFormComponent,
		
		    ProductDetailModalComponent,
		    ...ChildComponentDependencies,
		  ],
		  providers: [
		    ListService,
		    ProductViewService,
		    ProductDetailViewService,
		    { provide: NgbDateAdapter, useClass: DateAdapter },
		    { provide: NgbTimeAdapter, useClass: TimeAdapter },
		  ],
		  templateUrl: './product.component.html',
		  styles: `
		    ::ng-deep.datatable-row-detail {
		      background: transparent !important;
		    }
		  `,
		})
		export class ProductComponent extends AbstractProductComponent {}</file>
	<file path='angular\src\app\products\product\product-routes.ts'>
		import { Routes } from '@angular/router';
		import { authGuard, permissionGuard } from '@abp/ng.core';
		
		export const PRODUCT_ROUTES: Routes = [
		  {
		    path: '',
		    loadComponent: () => {
		      return import('./components/product.component').then(c => c.ProductComponent);
		    },
		    canActivate: [authGuard, permissionGuard],
		  },
		];</file>
	<file path='angular\src\app\products\product\providers\product-base.routes.ts'>
		import { ABP, eLayoutType } from '@abp/ng.core';
		
		export const PRODUCT_BASE_ROUTES: ABP.Route[] = [
		  {
		    path: '/products',
		    iconClass: 'fas fa-file-alt',
		    name: '::Menu:Products',
		    layout: eLayoutType.application,
		    requiredPolicy: 'ExampleAbpApplicationLayer.Products',
		    breadcrumbText: '::Products',
		  },
		];</file>
	<file path='angular\src\app\products\product\providers\product-route.provider.ts'>
		import { inject, provideAppInitializer } from '@angular/core';
		import { ABP, RoutesService } from '@abp/ng.core';
		import { PRODUCT_BASE_ROUTES } from './product-base.routes';
		
		export const PRODUCTS_PRODUCT_ROUTE_PROVIDER = [
		  provideAppInitializer(() => {
		    configureRoutes();
		  }),
		];
		
		function configureRoutes() {
		  const routesService = inject(RoutesService);
		  const routes: ABP.Route[] = [...PRODUCT_BASE_ROUTES];
		  routesService.add(routes);
		}</file>
	<file path='angular\src\app\products\product\services\product-detail.abstract.service.ts'>
		import { inject } from '@angular/core';
		import { FormBuilder, FormGroup, Validators } from '@angular/forms';
		import { ListService, TrackByService } from '@abp/ng.core';
		
		import { finalize, tap } from 'rxjs/operators';
		
		import type { ProductDto } from '../../../proxy/products/models';
		import { ProductService } from '../../../proxy/products/product.service';
		
		export abstract class AbstractProductDetailViewService {
		  protected readonly fb = inject(FormBuilder);
		  protected readonly track = inject(TrackByService);
		
		  public readonly proxyService = inject(ProductService);
		  public readonly list = inject(ListService);
		
		  isBusy = false;
		  isVisible = false;
		  selected = {} as any;
		  form: FormGroup | undefined;
		
		  protected createRequest() {
		    const formValues = {
		      ...this.form.value,
		    };
		
		    if (this.selected) {
		      return this.proxyService.update(this.selected.id, {
		        ...formValues,
		        concurrencyStamp: this.selected.concurrencyStamp,
		      });
		    }
		
		    return this.proxyService.create(formValues);
		  }
		
		  buildForm() {
		    const { name, desc, price, isActive } = this.selected || {};
		
		    this.form = this.fb.group({
		      name: [name ?? null, [Validators.required]],
		      desc: [desc ?? null, []],
		      price: [price ?? '0', [Validators.required]],
		      isActive: [isActive ?? true, []],
		    });
		  }
		
		  showForm() {
		    this.buildForm();
		    this.isVisible = true;
		  }
		
		  create() {
		    this.selected = undefined;
		    this.showForm();
		  }
		
		  update(record: ProductDto) {
		    this.selected = record;
		    this.showForm();
		  }
		
		  hideForm() {
		    this.isVisible = false;
		  }
		
		  submitForm() {
		    if (this.form.invalid) return;
		
		    this.isBusy = true;
		
		    const request = this.createRequest().pipe(
		      finalize(() => (this.isBusy = false)),
		      tap(() => this.hideForm()),
		    );
		
		    request.subscribe(this.list.get);
		  }
		
		  changeVisible($event: boolean) {
		    this.isVisible = $event;
		  }
		}</file>
	<file path='angular\src\app\products\product\services\product-detail.service.ts'>
		import { Injectable } from '@angular/core';
		import { AbstractProductDetailViewService } from './product-detail.abstract.service';
		
		@Injectable()
		export class ProductDetailViewService extends AbstractProductDetailViewService {}</file>
	<file path='angular\src\app\products\product\services\product.abstract.service.ts'><![CDATA[
		import { inject, computed, signal } from '@angular/core';
		import { SelectionType } from '@swimlane/ngx-datatable';
		import { ConfirmationService, Confirmation } from '@abp/ng.theme.shared';
		import { ABP, AbpWindowService, ListService, PagedResultDto } from '@abp/ng.core';
		import { filter, switchMap, finalize } from 'rxjs/operators';
		import type { GetProductsInput, ProductDto } from '../../../proxy/products/models';
		import { ProductService } from '../../../proxy/products/product.service';
		
		export abstract class AbstractProductViewService {
		  protected readonly proxyService = inject(ProductService);
		  protected readonly confirmationService = inject(ConfirmationService);
		  protected readonly list = inject(ListService);
		  protected readonly abpWindowService = inject(AbpWindowService);
		
		  isExportToExcelBusy = false;
		
		  data: PagedResultDto<ProductDto> = {
		    items: [],
		    totalCount: 0,
		  };
		
		  selectionType = SelectionType;
		  selected = signal<ProductDto[]>([]);
		  allSelected = signal(false);
		  selectedCount = computed(() => this.selected().length);
		
		  filters = {} as GetProductsInput;
		
		  protected clearAllSelection() {
		    this.selected.set([]);
		    this.allSelected.set(false);
		  }
		
		  protected bulkDeleteRequest() {
		    const ids = this.selected().map(({ id }) => id);
		
		    const request = !this.allSelected()
		      ? this.proxyService.deleteByIds(ids)
		      : this.proxyService.deleteAll({
		          filterText: this.list.filter,
		          ...this.filters,
		        });
		
		    return request.pipe(finalize(this.list.get));
		  }
		
		  delete(record: ProductDto) {
		    this.confirmationService
		      .warn('::DeleteConfirmationMessage', '::AreYouSure', { messageLocalizationParams: [] })
		      .pipe(
		        filter(status => status === Confirmation.Status.confirm),
		        switchMap(() => this.proxyService.delete(record.id)),
		      )
		      .subscribe(this.list.get);
		  }
		
		  bulkDelete() {
		    if (this.selectedCount() < 1) {
		      return;
		    }
		
		    let message = '::';
		    let messageParam = null;
		
		    if (this.allSelected()) {
		      message += 'DeleteAllRecords';
		    } else {
		      message += 'DeleteSelectedRecords';
		      messageParam = this.selectedCount().toString();
		    }
		
		    this.confirmationService
		      .warn(message, 'AbpUi::AreYouSure', {
		        messageLocalizationParams: [messageParam],
		      })
		      .pipe(
		        filter(result => result === Confirmation.Status.confirm),
		        switchMap(() => this.bulkDeleteRequest()),
		      )
		      .subscribe();
		  }
		
		  selectAll() {
		    this.allSelected.set(!this.allSelected());
		    this.selected.set(this.allSelected() ? [...this.data.items] : []);
		  }
		
		  onSelect({ selected }) {
		    if (selected.length < 1) {
		      this.clearAllSelection();
		      return;
		    }
		
		    if (selected.length === this.data.totalCount) {
		      this.allSelected.set(true);
		      this.selected.set(selected);
		      return;
		    }
		
		    if (selected.length !== this.data.totalCount && this.allSelected()) {
		      this.allSelected.set(false);
		    }
		
		    if (selected.length === 1) {
		      this.selected.set([...this.selected()]);
		      return;
		    }
		
		    this.selected.set(selected);
		  }
		
		  hookToQuery() {
		    const getData = (query: ABP.PageQueryParams) =>
		      this.proxyService.getList({
		        ...query,
		        ...this.filters,
		        filterText: query.filter,
		      });
		
		    const setData = (list: PagedResultDto<ProductDto>) => {
		      this.data = list;
		
		      if (this.selectedCount() > 0) {
		        this.clearAllSelection();
		      }
		    };
		
		    this.list.hookToQuery(getData).subscribe(setData);
		  }
		
		  clearFilters() {
		    this.filters = {} as GetProductsInput;
		    this.list.get();
		  }
		
		  exportToExcel() {
		    this.isExportToExcelBusy = true;
		    this.proxyService
		      .getDownloadToken()
		      .pipe(
		        switchMap(({ token }) =>
		          this.proxyService.getListAsExcelFile({
		            downloadToken: token,
		            filterText: this.list.filter,
		            ...this.filters,
		          }),
		        ),
		        finalize(() => (this.isExportToExcelBusy = false)),
		      )
		      .subscribe(result => {
		        this.abpWindowService.downloadBlob(result, 'Product.xlsx');
		      });
		  }
		}]]></file>
	<file path='angular\src\app\products\product\services\product.service.ts'>
		import { Injectable } from '@angular/core';
		import { AbstractProductViewService } from './product.abstract.service';
		
		@Injectable()
		export class ProductViewService extends AbstractProductViewService {}</file>
	<file path='angular\src\app\proxy\enums\index.ts'>
		import * as Orders from './orders';
		export { Orders };</file>
	<file path='angular\src\app\proxy\enums\orders\index.ts'>
		export * from './order-status.enum';</file>
	<file path='angular\src\app\proxy\enums\orders\order-status.enum.ts'>
		import { mapEnumToOptions } from '@abp/ng.core';
		
		export enum OrderStatus {
		  Initialized = 0,
		  Paid = 1,
		  Processing = 2,
		  Ordered = 3,
		  Shipped = 4,
		  Arrived = 5,
		  Delivered = 6,
		  Cancelled = 7,
		  NotPaid = 8,
		}
		
		export const orderStatusOptions = mapEnumToOptions(OrderStatus);</file>
	<file path='angular\src\app\proxy\generate-proxy.json'><![CDATA[
		{
		  "generated": ["app"],
		  "modules": {
		    "app": {
		      "rootPath": "app",
		      "remoteServiceName": "Default",
		      "controllers": {
		        "ExampleAbpApplicationLayer.Controllers.Orders.OrderController": {
		          "controllerName": "Order",
		          "type": "ExampleAbpApplicationLayer.Controllers.Orders.OrderController",
		          "isRemoteService": true,
		          "isIntegrationService": false,
		          "interfaces": [
		            {
		              "type": "ExampleAbpApplicationLayer.Orders.IOrderAppService"
		            }
		          ],
		          "actions": {
		            "GetListAsyncByInput": {
		              "uniqueName": "GetListAsyncByInput",
		              "name": "GetListAsync",
		              "httpMethod": "GET",
		              "url": "api/app/orders",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Orders.GetOrdersInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Orders.GetOrdersInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.Orders.GetOrdersInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Sorting",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "OrderDateMin",
		                  "jsonName": null,
		                  "type": "System.DateTime?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "OrderDateMax",
		                  "jsonName": null,
		                  "type": "System.DateTime?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "TotalAmountMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "TotalAmountMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Status",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		                  "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "IdentityUserId",
		                  "jsonName": null,
		                  "type": "System.Guid?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Orders.OrderWithNavigationPropertiesDto>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Orders.OrderWithNavigationPropertiesDto>"
		              }
		            },
		            "GetWithNavigationPropertiesAsyncById": {
		              "uniqueName": "GetWithNavigationPropertiesAsyncById",
		              "name": "GetWithNavigationPropertiesAsync",
		              "httpMethod": "GET",
		              "url": "api/app/orders/with-navigation-properties/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Orders.OrderWithNavigationPropertiesDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderWithNavigationPropertiesDto"
		              }
		            },
		            "GetAsyncById": {
		              "uniqueName": "GetAsyncById",
		              "name": "GetAsync",
		              "httpMethod": "GET",
		              "url": "api/app/orders/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto"
		              }
		            },
		            "GetIdentityUserLookupAsyncByInput": {
		              "uniqueName": "GetIdentityUserLookupAsyncByInput",
		              "name": "GetIdentityUserLookupAsync",
		              "httpMethod": "GET",
		              "url": "api/app/orders/identity-user-lookup",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Shared.LookupRequestDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Shared.LookupRequestDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Shared.LookupRequestDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "Filter",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Shared.LookupDto<System.Guid?>>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Shared.LookupDto<string?>>"
		              }
		            },
		            "GetListAsExcelFileAsyncByInput": {
		              "uniqueName": "GetListAsExcelFileAsyncByInput",
		              "name": "GetListAsExcelFileAsync",
		              "httpMethod": "GET",
		              "url": "api/app/orders/as-excel-file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "DownloadToken",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "OrderDateMin",
		                  "jsonName": null,
		                  "type": "System.DateTime?",
		                  "typeSimple": "string?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "OrderDateMax",
		                  "jsonName": null,
		                  "type": "System.DateTime?",
		                  "typeSimple": "string?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "TotalAmountMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "TotalAmountMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "Status",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		                  "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "IdentityUserId",
		                  "jsonName": null,
		                  "type": "System.Guid?",
		                  "typeSimple": "string?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Content.IRemoteStreamContent",
		                "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
		              },
		              "allowAnonymous": null,
		              "implementFrom": "ExampleAbpApplicationLayer.Orders.IOrdersAppService"
		            },
		            "GetDownloadTokenAsync": {
		              "uniqueName": "GetDownloadTokenAsync",
		              "name": "GetDownloadTokenAsync",
		              "httpMethod": "GET",
		              "url": "api/app/orders/download-token",
		              "supportedVersions": [],
		              "parametersOnMethod": [],
		              "parameters": [],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto"
		              },
		              "allowAnonymous": null,
		              "implementFrom": "ExampleAbpApplicationLayer.Orders.IOrdersAppService"
		            },
		            "CreateAsyncByInput": {
		              "uniqueName": "CreateAsyncByInput",
		              "name": "CreateAsync",
		              "httpMethod": "POST",
		              "url": "api/app/orders",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Orders.OrderCreateDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderCreateDto",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto"
		              }
		            },
		            "UpdateAsyncByIdAndInput": {
		              "uniqueName": "UpdateAsyncByIdAndInput",
		              "name": "UpdateAsync",
		              "httpMethod": "PUT",
		              "url": "api/app/orders/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                },
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderUpdateDto",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto"
		              }
		            },
		            "DeleteAsyncById": {
		              "uniqueName": "DeleteAsyncById",
		              "name": "DeleteAsync",
		              "httpMethod": "DELETE",
		              "url": "api/app/orders/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "System.Void",
		                "typeSimple": "System.Void"
		              }
		            },
		            "UploadFileAsyncByInput": {
		              "name": "UploadFileAsync",
		              "uniqueName": "UploadFileAsyncByInput",
		              "httpMethod": "POST",
		              "url": "api/app/orders/upload-file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core",
		                  "type": "Volo.Abp.Content.IRemoteStreamContent",
		                  "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "Volo.Abp.Content.IRemoteStreamContent",
		                  "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto"
		              }
		            },
		            "GetFileAsyncByInput": {
		              "name": "GetFileAsync",
		              "uniqueName": "GetFileAsyncByInput",
		              "httpMethod": "GET",
		              "url": "api/app/orders/file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Shared.GetFileInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Shared.GetFileInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.Shared.GetFileInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "DownloadToken",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FileId",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Content.IRemoteStreamContent",
		                "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
		              }
		            }
		          }
		        },
		        "ExampleAbpApplicationLayer.Controllers.OrderItems.OrderItemController": {
		          "controllerName": "OrderItem",
		          "type": "ExampleAbpApplicationLayer.Controllers.OrderItems.OrderItemController",
		          "isRemoteService": true,
		          "isIntegrationService": false,
		          "interfaces": [
		            {
		              "type": "ExampleAbpApplicationLayer.OrderItems.IOrderItemAppService"
		            }
		          ],
		          "actions": {
		            "GetListAsyncByInput": {
		              "uniqueName": "GetListAsyncByInput",
		              "name": "GetListAsync",
		              "httpMethod": "GET",
		              "url": "api/app/order-items",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "OrderId",
		                  "jsonName": null,
		                  "type": "string",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Sorting",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "QtyMin",
		                  "jsonName": null,
		                  "type": "System.Int?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "QtyMax",
		                  "jsonName": null,
		                  "type": "System.Int?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "PriceMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "PriceMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "TotalPriceMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "TotalPriceMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "ProductName",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "ProductId",
		                  "jsonName": null,
		                  "type": "System.Guid?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>"
		              }
		            },
		            "GetWithNavigationPropertiesAsyncById": {
		              "uniqueName": "GetWithNavigationPropertiesAsyncById",
		              "name": "GetWithNavigationPropertiesAsync",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/with-navigation-properties/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto",
		                "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto"
		              }
		            },
		            "GetListWithNavigationPropertiesByOrderIdAsync": {
		              "uniqueName": "GetListWithNavigationPropertiesByOrderIdAsync",
		              "name": "GetListWithNavigationPropertiesByOrderIdAsync",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/detailed/by-order",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "OrderId",
		                  "jsonName": null,
		                  "type": "string",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Sorting",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>"
		              }
		            },
		            "GetAsyncById": {
		              "uniqueName": "GetAsyncById",
		              "name": "GetAsync",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
		                "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto"
		              }
		            },
		            "GetProductLookupAsyncByInput": {
		              "uniqueName": "GetProductLookupAsyncByInput",
		              "name": "GetProductLookupAsync",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/product-lookup",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Shared.LookupRequestDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Shared.LookupRequestDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Shared.LookupRequestDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "Filter",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Shared.LookupDto<System.Guid?>>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Shared.LookupDto<string?>>"
		              }
		            },
		            "CreateAsyncByInput": {
		              "uniqueName": "CreateAsyncByInput",
		              "name": "CreateAsync",
		              "httpMethod": "POST",
		              "url": "api/app/order-items",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
		                "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto"
		              }
		            },
		            "UpdateAsyncByIdAndInput": {
		              "uniqueName": "UpdateAsyncByIdAndInput",
		              "name": "UpdateAsync",
		              "httpMethod": "PUT",
		              "url": "api/app/order-items/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                },
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
		                "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto"
		              }
		            },
		            "DeleteAsyncById": {
		              "uniqueName": "DeleteAsyncById",
		              "name": "DeleteAsync",
		              "httpMethod": "DELETE",
		              "url": "api/app/order-items/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "System.Void",
		                "typeSimple": "System.Void"
		              }
		            },
		            "UploadFileAsyncByInput": {
		              "name": "UploadFileAsync",
		              "uniqueName": "UploadFileAsyncByInput",
		              "httpMethod": "POST",
		              "url": "api/app/order-items/upload-file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core",
		                  "type": "Volo.Abp.Content.IRemoteStreamContent",
		                  "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "Volo.Abp.Content.IRemoteStreamContent",
		                  "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto"
		              }
		            },
		            "GetFileAsyncByInput": {
		              "name": "GetFileAsync",
		              "uniqueName": "GetFileAsyncByInput",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Shared.GetFileInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Shared.GetFileInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.Shared.GetFileInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "DownloadToken",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FileId",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Content.IRemoteStreamContent",
		                "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
		              }
		            },
		            "GetDownloadTokenAsync": {
		              "uniqueName": "GetDownloadTokenAsync",
		              "name": "GetDownloadTokenAsync",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/download-token",
		              "supportedVersions": [],
		              "parametersOnMethod": [],
		              "parameters": [],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto"
		              },
		              "allowAnonymous": null,
		              "implementFrom": "ExampleAbpApplicationLayer.OrderItems.IOrderItemsAppService"
		            },
		            "GetListByOrderIdAsync": {
		              "uniqueName": "GetListByOrderIdAsync",
		              "name": "GetListByOrderId",
		              "httpMethod": "GET",
		              "url": "api/app/order-items/by-order",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "OrderId",
		                  "jsonName": null,
		                  "type": "string",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Sorting",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto>"
		              }
		            }
		          }
		        },
		        "ExampleAbpApplicationLayer.Controllers.Products.ProductController": {
		          "controllerName": "Product",
		          "type": "ExampleAbpApplicationLayer.Controllers.Products.ProductController",
		          "isRemoteService": true,
		          "isIntegrationService": false,
		          "interfaces": [
		            {
		              "type": "ExampleAbpApplicationLayer.Products.IProductAppService"
		            }
		          ],
		          "actions": {
		            "GetListAsyncByInput": {
		              "uniqueName": "GetListAsyncByInput",
		              "name": "GetListAsync",
		              "httpMethod": "GET",
		              "url": "api/app/products",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Products.GetProductsInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Products.GetProductsInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.GetProductsInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Sorting",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Name",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Desc",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "PriceMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "PriceMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "IsActive",
		                  "jsonName": null,
		                  "type": "System.Bool?",
		                  "typeSimple": "boolean?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Products.ProductDto>",
		                "typeSimple": "Volo.Abp.Application.Dtos.PagedResultDto<ExampleAbpApplicationLayer.Products.ProductDto>"
		              }
		            },
		            "GetAsyncById": {
		              "uniqueName": "GetAsyncById",
		              "name": "GetAsync",
		              "httpMethod": "GET",
		              "url": "api/app/products/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Products.ProductDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto"
		              }
		            },
		            "GetListAsExcelFileAsyncByInput": {
		              "uniqueName": "GetListAsExcelFileAsyncByInput",
		              "name": "GetListAsExcelFileAsync",
		              "httpMethod": "GET",
		              "url": "api/app/products/as-excel-file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "DownloadToken",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "Name",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isRequired": true,
		                  "nameOnMethod": "input",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "Desc",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "PriceMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "PriceMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "name": "IsActive",
		                  "jsonName": null,
		                  "type": "System.Bool?",
		                  "typeSimple": "boolean?",
		                  "isRequired": false,
		                  "nameOnMethod": "input",
		                  "isOptional": true,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Content.IRemoteStreamContent",
		                "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
		              },
		              "allowAnonymous": null,
		              "implementFrom": "ExampleAbpApplicationLayer.Products.IProductsAppService"
		            },
		            "GetDownloadTokenAsync": {
		              "uniqueName": "GetDownloadTokenAsync",
		              "name": "GetDownloadTokenAsync",
		              "httpMethod": "GET",
		              "url": "api/app/products/download-token",
		              "supportedVersions": [],
		              "parametersOnMethod": [],
		              "parameters": [],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto"
		              },
		              "allowAnonymous": null,
		              "implementFrom": "ExampleAbpApplicationLayer.Products.IProductsAppService"
		            },
		            "CreateAsyncByInput": {
		              "uniqueName": "CreateAsyncByInput",
		              "name": "CreateAsync",
		              "httpMethod": "POST",
		              "url": "api/app/products",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Products.ProductCreateDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.ProductCreateDto",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Products.ProductDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto"
		              }
		            },
		            "UpdateAsyncByIdAndInput": {
		              "uniqueName": "UpdateAsyncByIdAndInput",
		              "name": "UpdateAsync",
		              "httpMethod": "PUT",
		              "url": "api/app/products/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                },
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Products.ProductUpdateDto, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.ProductUpdateDto",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Products.ProductDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto"
		              }
		            },
		            "DeleteAsyncById": {
		              "uniqueName": "DeleteAsyncById",
		              "name": "DeleteAsync",
		              "httpMethod": "DELETE",
		              "url": "api/app/products/{id}",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "id",
		                  "typeAsString": "System.Guid, System.Private.CoreLib",
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "id",
		                  "name": "id",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": [],
		                  "bindingSourceId": "Path",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "System.Void",
		                "typeSimple": "System.Void"
		              }
		            },
		            "UploadFileAsyncByInput": {
		              "name": "UploadFileAsync",
		              "uniqueName": "UploadFileAsyncByInput",
		              "httpMethod": "POST",
		              "url": "api/app/products/upload-file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "Volo.Abp.Content.IRemoteStreamContent, Volo.Abp.Core",
		                  "type": "Volo.Abp.Content.IRemoteStreamContent",
		                  "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "input",
		                  "jsonName": null,
		                  "type": "Volo.Abp.Content.IRemoteStreamContent",
		                  "typeSimple": "Volo.Abp.Content.IRemoteStreamContent",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "Body",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto",
		                "typeSimple": "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto"
		              }
		            },
		            "GetFileAsyncByInput": {
		              "name": "GetFileAsync",
		              "uniqueName": "GetFileAsyncByInput",
		              "httpMethod": "GET",
		              "url": "api/app/products/file",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Shared.GetFileInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Shared.GetFileInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.Shared.GetFileInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "DownloadToken",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "FileId",
		                  "jsonName": null,
		                  "type": "System.Guid",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "returnValue": {
		                "type": "Volo.Abp.Content.IRemoteStreamContent",
		                "typeSimple": "Volo.Abp.Content.IRemoteStreamContent"
		              }
		            },
		            "DeleteAllAsync": {
		              "uniqueName": "DeleteAllAsync",
		              "name": "DeleteAllAsync",
		              "httpMethod": "DELETE",
		              "url": "api/app/products/all",
		              "supportedVersions": [],
		              "parameters": [
		                {
		                  "nameOnMethod": "input",
		                  "name": "FilterText",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Sorting",
		                  "jsonName": null,
		                  "type": "System.String",
		                  "typeSimple": "string",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "SkipCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "MaxResultCount",
		                  "jsonName": null,
		                  "type": "System.Int32",
		                  "typeSimple": "number",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Name",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "Desc",
		                  "jsonName": null,
		                  "type": "System.String?",
		                  "typeSimple": "string?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "PriceMin",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "PriceMax",
		                  "jsonName": null,
		                  "type": "System.Float?",
		                  "typeSimple": "number?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                },
		                {
		                  "nameOnMethod": "input",
		                  "name": "IsActive",
		                  "jsonName": null,
		                  "type": "System.Bool?",
		                  "typeSimple": "boolean?",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": "input"
		                }
		              ],
		              "parametersOnMethod": [
		                {
		                  "name": "input",
		                  "typeAsString": "ExampleAbpApplicationLayer.Products.GetProductsInput, ExampleAbpApplicationLayer.Application.Contracts",
		                  "type": "ExampleAbpApplicationLayer.Products.GetProductsInput",
		                  "typeSimple": "ExampleAbpApplicationLayer.Products.GetProductsInput",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "returnValue": {
		                "type": "System.Void",
		                "typeSimple": "System.Void"
		              }
		            },
		            "DeleteByIdsAsyncByProductIds": {
		              "uniqueName": "DeleteByIdsAsyncByProductIds",
		              "name": "DeleteByIdsAsync",
		              "httpMethod": "DELETE",
		              "url": "api/app/products",
		              "supportedVersions": [],
		              "parametersOnMethod": [
		                {
		                  "name": "productIds",
		                  "type": "System.Collections.Generic.List<System.Guid>",
		                  "typeAsString": "System.Collections.Generic.List<System.Guid>, System.Private.CoreLib",
		                  "typeSimple": "[string]",
		                  "isOptional": false,
		                  "defaultValue": null
		                }
		              ],
		              "parameters": [
		                {
		                  "nameOnMethod": "productIds",
		                  "name": "productIds",
		                  "jsonName": null,
		                  "type": "System.Collections.Generic.List<System.Guid>",
		                  "typeSimple": "[string]",
		                  "isOptional": false,
		                  "defaultValue": null,
		                  "constraintTypes": null,
		                  "bindingSourceId": "ModelBinding",
		                  "descriptorName": ""
		                }
		              ],
		              "returnValue": {
		                "type": "System.Void",
		                "typeSimple": "System.Void"
		              }
		            }
		          }
		        }
		      }
		    }
		  },
		  "types": {
		    "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus": {
		      "baseType": "System.Enum",
		      "isEnum": true,
		      "enumNames": [
		        "Initialized",
		        "Paid",
		        "Processing",
		        "Ordered",
		        "Shipped",
		        "Arrived",
		        "Delivered",
		        "Cancelled",
		        "NotPaid"
		      ],
		      "enumValues": [0, 1, 2, 3, 4, 5, 6, 7, 8],
		      "genericArguments": null,
		      "properties": null
		    },
		    "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto": {
		      "baseType": "Volo.Abp.Application.Dtos.PagedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Sorting",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.PagedResultRequestDto": {
		      "baseType": "Volo.Abp.Application.Dtos.LimitedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "SkipCount",
		          "jsonName": null,
		          "type": "System.Int32",
		          "typeSimple": "number",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.LimitedResultRequestDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "DefaultMaxResultCount",
		          "jsonName": null,
		          "type": "System.Int32",
		          "typeSimple": "number",
		          "isRequired": false
		        },
		        {
		          "name": "MaxMaxResultCount",
		          "jsonName": null,
		          "type": "System.Int32",
		          "typeSimple": "number",
		          "isRequired": false
		        },
		        {
		          "name": "MaxResultCount",
		          "jsonName": null,
		          "type": "System.Int32",
		          "typeSimple": "number",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.PagedResultDto<T0>": {
		      "baseType": "Volo.Abp.Application.Dtos.ListResultDto<T>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["T"],
		      "properties": [
		        {
		          "name": "TotalCount",
		          "jsonName": null,
		          "type": "System.Int64",
		          "typeSimple": "number",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.ListResultDto<T0>": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["T"],
		      "properties": [
		        {
		          "name": "Items",
		          "jsonName": null,
		          "type": "[T]",
		          "typeSimple": "[T]",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.FullAuditedEntityDto<T0>": {
		      "baseType": "Volo.Abp.Application.Dtos.AuditedEntityDto<TPrimaryKey>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["TPrimaryKey"],
		      "properties": [
		        {
		          "name": "IsDeleted",
		          "jsonName": null,
		          "type": "System.Boolean",
		          "typeSimple": "boolean",
		          "isRequired": false
		        },
		        {
		          "name": "DeleterId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "DeletionTime",
		          "jsonName": null,
		          "type": "System.DateTime?",
		          "typeSimple": "string?",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.AuditedEntityDto<T0>": {
		      "baseType": "Volo.Abp.Application.Dtos.CreationAuditedEntityDto<TPrimaryKey>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["TPrimaryKey"],
		      "properties": [
		        {
		          "name": "LastModificationTime",
		          "jsonName": null,
		          "type": "System.DateTime?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "LastModifierId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.CreationAuditedEntityDto<T0>": {
		      "baseType": "Volo.Abp.Application.Dtos.EntityDto<TPrimaryKey>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["TPrimaryKey"],
		      "properties": [
		        {
		          "name": "CreationTime",
		          "jsonName": null,
		          "type": "System.DateTime",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "CreatorId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.EntityDto<T0>": {
		      "baseType": "Volo.Abp.Application.Dtos.EntityDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["TKey"],
		      "properties": [
		        {
		          "name": "Id",
		          "jsonName": null,
		          "type": "TKey",
		          "typeSimple": "TKey",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Application.Dtos.EntityDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": []
		    },
		    "Volo.Abp.Identity.IdentityUserDto": {
		      "baseType": "Volo.Abp.Application.Dtos.ExtensibleEntityDto<System.Guid>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "TenantId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "UserName",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "Email",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "Surname",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "EmailConfirmed",
		          "jsonName": null,
		          "type": "System.Boolean",
		          "typeSimple": "boolean",
		          "isRequired": false
		        },
		        {
		          "name": "PhoneNumber",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "PhoneNumberConfirmed",
		          "jsonName": null,
		          "type": "System.Boolean",
		          "typeSimple": "boolean",
		          "isRequired": false
		        },
		        {
		          "name": "SupportTwoFactor",
		          "jsonName": null,
		          "type": "System.Boolean",
		          "typeSimple": "boolean",
		          "isRequired": false
		        },
		        {
		          "name": "LockoutEnabled",
		          "jsonName": null,
		          "type": "System.Boolean",
		          "typeSimple": "boolean",
		          "isRequired": false
		        },
		        {
		          "name": "IsLockedOut",
		          "jsonName": null,
		          "type": "System.Boolean",
		          "typeSimple": "boolean",
		          "isRequired": false
		        },
		        {
		          "name": "ConcurrencyStamp",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Shared.LookupRequestDto": {
		      "baseType": "Volo.Abp.Application.Dtos.PagedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Filter",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Shared.LookupDto<T0>": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": ["TKey"],
		      "properties": [
		        {
		          "name": "Id",
		          "jsonName": null,
		          "type": "TKey",
		          "typeSimple": "TKey",
		          "isRequired": false
		        },
		        {
		          "name": "DisplayName",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Orders.GetOrdersInput": {
		      "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "FilterText",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "OrderDateMin",
		          "jsonName": null,
		          "type": "System.DateTime?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "OrderDateMax",
		          "jsonName": null,
		          "type": "System.DateTime?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmountMin",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmountMax",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "Status",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		          "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		          "isRequired": false
		        },
		        {
		          "name": "IdentityUserId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Orders.OrderDto": {
		      "baseType": "Volo.Abp.Application.Dtos.FullAuditedEntityDto<System.Guid>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "OrderDate",
		          "jsonName": null,
		          "type": "System.DateTime",
		          "typeSimple": "string",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmount",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Status",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
		          "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
		          "isRequired": false
		        },
		        {
		          "name": "IdentityUserId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRef": true,
		          "isRequired": false
		        },
		        {
		          "name": "ConcurrencyStamp",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Orders.OrderCreateDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "OrderDate",
		          "jsonName": null,
		          "type": "System.DateTime",
		          "typeSimple": "string",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmount",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Status",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
		          "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
		          "isRequired": false
		        },
		        {
		          "name": "IdentityUserId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRef": true,
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Orders.OrderUpdateDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "OrderDate",
		          "jsonName": null,
		          "type": "System.DateTime",
		          "typeSimple": "string",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmount",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Status",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
		          "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus",
		          "isRequired": false
		        },
		        {
		          "name": "IdentityUserId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRef": true,
		          "isRequired": false
		        },
		        {
		          "name": "ConcurrencyStamp",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Users.AppUserDto": {
		      "baseType": "Volo.Abp.Identity.IdentityUserDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": []
		    },
		    "ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Token",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Orders.OrderExcelDownloadDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "DownloadToken",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "FilterText",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "OrderDateMin",
		          "jsonName": null,
		          "type": "System.DateTime?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "OrderDateMax",
		          "jsonName": null,
		          "type": "System.DateTime?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmountMin",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "TotalAmountMax",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "Status",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		          "typeSimple": "ExampleAbpApplicationLayer.Enums.Orders.OrderStatus?",
		          "isRequired": false
		        },
		        {
		          "name": "IdentityUserId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": false
		        }
		      ]
		    },
		    "Volo.Abp.Content.IRemoteStreamContent": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "FileName",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "ContentType",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "ContentLength",
		          "jsonName": null,
		          "type": "System.Int64?",
		          "typeSimple": "number?",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Shared.AppFileDescriptorDto": {
		      "baseType": "Volo.Abp.Application.Dtos.EntityDto<System.Guid>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "MimeType",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Shared.GetFileInput": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "DownloadToken",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "FileId",
		          "jsonName": null,
		          "type": "System.Guid",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.OrderItems.GetOrderItemsInput": {
		      "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "FilterText",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "QtyMin",
		          "jsonName": null,
		          "type": "System.Int?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "QtyMax",
		          "jsonName": null,
		          "type": "System.Int?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "PriceMin",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "PriceMax",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "TotalPriceMin",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "TotalPriceMax",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "ProductName",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "ProductId",
		          "jsonName": null,
		          "type": "System.Guid?",
		          "typeSimple": "string?",
		          "isRequired": true
		        },
		        {
		          "name": "OrderId",
		          "jsonName": null,
		          "type": "string",
		          "typeSimple": "string",
		          "isRequired": true
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.OrderItems.OrderItemDto": {
		      "baseType": "Volo.Abp.Application.Dtos.FullAuditedEntityDto<System.Guid>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Qty",
		          "jsonName": null,
		          "type": "System.Int",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Price",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "TotalPrice",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ProductName",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ProductId",
		          "jsonName": null,
		          "type": "System.Guid",
		          "typeSimple": "string",
		          "isRef": true,
		          "isRequired": true
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.OrderItems.OrderItemCreateDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Qty",
		          "jsonName": null,
		          "type": "System.Int",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Price",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "TotalPrice",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ProductName",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ProductId",
		          "jsonName": null,
		          "type": "System.Guid",
		          "typeSimple": "string",
		          "isRef": true,
		          "isRequired": true
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.OrderItems.OrderItemUpdateDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Qty",
		          "jsonName": null,
		          "type": "System.Int",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Price",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "TotalPrice",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ProductName",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ProductId",
		          "jsonName": null,
		          "type": "System.Guid",
		          "typeSimple": "string",
		          "isRef": true,
		          "isRequired": true
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.OrderItems.GetOrderItemListInput": {
		      "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "FilterText",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "OrderId",
		          "jsonName": null,
		          "type": "string",
		          "typeSimple": "string",
		          "isRequired": true
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.OrderItems.OrderItemWithNavigationPropertiesDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "OrderItem",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
		          "typeSimple": "ExampleAbpApplicationLayer.OrderItems.OrderItemDto",
		          "isRequired": false
		        },
		        {
		          "name": "Product",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Products.ProductDto",
		          "typeSimple": "ExampleAbpApplicationLayer.Products.ProductDto",
		          "isRequired": true
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Products.GetProductsInput": {
		      "baseType": "Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "FilterText",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        },
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRequired": true
		        },
		        {
		          "name": "Desc",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "PriceMin",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "PriceMax",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "IsActive",
		          "jsonName": null,
		          "type": "System.Bool?",
		          "typeSimple": "boolean?",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Products.ProductDto": {
		      "baseType": "Volo.Abp.Application.Dtos.FullAuditedEntityDto<System.Guid>",
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRef": false,
		          "isRequired": true
		        },
		        {
		          "name": "Desc",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Price",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "IsActive",
		          "jsonName": null,
		          "type": "System.Bool",
		          "typeSimple": "boolean",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ConcurrencyStamp",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Products.ProductCreateDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRef": false,
		          "isRequired": true
		        },
		        {
		          "name": "Desc",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Price",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "IsActive",
		          "jsonName": null,
		          "type": "System.Bool",
		          "typeSimple": "boolean",
		          "isRef": false,
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Products.ProductUpdateDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRef": false,
		          "isRequired": true
		        },
		        {
		          "name": "Desc",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "Price",
		          "jsonName": null,
		          "type": "System.Float",
		          "typeSimple": "number",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "IsActive",
		          "jsonName": null,
		          "type": "System.Bool",
		          "typeSimple": "boolean",
		          "isRef": false,
		          "isRequired": false
		        },
		        {
		          "name": "ConcurrencyStamp",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Products.ProductExcelDownloadDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "DownloadToken",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "FilterText",
		          "jsonName": null,
		          "type": "System.String",
		          "typeSimple": "string",
		          "isRequired": false,
		          "minLength": null,
		          "maxLength": null,
		          "minimum": null,
		          "maximum": null,
		          "regex": null
		        },
		        {
		          "name": "Name",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRequired": true
		        },
		        {
		          "name": "Desc",
		          "jsonName": null,
		          "type": "System.String?",
		          "typeSimple": "string?",
		          "isRequired": false
		        },
		        {
		          "name": "PriceMin",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "PriceMax",
		          "jsonName": null,
		          "type": "System.Float?",
		          "typeSimple": "number?",
		          "isRequired": false
		        },
		        {
		          "name": "IsActive",
		          "jsonName": null,
		          "type": "System.Bool?",
		          "typeSimple": "boolean?",
		          "isRequired": false
		        }
		      ]
		    },
		    "ExampleAbpApplicationLayer.Orders.OrderWithNavigationPropertiesDto": {
		      "baseType": null,
		      "isEnum": false,
		      "enumNames": null,
		      "enumValues": null,
		      "genericArguments": null,
		      "properties": [
		        {
		          "name": "Order",
		          "jsonName": null,
		          "type": "ExampleAbpApplicationLayer.Orders.OrderDto",
		          "typeSimple": "ExampleAbpApplicationLayer.Orders.OrderDto",
		          "isRequired": false
		        },
		        {
		          "name": "IdentityUser",
		          "jsonName": null,
		          "type": "Volo.Abp.Identity.IdentityUserDto",
		          "typeSimple": "Volo.Abp.Identity.IdentityUserDto",
		          "isRequired": false
		        }
		      ]
		    }
		  }
		}]]></file>
	<file path='angular\src\app\proxy\index.ts'>
		import * as Enums from './enums';
		import * as OrderItems from './order-items';
		import * as Orders from './orders';
		import * as Products from './products';
		import * as Shared from './shared';
		import * as Volo from './volo';
		export { Enums, OrderItems, Orders, Products, Shared, Volo };</file>
	<file path='angular\src\app\proxy\order-items\index.ts'>
		export * from './models';
		export * from './order-item.service';</file>
	<file path='angular\src\app\proxy\order-items\models.ts'><![CDATA[
		import type { FullAuditedEntityDto, PagedAndSortedResultRequestDto } from '@abp/ng.core';
		import type { ProductDto } from '../products/models';
		
		export interface GetOrderItemListInput extends PagedAndSortedResultRequestDto {
		  filterText?: string;
		  orderId: string;
		}
		
		export interface GetOrderItemsInput extends PagedAndSortedResultRequestDto {
		  filterText?: string;
		  qtyMin?: number;
		  qtyMax?: number;
		  priceMin?: number;
		  priceMax?: number;
		  totalPriceMin?: number;
		  totalPriceMax?: number;
		  productName?: string;
		  productId?: string;
		  orderId: string;
		}
		
		export interface OrderItemCreateDto {
		  qty: number;
		  price: number;
		  totalPrice: number;
		  productName?: string;
		  productId: string;
		}
		
		export interface OrderItemDto extends FullAuditedEntityDto<string> {
		  qty: number;
		  price: number;
		  totalPrice: number;
		  productName?: string;
		  productId: string;
		}
		
		export interface OrderItemUpdateDto {
		  qty: number;
		  price: number;
		  totalPrice: number;
		  productName?: string;
		  productId: string;
		}
		
		export interface OrderItemWithNavigationPropertiesDto {
		  orderItem: OrderItemDto;
		  product: ProductDto;
		}]]></file>
	<file path='angular\src\app\proxy\order-items\order-item.service.ts'><![CDATA[
		import type {
		  GetOrderItemListInput,
		  GetOrderItemsInput,
		  OrderItemCreateDto,
		  OrderItemDto,
		  OrderItemUpdateDto,
		  OrderItemWithNavigationPropertiesDto,
		} from './models';
		import { RestService, Rest } from '@abp/ng.core';
		import type { PagedResultDto } from '@abp/ng.core';
		import { Injectable } from '@angular/core';
		import type {
		  AppFileDescriptorDto,
		  DownloadTokenResultDto,
		  GetFileInput,
		  LookupDto,
		  LookupRequestDto,
		} from '../shared/models';
		
		@Injectable({
		  providedIn: 'root',
		})
		export class OrderItemService {
		  apiName = 'Default';
		
		  create = (input: OrderItemCreateDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderItemDto>(
		      {
		        method: 'POST',
		        url: '/api/app/order-items',
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  delete = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, void>(
		      {
		        method: 'DELETE',
		        url: `/api/app/order-items/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  get = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderItemDto>(
		      {
		        method: 'GET',
		        url: `/api/app/order-items/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getDownloadToken = (config?: Partial<Rest.Config>) =>
		    this.restService.request<any, DownloadTokenResultDto>(
		      {
		        method: 'GET',
		        url: '/api/app/order-items/download-token',
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getFile = (input: GetFileInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, Blob>(
		      {
		        method: 'GET',
		        responseType: 'blob',
		        url: '/api/app/order-items/file',
		        params: { downloadToken: input.downloadToken, fileId: input.fileId },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getList = (input: GetOrderItemsInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, PagedResultDto<OrderItemWithNavigationPropertiesDto>>(
		      {
		        method: 'GET',
		        url: '/api/app/order-items',
		        params: {
		          orderId: input.orderId,
		          filterText: input.filterText,
		          sorting: input.sorting,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		          qtyMin: input.qtyMin,
		          qtyMax: input.qtyMax,
		          priceMin: input.priceMin,
		          priceMax: input.priceMax,
		          totalPriceMin: input.totalPriceMin,
		          totalPriceMax: input.totalPriceMax,
		          productName: input.productName,
		          productId: input.productId,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getListByOrderId = (input: GetOrderItemListInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, PagedResultDto<OrderItemWithNavigationPropertiesDto>>(
		      {
		        method: 'GET',
		        url: '/api/app/order-items/by-order',
		        params: {
		          orderId: input.orderId,
		          filterText: input.filterText,
		          sorting: input.sorting,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getListWithNavigationPropertiesByOrderId = (
		    input: GetOrderItemListInput,
		    config?: Partial<Rest.Config>,
		  ) =>
		    this.restService.request<any, PagedResultDto<OrderItemWithNavigationPropertiesDto>>(
		      {
		        method: 'GET',
		        url: '/api/app/order-items/detailed/by-order',
		        params: {
		          orderId: input.orderId,
		          filterText: input.filterText,
		          sorting: input.sorting,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getProductLookup = (input: LookupRequestDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, PagedResultDto<LookupDto<string>>>(
		      {
		        method: 'GET',
		        url: '/api/app/order-items/product-lookup',
		        params: {
		          filter: input.filter,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getWithNavigationProperties = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderItemWithNavigationPropertiesDto>(
		      {
		        method: 'GET',
		        url: `/api/app/order-items/with-navigation-properties/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  update = (id: string, input: OrderItemUpdateDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderItemDto>(
		      {
		        method: 'PUT',
		        url: `/api/app/order-items/${id}`,
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  uploadFile = (input: FormData, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, AppFileDescriptorDto>(
		      {
		        method: 'POST',
		        url: '/api/app/order-items/upload-file',
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  constructor(private restService: RestService) {}
		}]]></file>
	<file path='angular\src\app\proxy\orders\index.ts'>
		export * from './models';
		export * from './order.service';</file>
	<file path='angular\src\app\proxy\orders\models.ts'><![CDATA[
		import type { FullAuditedEntityDto, PagedAndSortedResultRequestDto } from '@abp/ng.core';
		import type { OrderStatus } from '../enums/orders/order-status.enum';
		import type { IdentityUserDto } from '../volo/abp/identity/models';
		
		export interface GetOrdersInput extends PagedAndSortedResultRequestDto {
		  filterText?: string;
		  orderDateMin?: string;
		  orderDateMax?: string;
		  totalAmountMin?: number;
		  totalAmountMax?: number;
		  status?: OrderStatus;
		  identityUserId?: string;
		}
		
		export interface OrderCreateDto {
		  orderDate?: string;
		  totalAmount: number;
		  status: OrderStatus;
		  identityUserId?: string;
		}
		
		export interface OrderDto extends FullAuditedEntityDto<string> {
		  orderDate?: string;
		  totalAmount: number;
		  status: OrderStatus;
		  identityUserId?: string;
		  concurrencyStamp?: string;
		}
		
		export interface OrderExcelDownloadDto {
		  downloadToken?: string;
		  filterText?: string;
		  orderDateMin?: string;
		  orderDateMax?: string;
		  totalAmountMin?: number;
		  totalAmountMax?: number;
		  status?: OrderStatus;
		  identityUserId?: string;
		}
		
		export interface OrderUpdateDto {
		  orderDate?: string;
		  totalAmount: number;
		  status: OrderStatus;
		  identityUserId?: string;
		  concurrencyStamp?: string;
		}
		
		export interface OrderWithNavigationPropertiesDto {
		  order: OrderDto;
		  identityUser: IdentityUserDto;
		}]]></file>
	<file path='angular\src\app\proxy\orders\order.service.ts'><![CDATA[
		import type {
		  GetOrdersInput,
		  OrderCreateDto,
		  OrderDto,
		  OrderExcelDownloadDto,
		  OrderUpdateDto,
		  OrderWithNavigationPropertiesDto,
		} from './models';
		import { RestService, Rest } from '@abp/ng.core';
		import type { PagedResultDto } from '@abp/ng.core';
		import { Injectable } from '@angular/core';
		import type {
		  AppFileDescriptorDto,
		  DownloadTokenResultDto,
		  GetFileInput,
		  LookupDto,
		  LookupRequestDto,
		} from '../shared/models';
		
		@Injectable({
		  providedIn: 'root',
		})
		export class OrderService {
		  apiName = 'Default';
		
		  create = (input: OrderCreateDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderDto>(
		      {
		        method: 'POST',
		        url: '/api/app/orders',
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  delete = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, void>(
		      {
		        method: 'DELETE',
		        url: `/api/app/orders/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  get = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderDto>(
		      {
		        method: 'GET',
		        url: `/api/app/orders/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getDownloadToken = (config?: Partial<Rest.Config>) =>
		    this.restService.request<any, DownloadTokenResultDto>(
		      {
		        method: 'GET',
		        url: '/api/app/orders/download-token',
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getFile = (input: GetFileInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, Blob>(
		      {
		        method: 'GET',
		        responseType: 'blob',
		        url: '/api/app/orders/file',
		        params: { downloadToken: input.downloadToken, fileId: input.fileId },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getIdentityUserLookup = (input: LookupRequestDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, PagedResultDto<LookupDto<string>>>(
		      {
		        method: 'GET',
		        url: '/api/app/orders/identity-user-lookup',
		        params: {
		          filter: input.filter,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getList = (input: GetOrdersInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, PagedResultDto<OrderWithNavigationPropertiesDto>>(
		      {
		        method: 'GET',
		        url: '/api/app/orders',
		        params: {
		          filterText: input.filterText,
		          sorting: input.sorting,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		          orderDateMin: input.orderDateMin,
		          orderDateMax: input.orderDateMax,
		          totalAmountMin: input.totalAmountMin,
		          totalAmountMax: input.totalAmountMax,
		          status: input.status,
		          identityUserId: input.identityUserId,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getListAsExcelFile = (input: OrderExcelDownloadDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, Blob>(
		      {
		        method: 'GET',
		        responseType: 'blob',
		        url: '/api/app/orders/as-excel-file',
		        params: {
		          downloadToken: input.downloadToken,
		          filterText: input.filterText,
		          orderDateMin: input.orderDateMin,
		          orderDateMax: input.orderDateMax,
		          totalAmountMin: input.totalAmountMin,
		          totalAmountMax: input.totalAmountMax,
		          status: input.status,
		          identityUserId: input.identityUserId,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getWithNavigationProperties = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderWithNavigationPropertiesDto>(
		      {
		        method: 'GET',
		        url: `/api/app/orders/with-navigation-properties/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  update = (id: string, input: OrderUpdateDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, OrderDto>(
		      {
		        method: 'PUT',
		        url: `/api/app/orders/${id}`,
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  uploadFile = (input: FormData, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, AppFileDescriptorDto>(
		      {
		        method: 'POST',
		        url: '/api/app/orders/upload-file',
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  constructor(private restService: RestService) {}
		}]]></file>
	<file path='angular\src\app\proxy\products\index.ts'>
		export * from './models';
		export * from './product.service';</file>
	<file path='angular\src\app\proxy\products\models.ts'><![CDATA[
		import type { FullAuditedEntityDto, PagedAndSortedResultRequestDto } from '@abp/ng.core';
		
		export interface GetProductsInput extends PagedAndSortedResultRequestDto {
		  filterText?: string;
		  name?: string;
		  desc?: string;
		  priceMin?: number;
		  priceMax?: number;
		  isActive?: boolean;
		}
		
		export interface ProductCreateDto {
		  name: string;
		  desc?: string;
		  price: number;
		  isActive: boolean;
		}
		
		export interface ProductDto extends FullAuditedEntityDto<string> {
		  name: string;
		  desc?: string;
		  price: number;
		  isActive: boolean;
		  concurrencyStamp?: string;
		}
		
		export interface ProductExcelDownloadDto {
		  downloadToken?: string;
		  filterText?: string;
		  name?: string;
		  desc?: string;
		  priceMin?: number;
		  priceMax?: number;
		  isActive?: boolean;
		}
		
		export interface ProductUpdateDto {
		  name: string;
		  desc?: string;
		  price: number;
		  isActive: boolean;
		  concurrencyStamp?: string;
		}]]></file>
	<file path='angular\src\app\proxy\products\product.service.ts'><![CDATA[
		import type {
		  GetProductsInput,
		  ProductCreateDto,
		  ProductDto,
		  ProductExcelDownloadDto,
		  ProductUpdateDto,
		} from './models';
		import { RestService, Rest } from '@abp/ng.core';
		import type { PagedResultDto } from '@abp/ng.core';
		import { Injectable } from '@angular/core';
		import type { AppFileDescriptorDto, DownloadTokenResultDto, GetFileInput } from '../shared/models';
		
		@Injectable({
		  providedIn: 'root',
		})
		export class ProductService {
		  apiName = 'Default';
		
		  create = (input: ProductCreateDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, ProductDto>(
		      {
		        method: 'POST',
		        url: '/api/app/products',
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  delete = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, void>(
		      {
		        method: 'DELETE',
		        url: `/api/app/products/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  deleteAll = (input: GetProductsInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, void>(
		      {
		        method: 'DELETE',
		        url: '/api/app/products/all',
		        params: {
		          filterText: input.filterText,
		          sorting: input.sorting,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		          name: input.name,
		          desc: input.desc,
		          priceMin: input.priceMin,
		          priceMax: input.priceMax,
		          isActive: input.isActive,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  deleteByIds = (productIds: string[], config?: Partial<Rest.Config>) =>
		    this.restService.request<any, void>(
		      {
		        method: 'DELETE',
		        url: '/api/app/products',
		        params: { productIds },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  get = (id: string, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, ProductDto>(
		      {
		        method: 'GET',
		        url: `/api/app/products/${id}`,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getDownloadToken = (config?: Partial<Rest.Config>) =>
		    this.restService.request<any, DownloadTokenResultDto>(
		      {
		        method: 'GET',
		        url: '/api/app/products/download-token',
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getFile = (input: GetFileInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, Blob>(
		      {
		        method: 'GET',
		        responseType: 'blob',
		        url: '/api/app/products/file',
		        params: { downloadToken: input.downloadToken, fileId: input.fileId },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getList = (input: GetProductsInput, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, PagedResultDto<ProductDto>>(
		      {
		        method: 'GET',
		        url: '/api/app/products',
		        params: {
		          filterText: input.filterText,
		          sorting: input.sorting,
		          skipCount: input.skipCount,
		          maxResultCount: input.maxResultCount,
		          name: input.name,
		          desc: input.desc,
		          priceMin: input.priceMin,
		          priceMax: input.priceMax,
		          isActive: input.isActive,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  getListAsExcelFile = (input: ProductExcelDownloadDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, Blob>(
		      {
		        method: 'GET',
		        responseType: 'blob',
		        url: '/api/app/products/as-excel-file',
		        params: {
		          downloadToken: input.downloadToken,
		          filterText: input.filterText,
		          name: input.name,
		          desc: input.desc,
		          priceMin: input.priceMin,
		          priceMax: input.priceMax,
		          isActive: input.isActive,
		        },
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  update = (id: string, input: ProductUpdateDto, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, ProductDto>(
		      {
		        method: 'PUT',
		        url: `/api/app/products/${id}`,
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  uploadFile = (input: FormData, config?: Partial<Rest.Config>) =>
		    this.restService.request<any, AppFileDescriptorDto>(
		      {
		        method: 'POST',
		        url: '/api/app/products/upload-file',
		        body: input,
		      },
		      { apiName: this.apiName, ...config },
		    );
		
		  constructor(private restService: RestService) {}
		}]]></file>
	<file path='angular\src\app\proxy\shared\index.ts'>
		export * from './models';</file>
	<file path='angular\src\app\proxy\shared\models.ts'><![CDATA[
		import type { EntityDto, PagedResultRequestDto } from '@abp/ng.core';
		
		export interface AppFileDescriptorDto extends EntityDto<string> {
		  name?: string;
		  mimeType?: string;
		}
		
		export interface DownloadTokenResultDto {
		  token?: string;
		}
		
		export interface GetFileInput {
		  downloadToken?: string;
		  fileId?: string;
		}
		
		export interface LookupDto<TKey> {
		  id: TKey;
		  displayName?: string;
		}
		
		export interface LookupRequestDto extends PagedResultRequestDto {
		  filter?: string;
		}]]></file>
	<file path='angular\src\app\proxy\volo\abp\identity\index.ts'>
		export * from './models';</file>
	<file path='angular\src\app\proxy\volo\abp\identity\models.ts'><![CDATA[
		import type { ExtensibleEntityDto } from '@abp/ng.core';
		
		export interface IdentityUserDto extends ExtensibleEntityDto<string> {
		  tenantId?: string;
		  userName?: string;
		  email?: string;
		  name?: string;
		  surname?: string;
		  emailConfirmed: boolean;
		  phoneNumber?: string;
		  phoneNumberConfirmed: boolean;
		  supportTwoFactor: boolean;
		  lockoutEnabled: boolean;
		  isLockedOut: boolean;
		  concurrencyStamp?: string;
		}]]></file>
	<file path='angular\src\app\proxy\volo\abp\index.ts'>
		import * as Identity from './identity';
		export { Identity };</file>
	<file path='angular\src\app\proxy\volo\index.ts'>
		import * as Abp from './abp';
		export { Abp };</file>
	<file path='angular\src\app\route.provider.ts'>
		import { RoutesService, eLayoutType } from '@abp/ng.core';
		import { inject, provideAppInitializer } from '@angular/core';
		
		export const APP_ROUTE_PROVIDER = [
		  provideAppInitializer(() => {
		    configureRoutes();
		  }),
		];
		
		function configureRoutes() {
		  const routes = inject(RoutesService);
		  routes.add([
		      {
		        path: '/',
		        name: '::Menu:Home',
		        iconClass: 'fas fa-home',
		        order: 1,
		        layout: eLayoutType.application,
		      },
		      {
		        path: '/dashboard',
		        name: '::Menu:Dashboard',
		        iconClass: 'fas fa-chart-line',
		        order: 2,
		        layout: eLayoutType.application,
		        requiredPolicy: 'ExampleAbpApplicationLayer.Dashboard.Host  || ExampleAbpApplicationLayer.Dashboard.Tenant',
		      },
		  ]);
		}</file>
	<file path='angular\src\assets\.gitkeep'/>
	<file path='angular\src\environments\environment.prod.ts'>
		import { Environment } from '@abp/ng.core';
		
		const baseUrl = 'http://localhost:4200';
		
		const oAuthConfig = {
		  issuer: 'https://localhost:44302/',
		  redirectUri: baseUrl,
		  clientId: 'ExampleAbpApplicationLayer_App',
		  responseType: 'code',
		  scope: 'offline_access ExampleAbpApplicationLayer',
		  requireHttps: true,
		  impersonation: {
		    tenantImpersonation: true,
		    userImpersonation: true,
		  }
		};
		
		export const environment = {
		  production: true,
		  application: {
		    baseUrl,
		    name: 'ExampleAbpApplicationLayer',
		  },
		  oAuthConfig,
		  apis: {
		    default: {
		      url: 'https://localhost:44302',
		      rootNamespace: 'ExampleAbpApplicationLayer',
		    },
		    AbpAccountPublic: {
		      url: oAuthConfig.issuer,
		      rootNamespace: 'AbpAccountPublic',
		    },
		  },
		  remoteEnv: {
		    url: '/getEnvConfig',
		    mergeStrategy: 'deepmerge'
		  }
		} as Environment;</file>
	<file path='angular\src\environments\environment.ts'>
		import { Environment } from '@abp/ng.core';
		
		const baseUrl = 'http://localhost:4200';
		
		const oAuthConfig = {
		  issuer: 'https://localhost:44302/',
		  redirectUri: baseUrl,
		  clientId: 'ExampleAbpApplicationLayer_App',
		  responseType: 'code',
		  scope: 'offline_access ExampleAbpApplicationLayer',
		  requireHttps: true,
		  impersonation: {
		    tenantImpersonation: true,
		    userImpersonation: true,
		  }
		};
		
		export const environment = {
		  production: false,
		  application: {
		    baseUrl,
		    name: 'ExampleAbpApplicationLayer',
		  },
		  oAuthConfig,
		  apis: {
		    default: {
		      url: 'https://localhost:44302',
		      rootNamespace: 'ExampleAbpApplicationLayer',
		    },
		    AbpAccountPublic: {
		      url: oAuthConfig.issuer,
		      rootNamespace: 'AbpAccountPublic',
		    },
		  },
		} as Environment;</file>
	<file path='angular\src\index.html'><![CDATA[
		<!DOCTYPE html>
		<html lang="en">
		  <head>
		    <meta charset="utf-8" />
		    <title>ExampleAbpApplicationLayer</title>
		    <base href="/" />
		    <meta name="viewport" content="width=device-width, initial-scale=1" />
		    <link rel="icon" type="image/x-icon" href="favicon.ico" />
		    <style>
		      #lp-page-loader {
		        position: fixed;
		        top: 0;
		        left: 0;
		        width: 100vw;
		        height: 100vh;
		        user-select: none;
		        z-index: 9999999;
		        background: #7e8082;
		        transition: background 0.3s ease-out;
		      }
		
		      #lp-page-loader:after {
		        content: '';
		        display: block;
		        position: absolute;
		        left: calc(50% - 20px);
		        top: calc(50% - 20px);
		        width: 40px;
		        height: 40px;
		        border: 4px solid #fff;
		        opacity: 0.7;
		        border-top-color: transparent;
		        border-radius: 50%;
		        animation: spin 0.8s linear infinite;
		      }
		
		      @keyframes spin {
		        from {
		          transform: rotate(0deg);
		        }
		
		        to {
		          transform: rotate(360deg);
		        }
		      }
		    </style>
		  </head>
		  <body>
		    <app-root></app-root>
		    <div id="lp-page-loader"></div>
		  </body>
		</html>]]></file>
	<file path='angular\src\main.ts'>
		import { enableProdMode } from '@angular/core';
		import { bootstrapApplication } from '@angular/platform-browser';
		
		import { AppComponent } from './app/app.component';
		import { appConfig } from './app/app.config';
		import { environment } from './environments/environment';
		
		if (environment.production) {
		  enableProdMode();
		}
		
		bootstrapApplication(AppComponent, appConfig).catch(err => console.error(err));</file>
	<file path='angular\src\polyfills.ts'>
		/**
		 * This file includes polyfills needed by Angular and is loaded before the app.
		 * You can add your own extra polyfills to this file.
		 *
		 * This file is divided into 2 sections:
		 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
		 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
		 *      file.
		 *
		 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
		 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
		 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
		 *
		 * Learn more in https://angular.io/guide/browser-support
		 */
		/***************************************************************************************************
		 * BROWSER POLYFILLS
		 */
		/**
		 * By default, zone.js will patch all possible macroTask and DomEvents
		 * user can disable parts of macroTask/DomEvents patch by setting following flags
		 * because those flags need to be set before `zone.js` being loaded, and webpack
		 * will put import in the top of bundle, so user need to create a separate file
		 * in this directory (for example: zone-flags.ts), and put the following flags
		 * into that file, and then add the following code before importing zone.js.
		 * import './zone-flags';
		 *
		 * The flags allowed in zone-flags.ts are listed here.
		 *
		 * The following flags will work for all browsers.
		 *
		 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
		 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
		 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
		 *
		 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
		 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
		 *
		 *  (window as any).__Zone_enable_cross_context_check = true;
		 *
		 */
		/***************************************************************************************************
		 * Zone JS is required by default for Angular itself.
		 */
		import 'zone.js'; // Included with Angular CLI.
		
		/***************************************************************************************************
		 * APPLICATION IMPORTS
		 */
		
		/******************************************************************
		 * Load `$localize` - used if i18n tags appear in Angular templates.
		 */
		 import '@angular/localize/init';</file>
	<file path='angular\src\styles.scss'>
		/* You can add global styles to this file, and also import other style files */
		
		
		:root .lpx-theme-dark {
		  .abp-support {
		    background-image: url('/assets/images/getting-started/abp-support-white.svg');
		  }
		  .abp-community {
		    background-image: url('/assets/images/getting-started/abp-community-white.svg');
		  }
		  .abp-blog {
		    background-image: url('/assets/images/getting-started/abp-blog-white.svg');
		  }
		  .logo-x {
		    background-image: url('/assets/images/getting-started/x-white.svg');
		  }
		}
		
		
		:root {
		  --lpx-theme-light-bg: url('/assets/images/login/login-bg-img-light.svg');
		  --lpx-theme-dim-bg: url('/assets/images/login/login-bg-img-dim.svg');
		  --lpx-theme-dark-bg: url('/assets/images/login/login-bg-img-dark.svg');
		
		  --lpx-logo-url: var(--lpx-logo-icon, url('/assets/images/logo/icon.svg'));
		  --lpx-logo: var(--lpx-logo-icon);
		
		  .abp-logo {
		    background-repeat: no-repeat;
		  }
		
		  .abp-support {
		    width: 178px;
		    height: 30px;
		    background-image: url('/assets/images/getting-started/abp-support.svg');
		  }
		
		  .abp-community {
		    width: 215px;
		    height: 30px;
		    background-image: url('/assets/images/getting-started/abp-community.svg');
		  }
		
		  .abp-blog {
		    width: 142px;
		    height: 30px;
		    background-image: url('/assets/images/getting-started/abp-blog.svg');
		  }
		
		  .logo-x {
		    width: 20px;
		    height: 20px;
		    background-image: url('/assets/images/getting-started/x.svg');
		  }
		}</file>
	<file path='angular\src\test.ts'>
		// This file is required by karma.conf.js and loads recursively all the .spec and framework files
		
		import { getTestBed } from '@angular/core/testing';
		import {
		  BrowserDynamicTestingModule,
		  platformBrowserDynamicTesting,
		} from '@angular/platform-browser-dynamic/testing';
		import 'zone.js/testing';
		
		// First, initialize the Angular testing environment.
		getTestBed().initTestEnvironment(
		  BrowserDynamicTestingModule,
		  platformBrowserDynamicTesting(), {
		    teardown: { destroyAfterEach: false }
		}
		);</file>
	<file path='angular\start.ps1'>
		npx yarn
		npx yarn start</file>
	<file path='angular\tsconfig.app.json'>
		/* To learn more about this file see: https://angular.io/config/tsconfig. */
		{
		  "extends": "./tsconfig.json",
		  "compilerOptions": {
		    "outDir": "./out-tsc/app",
		    "types": []
		  },
		  "files": [
		    "src/main.ts",
		    "src/polyfills.ts"
		  ],
		  "include": [
		    "src/**/*.d.ts"
		  ]
		}</file>
	<file path='angular\tsconfig.json'>
		/* To learn more about this file see: https://angular.io/config/tsconfig. */
		{
		  "compileOnSave": false,
		  "compilerOptions": {
		    "baseUrl": "./",
		    "outDir": "./dist/out-tsc",
		    "sourceMap": true,
		    "declaration": false,
		    "downlevelIteration": true,
		    "experimentalDecorators": true,
		    "moduleResolution": "node",
		    "importHelpers": true,
		    "target": "ES2022",
		    "module": "es2020",
		    "lib": ["es2018", "dom"],
		    "paths": {
		      "@angular/*":["node_modules/@angular/*"],
		      "@abp/*":["node_modules/@abp/*"],
		      "@volo/*":["node_modules/@volo/*"],
		      "@volosoft/*":["node_modules/@volosoft/*"],
		      "@swimlane/*": ["node_modules/@swimlane/*"],
		      "@ngx-validate/core":["node_modules/@ngx-validate/core"],
		      "@ng-bootstrap/ng-bootstrap": ["node_modules/@ng-bootstrap/ng-bootstrap"],
		    },
		    "useDefineForClassFields": false
		  },
		  "angularCompilerOptions": {
		    "enableI18nLegacyMessageIdFormat": false
		  }
		}</file>
	<file path='angular\tsconfig.spec.json'>
		/* To learn more about this file see: https://angular.io/config/tsconfig. */
		{
		  "extends": "./tsconfig.json",
		  "compilerOptions": {
		    "outDir": "./out-tsc/spec",
		    "types": [
		      "jasmine"
		    ]
		  },
		  "files": [
		    "src/test.ts",
		    "src/polyfills.ts"
		  ],
		  "include": [
		    "src/**/*.spec.ts",
		    "src/**/*.d.ts"
		  ]
		}</file>
	<file path='angular\web.config'><![CDATA[
		﻿<?xml version="1.0" encoding="utf-8"?>
		<configuration>
		<system.webServer>
		 <rewrite>
		  <rules>
		    <rule name="Redirect" stopProcessing="true">
		      <match url="getEnvConfig" />
		      <action type="Redirect" url="dynamic-env.json" />
		    </rule>
		    <rule name="Angular Routes" stopProcessing="true">
		      <match url=".*" />
		      <conditions logicalGrouping="MatchAll">
		        <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
		        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
		      </conditions>
		      <action type="Rewrite" url="./index.html" />
		    </rule>
		  </rules>
		 </rewrite>
		</system.webServer>
		</configuration>]]></file>
	<file path='common.props'><![CDATA[
		<Project>
		  <PropertyGroup>
		    <LangVersion>latest</LangVersion>
		    <Version>1.0.0</Version>
		    <NoWarn>$(NoWarn);CS1591</NoWarn>
			<AbpProjectType>app</AbpProjectType>
		  </PropertyGroup>
		
		  <Target Name="NoWarnOnRazorViewImportedTypeConflicts" BeforeTargets="RazorCoreCompile">
		    <PropertyGroup>
		      <NoWarn>$(NoWarn);0436</NoWarn>
		    </PropertyGroup>
		  </Target>
		
		  <ItemGroup>
		    <None Remove="**\*.abppkg" />
		    <None Remove="**\*.abppkg.analyze.json" />
		    <Content Remove="$(UserProfile)\.nuget\packages\*\*\contentFiles\any\*\*.abppkg*" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='Directory.Build.props'><![CDATA[
		<Project>
		    <ItemGroup>
		        <ProjectCapability Include="DynamicDependentFile" />
		        <ProjectCapability Include="DynamicFileNesting" />
		    </ItemGroup>
		</Project>]]></file>
	<file path='etc\abp-studio\k8s-profiles\local.abpk8s.json'>
		{
		  "config": {
		    "context": "docker-desktop",
		    "namespace": "exampleabpapplicationlayer-local"
		  },
		  "metadata": {
		    "dotnetEnvironment": "Staging"
		  },
		  "services": {}
		}</file>
	<file path='etc\abp-studio\run-profiles\Default.abprun.json'>
		﻿{
		  "applications": {
		    "ExampleAbpApplicationLayer.HttpApi.Host": {
		      "type": "dotnet-project",
		      "launchUrl": "https://localhost:44302",
		      "path": "../../../src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.csproj",
		      "kubernetesService": ".*-httpapihost$",
		      "healthCheckEndpoint": "/health-status",
		      "healthUiEndpoint": "/health-ui",
		      "execution": {
		        "order": 4
		      }
		    },
		    "ExampleAbpApplicationLayer.Angular": {
		      "type": "cli",
		      "workingDirectory": "../../../angular",
		      "startCommand": "./start.ps1",
		      "launchUrl": "http://localhost:4200",
		      "kubernetesService": ".*-angular$",
		      "execution": {
		        "order": 2
		      }    
		    }
		  },
		  "containers": {
		    "serviceName": "ExampleAbpApplicationLayer-Containers",
		  }
		}</file>
	<file path='etc\docker-compose\build-images-locally.ps1'>
		param ($version='latest')
		
		$currentFolder = $PSScriptRoot
		$slnFolder = Join-Path $currentFolder "../../"
		
		Write-Host "********* BUILDING DbMigrator *********" -ForegroundColor Green
		$dbMigratorFolder = Join-Path $slnFolder "src/ExampleAbpApplicationLayer.DbMigrator"
		Set-Location $dbMigratorFolder
		dotnet publish -c Release
		docker build -f Dockerfile.local -t exampleabpapplicationlayer-db-migrator:$version .
		
		
		
		Write-Host "********* BUILDING Angular Application *********" -ForegroundColor Green
		$angularAppFolder = Join-Path $slnFolder "./angular"
		Set-Location $angularAppFolder
		npx yarn
		npm run build:prod
		docker build -f Dockerfile.local -t exampleabpapplicationlayer-angular:$version .
		
		Write-Host "********* BUILDING Api.Host Application *********" -ForegroundColor Green
		$hostFolder = Join-Path $slnFolder "src/ExampleAbpApplicationLayer.HttpApi.Host"
		Set-Location $hostFolder
		dotnet publish -c Release
		docker build -f Dockerfile.local -t exampleabpapplicationlayer-api:$version .
		
		
		
		
		
		
		### ALL COMPLETED
		Write-Host "COMPLETED" -ForegroundColor Green
		Set-Location $currentFolder</file>
	<file path='etc\docker-compose\docker-compose.yml'>
		services:
		  exampleabpapplicationlayer-angular:
		    image: exampleabpapplicationlayer-angular:latest
		    container_name: exampleabpapplicationlayer-angular
		    build:
		      context: ../../
		      dockerfile: angular/Dockerfile.local
		    ports:
		      - "4200:80"
		    depends_on:
		      - exampleabpapplicationlayer-api
		    volumes:
		      - ./dynamic-env.json://usr/share/nginx/html/dynamic-env.json
		    networks:
		      - abp-network
		
		  exampleabpapplicationlayer-api:
		    image: exampleabpapplicationlayer-api:latest
		    container_name: exampleabpapplicationlayer-api
		    hostname: exampleabpapplicationlayer-api
		    build:
		      context: ../../
		      dockerfile: src/ExampleAbpApplicationLayer.HttpApi.Host/Dockerfile.local
		    environment:
		      - ASPNETCORE_URLS=https://+:8081;http://+:8080;
		      - Kestrel__Certificates__Default__Path=/app/certs/localhost.pfx
		      - Kestrel__Certificates__Default__Password=1d011f9a-235f-4ab3-be3f-a8f7b6bd06d2
		      - App__SelfUrl=https://localhost:44359
		      - App__AngularUrl=http://localhost:4200
		      - App_CorsOrigins=http://localhost:4200
		      - App__HealthCheckUrl=http://exampleabpapplicationlayer-api:8080/health-status
		      - AuthServer__RequireHttpsMetadata=false
		      - AuthServer__Authority=https://localhost:44302
		      - App__RedirectAllowedUrls=http://localhost:4200
		      - ConnectionStrings__Default=Data Source=sql-server;Initial Catalog=ExampleAbpApplicationLayer;User Id=sa;Password=myPassw0rd;MultipleActiveResultSets=true;TrustServerCertificate=True;
		    ports:
		      - "44302:8081"
		    depends_on:
		      sql-server:
		        condition: service_healthy
		    restart: on-failure    
		    volumes:
		      - ./certs:/app/certs
		    networks:
		      - abp-network
		  
		
		  db-migrator:
		    image: exampleabpapplicationlayer-db-migrator:latest
		    container_name: db-migrator
		    build:
		      context: ../../
		      dockerfile: src/ExampleAbpApplicationLayer.DbMigrator/Dockerfile.local
		    environment:
		      - OpenIddict__Applications__ExampleAbpApplicationLayer_App__RootUrl=http://localhost:4200
		      - OpenIddict__Applications__ExampleAbpApplicationLayer_Swagger__RootUrl=https://localhost:44302
		      - ConnectionStrings__Default=Data Source=sql-server;Initial Catalog=ExampleAbpApplicationLayer;User Id=sa;Password=myPassw0rd;MultipleActiveResultSets=true;TrustServerCertificate=True;
		    restart: on-failure
		    depends_on:
		      sql-server:
		        condition: service_healthy
		    networks:
		      - abp-network    
		  
		  sql-server:
		    container_name: sql-server
		    image: mcr.microsoft.com/azure-sql-edge:1.0.7
		    ports:
		      - "1434:1433"
		    environment:
		      SA_PASSWORD: "myPassw0rd"
		      ACCEPT_EULA: "Y"
		    volumes:
		      - sqldata:/var/opt/mssql
		    networks:
		      - abp-network
		    healthcheck:
		      test: /opt/mssql-tools/bin/sqlcmd -S sql-server -U sa -P "myPassw0rd" -Q "SELECT 1" -C -b -o /dev/null
		      interval: 10s
		      timeout: 3s
		      retries: 10
		      start_period: 10s
		volumes:
		  sqldata:
		    name: exampleabpapplicationlayer_sqldata
		networks:
		  abp-network:
		    name: exampleabpapplicationlayer-network
		    driver: bridge</file>
	<file path='etc\docker-compose\dynamic-env.json'>
		{
		  "production": true,
		  "application": {
		    "baseUrl":"http://localhost:4200",
		    "name": "ExampleAbpApplicationLayer",
		    "logoUrl": ""
		  },
		  "oAuthConfig": {
		    "issuer": "https://localhost:44302/",
		    "redirectUri": "http://localhost:4200",
		    "clientId": "ExampleAbpApplicationLayer_App",
		    "responseType": "code",
		    "scope": "offline_access openid profile email phone ExampleAbpApplicationLayer"
		  },
		  "apis": {
		    "default": {
		      "url": "https://localhost:44302",
		      "rootNamespace": "ExampleAbpApplicationLayer"
		    },
		    "AbpAccountPublic": {
		      "url": "https://localhost:44302",
		      "rootNamespace": "AbpAccountPublic"
		    }
		  }
		}</file>
	<file path='etc\docker-compose\README.md'>
		## How to deploy on docker
		The application provides the related `Dockerfiles` and `docker-compose` file with scripts. You can build the docker images and run them using docker-compose. The necessary database, DbMigrator, and the application will be running on docker with health checks in an isolated docker network.
		
		### Creating the docker images
		Navigate to _etc/docker-compose_ folder and run the `build-images-locally.ps1` script. You can examine the script to set **image tag** for your images. It is `latest` by default.
		
		### Running the docker images using docker-compose
		Navigate to _etc/docker-compose_ folder and run the `run-docker.ps1` script. The script will generate developer certificates (if it doesn't exist already) with `dotnet dev-certs` command to use HTTPS. Then, the script runs the provided docker-compose file on detached mode.
		
		> Not: Developer certificate is only valid for **localhost** domain. If you want to deploy to a real DNS in a production environment, use LetsEncrypt or similar tools.</file>
	<file path='etc\docker-compose\run-docker.ps1'>
		$currentFolder = $PSScriptRoot
		
		$certsFolder = Join-Path $currentFolder "certs"
		
		If(!(Test-Path -Path $certsFolder))
		{
		    New-Item -ItemType Directory -Force -Path $certsFolder
		    if(!(Test-Path -Path (Join-Path $certsFolder "localhost.pfx") -PathType Leaf)){
		        Set-Location $certsFolder
		        dotnet dev-certs https -v -ep localhost.pfx -p 1d011f9a-235f-4ab3-be3f-a8f7b6bd06d2 -t        
		    }
		}
		
		Set-Location $currentFolder
		docker-compose up -d</file>
	<file path='etc\docker-compose\run-docker.sh'>
		#!/bin/bash
		
		if [[ ! -d certs ]]
		then
		    mkdir certs
		    cd certs/
		    if [[ ! -f localhost.pfx ]]
		    then
		        dotnet dev-certs https -v -ep localhost.pfx -p 1d011f9a-235f-4ab3-be3f-a8f7b6bd06d2 -t
		    fi
		    cd ../
		fi
		
		docker-compose up -d</file>
	<file path='etc\docker-compose\stop-docker.ps1'>
		docker-compose down</file>
	<file path='etc\docker-compose\stop-docker.sh'>
		#!/bin/bash
		docker-compose down</file>
	<file path='etc\helm\.gitignore'>
		exampleabpapplicationlayer/values.localdev.yaml</file>
	<file path='etc\helm\build-all-images.ps1'>
		./build-image.ps1 -ProjectPath "../../src/ExampleAbpApplicationLayer.DbMigrator/ExampleAbpApplicationLayer.DbMigrator.csproj" -ImageName exampleabpapplicationlayer/dbmigrator
		./build-image.ps1 -ProjectPath "../../src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.csproj" -ImageName exampleabpapplicationlayer/httpapihost
		./build-image.ps1 -ProjectPath "../../angular" -ImageName exampleabpapplicationlayer/angular -ProjectType "angular"</file>
	<file path='etc\helm\build-image.ps1'>
		param (
		    $ProjectPath,
		    $ImageName,
		    $Version="auto",
		    $ProjectType="dotnet"
		)
		
		if ($Version -eq 'auto') {
		    $Version = Get-Date -Format "yyyyMMdd.HHmmss"
		}
		
		$currentFolder = $PSScriptRoot
		$relativeProjectFolder = [System.IO.Path]::GetExtension($ProjectPath) -eq "" ? $ProjectPath : [System.IO.Path]::GetDirectoryName($ProjectPath)
		$projectFolder = Join-Path $currentFolder $relativeProjectFolder
		
		Set-Location $projectFolder
		
		try
		{
		    $projectFileName = [System.IO.Path]::GetFileName($ProjectPath)
		
		    if($ProjectType -eq "dotnet")
		    {
		        Write-Host "Publishing Dotnet Project: ${projectFileName}" -ForegroundColor Green -BackgroundColor Black
		        dotnet publish -c Release
		
		        if (-Not $?) {
		            Write-Error "Publishing Dotnet Project failed: $projectFileName"
		            exit $LASTEXITCODE
		        }
		    }
		
		    Write-Host "Building Docker Image: ${ImageName}" -ForegroundColor Green -BackgroundColor Black
		    $Env:DOCKER_SCAN_SUGGEST="false"
		    docker build . -f Dockerfile -t ${ImageName}:${Version}
		
		    # BEGIN: UPDATE values.localdev.yaml
		
		    $splitImageName = $ImageName -split '/'
		    $subChartName = $splitImageName[1]
		
		    # Full path of the values.localdev.yaml file
		    $localDevFilePath = Join-Path $PSScriptRoot "exampleabpapplicationlayer/values.localdev.yaml"
		
		    # If the values.localdev.yaml file does not exist, create it first
		    if (!(Test-Path $localDevFilePath)) {
		        New-Item -ItemType File -Path $localDevFilePath | Out-Null
		    }
		
		    # Content to write to the file.
		    $chartSectionContent = @"
		${subChartName}:
		  image:
		    tag: "${Version}"
		"@
		
		    # Read the existing content from the file
		    $existingContent = Get-Content -Path $localDevFilePath -Raw
		
		    # Check if the existing content contains the service name, and replace it if found.
		    if ($existingContent -match "${subChartName}:") {
		        $existingContent = $existingContent -replace "(?s)${subChartName}:.*?tag:.*", $chartSectionContent.Trim()
		    } else {
		        $existingContent += $chartSectionContent
		    }
		
		    # Write the updated content to the file.
		    Set-Content -Path $localDevFilePath -Value $existingContent
		
		    # END: UPDATE values.localdev.yaml
		}
		finally
		{
		    Set-Location $currentFolder    
		}</file>
	<file path='etc\helm\create-tls-secrets.ps1'>
		﻿param (
		    $Namespace="exampleabpapplicationlayer-local",
		    $User = ""
		)
		
		$BaseNamespace = $Namespace
		if([string]::IsNullOrEmpty($User) -eq $false)
		{
		    $Namespace += '-' + $User
		}
		
		mkcert --cert-file "${Namespace}.pem" --key-file "${Namespace}-key.pem" "${Namespace}"  "${Namespace}-angular"  "${Namespace}-httpapihost"   
		kubectl create namespace ${Namespace}
		kubectl create secret tls -n ${Namespace} ${BaseNamespace}-tls --cert=./${Namespace}.pem --key=./${Namespace}-key.pem</file>
	<file path='etc\helm\exampleabpapplicationlayer-local-key.pem'>
		-----BEGIN PRIVATE KEY-----
		MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqFw/rKdhTuX+u
		YVFywJeeElg/ntsyEDURWc0DFFkCkI9ay176kqilL2jwwMCSGVuj/jnfnpWFVxt+
		pxTHyANzmUwIQRmCeV1k5mmsNYkpDJyUPYxU6v3bWl6v1osOYe3gZ0FhJq+dEcqv
		1zhox7uYYsSHN2gEgRn7IRNHZZUxw3IGDqSmQI2nQVRiv9BmGy3UcIoGFZbRUrRm
		lQfMEQfPYZWjMvpDX/46oC+K16hdgiSQBlMWaqSBROPYxgHrJ6gssyEZHoPO/dNc
		3eKimncXxXIkZDaeJhgWfXvWjbbUr8vpARdDCaQVne18LQWci6Fp07r+0Vxh+rgW
		8j7V+dGPAgMBAAECggEAbn8C8WPCzElSwCcqsWCaXq9OMy5w+an7v6TWAW0jkf31
		kydRMXk7I+yTwOuHbqIYnYXXdQVh3zjCfNnwLwUp8Nwiv64C83cCjDz/Y0d4Lnmp
		8se1NalfdzPTFWpL9fD6hvCtUX6/UUuwn+EyHSe8H/fx8mG1Kk/wX+uRya0dajCd
		3BjHsdVgGTYbWJ70T6ACrtFclwqgD69EAyeZ44NdI5d34ZzKve3voubpC78oAa+B
		Q4hTUA2AFxysPWIeOmvSL6u6ZzSayH7PSh4RC0ADZfc7fCgKe52+TLndDu+FfDix
		GoOsbxN2O7CL1nVAP75lU/9MtLqjIqADwHAan778aQKBgQDVxcpZzNOuna2CTjKg
		qq6EqqEkdBHEleudRib6KfbhMB6b6hUMj5OPEI5mM5E9r33AAZ06rR76BjgakO8a
		Pfd9HRTcYJyg7nGl3UrapEB/QfogaYwpySstgn0dgHy4hMCoTJ6JgAXJtXhiSVXE
		32UnFOLTkKofBbnJxLRv8LCtfQKBgQDLsE03gIelrTlJag810E+4ARWZ5HHZ2sRh
		8WGR9v89OAvVjIVkA6JPcnlH+ZxRmc+IleGMDKrtgMN+H/QhTp3eyMAgcfhDO8pA
		GMNpApWNXtramwhOU6QSfr0gmMUsioXgABk5/cYfX3Zm/SB8aT3+c4fuqeVESqvE
		JmJTAywY+wKBgQCmo4MkUz2jvXg2vlxK0CIweo4Yy33aP3+mXrwdgD7ZtVf29Bcq
		bnV5LU/DrWkHq9gbp2Z4CeG+xsBPPTGVxD47QkMzswAFlznyMLmcDDPWv4iKYZyI
		Ki/FTxXWvIT8lUdVKjzfNHPOk+5et4nraLUCLQ7QGtHyUtVLylFZfUdMRQKBgCZr
		yQTxH6UmuamZcekKtB7XRYXTy432cBixeWAZISghDEppyTeGX/VweGQVN2FFDBqN
		ew/5y7wlD7sYt+oYdDrzzxnPpa649nuEsEd8j00tWUbm+3ga2tYKRg6CAp9WOc54
		9kk0D00XqrPeh2QwTdtTW46vSWnKVAAZ5W4XKRhFAoGARs/s82+753Re362m0eTR
		kQ9ixr71ta9tb4P+KqLKGsxUvHEAGZO+yFMG25TMp33JcprKYe2hiat0VQD5tE9l
		gHaoDmi3pFkcbiBDmdgUM/7dWPYS98KaxzLPHdgh5Dpz6fpsYXjKYWtKva0qmwcY
		BIcsFiRYPzmCD6NjQesgSwU=
		-----END PRIVATE KEY-----</file>
	<file path='etc\helm\exampleabpapplicationlayer-local.pem'>
		-----BEGIN CERTIFICATE-----
		MIIElDCCAvygAwIBAgIRAO3K5F1bvpnm90UChAwQG7swDQYJKoZIhvcNAQELBQAw
		bTEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMSEwHwYDVQQLDBhBTlNJ
		My1MQVBcQW5zaUBBbnNpMy1MQVAxKDAmBgNVBAMMH21rY2VydCBBTlNJMy1MQVBc
		QW5zaUBBbnNpMy1MQVAwHhcNMjUwODIzMDIxMzEzWhcNMjcxMTIzMDIxMzEzWjBM
		MScwJQYDVQQKEx5ta2NlcnQgZGV2ZWxvcG1lbnQgY2VydGlmaWNhdGUxITAfBgNV
		BAsMGEFOU0kzLUxBUFxBbnNpQEFuc2kzLUxBUDCCASIwDQYJKoZIhvcNAQEBBQAD
		ggEPADCCAQoCggEBAKoXD+sp2FO5f65hUXLAl54SWD+e2zIQNRFZzQMUWQKQj1rL
		XvqSqKUvaPDAwJIZW6P+Od+elYVXG36nFMfIA3OZTAhBGYJ5XWTmaaw1iSkMnJQ9
		jFTq/dtaXq/Wiw5h7eBnQWEmr50Ryq/XOGjHu5hixIc3aASBGfshE0dllTHDcgYO
		pKZAjadBVGK/0GYbLdRwigYVltFStGaVB8wRB89hlaMy+kNf/jqgL4rXqF2CJJAG
		UxZqpIFE49jGAesnqCyzIRkeg87901zd4qKadxfFciRkNp4mGBZ9e9aNttSvy+kB
		F0MJpBWd7XwtBZyLoWnTuv7RXGH6uBbyPtX50Y8CAwEAAaOBzzCBzDAOBgNVHQ8B
		Af8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwHwYDVR0jBBgwFoAUDNA7yE/W
		XFC4YItDtTUlUCjIEzswgYMGA1UdEQR8MHqCIGV4YW1wbGVhYnBhcHBsaWNhdGlv
		bmxheWVyLWxvY2FsgihleGFtcGxlYWJwYXBwbGljYXRpb25sYXllci1sb2NhbC1h
		bmd1bGFygixleGFtcGxlYWJwYXBwbGljYXRpb25sYXllci1sb2NhbC1odHRwYXBp
		aG9zdDANBgkqhkiG9w0BAQsFAAOCAYEAi9KWMSiYJ35U2dxnOOY1A3wwC+ZgBe9/
		sbK2i0kjX5IWfG7NFdewx5zrRwLw/2P18MqW5KtMagbgOyfewsU/hd5eYGgcpnJU
		UmxDqVhi2ofl9Unbv+TBDCpx/+ebzJh3YXCAxbf51wk8e9k/kDQIeAqLGDxsolk8
		l27DDtd3GIvF/t84iwnHwgDzzyOJemio2Q+UPt0zfrPQg2e/lqPpPwddSPa3BnPs
		vcMwEoZLIlfyO/TzyRz+uRaz7xEDNeP8K4uZe4UPoMPuH4mhkeGQl4x1MApUDoRj
		f+VvvhPK+CLz82X/EfHVP3biUn7f3AVjyE9g3/RxLCbqqoG1dwW4ZH+eIuGRBJ43
		T4kIZdkYXJ9MFybTl5QHsQJsTi5iN074UHjRNk2Z+yhZlOYofChy2Sjpo6p8Ycgm
		oiACML0rk5fRr3Y6tHHwL4/W7x9LlCgsZVRJHSsEHGa5/EdAFut7qq0gwq0vljmP
		S+RA573olPloshjJvCDVpY0yda3m4SzO
		-----END CERTIFICATE-----</file>
	<file path='etc\helm\exampleabpapplicationlayer\Chart.yaml'>
		apiVersion: v2
		name: exampleabpapplicationlayer
		version: 1.0.0
		appVersion: "1.0"
		description: ExampleAbpApplicationLayer Solution</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\angular\Chart.yaml'>
		apiVersion: v2
		name: angular
		appVersion: "1.0"
		description: ExampleAbpApplicationLayer Angular Application
		version: 1.0.0
		type: application</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular-configmap.yaml'>
		apiVersion: v1
		kind: ConfigMap
		metadata:
		  name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
		data:
		  dynamic-env.json: |-
		    {
		        "production": "true",
		        "application": {
		            "baseUrl": "{{ include "exampleabpapplicationlayer.hosts.angular" . }}",
		            "name": "ExampleAbpApplicationLayer",
		            "logoUrl": ""
		        },
		        "oAuthConfig": {
		            "issuer": "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}",
		            "redirectUri": "{{ include "exampleabpapplicationlayer.hosts.angular" . }}",
		            "requireHttps": "true",
		            "clientId": "ExampleAbpApplicationLayer_App",
		            "responseType": "code",
		            "scope": "offline_access ExampleAbpApplicationLayer",
		            "strictDiscoveryDocumentValidation": false,
		            "skipIssuerCheck": true
		        },
		        "apis": {
		            "default": {
		                "url": "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}",
		                "rootNamespace": "ExampleAbpApplicationLayer"
		            }
		        }
		    }</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular-ingress.yaml'>
		apiVersion: networking.k8s.io/v1
		kind: Ingress
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  annotations:
		    nginx.ingress.kubernetes.io/rewrite-target: "/"
		    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
		    nginx.ingress.kubernetes.io/proxy-buffer-size: "32k"
		    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
		    cert-manager.io/cluster-issuer: "letsencrypt"
		spec:
		  ingressClassName: "nginx"
		  tls:
		  - hosts:
		      - "{{ (include "exampleabpapplicationlayer.hosts.angular" .) | trimPrefix "https://" }}"
		    secretName: "{{ .Values.global.tlsSecret }}"
		  rules:
		  - host: "{{ (include "exampleabpapplicationlayer.hosts.angular" .) | trimPrefix "https://" }}"
		    http:
		      paths:
		      - path: /
		        pathType: "Prefix"
		        backend:
		          service:
		            name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		            port:
		              number: 80</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular-service.yaml'>
		apiVersion: v1
		kind: Service
		metadata:
		  labels:
		    name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  ports:
		    - name: "80"
		      port: 80
		  selector:
		    app: "{{ .Release.Name }}-{{ .Chart.Name }}"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\angular\templates\angular.yaml'>
		apiVersion: apps/v1
		kind: Deployment
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  selector:
		    matchLabels:
		      app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  template:
		    metadata:
		      labels:
		        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		    spec:
		      containers:
		      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
		        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
		        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		        ports:
		        - name: "http"
		          containerPort: 80
		        volumeMounts:
		        - name: config-volume
		          mountPath: /usr/share/nginx/html/dynamic-env.json
		          subPath: dynamic-env.json
		      volumes:
		      - name: config-volume
		        configMap:
		          name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\angular\values.yaml'>
		image:
		  repository: "exampleabpapplicationlayer/angular"
		  tag: "latest"
		  pullPolicy: IfNotPresent</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\dbmigrator\Chart.yaml'>
		apiVersion: v2
		name: dbmigrator
		appVersion: "1.0"
		description: ExampleAbpApplicationLayer Database Migrator
		version: 1.0.0
		type: application</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\dbmigrator\templates\migrator.yaml'>
		apiVersion: batch/v1
		kind: Job
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  backoffLimit: 10
		  manualSelector: true
		  selector:
		    matchLabels:
		      app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  template:
		    metadata:
		      labels:
		        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		    spec:
		      activeDeadlineSeconds: 180
		      restartPolicy: Never
		      containers:
		      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
		        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
		        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		        ports:
		        - name: "http"
		          containerPort: 80
		        env:
		        - name: "DOTNET_ENVIRONMENT"
		          value: "{{ .Values.global.dotnetEnvironment }}"
		        - name: "ConnectionStrings__Default"
		          value: "{{ .Values.global.connectionStrings.default | replace "[RELEASE_NAME]" .Release.Name }}"
		        - name: "AbpStudioClient__StudioUrl"
		          value: "{{ .Values.global.abpStudioClient.studioUrl }}"
		        - name: "AbpStudioClient__IsLinkEnabled"
		          value: "{{ .Values.global.abpStudioClient.isLinkEnabled }}" 
		        - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_App__ClientId"
		          value: "ExampleAbpApplicationLayer_App"
		        - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_App__RootUrl"
		          value: "{{ include "exampleabpapplicationlayer.hosts.angular" . }}"
		        - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_Swagger__ClientId"
		          value: "ExampleAbpApplicationLayer_Swagger"
		        - name: "OpenIddict__Applications__ExampleAbpApplicationLayer_Swagger__RootUrl"
		          value: "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\dbmigrator\values.yaml'>
		image:
		  repository: "exampleabpapplicationlayer/dbmigrator"
		  tag: "latest"
		  pullPolicy: IfNotPresent
		authServer:
		  clientSecret: "1q2w3e*"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\httpapihost\Chart.yaml'>
		apiVersion: v2
		name: httpapihost
		appVersion: "1.0"
		description: ExampleAbpApplicationLayer HttpApi Host Application
		version: 1.0.0
		type: application</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\httpapihost\templates\httpapihost-ingress.yaml'>
		apiVersion: networking.k8s.io/v1
		kind: Ingress
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  annotations:
		    nginx.ingress.kubernetes.io/rewrite-target: "/"
		    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
		    nginx.ingress.kubernetes.io/proxy-buffer-size: "32k"
		    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
		    cert-manager.io/cluster-issuer: "letsencrypt"
		spec:
		  ingressClassName: "nginx"
		  tls:
		  - hosts:
		      - "{{ (include "exampleabpapplicationlayer.hosts.httpapi" .) | trimPrefix "https://" }}"
		    secretName: "{{ .Values.global.tlsSecret }}"
		  rules:
		  - host: "{{ (include "exampleabpapplicationlayer.hosts.httpapi" .) | trimPrefix "https://" }}"
		    http:
		      paths:
		      - path: /
		        pathType: "Prefix"
		        backend:
		          service:
		            name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		            port:
		              number: 80</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\httpapihost\templates\httpapihost-service.yaml'>
		apiVersion: v1
		kind: Service
		metadata:
		  labels:
		    name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  ports:
		    - name: "80"
		      port: 80
		  selector:
		    app: "{{ .Release.Name }}-{{ .Chart.Name }}"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\httpapihost\templates\httpapihost.yaml'>
		apiVersion: apps/v1
		kind: Deployment
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  selector:
		    matchLabels:
		      app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  template:
		    metadata:
		      labels:
		        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		    spec:
		      containers:
		      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
		        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
		        name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		        ports:
		        - name: "http"
		          containerPort: 80
		        readinessProbe:
		          httpGet:
		            path: /health-status
		            port: 80
		          initialDelaySeconds: 10
		          periodSeconds: 5
		          timeoutSeconds: 2
		          failureThreshold: 3
		        env:
		        - name: "DOTNET_ENVIRONMENT"
		          value: "{{ .Values.global.dotnetEnvironment }}"
		        - name: "App__SelfUrl"
		          value: "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}"
		        - name: "App__AngularUrl"
		          value: "{{ include "exampleabpapplicationlayer.hosts.angular" . }}"
		        - name: "App__CorsOrigins"
		          value: "https://*.ExampleAbpApplicationLayer.com,{{ include "exampleabpapplicationlayer.hosts.angular" . }}"                      
		        - name: "App__RedirectAllowedUrls"
		          value: "https://*.TestAppBlazorWasm.com,{{ include "exampleabpapplicationlayer.hosts.angular" . }}"                 
		        - name: App__DisablePII
		          value: "{{ .Values.global.disablePII }}"
		        - name: "App__HealthUiCheckUrl"
		          value: "http://{{ .Release.Name }}-httpapihost/health-status" 
		        - name: "ConnectionStrings__Default"
		          value: "{{ .Values.global.connectionStrings.default | replace "[RELEASE_NAME]" .Release.Name }}"
		        - name: "AuthServer__Authority"
		          value: "{{ include "exampleabpapplicationlayer.hosts.httpapi" . }}"
		        - name: "AuthServer__RequireHttpsMetadata"
		          value: "false"
		        - name: "StringEncryption__DefaultPassPhrase"
		          value: "{{ .Values.global.stringEncryptionDefaultPassPhrase }}"
		        - name: "AbpStudioClient__StudioUrl"
		          value: "{{ .Values.global.abpStudioClient.studioUrl }}"
		        - name: "AbpStudioClient__IsLinkEnabled"
		          value: "{{ .Values.global.abpStudioClient.isLinkEnabled }}"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\httpapihost\values.yaml'>
		image:
		  repository: "exampleabpapplicationlayer/httpapihost"
		  tag: "latest"
		  pullPolicy: IfNotPresent</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\rabbitmq\Chart.yaml'>
		apiVersion: v2
		name: rabbitmq
		version: 1.0.0
		appVersion: "1.0"
		description: Runs RabbitMQ Message Broker Instance</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\rabbitmq\templates\rabbitmq-service.yaml'>
		apiVersion: v1
		kind: Service
		metadata:
		  labels:
		    name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  type: ClusterIP
		  ports:
		    - name: "http"
		      protocol: TCP
		      port: {{ .Values.ports.http }}
		      targetPort: {{ .Values.ports.http }}
		    - name: "amqp"
		      protocol: TCP
		      port: {{ .Values.ports.amqp }}
		      targetPort: {{ .Values.ports.amqp }}
		  selector:
		    app: "{{ .Release.Name }}-{{ .Chart.Name }}"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\rabbitmq\templates\rabbitmq.yaml'>
		apiVersion: apps/v1
		kind: StatefulSet
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  serviceName: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  replicas: 1
		  selector:
		    matchLabels:
		      app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  template:
		    metadata:
		      labels:
		        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		    spec:
		      containers:
		        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
		          name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		          ports:
		            - name: "http"
		              protocol: TCP
		              containerPort: {{ .Values.ports.http }}
		            - name: "amqp"
		              protocol: TCP
		              containerPort: {{ .Values.ports.amqp }}</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\rabbitmq\values.yaml'>
		image:
		  repository: "rabbitmq"
		  tag: "3.12.7-management-alpine"
		ports:
		  http: 15672
		  amqp: 5672</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\sqlserver\Chart.yaml'>
		apiVersion: v2
		name: sqlserver
		version: 1.0.0
		appVersion: "1.0"
		description: Runs SQL Server Instance</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\sqlserver\templates\sqlserver-service.yaml'>
		apiVersion: v1
		kind: Service
		metadata:
		  labels:
		    name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  type: ClusterIP
		  ports:
		    - name: "{{ .Chart.Name }}"
		      port: {{ .Values.port }}
		  selector:
		    app: "{{ .Release.Name }}-{{ .Chart.Name }}"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\sqlserver\templates\sqlserver.yaml'>
		apiVersion: apps/v1
		kind: StatefulSet
		metadata:
		  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		spec:
		  serviceName: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  replicas: 1
		  selector:
		    matchLabels:
		      app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		  template:
		    metadata:
		      labels:
		        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
		    spec:
		      containers:
		        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
		          name: "{{ .Release.Name }}-{{ .Chart.Name }}"
		          ports:
		            - name: "{{ .Chart.Name }}"
		              containerPort: {{ .Values.port }}
		          env:
		          - name: "SA_PASSWORD"
		            value: "{{ .Values.sa_password }}"
		          - name: "ACCEPT_EULA"
		            value: "Y"</file>
	<file path='etc\helm\exampleabpapplicationlayer\charts\sqlserver\values.yaml'>
		port: 1433
		sa_password: "myPassw@rd"
		image:
		  repository: "mcr.microsoft.com/azure-sql-edge"
		  tag: "1.0.7"</file>
	<file path='etc\helm\exampleabpapplicationlayer\templates\_helpers.tpl'>
		{{- define "exampleabpapplicationlayer.hosts.httpapi" -}}
		{{- print "https://" (.Values.global.hosts.httpapi | replace "[RELEASE_NAME]" .Release.Name) -}}
		{{- end -}}
		{{- define "exampleabpapplicationlayer.hosts.angular" -}}
		{{- print "https://" (.Values.global.hosts.angular | replace "[RELEASE_NAME]" .Release.Name) -}}
		{{- end -}}</file>
	<file path='etc\helm\exampleabpapplicationlayer\values.exampleabpapplicationlayer-local.yaml'>
		global:
		  hosts:
		    dbmigrator: "[RELEASE_NAME]-dbmigrator"
		    httpapi: "[RELEASE_NAME]-httpapihost"
		    angular: "[RELEASE_NAME]-angular"
		  connectionStrings:
		    default: "Server=[RELEASE_NAME]-sqlserver,1433; Database=ExampleAbpApplicationLayer; User Id=sa; Password=myPassw@rd; TrustServerCertificate=True"
		  dotnetEnvironment: "Staging"
		  disablePII: "false"
		  stringEncryptionDefaultPassPhrase: "SpOOeQFpH5eH4TMY"
		  abpStudioClient:
		    isLinkEnabled: "true"</file>
	<file path='etc\helm\exampleabpapplicationlayer\values.yaml'>
		global:
		  tlsSecret: "exampleabpapplicationlayer-local-tls"
		  abpStudioClient:
		    studioUrl: "http://abp-studio-proxy:38271"</file>
	<file path='etc\helm\install.ps1'>
		param (
			$ChartName="exampleabpapplicationlayer",
			$Namespace="exampleabpapplicationlayer-local",
			$ReleaseName="exampleabpapplicationlayer-local",
			$DotnetEnvironment="Staging",
		    $User = ""
		)
		
		# Create values.localdev.yaml if not exists
		$localDevFilePath = Join-Path $PSScriptRoot "exampleabpapplicationlayer/values.localdev.yaml"
		if (!(Test-Path $localDevFilePath)) {
			New-Item -ItemType File -Path $localDevFilePath | Out-Null
		}
		
		$FinalReleaseName = $ReleaseName
		if([string]::IsNullOrEmpty($User) -eq $false)
		{
		    $Namespace += '-' + $User
		    $FinalReleaseName += '-' + $User
		}
		
		# Install (or upgrade) the Helm chart
		helm upgrade --install ${FinalReleaseName} ${ChartName} --namespace ${Namespace} --create-namespace --set global.dotnetEnvironment=${DotnetEnvironment} -f "exampleabpapplicationlayer/values.localdev.yaml" -f "$ChartName/values.${ReleaseName}.yaml"</file>
	<file path='etc\helm\README.md'>
		﻿# Local Kubernetes Guide
		
		This guide explains how to deploy your microservice template into your local Kubernetes cluster.
		
		## Pre-requirements
		
		* [Docker for Desktop](https://www.docker.com/products/docker-desktop/) with Kubernetes enabled
		* [Helm](https://helm.sh/docs/intro/install/) for running helm charts
		* Install NGINX ingress using helm:
		```powershell
		helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
		helm repo update
		helm upgrade --install --version=4.0.19 ingress-nginx ingress-nginx/ingress-nginx
		```
		## Configuring HTTPS for Local K8s
		
		You can run the solution on staging environment in your local Kubernetes cluster with HTTPS. There are various ways to create a self-signed certificate.
		
		### Installing mkcert
		This guide will be using `mkcert` for creating self-signed certificates. Follow the [installation guide](https://github.com/FiloSottile/mkcert#installation) to install mkcert.
		
		### Creating mkcert Root CA
		Use the command to create root (local) certificate authority for your certificates:
		```powershell
		mkcert -install
		```
		
		> **Note:** All the certificates created by mkcert certificate creation will be trusted by the local machine
		### Run mkcert
		
		Use the `create-tls-secrets.ps1` PowerShell script to create self-signed certificates for your domains and the tls secret for Kubernetes.
		
		## Building Images
		
		Run `build-all-images.ps1` to build all Docker images for the solution. Do this whenever you change the solution code. If you only change a single project, you can use `build-image.ps1` to build only that image, for a faster build. See `build-all-images.ps1` file's content to learn how to use `build-image.ps1` for a single project.
		
		> Note that you can also use ABP Studio to build one or all the images.
		
		## Install Charts
		
		Run `install.ps1` to install or upgrade the helm charts to the Kubernetes cluster.
		
		> Note that you can also use ABP Studio to install/uninstall charts.
		
		## Add Entries to the Hosts File
		
		Ensure that the following entries are added to the `C:\Windows\System32\drivers\etc\hosts` file:
		
		```
		127.0.0.1 exampleabpapplicationlayer-local-web
		127.0.0.1 exampleabpapplicationlayer-local-webgateway
		127.0.0.1 exampleabpapplicationlayer-local-authserver
		```
		
		> Note that ABP Studio automatically adds these entries to your `hosts` file when you *Connect* to your Kubernetes cluster using ABP Studio's Kubernetes integration.
		
		## Browse
		
		Now, you can browse the URL: `https://exampleabpapplicationlayer-local-web`
		
		## Uninstall Charts
		
		Run `uninstall.ps1` to uninstall the helm charts from the Kubernetes cluster.</file>
	<file path='etc\helm\uninstall.ps1'>
		param (
			$Namespace="exampleabpapplicationlayer-local",
		    $ReleaseName="exampleabpapplicationlayer-local",
		    $User = ""
		)
		
		if([string]::IsNullOrEmpty($User) -eq $false)
		{
		    $Namespace += '-' + $User
		    $ReleaseName += '-' + $User
		}
		
		helm uninstall ${ReleaseName} --namespace ${Namespace}</file>
	<file path='ExampleAbpApplicationLayer.abpmdl'>
		{
		  "template": "app",
		  "imports": {
		    "Volo.Abp.LeptonXTheme": {
		      "version": "4.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.TextTemplateManagement": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Chat": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.LanguageManagement": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.FileManagement": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.OpenIddict.Pro": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.Gdpr": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.AuditLogging.Pro": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Saas": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.Identity.Pro": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.Account.Pro": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.SettingManagement": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.PermissionManagement": {
		      "version": "9.3.1",
		      "isInstalled": true
		    },
		    "Volo.Abp.FeatureManagement": {
		      "version": "9.3.1",
		      "isInstalled": true
		    }
		  },
		  "folders": {
		    "items": {
		      "src": {},
		      "test": {}
		    }
		  },
		  "packages": {
		    "ExampleAbpApplicationLayer.Application": {
		      "path": "src/ExampleAbpApplicationLayer.Application/ExampleAbpApplicationLayer.Application.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.Application.Tests": {
		      "path": "test/ExampleAbpApplicationLayer.Application.Tests/ExampleAbpApplicationLayer.Application.Tests.abppkg",
		      "folder": "test"
		    },
		    "ExampleAbpApplicationLayer.Domain.Shared": {
		      "path": "src/ExampleAbpApplicationLayer.Domain.Shared/ExampleAbpApplicationLayer.Domain.Shared.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.Application.Contracts": {
		      "path": "src/ExampleAbpApplicationLayer.Application.Contracts/ExampleAbpApplicationLayer.Application.Contracts.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.HttpApi": {
		      "path": "src/ExampleAbpApplicationLayer.HttpApi/ExampleAbpApplicationLayer.HttpApi.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.HttpApi.Client": {
		      "path": "src/ExampleAbpApplicationLayer.HttpApi.Client/ExampleAbpApplicationLayer.HttpApi.Client.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.EntityFrameworkCore.Tests": {
		      "path": "test/ExampleAbpApplicationLayer.EntityFrameworkCore.Tests/ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.abppkg",
		      "folder": "test"
		    },
		    "ExampleAbpApplicationLayer.EntityFrameworkCore": {
		      "path": "src/ExampleAbpApplicationLayer.EntityFrameworkCore/ExampleAbpApplicationLayer.EntityFrameworkCore.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.TestBase": {
		      "path": "test/ExampleAbpApplicationLayer.TestBase/ExampleAbpApplicationLayer.TestBase.abppkg",
		      "folder": "test"
		    },
		    "ExampleAbpApplicationLayer.Domain.Tests": {
		      "path": "test/ExampleAbpApplicationLayer.Domain.Tests/ExampleAbpApplicationLayer.Domain.Tests.abppkg",
		      "folder": "test"
		    },
		    "ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp": {
		      "path": "test/ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp/ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.abppkg",
		      "folder": "test"
		    },
		    "ExampleAbpApplicationLayer.DbMigrator": {
		      "path": "src/ExampleAbpApplicationLayer.DbMigrator/ExampleAbpApplicationLayer.DbMigrator.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.HttpApi.Host": {
		      "path": "src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.abppkg",
		      "folder": "src"
		    },
		    "ExampleAbpApplicationLayer.Domain": {
		      "path": "src/ExampleAbpApplicationLayer.Domain/ExampleAbpApplicationLayer.Domain.abppkg",
		      "folder": "src"
		    }
		  }
		}</file>
	<file path='ExampleAbpApplicationLayer.abpsln'><![CDATA[
		{
		  "id": "77f0e646-64d1-4b1d-bc32-cc50c219225a",
		  "template": "app",
		  "versions": {
		    "LeptonX": "4.3.1",
		    "AbpFramework": "9.3.1",
		    "AbpCommercial": "9.3.1",
		    "AbpStudio": "1.2.1",
		    "TargetDotnetFramework": "net9.0"
		  },
		  "modules": {
		    "ExampleAbpApplicationLayer": {
		      "path": "ExampleAbpApplicationLayer.abpmdl"
		    }
		  },
		  "runProfiles": {
		    "Default": {
		      "path": "etc/abp-studio/run-profiles/Default.abprun.json"
		    }
		  },
		  "k8sProfiles": {
		    "local": {
		      "path": "etc/abp-studio/k8s-profiles/local.abpk8s.json"
		    }
		  },
		  "commands": {
		    "helmBuildDotnetImage": {
		      "triggerTargets": [
		        "HELM_CHARTS_ROOT",
		        "HELM_MAIN_CHART",
		        "HELM_SUB_CHART"
		      ],
		      "executionTargets": [
		        "HELM_MAIN_CHART",
		        "HELM_SUB_CHART"
		      ],
		      "displayName": "Build Docker Image(s)",
		      "workingDirectory": "etc/helm",
		      "terminalCommand": "./build-image.ps1 -ProjectPath {{metadata.projectPath}} -ImageName {{metadata.imageName}} -ProjectType {{metadata.projectType}}",
		      "condition": "{{metadata.projectPath != null && metadata.imageName != null && metadata.projectType != null}}"
		    },
		    "helmInstallChart": {
		      "triggerTargets": [
		        "HELM_CHARTS_ROOT",
		        "HELM_MAIN_CHART"
		      ],
		      "executionTargets": [
		        "HELM_MAIN_CHART"
		      ],
		      "displayName": "Install Chart(s)",
		      "workingDirectory": "etc/helm",
		      "terminalCommand": "./install.ps1 -ChartName {{chart.name}} -Namespace {{profile.namespace}} -ReleaseName {{chart.name}}-{{profile.name}} -DotnetEnvironment {{metadata.dotnetEnvironment}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}",
		      "requireConfirmation": "true",
		      "confirmationText": "Are you sure to install the chart(s) for the profile {{ profile.name }}?"
		    },
		    "helmUninstallChart": {
		      "triggerTargets": [
		        "HELM_CHARTS_ROOT",
		        "HELM_MAIN_CHART"
		      ],
		      "executionTargets": [
		        "HELM_MAIN_CHART"
		      ],
		      "displayName": "Uninstall Chart(s)",
		      "workingDirectory": "etc/helm",
		      "terminalCommand": "./uninstall.ps1 -Namespace {{profile.namespace}} -ReleaseName {{chart.name}}-{{profile.name}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}",
		      "requireConfirmation": "true",
		      "confirmationText": "Are you sure to uninstall the chart(s) for the profile {{profile.name}}?"
		    },
		    "kubernetesRedeploy": {
		      "triggerTargets": [
		        "KUBERNETES_SERVICE"
		      ],
		      "executionTargets": [
		        "KUBERNETES_SERVICE"
		      ],
		      "displayName": "Redeploy",
		      "workingDirectory": "etc/helm",
		      "terminalCommand": "./build-image.ps1 -ProjectPath {{chart.metadata.projectPath}} -ImageName {{chart.metadata.imageName}} -ProjectType {{chart.metadata.projectType}} &&& ./install.ps1 -ChartName {{mainChart.name}} -Namespace {{profile.namespace}} -ReleaseName {{mainChart.name}}-{{profile.name}} -DotnetEnvironment {{mainChart.metadata.dotnetEnvironment}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}",
		      "requireConfirmation": "true",
		      "confirmationText": "Are you sure to redeploy the related chart '{{chart.name}}' for the service '{{name}}'?",
		      "condition": "{{chart != null && chart.metadata.projectPath != null && chart.metadata.imageName != null && chart.metadata.projectType != null}}"
		    },
		    "createTlsSecret": {
		      "triggerTargets": [
		        "HELM_CHARTS_ROOT"
		      ],
		      "executionTargets": [
		        "HELM_CHARTS_ROOT"
		      ],
		      "displayName": "Create Self-Signed TLS secret",
		      "workingDirectory": "etc/helm",
		      "terminalCommand": "./create-tls-secrets.ps1 -Namespace {{profile.namespace}} {{~if metadata.k8ssuffix}} -User {{metadata.k8ssuffix}}{{end}}"
		    }
		  },
		  "helm": {
		    "charts": {
		      "exampleabpapplicationlayer": {
		        "name": "exampleabpapplicationlayer",
		        "path": "etc/helm/exampleabpapplicationlayer",
		        "charts": {
		          "angular": {
		            "name": "angular",
		            "path": "etc/helm/exampleabpapplicationlayer/charts/angular",
		            "metadata": {
		              "projectPath": "../../angular",
		              "imageName": "exampleabpapplicationlayer/angular",
		              "projectType": "angular"
		            },
		            "services": [
		              ".*-angular$"
		            ]
		          },
		          "dbmigrator": {
		            "name": "dbmigrator",
		            "path": "etc/helm/exampleabpapplicationlayer/charts/dbmigrator",
		            "metadata": {
		              "projectPath": "../../src/ExampleAbpApplicationLayer.DbMigrator/ExampleAbpApplicationLayer.DbMigrator.csproj",
		              "imageName": "exampleabpapplicationlayer/dbmigrator",
		              "projectType": "dotnet"
		            },
		            "services": [
		              ".*-dbmigrator"
		            ]
		          },
		          "httpapihost": {
		            "name": "httpapihost",
		            "path": "etc/helm/exampleabpapplicationlayer/charts/httpapihost",
		            "metadata": {
		              "projectPath": "../../src/ExampleAbpApplicationLayer.HttpApi.Host/ExampleAbpApplicationLayer.HttpApi.Host.csproj",
		              "imageName": "exampleabpapplicationlayer/httpapihost",
		              "projectType": "dotnet"
		            },
		            "services": [
		              ".*-httpapihost"
		            ]
		          },
		          "rabbitmq": {
		            "name": "rabbitmq",
		            "path": "etc/helm/exampleabpapplicationlayer/charts/rabbitmq"
		          },
		          "sqlserver": {
		            "name": "sqlserver",
		            "path": "etc/helm/exampleabpapplicationlayer/charts/sqlserver"
		          },
		        },
		        "metadata": {}
		      }
		    }
		  },
		  "options": {
		    "httpRequests": {
		      "ignoredUrls": [
		      
		      ]
		    }
		  },
		  "creatingStudioConfiguration": {
		    "template": "app",
		    "createdAbpStudioVersion": "1.2.1",
		    "tiered": "false",
		    "runInstallLibs": "true",
		    "useLocalReferences": "false",
		    "multiTenancy": "true",
		    "includeTests": "true",
		    "kubernetesConfiguration": "true",
		    "uiFramework": "angular",
		    "mobileFramework": "none",
		    "distributedEventBus": "rabbitmq",
		    "databaseProvider": "ef",
		    "runDbMigrator": "false",
		    "databaseManagementSystem": "sqlserver",
		    "separateTenantSchema": "false",
		    "createInitialMigration": "true",
		    "theme": "leptonx",
		    "themeStyle": "system",
		    "themeMenuPlacement": "side",
		    "mobileFramework": "none",
		    "progressiveWebApp": "false",
		    "runProgressiveWebAppSupport": "false",
		    "publicWebsite": "false",
		    "optionalModules": "GDPR FileManagement TextTemplateManagement LanguageManagement AuditLogging Chat OpenIddictAdmin",
		    "socialLogin": "true",
		    "selectedLanguages": ["English", "Arabic", ],
		    "defaultLanguage": "English",
		    "createCommand": "abp new ExampleAbpApplicationLayer -t app --ui-framework angular --database-provider ef --database-management-system sqlserver --theme leptonx --skip-migrator  --without-cms-kit --dont-run-bundling -chat -file-management"
		  }
		}]]></file>
	<file path='ExampleAbpApplicationLayer.sln'>
		﻿
		Microsoft Visual Studio Solution File, Format Version 12.00
		# Visual Studio Version 17
		VisualStudioVersion = 17.3.32611.2
		MinimumVisualStudioVersion = 10.0.40219.1
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Domain", "src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj", "{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Application", "src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj", "{1A94A50E-06DC-43C1-80B5-B662820EC3EB}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.EntityFrameworkCore", "src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj", "{C956DD76-69C8-4A9C-83EA-D17DF83340FD}"
		EndProject
		Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "src", "src", "{CA9AC87F-097E-4F15-8393-4BC07735A5B0}"
		EndProject
		Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "test", "test", "{04DBDB01-70F4-4E06-B468-8F87850B22BE}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Application.Tests", "test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.csproj", "{50B2631D-129C-47B3-A587-029CCD6099BC}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Domain.Shared", "src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj", "{42F719ED-8413-4895-B5B4-5AB56079BC66}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Application.Contracts", "src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj", "{520659C8-C734-4298-A3DA-B539DB9DFC0B}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi", "src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.csproj", "{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi.Client", "src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.csproj", "{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.EntityFrameworkCore.Tests", "test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.csproj", "{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.TestBase", "test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.csproj", "{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.Domain.Tests", "test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.csproj", "{E512F4D9-9375-480F-A2F6-A46509F9D824}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp", "test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.csproj", "{EF480016-9127-4916-8735-D2466BDBC582}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.DbMigrator", "src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayer.DbMigrator.csproj", "{70680696-BB1E-4383-BCB2-42C3767171FB}"
		EndProject
		Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ExampleAbpApplicationLayer.HttpApi.Host", "src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayer.HttpApi.Host.csproj", "{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}"
		EndProject
		Global
			GlobalSection(SolutionConfigurationPlatforms) = preSolution
				Debug|Any CPU = Debug|Any CPU
				Release|Any CPU = Release|Any CPU
			EndGlobalSection
			GlobalSection(ProjectConfigurationPlatforms) = postSolution
				{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{554AD327-6DBA-4F8F-96F8-81CE7A0C863F}.Release|Any CPU.Build.0 = Release|Any CPU
				{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{1A94A50E-06DC-43C1-80B5-B662820EC3EB}.Release|Any CPU.Build.0 = Release|Any CPU
				{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{C956DD76-69C8-4A9C-83EA-D17DF83340FD}.Release|Any CPU.Build.0 = Release|Any CPU
				{50B2631D-129C-47B3-A587-029CCD6099BC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{50B2631D-129C-47B3-A587-029CCD6099BC}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{50B2631D-129C-47B3-A587-029CCD6099BC}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{50B2631D-129C-47B3-A587-029CCD6099BC}.Release|Any CPU.Build.0 = Release|Any CPU
				{42F719ED-8413-4895-B5B4-5AB56079BC66}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{42F719ED-8413-4895-B5B4-5AB56079BC66}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{42F719ED-8413-4895-B5B4-5AB56079BC66}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{42F719ED-8413-4895-B5B4-5AB56079BC66}.Release|Any CPU.Build.0 = Release|Any CPU
				{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{520659C8-C734-4298-A3DA-B539DB9DFC0B}.Release|Any CPU.Build.0 = Release|Any CPU
				{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{4164BDF7-F527-4E85-9CE6-E3C2D7426A27}.Release|Any CPU.Build.0 = Release|Any CPU
				{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{3B5A0094-670D-4BB1-BFDD-61B88A8773DC}.Release|Any CPU.Build.0 = Release|Any CPU
				{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81}.Release|Any CPU.Build.0 = Release|Any CPU
				{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{91853F21-9CD9-4132-BC29-A7D5D84FFFE7}.Release|Any CPU.Build.0 = Release|Any CPU
				{E512F4D9-9375-480F-A2F6-A46509F9D824}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{E512F4D9-9375-480F-A2F6-A46509F9D824}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{E512F4D9-9375-480F-A2F6-A46509F9D824}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{E512F4D9-9375-480F-A2F6-A46509F9D824}.Release|Any CPU.Build.0 = Release|Any CPU
				{EF480016-9127-4916-8735-D2466BDBC582}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{EF480016-9127-4916-8735-D2466BDBC582}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{EF480016-9127-4916-8735-D2466BDBC582}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{EF480016-9127-4916-8735-D2466BDBC582}.Release|Any CPU.Build.0 = Release|Any CPU
				{70680696-BB1E-4383-BCB2-42C3767171FB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{70680696-BB1E-4383-BCB2-42C3767171FB}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{70680696-BB1E-4383-BCB2-42C3767171FB}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{70680696-BB1E-4383-BCB2-42C3767171FB}.Release|Any CPU.Build.0 = Release|Any CPU
				{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
				{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Debug|Any CPU.Build.0 = Debug|Any CPU
				{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Release|Any CPU.ActiveCfg = Release|Any CPU
				{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C}.Release|Any CPU.Build.0 = Release|Any CPU
			EndGlobalSection
			GlobalSection(SolutionProperties) = preSolution
				HideSolutionNode = FALSE
			EndGlobalSection
			GlobalSection(NestedProjects) = preSolution
				{554AD327-6DBA-4F8F-96F8-81CE7A0C863F} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{1A94A50E-06DC-43C1-80B5-B662820EC3EB} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{C956DD76-69C8-4A9C-83EA-D17DF83340FD} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{50B2631D-129C-47B3-A587-029CCD6099BC} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
				{42F719ED-8413-4895-B5B4-5AB56079BC66} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{520659C8-C734-4298-A3DA-B539DB9DFC0B} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{4164BDF7-F527-4E85-9CE6-E3C2D7426A27} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{3B5A0094-670D-4BB1-BFDD-61B88A8773DC} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{1FE30EB9-74A9-47F5-A9F6-7B1FAB672D81} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
				{91853F21-9CD9-4132-BC29-A7D5D84FFFE7} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
				{E512F4D9-9375-480F-A2F6-A46509F9D824} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
				{EF480016-9127-4916-8735-D2466BDBC582} = {04DBDB01-70F4-4E06-B468-8F87850B22BE}
				{70680696-BB1E-4383-BCB2-42C3767171FB} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
				{96E5259E-59A3-4FAF-BCD1-5BF8E74EF82C} = {CA9AC87F-097E-4F15-8393-4BC07735A5B0}
			EndGlobalSection
			GlobalSection(ExtensibilityGlobals) = postSolution
				SolutionGuid = {28315BFD-90E7-4E14-A2EA-F3D23AF4126F}
			EndGlobalSection
		EndGlobal</file>
	<file path='ExampleAbpApplicationLayer.sln.DotSettings'><![CDATA[
		﻿<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
			<s:Boolean x:Key="/Default/CodeEditing/Intellisense/CodeCompletion/IntelliSenseCompletingCharacters/CSharpCompletingCharacters/UpgradedFromVSSettings/@EntryValue">True</s:Boolean>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceDoWhileStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceFixedStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceForeachStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceForStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceIfStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceLockStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceUsingStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=EnforceWhileStatementBraces/@EntryIndexedValue">WARNING</s:String>
			<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_FOR/@EntryValue">Required</s:String>
			<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_FOREACH/@EntryValue">Required</s:String>
			<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_IFELSE/@EntryValue">Required</s:String>
			<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_FOR_WHILE/@EntryValue">Required</s:String>
			<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/BRACES_REDUNDANT/@EntryValue">False</s:Boolean>
			<s:Boolean x:Key="/Default/CodeStyle/Generate/=Implementations/@KeyIndexDefined">True</s:Boolean>
			<s:String x:Key="/Default/CodeStyle/Generate/=Implementations/Options/=Async/@EntryIndexedValue">False</s:String>
			<s:String x:Key="/Default/CodeStyle/Generate/=Implementations/Options/=Mutable/@EntryIndexedValue">False</s:String>
			<s:Boolean x:Key="/Default/CodeStyle/Generate/=Overrides/@KeyIndexDefined">True</s:Boolean>
			<s:String x:Key="/Default/CodeStyle/Generate/=Overrides/Options/=Async/@EntryIndexedValue">False</s:String>
			<s:String x:Key="/Default/CodeStyle/Generate/=Overrides/Options/=Mutable/@EntryIndexedValue">False</s:String>
			<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/Abbreviations/=SQL/@EntryIndexedValue">SQL</s:String>
		</wpf:ResourceDictionary>]]></file>
	<file path='NuGet.Config'><![CDATA[
		<?xml version="1.0" encoding="utf-8"?>
		<configuration>
		  <packageSources>
		    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
		    <add key="nuget.abp.io" value="https://nuget.abp.io/de9c67e1-cf24-4f19-ab86-66f35018cc86/v3/index.json" />
		  </packageSources>
		  <packageSourceMapping>
		    <packageSource key="nuget.org">
		      <package pattern="*" />
		      <package pattern="Microsoft.*" />
		      <package pattern="Volo.*" />
		    </packageSource>
		    <packageSource key="nuget.abp.io">
		      <package pattern="Volo.*" />
		    </packageSource>
		  </packageSourceMapping>
		</configuration>]]></file>
	<file path='README.md'>
		﻿# ExampleAbpApplicationLayer
		
		## About this solution
		
		This is a layered startup solution based on [Domain Driven Design (DDD)](https://abp.io/docs/latest/framework/architecture/domain-driven-design) practises. All the fundamental ABP modules are already installed. Check the [Application Startup Template](https://abp.io/docs/latest/solution-templates/layered-web-application) documentation for more info.
		
		### Pre-requirements
		
		* [.NET9.0+ SDK](https://dotnet.microsoft.com/download/dotnet)
		* [Node v18 or 20](https://nodejs.org/en)
		
		### Configurations
		
		The solution comes with a default configuration that works out of the box. However, you may consider to change the following configuration before running your solution:
		
		* Check the `ConnectionStrings` in `appsettings.json` files under the `ExampleAbpApplicationLayer.HttpApi.Host` and `ExampleAbpApplicationLayer.DbMigrator` projects and change it if you need.
		
		### Before running the application
		
		* Run `abp install-libs` command on your solution folder to install client-side package dependencies. This step is automatically done when you create a new solution, if you didn't especially disabled it. However, you should run it yourself if you have first cloned this solution from your source control, or added a new client-side package dependency to your solution.
		* Run `ExampleAbpApplicationLayer.DbMigrator` to create the initial database. This step is also automatically done when you create a new solution, if you didn't especially disabled it. This should be done in the first run. It is also needed if a new database migration is added to the solution later.
		
		#### Generating a Signing Certificate
		
		In the production environment, you need to use a production signing certificate. ABP Framework sets up signing and encryption certificates in your application and expects an `openiddict.pfx` file in your application.
		
		To generate a signing certificate, you can use the following command:
		
		```bash
		dotnet dev-certs https -v -ep openiddict.pfx -p 64d11a84-cb9a-4241-aa49-4d2e1146e0b5
		```
		
		> `64d11a84-cb9a-4241-aa49-4d2e1146e0b5` is the password of the certificate, you can change it to any password you want.
		
		It is recommended to use **two** RSA certificates, distinct from the certificate(s) used for HTTPS: one for encryption, one for signing.
		
		For more information, please refer to: [OpenIddict Certificate Configuration](https://documentation.openiddict.com/configuration/encryption-and-signing-credentials.html#registering-a-certificate-recommended-for-production-ready-scenarios)
		
		> Also, see the [Configuring OpenIddict](https://abp.io/docs/latest/Deployment/Configuring-OpenIddict#production-environment) documentation for more information.
		
		### Solution structure
		
		This is a layered monolith application that consists of the following applications:
		
		* `ExampleAbpApplicationLayer.DbMigrator`: A console application which applies the migrations and also seeds the initial data. It is useful on development as well as on production environment.
		* `ExampleAbpApplicationLayer.HttpApi.Host`: ASP.NET Core API application that is used to expose the APIs to the clients.
		* `angular`: Angular application.
		
		
		## Deploying the application
		
		Deploying an ABP application follows the same process as deploying any .NET or ASP.NET Core application. However, there are important considerations to keep in mind. For detailed guidance, refer to ABP's [deployment documentation](https://abp.io/docs/latest/Deployment/Index).
		
		### Additional resources
		
		
		#### Internal Resources
		
		You can find detailed setup and configuration guide(s) for your solution below:
		
		* [Local Kubernetes Guide](./etc/helm/README.md)
		* [Angular](./angular/README.md)
		
		#### External Resources
		You can see the following resources to learn more about your solution and the ABP Framework:
		
		* [Web Application Development Tutorial](https://abp.io/docs/latest/tutorials/book-store/part-1)
		* [Application Startup Template](https://abp.io/docs/latest/startup-templates/application/index)
		* [LeptonX Theme Module](https://abp.io/docs/latest/themes/lepton-x/index)
		* [LeptonX Angular UI](https://abp.io/docs/latest/themes/lepton-x/angular)</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.abppkg'>
		{
		  "role": "lib.application-contracts"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.abppkg.analyze.json'>
		{
		  "name": "ExampleAbpApplicationLayer.Application.Contracts",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain.Shared",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.Application.Contracts",
		          "namespace": "Volo.Abp.FeatureManagement",
		          "name": "AbpFeatureManagementApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.Application.Contracts",
		          "namespace": "Volo.Abp.SettingManagement",
		          "name": "AbpSettingManagementApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.Application.Contracts",
		          "namespace": "Volo.Abp.Identity",
		          "name": "AbpIdentityApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.Application.Contracts",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountPublicApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.Application.Contracts",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountAdminApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.Application.Contracts",
		          "namespace": "Volo.Abp.AuditLogging",
		          "name": "AbpAuditLoggingApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Application.Contracts",
		          "namespace": "Volo.Abp.OpenIddict",
		          "name": "AbpOpenIddictProApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Application.Contracts",
		          "namespace": "Volo.Abp.TextTemplateManagement",
		          "name": "TextTemplateManagementApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.Application.Contracts",
		          "namespace": "Volo.Abp.LanguageManagement",
		          "name": "LanguageManagementApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.Application.Contracts",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.Application.Contracts",
		          "namespace": "Volo.Abp.PermissionManagement",
		          "name": "AbpPermissionManagementApplicationContractsModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerApplicationContractsModule",
		      "summary": null
		    },
		    {
		      "displayName": "Dashboard",
		      "isEnabled": true,
		      "contentType": "permission",
		      "name": "ExampleAbpApplicationLayer.Dashboard.Tenant",
		      "summary": null
		    },
		    {
		      "displayName": "Dashboard",
		      "isEnabled": true,
		      "contentType": "permission",
		      "name": "ExampleAbpApplicationLayer.Dashboard.Host",
		      "summary": null
		    }
		  ]
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj'><![CDATA[
		﻿<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj" />
		  </ItemGroup>
		  
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.PermissionManagement.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Identity.Pro.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Public.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Admin.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.Host.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.Application.Contracts" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Application.Contracts" Version="4.3.1" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayerApplicationContractsModule.cs'>
		﻿using Volo.Abp.Account;
		using Volo.Abp.Modularity;
		using Volo.Abp.PermissionManagement;
		using Volo.Abp.SettingManagement;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Identity;
		using Volo.Abp.AuditLogging;
		using Volo.Abp.LanguageManagement;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Saas.Host;
		using Volo.Abp.Gdpr;
		using Volo.Abp.OpenIddict;
		using Volo.FileManagement;
		    using Volo.Chat;
		using Volo.Abp.LeptonXTheme.Management;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerDomainSharedModule),
		    typeof(AbpFeatureManagementApplicationContractsModule),
		    typeof(AbpSettingManagementApplicationContractsModule),
		    typeof(AbpIdentityApplicationContractsModule),
		    typeof(AbpAccountPublicApplicationContractsModule),
		    typeof(AbpAccountAdminApplicationContractsModule),
		    typeof(SaasHostApplicationContractsModule),
		    typeof(AbpAuditLoggingApplicationContractsModule),
		    typeof(AbpOpenIddictProApplicationContractsModule),
		    typeof(TextTemplateManagementApplicationContractsModule),
		    typeof(LanguageManagementApplicationContractsModule),
		    typeof(FileManagementApplicationContractsModule),
		    typeof(AbpGdprApplicationContractsModule),
		    typeof(ChatApplicationContractsModule),
		    typeof(LeptonXThemeManagementApplicationContractsModule),
		    typeof(AbpPermissionManagementApplicationContractsModule)
		)]
		public class ExampleAbpApplicationLayerApplicationContractsModule : AbpModule
		{
		    public override void PreConfigureServices(ServiceConfigurationContext context)
		    {
		        ExampleAbpApplicationLayerDtoExtensions.Configure();
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayerDtoExtensions.cs'><![CDATA[
		using Volo.Abp.Identity;
		using Volo.Abp.ObjectExtending;
		using Volo.Abp.Threading;
		
		namespace ExampleAbpApplicationLayer;
		
		public static class ExampleAbpApplicationLayerDtoExtensions
		{
		    private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
		
		    public static void Configure()
		    {
		        OneTimeRunner.Run(() =>
		        {
		                /* You can add extension properties to DTOs
		                 * defined in the depended modules.
		                 *
		                 * Example:
		                 *
		                 * ObjectExtensionManager.Instance
		                 *   .AddOrUpdateProperty<IdentityRoleDto, string>("Title");
		                 *
		                 * See the documentation for more:
		                 * https://docs.abp.io/en/abp/latest/Object-Extensions
		                 */
		        });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\GetOrderItemListInput.cs'>
		using Volo.Abp.Application.Dtos;
		using System;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class GetOrderItemListInput : PagedAndSortedResultRequestDto
		    {
		        public Guid OrderId { get; set; }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\GetOrderItemsInput.cs'>
		using Volo.Abp.Application.Dtos;
		using System;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class GetOrderItemsInputBase : PagedAndSortedResultRequestDto
		    {
		        public string? FilterText { get; set; }
		
		        public int? QtyMin { get; set; }
		        public int? QtyMax { get; set; }
		        public float? PriceMin { get; set; }
		        public float? PriceMax { get; set; }
		        public float? TotalPriceMin { get; set; }
		        public float? TotalPriceMax { get; set; }
		        public Guid? ProductId { get; set; }
		
		        public GetOrderItemsInputBase()
		        {
		
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\GetOrderItemsInput.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class GetOrderItemsInput : GetOrderItemsInputBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\IOrderItemsAppService.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using System;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public partial interface IOrderItemsAppService : IApplicationService
		    {
		
		        Task<PagedResultDto<OrderItemDto>> GetListByOrderIdAsync(GetOrderItemListInput input);
		        Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListWithNavigationPropertiesByOrderIdAsync(GetOrderItemListInput input);
		
		        Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListAsync(GetOrderItemsInput input);
		
		        Task<OrderItemWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id);
		
		        Task<OrderItemDto> GetAsync(Guid id);
		
		        Task<PagedResultDto<LookupDto<Guid>>> GetProductLookupAsync(LookupRequestDto input);
		
		        Task DeleteAsync(Guid id);
		
		        Task<OrderItemDto> CreateAsync(OrderItemCreateDto input);
		
		        Task<OrderItemDto> UpdateAsync(Guid id, OrderItemUpdateDto input);
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\IOrderItemsAppService.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public partial interface IOrderItemsAppService
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemCreateDto.cs'>
		using System;
		using System.ComponentModel.DataAnnotations;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemCreateDtoBase
		    {
		        public Guid OrderId { get; set; }
		        public int Qty { get; set; } = 1;
		        public float Price { get; set; } = 0f;
		        public float TotalPrice { get; set; }
		        public string? ProductName { get; set; }
		        public Guid ProductId { get; set; }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemCreateDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemCreateDto : OrderItemCreateDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemDto.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		
		using Volo.Abp.Application.Dtos;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemDtoBase : FullAuditedEntityDto<Guid>
		    {
		        public Guid OrderId { get; set; }
		        public int Qty { get; set; }
		        public float Price { get; set; }
		        public float TotalPrice { get; set; }
		        public string? ProductName { get; set; }
		        public Guid ProductId { get; set; }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemDto : OrderItemDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemUpdateDto.cs'>
		using System;
		using System.ComponentModel.DataAnnotations;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemUpdateDtoBase
		    {
		        public Guid OrderId { get; set; }
		        public int Qty { get; set; }
		        public float Price { get; set; }
		        public float TotalPrice { get; set; }
		        public string? ProductName { get; set; }
		        public Guid ProductId { get; set; }
		
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemUpdateDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemUpdateDto : OrderItemUpdateDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemWithNavigationPropertiesDto.cs'>
		using ExampleAbpApplicationLayer.Products;
		
		using System;
		using Volo.Abp.Application.Dtos;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemWithNavigationPropertiesDtoBase
		    {
		        public OrderItemDto OrderItem { get; set; } = null!;
		
		        public ProductDto Product { get; set; } = null!;
		
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\OrderItems\OrderItemWithNavigationPropertiesDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemWithNavigationPropertiesDto : OrderItemWithNavigationPropertiesDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\GetOrdersInput.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		using Volo.Abp.Application.Dtos;
		using System;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class GetOrdersInputBase : PagedAndSortedResultRequestDto
		    {
		        public string? FilterText { get; set; }
		
		        public DateTime? OrderDateMin { get; set; }
		        public DateTime? OrderDateMax { get; set; }
		        public float? TotalAmountMin { get; set; }
		        public float? TotalAmountMax { get; set; }
		        public OrderStatus? Status { get; set; }
		        public Guid? IdentityUserId { get; set; }
		
		        public GetOrdersInputBase()
		        {
		
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\GetOrdersInput.Extended.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class GetOrdersInput : GetOrdersInputBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\IOrdersAppService.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using System;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Content;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public partial interface IOrdersAppService : IApplicationService
		    {
		
		        Task<PagedResultDto<OrderWithNavigationPropertiesDto>> GetListAsync(GetOrdersInput input);
		
		        Task<OrderWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id);
		
		        Task<OrderDto> GetAsync(Guid id);
		
		        Task<PagedResultDto<LookupDto<Guid>>> GetIdentityUserLookupAsync(LookupRequestDto input);
		
		        Task DeleteAsync(Guid id);
		
		        Task<OrderDto> CreateAsync(OrderCreateDto input);
		
		        Task<OrderDto> UpdateAsync(Guid id, OrderUpdateDto input);
		
		        Task<IRemoteStreamContent> GetListAsExcelFileAsync(OrderExcelDownloadDto input);
		
		        Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync();
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\IOrdersAppService.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public partial interface IOrdersAppService
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderCreateDto.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using System.ComponentModel.DataAnnotations;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderCreateDtoBase
		    {
		        public DateTime OrderDate { get; set; }
		        public float TotalAmount { get; set; } = 0f;
		        public OrderStatus Status { get; set; } = ((OrderStatus[])Enum.GetValues(typeof(OrderStatus)))[0];
		        public Guid? IdentityUserId { get; set; }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderCreateDto.Extended.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderCreateDto : OrderCreateDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderDto.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using System.Collections.Generic;
		using ExampleAbpApplicationLayer.OrderItems;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Domain.Entities;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderDtoBase : FullAuditedEntityDto<Guid>, IHasConcurrencyStamp
		    {
		        public DateTime OrderDate { get; set; }
		        public float TotalAmount { get; set; }
		        public OrderStatus Status { get; set; }
		        public Guid? IdentityUserId { get; set; }
		
		        public string ConcurrencyStamp { get; set; } = null!;
		
		        public List<OrderItemWithNavigationPropertiesDto> OrderItems { get; set; } = new();
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderDto.Extended.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderDto : OrderDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDownloadDto.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		using Volo.Abp.Application.Dtos;
		using System;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderExcelDownloadDtoBase
		    {
		        public string DownloadToken { get; set; } = null!;
		
		        public string? FilterText { get; set; }
		
		        public DateTime? OrderDateMin { get; set; }
		        public DateTime? OrderDateMax { get; set; }
		        public float? TotalAmountMin { get; set; }
		        public float? TotalAmountMax { get; set; }
		        public OrderStatus? Status { get; set; }
		        public Guid? IdentityUserId { get; set; }
		
		        public OrderExcelDownloadDtoBase()
		        {
		
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDownloadDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderExcelDownloadDto : OrderExcelDownloadDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDto.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderExcelDtoBase
		    {
		        public DateTime OrderDate { get; set; }
		        public float TotalAmount { get; set; }
		        public OrderStatus Status { get; set; }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderExcelDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderExcelDto : OrderExcelDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderUpdateDto.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using System.ComponentModel.DataAnnotations;
		using System.Collections.Generic;
		using Volo.Abp.Domain.Entities;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderUpdateDtoBase : IHasConcurrencyStamp
		    {
		        public DateTime OrderDate { get; set; }
		        public float TotalAmount { get; set; }
		        public OrderStatus Status { get; set; }
		        public Guid? IdentityUserId { get; set; }
		
		        public string ConcurrencyStamp { get; set; } = null!;
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderUpdateDto.Extended.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderUpdateDto : OrderUpdateDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderWithNavigationPropertiesDto.cs'>
		using Volo.Abp.Identity;
		
		using System;
		using Volo.Abp.Application.Dtos;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderWithNavigationPropertiesDtoBase
		    {
		        public OrderDto Order { get; set; } = null!;
		
		        public IdentityUserDto IdentityUser { get; set; } = null!;
		
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Orders\OrderWithNavigationPropertiesDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderWithNavigationPropertiesDto : OrderWithNavigationPropertiesDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Permissions\ExampleAbpApplicationLayerPermissionDefinitionProvider.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Localization;
		using Volo.Abp.Authorization.Permissions;
		using Volo.Abp.Localization;
		using Volo.Abp.MultiTenancy;
		
		namespace ExampleAbpApplicationLayer.Permissions;
		
		public class ExampleAbpApplicationLayerPermissionDefinitionProvider : PermissionDefinitionProvider
		{
		    public override void Define(IPermissionDefinitionContext context)
		    {
		        var myGroup = context.AddGroup(ExampleAbpApplicationLayerPermissions.GroupName);
		
		        myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Dashboard.Host, L("Permission:Dashboard"), MultiTenancySides.Host);
		        myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Dashboard.Tenant, L("Permission:Dashboard"), MultiTenancySides.Tenant);
		
		        //Define your own permissions here. Example:
		        //myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.MyPermission1, L("Permission:MyPermission1"));
		
		        var productPermission = myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Products.Default, L("Permission:Products"));
		        productPermission.AddChild(ExampleAbpApplicationLayerPermissions.Products.Create, L("Permission:Create"));
		        productPermission.AddChild(ExampleAbpApplicationLayerPermissions.Products.Edit, L("Permission:Edit"));
		        productPermission.AddChild(ExampleAbpApplicationLayerPermissions.Products.Delete, L("Permission:Delete"));
		
		        var orderPermission = myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.Orders.Default, L("Permission:Orders"));
		        orderPermission.AddChild(ExampleAbpApplicationLayerPermissions.Orders.Create, L("Permission:Create"));
		        orderPermission.AddChild(ExampleAbpApplicationLayerPermissions.Orders.Edit, L("Permission:Edit"));
		        orderPermission.AddChild(ExampleAbpApplicationLayerPermissions.Orders.Delete, L("Permission:Delete"));
		
		        var orderItemPermission = myGroup.AddPermission(ExampleAbpApplicationLayerPermissions.OrderItems.Default, L("Permission:OrderItems"));
		        orderItemPermission.AddChild(ExampleAbpApplicationLayerPermissions.OrderItems.Create, L("Permission:Create"));
		        orderItemPermission.AddChild(ExampleAbpApplicationLayerPermissions.OrderItems.Edit, L("Permission:Edit"));
		        orderItemPermission.AddChild(ExampleAbpApplicationLayerPermissions.OrderItems.Delete, L("Permission:Delete"));
		    }
		
		    private static LocalizableString L(string name)
		    {
		        return LocalizableString.Create<ExampleAbpApplicationLayerResource>(name);
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Permissions\ExampleAbpApplicationLayerPermissions.cs'>
		namespace ExampleAbpApplicationLayer.Permissions;
		
		public static class ExampleAbpApplicationLayerPermissions
		{
		    public const string GroupName = "ExampleAbpApplicationLayer";
		
		    public static class Dashboard
		    {
		        public const string DashboardGroup = GroupName + ".Dashboard";
		        public const string Host = DashboardGroup + ".Host";
		        public const string Tenant = DashboardGroup + ".Tenant";
		    }
		
		    //Add your own permission names. Example:
		    //public const string MyPermission1 = GroupName + ".MyPermission1";
		
		    public static class Products
		    {
		        public const string Default = GroupName + ".Products";
		        public const string Edit = Default + ".Edit";
		        public const string Create = Default + ".Create";
		        public const string Delete = Default + ".Delete";
		    }
		
		    public static class Orders
		    {
		        public const string Default = GroupName + ".Orders";
		        public const string Edit = Default + ".Edit";
		        public const string Create = Default + ".Create";
		        public const string Delete = Default + ".Delete";
		    }
		
		    public static class OrderItems
		    {
		        public const string Default = GroupName + ".OrderItems";
		        public const string Edit = Default + ".Edit";
		        public const string Create = Default + ".Create";
		        public const string Delete = Default + ".Delete";
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\GetProductsInput.cs'>
		using Volo.Abp.Application.Dtos;
		using System;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class GetProductsInputBase : PagedAndSortedResultRequestDto
		    {
		        public string? FilterText { get; set; }
		
		        public string? Name { get; set; }
		        public float? PriceMin { get; set; }
		        public float? PriceMax { get; set; }
		        public bool? IsActive { get; set; }
		
		        public GetProductsInputBase()
		        {
		
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\GetProductsInput.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class GetProductsInput : GetProductsInputBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\IProductsAppService.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Content;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public partial interface IProductsAppService : IApplicationService
		    {
		
		        Task<PagedResultDto<ProductDto>> GetListAsync(GetProductsInput input);
		
		        Task<ProductDto> GetAsync(Guid id);
		
		        Task DeleteAsync(Guid id);
		
		        Task<ProductDto> CreateAsync(ProductCreateDto input);
		
		        Task<ProductDto> UpdateAsync(Guid id, ProductUpdateDto input);
		
		        Task<IRemoteStreamContent> GetListAsExcelFileAsync(ProductExcelDownloadDto input);
		        Task DeleteByIdsAsync(List<Guid> productIds);
		
		        Task DeleteAllAsync(GetProductsInput input);
		        Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync();
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\IProductsAppService.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public partial interface IProductsAppService
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductCreateDto.cs'>
		using System;
		using System.ComponentModel.DataAnnotations;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductCreateDtoBase
		    {
		        [Required]
		        public string Name { get; set; } = null!;
		        public string? Desc { get; set; }
		        public float Price { get; set; } = 0f;
		        public bool IsActive { get; set; } = true;
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductCreateDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductCreateDto : ProductCreateDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductDto.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Domain.Entities;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductDtoBase : FullAuditedEntityDto<Guid>, IHasConcurrencyStamp
		    {
		        public string Name { get; set; } = null!;
		        public string? Desc { get; set; }
		        public float Price { get; set; }
		        public bool IsActive { get; set; }
		
		        public string ConcurrencyStamp { get; set; } = null!;
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductDto : ProductDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDownloadDto.cs'>
		using Volo.Abp.Application.Dtos;
		using System;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductExcelDownloadDtoBase
		    {
		        public string DownloadToken { get; set; } = null!;
		
		        public string? FilterText { get; set; }
		
		        public string? Name { get; set; }
		        public float? PriceMin { get; set; }
		        public float? PriceMax { get; set; }
		        public bool? IsActive { get; set; }
		
		        public ProductExcelDownloadDtoBase()
		        {
		
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDownloadDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductExcelDownloadDto : ProductExcelDownloadDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDto.cs'>
		using System;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductExcelDtoBase
		    {
		        public string Name { get; set; } = null!;
		        public float Price { get; set; }
		        public bool IsActive { get; set; }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductExcelDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductExcelDto : ProductExcelDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductUpdateDto.cs'>
		using System;
		using System.ComponentModel.DataAnnotations;
		using System.Collections.Generic;
		using Volo.Abp.Domain.Entities;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductUpdateDtoBase : IHasConcurrencyStamp
		    {
		        [Required]
		        public string Name { get; set; } = null!;
		        public string? Desc { get; set; }
		        public float Price { get; set; }
		        public bool IsActive { get; set; }
		
		        public string ConcurrencyStamp { get; set; } = null!;
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Products\ProductUpdateDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductUpdateDto : ProductUpdateDtoBase
		    {
		        //Write your custom code here...
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Shared\DownloadTokenResultDto.cs'>
		namespace ExampleAbpApplicationLayer.Shared;
		
		public abstract class DownloadTokenResultDtoBase
		{
		    public string Token { get; set; } = null!;
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Shared\DownloadTokenResultDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Shared;
		
		public class DownloadTokenResultDto : DownloadTokenResultDtoBase
		{
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupDto.cs'><![CDATA[
		namespace ExampleAbpApplicationLayer.Shared
		{
		    public abstract class LookupDtoBase<TKey>
		    {
		        public TKey Id { get; set; }
		
		        public string DisplayName { get; set; } = null!;
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupDto.Extended.cs'><![CDATA[
		namespace ExampleAbpApplicationLayer.Shared
		{
		    public class LookupDto<TKey> : LookupDtoBase<TKey>
		    {
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupRequestDto.cs'>
		using Volo.Abp.Application.Dtos;
		
		namespace ExampleAbpApplicationLayer.Shared
		{
		    public abstract class LookupRequestDtoBase : PagedResultRequestDto
		    {
		        public string? Filter { get; set; }
		
		        public LookupRequestDtoBase()
		        {
		            MaxResultCount = MaxMaxResultCount;
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application.Contracts\Shared\LookupRequestDto.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Shared
		{
		    public class LookupRequestDto : LookupRequestDtoBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.abppkg'>
		{
		  "role": "lib.application"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.abppkg.analyze.json'>
		{
		  "name": "ExampleAbpApplicationLayer.Application",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerDomainModule"
		        },
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Application.Contracts",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.Application",
		          "namespace": "Volo.Abp.PermissionManagement",
		          "name": "AbpPermissionManagementApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.Application",
		          "namespace": "Volo.Abp.FeatureManagement",
		          "name": "AbpFeatureManagementApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.Application",
		          "namespace": "Volo.Abp.Identity",
		          "name": "AbpIdentityApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.Application",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountPublicApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.Application",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountAdminApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.Application",
		          "namespace": "Volo.Abp.AuditLogging",
		          "name": "AbpAuditLoggingApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Application",
		          "namespace": "Volo.Abp.TextTemplateManagement",
		          "name": "TextTemplateManagementApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Application",
		          "namespace": "Volo.Abp.OpenIddict",
		          "name": "AbpOpenIddictProApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.Application",
		          "namespace": "Volo.Abp.LanguageManagement",
		          "name": "LanguageManagementApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.Application",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprApplicationModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.Application",
		          "namespace": "Volo.Abp.SettingManagement",
		          "name": "AbpSettingManagementApplicationModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerApplicationModule",
		      "summary": null
		    }
		  ]
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj'><![CDATA[
		﻿<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="MiniExcel" Version="1.41.1" />
		    <PackageReference Include="Volo.Abp.PermissionManagement.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Public.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Admin.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Identity.Pro.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.Host.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.Application" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Application" Version="4.3.1" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayerApplicationAutoMapperProfile.cs'><![CDATA[
		using Volo.Abp.Identity;
		using ExampleAbpApplicationLayer.OrderItems;
		using ExampleAbpApplicationLayer.Orders;
		using System;
		using ExampleAbpApplicationLayer.Shared;
		using ExampleAbpApplicationLayer.Products;
		using Volo.Abp.AutoMapper;
		using AutoMapper;
		
		namespace ExampleAbpApplicationLayer;
		
		public class ExampleAbpApplicationLayerApplicationAutoMapperProfile : Profile
		{
		    public ExampleAbpApplicationLayerApplicationAutoMapperProfile()
		    {
		        /* You can configure your AutoMapper mapping configuration here.
		         * Alternatively, you can split your mapping configurations
		         * into multiple profile classes for a better organization. */
		
		        CreateMap<Product, ProductDto>();
		        CreateMap<Product, ProductExcelDto>();
		
		        CreateMap<Order, OrderDto>();
		        CreateMap<Order, OrderExcelDto>();
		
		        CreateMap<OrderItem, OrderItemDto>();
		        CreateMap<OrderItemWithNavigationProperties, OrderItemWithNavigationPropertiesDto>();
		        CreateMap<Product, LookupDto<Guid>>().ForMember(dest => dest.DisplayName, opt => opt.MapFrom(src => src.Name));
		
		        CreateMap<Order, OrderDto>().Ignore(x => x.OrderItems);
		        CreateMap<OrderWithNavigationProperties, OrderWithNavigationPropertiesDto>();
		        CreateMap<IdentityUser, LookupDto<Guid>>().ForMember(dest => dest.DisplayName, opt => opt.MapFrom(src => src.UserName));
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayerApplicationModule.cs'><![CDATA[
		﻿using Volo.Abp.PermissionManagement;
		using Volo.Abp.SettingManagement;
		using Volo.Abp.Account;
		using Volo.Abp.Identity;
		using Volo.Abp.AutoMapper;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Modularity;
		using Volo.Abp.AuditLogging;
		using Volo.Abp.Gdpr;
		using Volo.Abp.LanguageManagement;
		using Volo.FileManagement;
		using Volo.Abp.OpenIddict;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Saas.Host;
		using Volo.Chat;
		using Volo.Abp.LeptonXTheme.Management;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerDomainModule),
		    typeof(ExampleAbpApplicationLayerApplicationContractsModule),
		    typeof(AbpPermissionManagementApplicationModule),
		    typeof(AbpFeatureManagementApplicationModule),
		    typeof(AbpIdentityApplicationModule),
		    typeof(AbpAccountPublicApplicationModule),
		    typeof(AbpAccountAdminApplicationModule),
		    typeof(SaasHostApplicationModule),
		    typeof(ChatApplicationModule),
		    typeof(AbpAuditLoggingApplicationModule),
		    typeof(TextTemplateManagementApplicationModule),
		    typeof(AbpOpenIddictProApplicationModule),
		    typeof(LanguageManagementApplicationModule),
		    typeof(FileManagementApplicationModule),
		    typeof(AbpGdprApplicationModule),
		    typeof(LeptonXThemeManagementApplicationModule),
		    typeof(AbpSettingManagementApplicationModule)
		    )]
		public class ExampleAbpApplicationLayerApplicationModule : AbpModule
		{
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        Configure<AbpAutoMapperOptions>(options =>
		        {
		            options.AddMaps<ExampleAbpApplicationLayerApplicationModule>();
		        });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayerAppService.cs'>
		﻿using ExampleAbpApplicationLayer.Localization;
		using Volo.Abp.Application.Services;
		
		namespace ExampleAbpApplicationLayer;
		
		/* Inherit your application services from this class.
		 */
		public abstract class ExampleAbpApplicationLayerAppService : ApplicationService
		{
		    protected ExampleAbpApplicationLayerAppService()
		    {
		        LocalizationResource = typeof(ExampleAbpApplicationLayerResource);
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\OrderItems\OrderItemsAppService.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using ExampleAbpApplicationLayer.Products;
		using System;
		using System.IO;
		using System.Linq;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using System.Linq.Dynamic.Core;
		using Microsoft.AspNetCore.Authorization;
		using Volo.Abp;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Domain.Repositories;
		using ExampleAbpApplicationLayer.Permissions;
		using ExampleAbpApplicationLayer.OrderItems;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    [RemoteService(IsEnabled = false)]
		    [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Default)]
		    public abstract class OrderItemsAppServiceBase : ExampleAbpApplicationLayerAppService
		    {
		
		        protected IOrderItemRepository _orderItemRepository;
		        protected OrderItemManager _orderItemManager;
		
		        protected IRepository<ExampleAbpApplicationLayer.Products.Product, Guid> _productRepository;
		
		        public OrderItemsAppServiceBase(IOrderItemRepository orderItemRepository, OrderItemManager orderItemManager, IRepository<ExampleAbpApplicationLayer.Products.Product, Guid> productRepository)
		        {
		
		            _orderItemRepository = orderItemRepository;
		            _orderItemManager = orderItemManager; _productRepository = productRepository;
		
		        }
		
		        public virtual async Task<PagedResultDto<OrderItemDto>> GetListByOrderIdAsync(GetOrderItemListInput input)
		        {
		            var orderItems = await _orderItemRepository.GetListByOrderIdAsync(
		                input.OrderId,
		                input.Sorting,
		                input.MaxResultCount,
		                input.SkipCount);
		
		            return new PagedResultDto<OrderItemDto>
		            {
		                TotalCount = await _orderItemRepository.GetCountByOrderIdAsync(input.OrderId),
		                Items = ObjectMapper.Map<List<OrderItem>, List<OrderItemDto>>(orderItems)
		            };
		        }
		        public virtual async Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListWithNavigationPropertiesByOrderIdAsync(GetOrderItemListInput input)
		        {
		            var orderItems = await _orderItemRepository.GetListWithNavigationPropertiesByOrderIdAsync(
		                input.OrderId,
		                input.Sorting,
		                input.MaxResultCount,
		                input.SkipCount);
		
		            return new PagedResultDto<OrderItemWithNavigationPropertiesDto>
		            {
		                TotalCount = await _orderItemRepository.GetCountByOrderIdAsync(input.OrderId),
		                Items = ObjectMapper.Map<List<OrderItemWithNavigationProperties>, List<OrderItemWithNavigationPropertiesDto>>(orderItems)
		            };
		        }
		
		        public virtual async Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListAsync(GetOrderItemsInput input)
		        {
		            var totalCount = await _orderItemRepository.GetCountAsync(input.FilterText, input.QtyMin, input.QtyMax, input.PriceMin, input.PriceMax, input.TotalPriceMin, input.TotalPriceMax, input.ProductId);
		            var items = await _orderItemRepository.GetListWithNavigationPropertiesAsync(input.FilterText, input.QtyMin, input.QtyMax, input.PriceMin, input.PriceMax, input.TotalPriceMin, input.TotalPriceMax, input.ProductId, input.Sorting, input.MaxResultCount, input.SkipCount);
		
		            return new PagedResultDto<OrderItemWithNavigationPropertiesDto>
		            {
		                TotalCount = totalCount,
		                Items = ObjectMapper.Map<List<OrderItemWithNavigationProperties>, List<OrderItemWithNavigationPropertiesDto>>(items)
		            };
		        }
		
		        public virtual async Task<OrderItemWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
		        {
		            return ObjectMapper.Map<OrderItemWithNavigationProperties, OrderItemWithNavigationPropertiesDto>
		                (await _orderItemRepository.GetWithNavigationPropertiesAsync(id));
		        }
		
		        public virtual async Task<OrderItemDto> GetAsync(Guid id)
		        {
		            return ObjectMapper.Map<OrderItem, OrderItemDto>(await _orderItemRepository.GetAsync(id));
		        }
		
		        public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetProductLookupAsync(LookupRequestDto input)
		        {
		            var query = (await _productRepository.GetQueryableAsync())
		                .WhereIf(!string.IsNullOrWhiteSpace(input.Filter),
		                    x => x.Name != null &&
		                         x.Name.Contains(input.Filter));
		
		            var lookupData = await query.PageBy(input.SkipCount, input.MaxResultCount).ToDynamicListAsync<ExampleAbpApplicationLayer.Products.Product>();
		            var totalCount = query.Count();
		            return new PagedResultDto<LookupDto<Guid>>
		            {
		                TotalCount = totalCount,
		                Items = ObjectMapper.Map<List<ExampleAbpApplicationLayer.Products.Product>, List<LookupDto<Guid>>>(lookupData)
		            };
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Delete)]
		        public virtual async Task DeleteAsync(Guid id)
		        {
		            await _orderItemRepository.DeleteAsync(id);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Create)]
		        public virtual async Task<OrderItemDto> CreateAsync(OrderItemCreateDto input)
		        {
		            if (input.ProductId == default)
		            {
		                throw new UserFriendlyException(L["The {0} field is required.", L["Product"]]);
		            }
		
		            var orderItem = await _orderItemManager.CreateAsync(input.OrderId
		            , input.ProductId, input.Qty, input.Price, input.TotalPrice, input.ProductName
		            );
		
		            return ObjectMapper.Map<OrderItem, OrderItemDto>(orderItem);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.OrderItems.Edit)]
		        public virtual async Task<OrderItemDto> UpdateAsync(Guid id, OrderItemUpdateDto input)
		        {
		            if (input.ProductId == default)
		            {
		                throw new UserFriendlyException(L["The {0} field is required.", L["Product"]]);
		            }
		
		            var orderItem = await _orderItemManager.UpdateAsync(
		            id, input.OrderId
		            , input.ProductId, input.Qty, input.Price, input.TotalPrice, input.ProductName
		            );
		
		            return ObjectMapper.Map<OrderItem, OrderItemDto>(orderItem);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\OrderItems\OrderItemsAppService.Extended.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using ExampleAbpApplicationLayer.Products;
		using System;
		using System.IO;
		using System.Linq;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using System.Linq.Dynamic.Core;
		using Microsoft.AspNetCore.Authorization;
		using Volo.Abp;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Domain.Repositories;
		using ExampleAbpApplicationLayer.Permissions;
		using ExampleAbpApplicationLayer.OrderItems;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemsAppService : OrderItemsAppServiceBase, IOrderItemsAppService
		    {
		        //<suite-custom-code-autogenerated>
		        public OrderItemsAppService(IOrderItemRepository orderItemRepository, OrderItemManager orderItemManager, IRepository<ExampleAbpApplicationLayer.Products.Product, Guid> productRepository)
		            : base(orderItemRepository, orderItemManager, productRepository)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\Orders\OrderDownloadTokenCacheItem.cs'>
		using System;
		
		namespace ExampleAbpApplicationLayer.Orders;
		
		public abstract class OrderDownloadTokenCacheItemBase
		{
		    public string Token { get; set; } = null!;
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\Orders\OrderDownloadTokenCacheItem.Extended.cs'>
		using System;
		
		namespace ExampleAbpApplicationLayer.Orders;
		
		[Serializable]
		public class OrderDownloadTokenCacheItem : OrderDownloadTokenCacheItemBase
		{
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\Orders\OrdersAppService.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using Volo.Abp.Identity;
		using System;
		using System.IO;
		using System.Linq;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using System.Linq.Dynamic.Core;
		using Microsoft.AspNetCore.Authorization;
		using Volo.Abp;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Domain.Repositories;
		using ExampleAbpApplicationLayer.Permissions;
		using ExampleAbpApplicationLayer.Orders;
		using MiniExcelLibs;
		using Volo.Abp.Content;
		using Volo.Abp.Authorization;
		using Volo.Abp.Caching;
		using Microsoft.Extensions.Caching.Distributed;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    [RemoteService(IsEnabled = false)]
		    [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Default)]
		    public abstract class OrdersAppServiceBase : ExampleAbpApplicationLayerAppService
		    {
		        protected IDistributedCache<OrderDownloadTokenCacheItem, string> _downloadTokenCache;
		        protected IOrderRepository _orderRepository;
		        protected OrderManager _orderManager;
		
		        protected IRepository<Volo.Abp.Identity.IdentityUser, Guid> _identityUserRepository;
		
		        public OrdersAppServiceBase(IOrderRepository orderRepository, OrderManager orderManager, IDistributedCache<OrderDownloadTokenCacheItem, string> downloadTokenCache, IRepository<Volo.Abp.Identity.IdentityUser, Guid> identityUserRepository)
		        {
		            _downloadTokenCache = downloadTokenCache;
		            _orderRepository = orderRepository;
		            _orderManager = orderManager; _identityUserRepository = identityUserRepository;
		
		        }
		
		        public virtual async Task<PagedResultDto<OrderWithNavigationPropertiesDto>> GetListAsync(GetOrdersInput input)
		        {
		            var totalCount = await _orderRepository.GetCountAsync(input.FilterText, input.OrderDateMin, input.OrderDateMax, input.TotalAmountMin, input.TotalAmountMax, input.Status, input.IdentityUserId);
		            var items = await _orderRepository.GetListWithNavigationPropertiesAsync(input.FilterText, input.OrderDateMin, input.OrderDateMax, input.TotalAmountMin, input.TotalAmountMax, input.Status, input.IdentityUserId, input.Sorting, input.MaxResultCount, input.SkipCount);
		
		            return new PagedResultDto<OrderWithNavigationPropertiesDto>
		            {
		                TotalCount = totalCount,
		                Items = ObjectMapper.Map<List<OrderWithNavigationProperties>, List<OrderWithNavigationPropertiesDto>>(items)
		            };
		        }
		
		        public virtual async Task<OrderWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
		        {
		            return ObjectMapper.Map<OrderWithNavigationProperties, OrderWithNavigationPropertiesDto>
		                (await _orderRepository.GetWithNavigationPropertiesAsync(id));
		        }
		
		        public virtual async Task<OrderDto> GetAsync(Guid id)
		        {
		            return ObjectMapper.Map<Order, OrderDto>(await _orderRepository.GetAsync(id));
		        }
		
		        public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetIdentityUserLookupAsync(LookupRequestDto input)
		        {
		            var query = (await _identityUserRepository.GetQueryableAsync())
		                .WhereIf(!string.IsNullOrWhiteSpace(input.Filter),
		                    x => x.UserName != null &&
		                         x.UserName.Contains(input.Filter));
		
		            var lookupData = await query.PageBy(input.SkipCount, input.MaxResultCount).ToDynamicListAsync<Volo.Abp.Identity.IdentityUser>();
		            var totalCount = query.Count();
		            return new PagedResultDto<LookupDto<Guid>>
		            {
		                TotalCount = totalCount,
		                Items = ObjectMapper.Map<List<Volo.Abp.Identity.IdentityUser>, List<LookupDto<Guid>>>(lookupData)
		            };
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Delete)]
		        public virtual async Task DeleteAsync(Guid id)
		        {
		            await _orderRepository.DeleteAsync(id);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Create)]
		        public virtual async Task<OrderDto> CreateAsync(OrderCreateDto input)
		        {
		
		            var order = await _orderManager.CreateAsync(
		            input.IdentityUserId, input.OrderDate, input.TotalAmount, input.Status
		            );
		
		            return ObjectMapper.Map<Order, OrderDto>(order);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Orders.Edit)]
		        public virtual async Task<OrderDto> UpdateAsync(Guid id, OrderUpdateDto input)
		        {
		
		            var order = await _orderManager.UpdateAsync(
		            id,
		            input.IdentityUserId, input.OrderDate, input.TotalAmount, input.Status, input.ConcurrencyStamp
		            );
		
		            return ObjectMapper.Map<Order, OrderDto>(order);
		        }
		
		        [AllowAnonymous]
		        public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(OrderExcelDownloadDto input)
		        {
		            var downloadToken = await _downloadTokenCache.GetAsync(input.DownloadToken);
		            if (downloadToken == null || input.DownloadToken != downloadToken.Token)
		            {
		                throw new AbpAuthorizationException("Invalid download token: " + input.DownloadToken);
		            }
		
		            var orders = await _orderRepository.GetListWithNavigationPropertiesAsync(input.FilterText, input.OrderDateMin, input.OrderDateMax, input.TotalAmountMin, input.TotalAmountMax, input.Status, input.IdentityUserId);
		            var items = orders.Select(item => new
		            {
		                OrderDate = item.Order.OrderDate,
		                TotalAmount = item.Order.TotalAmount,
		                Status = item.Order.Status,
		
		                IdentityUser = item.IdentityUser?.UserName,
		
		            });
		
		            var memoryStream = new MemoryStream();
		            await memoryStream.SaveAsAsync(items);
		            memoryStream.Seek(0, SeekOrigin.Begin);
		
		            return new RemoteStreamContent(memoryStream, "Orders.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		        }
		
		        public virtual async Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
		        {
		            var token = Guid.NewGuid().ToString("N");
		
		            await _downloadTokenCache.SetAsync(
		                token,
		                new OrderDownloadTokenCacheItem { Token = token },
		                new DistributedCacheEntryOptions
		                {
		                    AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(30)
		                });
		
		            return new ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto
		            {
		                Token = token
		            };
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\Orders\OrdersAppService.Extended.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using Volo.Abp.Identity;
		using ExampleAbpApplicationLayer.Shared;
		using System;
		using System.IO;
		using System.Linq;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using System.Linq.Dynamic.Core;
		using Microsoft.AspNetCore.Authorization;
		using Volo.Abp;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Domain.Repositories;
		using ExampleAbpApplicationLayer.Permissions;
		using ExampleAbpApplicationLayer.Orders;
		using MiniExcelLibs;
		using Volo.Abp.Content;
		using Volo.Abp.Authorization;
		using Volo.Abp.Caching;
		using Microsoft.Extensions.Caching.Distributed;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrdersAppService : OrdersAppServiceBase, IOrdersAppService
		    {
		        //<suite-custom-code-autogenerated>
		        public OrdersAppService(IOrderRepository orderRepository, OrderManager orderManager, IDistributedCache<OrderDownloadTokenCacheItem, string> downloadTokenCache, IRepository<Volo.Abp.Identity.IdentityUser, Guid> identityUserRepository)
		            : base(orderRepository, orderManager, downloadTokenCache, identityUserRepository)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\Products\ProductDownloadTokenCacheItem.cs'>
		using System;
		
		namespace ExampleAbpApplicationLayer.Products;
		
		public abstract class ProductDownloadTokenCacheItemBase
		{
		    public string Token { get; set; } = null!;
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\Products\ProductDownloadTokenCacheItem.Extended.cs'>
		using System;
		
		namespace ExampleAbpApplicationLayer.Products;
		
		[Serializable]
		public class ProductDownloadTokenCacheItem : ProductDownloadTokenCacheItemBase
		{
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Application\Products\ProductsAppService.cs'><![CDATA[
		using System;
		using System.IO;
		using System.Linq;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using System.Linq.Dynamic.Core;
		using Microsoft.AspNetCore.Authorization;
		using Volo.Abp;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Domain.Repositories;
		using ExampleAbpApplicationLayer.Permissions;
		using ExampleAbpApplicationLayer.Products;
		using MiniExcelLibs;
		using Volo.Abp.Content;
		using Volo.Abp.Authorization;
		using Volo.Abp.Caching;
		using Microsoft.Extensions.Caching.Distributed;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    [RemoteService(IsEnabled = false)]
		    [Authorize(ExampleAbpApplicationLayerPermissions.Products.Default)]
		    public abstract class ProductsAppServiceBase : ExampleAbpApplicationLayerAppService
		    {
		        protected IDistributedCache<ProductDownloadTokenCacheItem, string> _downloadTokenCache;
		        protected IProductRepository _productRepository;
		        protected ProductManager _productManager;
		
		        public ProductsAppServiceBase(IProductRepository productRepository, ProductManager productManager, IDistributedCache<ProductDownloadTokenCacheItem, string> downloadTokenCache)
		        {
		            _downloadTokenCache = downloadTokenCache;
		            _productRepository = productRepository;
		            _productManager = productManager;
		
		        }
		
		        public virtual async Task<PagedResultDto<ProductDto>> GetListAsync(GetProductsInput input)
		        {
		            var totalCount = await _productRepository.GetCountAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive);
		            var items = await _productRepository.GetListAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive, input.Sorting, input.MaxResultCount, input.SkipCount);
		
		            return new PagedResultDto<ProductDto>
		            {
		                TotalCount = totalCount,
		                Items = ObjectMapper.Map<List<Product>, List<ProductDto>>(items)
		            };
		        }
		
		        public virtual async Task<ProductDto> GetAsync(Guid id)
		        {
		            return ObjectMapper.Map<Product, ProductDto>(await _productRepository.GetAsync(id));
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Products.Delete)]
		        public virtual async Task DeleteAsync(Guid id)
		        {
		            await _productRepository.DeleteAsync(id);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Products.Create)]
		        public virtual async Task<ProductDto> CreateAsync(ProductCreateDto input)
		        {
		
		            var product = await _productManager.CreateAsync(
		            input.Name, input.Price, input.IsActive, input.Desc
		            );
		
		            return ObjectMapper.Map<Product, ProductDto>(product);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Products.Edit)]
		        public virtual async Task<ProductDto> UpdateAsync(Guid id, ProductUpdateDto input)
		        {
		
		            var product = await _productManager.UpdateAsync(
		            id,
		            input.Name, input.Price, input.IsActive, input.Desc, input.ConcurrencyStamp
		            );
		
		            return ObjectMapper.Map<Product, ProductDto>(product);
		        }
		
		        [AllowAnonymous]
		        public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(ProductExcelDownloadDto input)
		        {
		            var downloadToken = await _downloadTokenCache.GetAsync(input.DownloadToken);
		            if (downloadToken == null || input.DownloadToken != downloadToken.Token)
		            {
		                throw new AbpAuthorizationException("Invalid download token: " + input.DownloadToken);
		            }
		
		            var items = await _productRepository.GetListAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive);
		
		            var memoryStream = new MemoryStream();
		            await memoryStream.SaveAsAsync(ObjectMapper.Map<List<Product>, List<ProductExcelDto>>(items));
		            memoryStream.Seek(0, SeekOrigin.Begin);
		
		            return new RemoteStreamContent(memoryStream, "Products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Products.Delete)]
		        public virtual async Task DeleteByIdsAsync(List<Guid> productIds)
		        {
		            await _productRepository.DeleteManyAsync(productIds);
		        }
		
		        [Authorize(ExampleAbpApplicationLayerPermissions.Products.Delete)]
		        public virtual async Task DeleteAllAsync(GetProductsInput input)
		        {
		            await _productRepository.DeleteAllAsync(input.FilterText, input.Name, input.PriceMin, input.PriceMax, input.IsActive);
		        }
		        public virtual async Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
		        {
		            var token = Guid.NewGuid().ToString("N");
		
		            await _downloadTokenCache.SetAsync(
		                token,
		                new ProductDownloadTokenCacheItem { Token = token },
		                new DistributedCacheEntryOptions
		                {
		                    AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(30)
		                });
		
		            return new ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto
		            {
		                Token = token
		            };
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\Products\ProductsAppService.Extended.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using System;
		using System.IO;
		using System.Linq;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using System.Linq.Dynamic.Core;
		using Microsoft.AspNetCore.Authorization;
		using Volo.Abp;
		using Volo.Abp.Application.Dtos;
		using Volo.Abp.Application.Services;
		using Volo.Abp.Domain.Repositories;
		using ExampleAbpApplicationLayer.Permissions;
		using ExampleAbpApplicationLayer.Products;
		using MiniExcelLibs;
		using Volo.Abp.Content;
		using Volo.Abp.Authorization;
		using Volo.Abp.Caching;
		using Microsoft.Extensions.Caching.Distributed;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductsAppService : ProductsAppServiceBase, IProductsAppService
		    {
		        //<suite-custom-code-autogenerated>
		        public ProductsAppService(IProductRepository productRepository, ProductManager productManager, IDistributedCache<ProductDownloadTokenCacheItem, string> downloadTokenCache)
		            : base(productRepository, productManager, downloadTokenCache)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Application\Properties\AssemblyInfo.cs'>
		﻿using System.Runtime.CompilerServices;
		[assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.Application.Tests")]</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\appsettings.json'>
		{
		  "ConnectionStrings": {
		    "Default": "Server=localhost;Database=ExampleAbpApplicationLayer;Trusted_Connection=True;TrustServerCertificate=true"
		  },
		  "OpenIddict": {
		    "Applications": {
		      "ExampleAbpApplicationLayer_App": {
		        "ClientId": "ExampleAbpApplicationLayer_App",
		        "RootUrl": "http://localhost:4200"      },
		      "ExampleAbpApplicationLayer_Swagger": {
		        "ClientId": "ExampleAbpApplicationLayer_Swagger",
		        "RootUrl": "https://localhost:44302/"
		      }
		    }
		  }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\appsettings.secrets.json'>
		{
		  "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\DbMigratorHostedService.cs'><![CDATA[
		﻿using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.Extensions.Configuration;
		using Microsoft.Extensions.DependencyInjection;
		using Microsoft.Extensions.Hosting;
		using ExampleAbpApplicationLayer.Data;
		using Serilog;
		using Volo.Abp;
		using Volo.Abp.Data;
		
		namespace ExampleAbpApplicationLayer.DbMigrator;
		
		public class DbMigratorHostedService : IHostedService
		{
		    private readonly IHostApplicationLifetime _hostApplicationLifetime;
		    private readonly IConfiguration _configuration;
		
		    public DbMigratorHostedService(IHostApplicationLifetime hostApplicationLifetime, IConfiguration configuration)
		    {
		        _hostApplicationLifetime = hostApplicationLifetime;
		        _configuration = configuration;
		    }
		
		    public async Task StartAsync(CancellationToken cancellationToken)
		    {
		        using (var application = await AbpApplicationFactory.CreateAsync<ExampleAbpApplicationLayerDbMigratorModule>(options =>
		        {
		           options.Services.ReplaceConfiguration(_configuration);
		           options.UseAutofac();
		           options.Services.AddLogging(c => c.AddSerilog());
		           options.AddDataMigrationEnvironment();
		        }))
		        {
		            await application.InitializeAsync();
		
		            await application
		                .ServiceProvider
		                .GetRequiredService<ExampleAbpApplicationLayerDbMigrationService>()
		                .MigrateAsync();
		
		            await application.ShutdownAsync();
		
		            _hostApplicationLifetime.StopApplication();
		        }
		    }
		
		    public Task StopAsync(CancellationToken cancellationToken)
		    {
		        return Task.CompletedTask;
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\Dockerfile'>
		FROM mcr.microsoft.com/dotnet/aspnet:9.0
		COPY bin/Release/net9.0/publish/ app/
		WORKDIR /app
		ENV ASPNETCORE_URLS=http://+:80
		ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.DbMigrator.dll"]</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\Dockerfile.local'>
		  FROM mcr.microsoft.com/dotnet/aspnet:9.0
		  USER $APP_UID
		
		  COPY bin/Release/net9.0/publish/ app/
		  WORKDIR /app
		  ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.DbMigrator.dll"]</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayer.DbMigrator.abppkg'>
		{}</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayer.DbMigrator.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <OutputType>Exe</OutputType>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Serilog.Extensions.Logging" Version="9.0.0" />
		    <PackageReference Include="Serilog.Sinks.Async" Version="2.1.0" />
		    <PackageReference Include="Serilog.Sinks.File" Version="6.0.0" />
		    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
		    <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.5" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <Compile Remove="Logs\**" />
		    <Content Remove="Logs\**" />
		
		    <EmbeddedResource Remove="Logs\**" />
		    <None Remove="Logs\**" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <None Remove="appsettings.json" />
		    <Content Include="appsettings.json">
		      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		    </Content>
		    <None Remove="appsettings.secrets.json" />
		    <Content Include="appsettings.secrets.json">
		      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		    </Content>
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\ExampleAbpApplicationLayerDbMigratorModule.cs'>
		﻿using ExampleAbpApplicationLayer.EntityFrameworkCore;
		using Volo.Abp.Autofac;
		using Volo.Abp.Modularity;
		
		namespace ExampleAbpApplicationLayer.DbMigrator;
		
		[DependsOn(
		    typeof(AbpAutofacModule),
		    typeof(ExampleAbpApplicationLayerEntityFrameworkCoreModule),
		    typeof(ExampleAbpApplicationLayerApplicationContractsModule)
		)]
		public class ExampleAbpApplicationLayerDbMigratorModule : AbpModule
		{
		}</file>
	<file path='src\ExampleAbpApplicationLayer.DbMigrator\Program.cs'><![CDATA[
		﻿using System.Threading.Tasks;
		using Microsoft.Extensions.DependencyInjection;
		using Microsoft.Extensions.Hosting;
		using Microsoft.Extensions.Logging;
		using Serilog;
		using Serilog.Events;
		
		namespace ExampleAbpApplicationLayer.DbMigrator;
		
		class Program
		{
		    static async Task Main(string[] args)
		    {
		        Log.Logger = new LoggerConfiguration()
		            .MinimumLevel.Information()
		            .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
		            .MinimumLevel.Override("Volo.Abp", LogEventLevel.Warning)
		#if DEBUG
		                .MinimumLevel.Override("ExampleAbpApplicationLayer", LogEventLevel.Debug)
		#else
		                .MinimumLevel.Override("ExampleAbpApplicationLayer", LogEventLevel.Information)
		#endif
		                .Enrich.FromLogContext()
		            .WriteTo.Async(c => c.File("Logs/logs.txt"))
		            .WriteTo.Async(c => c.Console())
		            .CreateLogger();
		
		        await CreateHostBuilder(args).RunConsoleAsync();
		    }
		
		    public static IHostBuilder CreateHostBuilder(string[] args) =>
		        Host.CreateDefaultBuilder(args)
		            .AddAppSettingsSecretsJson()
		            .ConfigureLogging((context, logging) => logging.ClearProviders())
		            .ConfigureServices((hostContext, services) =>
		            {
		                services.AddHostedService<DbMigratorHostedService>();
		            });
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\Enum\Orders\OrderStatus.cs'>
		﻿using System;
		using System.Collections.Generic;
		using System.Text;
		
		namespace ExampleAbpApplicationLayer.Enums.Orders
		{
		    public enum OrderStatus
		    {
		        Initialized = 0,
		        Paid = 1,
		        Processing = 2,
		        Ordered = 3,
		        Shipped = 4,
		        Arrived = 5,
		        Delivered = 6,
		        Cancelled = 7,
		        NotPaid = 8
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.abppkg'>
		{
		  "role": "lib.domain-shared"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.abppkg.analyze.json'>
		{
		  "name": "ExampleAbpApplicationLayer.Domain.Shared",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.Domain.Shared",
		          "namespace": "Volo.Abp.AuditLogging",
		          "name": "AbpAuditLoggingDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.BackgroundJobs.Domain.Shared",
		          "namespace": "Volo.Abp.BackgroundJobs",
		          "name": "AbpBackgroundJobsDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.Domain.Shared",
		          "namespace": "Volo.Abp.FeatureManagement",
		          "name": "AbpFeatureManagementDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.Domain.Shared",
		          "namespace": "Volo.Abp.PermissionManagement",
		          "name": "AbpPermissionManagementDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.Domain.Shared",
		          "namespace": "Volo.Abp.SettingManagement",
		          "name": "AbpSettingManagementDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.Domain.Shared",
		          "namespace": "Volo.Abp.Identity",
		          "name": "AbpIdentityProDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Domain.Shared",
		          "namespace": "Volo.Abp.OpenIddict",
		          "name": "AbpOpenIddictProDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.Domain.Shared",
		          "namespace": "Volo.Abp.LanguageManagement",
		          "name": "LanguageManagementDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Domain.Shared",
		          "namespace": "Volo.Abp.TextTemplateManagement",
		          "name": "TextTemplateManagementDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.Domain.Shared",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.GlobalFeatures",
		          "namespace": "Volo.Abp.GlobalFeatures",
		          "name": "AbpGlobalFeaturesModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.BlobStoring.Database.Domain.Shared",
		          "namespace": "Volo.Abp.BlobStoring.Database",
		          "name": "BlobStoringDatabaseDomainSharedModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerDomainSharedModule",
		      "summary": null
		    }
		  ]
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		    <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.BackgroundJobs.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.PermissionManagement.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.BlobStoring.Database.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.GlobalFeatures" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Identity.Pro.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.Domain.Shared" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Domain.Shared" Version="4.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" Version="9.0.5" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <EmbeddedResource Include="Localization\ExampleAbpApplicationLayer\*.json" />
		    <Content Remove="Localization\ExampleAbpApplicationLayer\*.json" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerDomainErrorCodes.cs'>
		﻿namespace ExampleAbpApplicationLayer;
		
		public static class ExampleAbpApplicationLayerDomainErrorCodes
		{
		    /* You can add your business exception error codes here, as constants */
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerDomainSharedModule.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Localization;
		using Volo.Abp.AuditLogging;
		using Volo.Abp.BackgroundJobs;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Identity;
		using Volo.Abp.Localization;
		using Volo.Abp.Localization.ExceptionHandling;
		using Volo.Abp.Validation.Localization;
		using Volo.Abp.Modularity;
		using Volo.Abp.PermissionManagement;
		using Volo.Abp.SettingManagement;
		using Volo.Abp.VirtualFileSystem;
		using Volo.Abp.OpenIddict;
		using Volo.Abp.BlobStoring.Database;
		using Volo.Abp.LanguageManagement;
		using Volo.FileManagement;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Saas;
		using Volo.Chat;
		using Volo.Abp.Gdpr;
		using Volo.Abp.GlobalFeatures;
		using Volo.Abp.LeptonXTheme.Management;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(AbpAuditLoggingDomainSharedModule),
		    typeof(AbpBackgroundJobsDomainSharedModule),
		    typeof(AbpFeatureManagementDomainSharedModule),
		    typeof(AbpPermissionManagementDomainSharedModule),
		    typeof(AbpSettingManagementDomainSharedModule),
		    typeof(AbpIdentityProDomainSharedModule),
		    typeof(AbpOpenIddictProDomainSharedModule),
		    typeof(LanguageManagementDomainSharedModule),
		    typeof(FileManagementDomainSharedModule),
		    typeof(SaasDomainSharedModule),
		    typeof(ChatDomainSharedModule),
		    typeof(TextTemplateManagementDomainSharedModule),
		    typeof(AbpGdprDomainSharedModule),
		    typeof(AbpGlobalFeaturesModule),
		    typeof(LeptonXThemeManagementDomainSharedModule),
		    typeof(BlobStoringDatabaseDomainSharedModule)
		    )]
		public class ExampleAbpApplicationLayerDomainSharedModule : AbpModule
		{
		    public override void PreConfigureServices(ServiceConfigurationContext context)
		    {
		        ExampleAbpApplicationLayerGlobalFeatureConfigurator.Configure();
		        ExampleAbpApplicationLayerModuleExtensionConfigurator.Configure();
		    }
		
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        Configure<AbpVirtualFileSystemOptions>(options =>
		        {
		            options.FileSets.AddEmbedded<ExampleAbpApplicationLayerDomainSharedModule>();
		        });
		
		        Configure<AbpLocalizationOptions>(options =>
		        {
		            options.Resources
		                .Add<ExampleAbpApplicationLayerResource>("en")
		                .AddBaseTypes(typeof(AbpValidationResource))
		                .AddVirtualJson("/Localization/ExampleAbpApplicationLayer");
		
		            options.DefaultResourceType = typeof(ExampleAbpApplicationLayerResource);
		            
		            options.Languages.Add(new LanguageInfo("en", "en", "English")); 
		            options.Languages.Add(new LanguageInfo("ar", "ar", "Arabic")); 
		
		        });
		        
		        Configure<AbpExceptionLocalizationOptions>(options =>
		        {
		            options.MapCodeNamespace("ExampleAbpApplicationLayer", typeof(ExampleAbpApplicationLayerResource));
		        });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerGlobalFeatureConfigurator.cs'>
		﻿using Volo.Abp.GlobalFeatures;
		using Volo.Abp.Threading;
		
		namespace ExampleAbpApplicationLayer;
		
		public static class ExampleAbpApplicationLayerGlobalFeatureConfigurator
		{
		    private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
		
		    public static void Configure()
		    {
		        OneTimeRunner.Run(() =>
		        {
		                /* You can configure (enable/disable) global features of the used modules here.
		                 * Please refer to the documentation to learn more about the Global Features System:
		                 * https://docs.abp.io/en/abp/latest/Global-Features
		                 */
		            });
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayerModuleExtensionConfigurator.cs'><![CDATA[
		﻿using System.ComponentModel.DataAnnotations;
		using Volo.Abp.Identity;
		using Volo.Abp.ObjectExtending;
		using Volo.Abp.Threading;
		
		namespace ExampleAbpApplicationLayer;
		
		public static class ExampleAbpApplicationLayerModuleExtensionConfigurator
		{
		    private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
		
		    public static void Configure()
		    {
		        OneTimeRunner.Run(() =>
		        {
		            ConfigureExistingProperties();
		            ConfigureExtraProperties();
		        });
		    }
		
		    private static void ConfigureExistingProperties()
		    {
		        /* You can change max lengths for properties of the
		         * entities defined in the modules used by your application.
		         *
		         * Example: Change user and role name max lengths
		
		           AbpUserConsts.MaxNameLength = 99;
		           IdentityRoleConsts.MaxNameLength = 99;
		
		         * Notice: It is not suggested to change property lengths
		         * unless you really need it. Go with the standard values wherever possible.
		         *
		         * If you are using EF Core, you will need to run the add-migration command after your changes.
		         */
		    }
		
		    private static void ConfigureExtraProperties()
		    {
		        /* You can configure extra properties for the
		         * entities defined in the modules used by your application.
		         *
		         * This class can be used to define these extra properties
		         * with a high level, easy to use API.
		         *
		         * Example: Add a new property to the user entity of the identity module
		
		           ObjectExtensionManager.Instance.Modules()
		              .ConfigureIdentity(identity =>
		              {
		                  identity.ConfigureUser(user =>
		                  {
		                      user.AddOrUpdateProperty<string>( //property type: string
		                          "SocialSecurityNumber", //property name
		                          property =>
		                          {
		                              //validation rules
		                              property.Attributes.Add(new RequiredAttribute());
		                              property.Attributes.Add(new StringLengthAttribute(64) {MinimumLength = 4});
		
		                              //...other configurations for this property
		                          }
		                      );
		                  });
		              });
		
		         * See the documentation for more:
		         * https://docs.abp.io/en/abp/latest/Module-Entity-Extensions
		         */
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\Localization\ExampleAbpApplicationLayer\ar.json'><![CDATA[
		{
		  "culture": "ar",
		  "texts": {
		    "AppName": "ExampleAbpApplicationLayer",
		    "Menu:Home": "منزل، بيت",
		    "Menu:ContactUs": "اتصل بنا",
		    "Menu:ArticleSample": "عينة المادة",
		    "Home": "منزل، بيت",
		    "Welcome": "مرحبا",
		    "LongWelcomeMessage": "مرحبا بكم في التطبيق. هذا مشروع بدء التشغيل يعتمد على إطار عمل برنامج ABP. لمزيد من المعلومات قم بزيارة",
		    "Date": "تاريخ",
		    "Permission:Dashboard": "لوحة القيادة",
		    "Menu:Dashboard": "لوحة القيادة",
		    "Menu:HomePage": "الصفحة الرئيسية",
		    "Dashboard": "لوحة القيادة",
		    "ExternalProvider:Google": "جوجل",
		    "ExternalProvider:Google:ClientId": "معرف العميل",
		    "ExternalProvider:Google:ClientSecret": "سر العميل",
		    "ExternalProvider:Microsoft": "مايكروسوفت",
		    "ExternalProvider:Microsoft:ClientId": "معرف العميل",
		    "ExternalProvider:Microsoft:ClientSecret": "سر العميل",
		    "ExternalProvider:Twitter": "تويتر",
		    "ExternalProvider:Twitter:ConsumerKey": "مفتاح المستهلك",
		    "ExternalProvider:Twitter:ConsumerSecret": "سر المستهلك",
		    "NewsletterHeader": "اشترك في النشرة الإخبارية!",
		    "NewsletterInfo": "احصل على معلومات حول آخر الأحداث.",
		    "NewsletterPreference_Default": "النشرة الإخبارية الافتراضية",
		    "NewsletterPrivacyAcceptMessage": "أوافق على <a href='/privacy-policy'> سياسة الخصوصية </a>.",
		    "Language": "لغة",
		    "Search": "يبحث",
		    "LoadMore": "تحميل المزيد",
		    "Settings": "إعدادات",
		    "Theme": "سمة",
		    "DeviceTheme": "موضوع الجهاز",
		    "Dark": "مظلم",
		    "Light": "ضوء",
		    "Unspecified": "نظام",
		    "SeeAllUsers": "رؤية كافة المستخدمين",
		    "TakePhoto": "تصوير",
		    "ChoosePhoto": "اختر صورة"
		  }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\Localization\ExampleAbpApplicationLayer\en.json'><![CDATA[
		{
		  "Culture": "en",
		  "Texts": {
		    "AppName": "ExampleAbpApplicationLayer",
		    "Menu:ContactUs": "Contact Us",
		    "Menu:ArticleSample": "Article Sample",
		    "Home": "Home",
		    "Date": "Date",
		    "Permission:Dashboard": "Dashboard",
		    "Menu:Dashboard": "Dashboard",
		    "Menu:HomePage": "Home page",
		    "Dashboard": "Dashboard",
		    "ExternalProvider:Google": "Google",
		    "ExternalProvider:Google:ClientId": "Client ID",
		    "ExternalProvider:Google:ClientSecret": "Client Secret",
		    "ExternalProvider:Microsoft": "Microsoft",
		    "ExternalProvider:Microsoft:ClientId": "Client ID",
		    "ExternalProvider:Microsoft:ClientSecret": "Client Secret",
		    "ExternalProvider:Twitter": "Twitter",
		    "ExternalProvider:Twitter:ConsumerKey": "Consumer Key",
		    "ExternalProvider:Twitter:ConsumerSecret": "Consumer Secret",
		    "NewsletterHeader": "Subscribe to the newsletter!",
		    "NewsletterInfo": "Get information about the latest happenings.",
		    "NewsletterPreference_Default": "Default Newsletter",
		    "NewsletterPrivacyAcceptMessage": "I accept the <a href='/privacy-policy'>Privacy Policy</a>.",
		    "Language": "Language",
		    "Search": "Search",
		    "LoadMore": "Load More",
		    "Settings": "Settings",
		    "Theme": "Theme",
		    "DeviceTheme": "Device theme",
		    "Dark": "Dark",
		    "Light": "Light",
		    "Unspecified": "System",
		    "SeeAllUsers": "See All Users",
		    "TakePhoto": "Take Photo",
		    "ChoosePhoto": "Choose Photo",
		    "Menu:Home": "Home",
		    "LongWelcomeMessage": "Welcome to the application. This is a startup project based on the ABP framework. For more information visit",
		    "Welcome": "Welcome",
		    "Permission:Products": "Products",
		    "Permission:ExampleAbpApplicationLayer": "Example Abp Application Layer",
		    "Permission:Create": "Create",
		    "Permission:Edit": "Edit",
		    "Permission:Delete": "Delete",
		    "Products": "Products",
		    "NewProduct": "New Product",
		    "Product": "Product",
		    "Menu:Products": "Products",
		    "SeeAdvancedFilters": "Filters",
		    "DeleteConfirmationMessage": "Are you sure you want to delete this record?",
		    "AreYouSure": "Are you sure?",
		    "Pick": "Pick",
		    "Actions": "Actions",
		    "SuccessfullyDeleted": "Successfully deleted",
		    "ExportToExcel": "Export to Excel",
		    "AllItemsAreSelected": "All {0} items are selected",
		    "OneItemOnThisPageIsSelected": "1 item on this page is selected",
		    "NumberOfItemsOnThisPageAreSelected": "All {0} items on this page are selected",
		    "SelectAllItems": "Select all {0} items",
		    "ClearSelection": "Clear selection",
		    "DeleteAllRecords": "Are you sure you want to delete all records?",
		    "DeleteSelectedRecords": "Are you sure you want to delete {0} record(s)?",
		    "UploadFailedMessage": "Upload Failed: Unsupported file format or file size too large. Please ensure the file meets the required format and size limits, and try again.",
		    "DownloadSelectedFile": "Download selected file",
		    "RemoveSelectedFile": "Remove selected file",
		    "Filters": "Filters",
		    "Name": "Name",
		    "Desc": "Desc",
		    "Price": "Price",
		    "IsActive": "Is Active",
		    "MinName": "Min Name",
		    "MinDesc": "Min Desc",
		    "MinPrice": "Min Price",
		    "MinIsActive": "Min Is Active",
		    "MaxName": "Max Name",
		    "MaxDesc": "Max Desc",
		    "MaxPrice": "Max Price",
		    "MaxIsActive": "Max Is Active",
		    "Enum:OrderStatus.0": "Initialized",
		    "Enum:OrderStatus.1": "Paid",
		    "Enum:OrderStatus.2": "Processing",
		    "Enum:OrderStatus.3": "Ordered",
		    "Enum:OrderStatus.4": "Shipped",
		    "Enum:OrderStatus.5": "Arrived",
		    "Enum:OrderStatus.6": "Delivered",
		    "Enum:OrderStatus.7": "Cancelled",
		    "Enum:OrderStatus.8": "Not paid",
		    "Permission:Orders": "Orders",
		    "Orders": "Orders",
		    "NewOrder": "New Order",
		    "Order": "Order",
		    "Menu:Orders": "Orders",
		    "OrderDate": "Order Date",
		    "TotalAmount": "Total Amount",
		    "Status": "Status",
		    "MinOrderDate": "Min Order Date",
		    "MinTotalAmount": "Min Total Amount",
		    "MinStatus": "Min Status",
		    "MaxOrderDate": "Max Order Date",
		    "MaxTotalAmount": "Max Total Amount",
		    "MaxStatus": "Max Status",
		    "OrderItems": "Order Items",
		    "NewOrderItem": "New Order Item",
		    "OrderItem": "Order Item",
		    "Menu:OrderItems": "Order Items",
		    "Qty": "Qty",
		    "TotalPrice": "Total Price",
		    "ProductName": "Product Name",
		    "MinQty": "Min Qty",
		    "MinTotalPrice": "Min Total Price",
		    "MinProductName": "Min Product Name",
		    "MaxQty": "Max Qty",
		    "MaxTotalPrice": "Max Total Price",
		    "MaxProductName": "Max Product Name",
		    "Permission:OrderItems": "Order Items",
		    "IdentityUser": "Identity user"
		  }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\Localization\ExampleAbpApplicationLayerResource.cs'>
		﻿using Volo.Abp.Localization;
		
		namespace ExampleAbpApplicationLayer.Localization;
		
		[LocalizationResourceName("ExampleAbpApplicationLayer")]
		public class ExampleAbpApplicationLayerResource
		{
		
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\MultiTenancy\MultiTenancyConsts.cs'>
		﻿namespace ExampleAbpApplicationLayer.MultiTenancy;
		
		public static class MultiTenancyConsts
		{
		    /* Enable/disable multi-tenancy easily in a single point.
		     * If you will never need to multi-tenancy, you can remove
		     * related modules and code parts, including this file.
		     */
		    public const bool IsEnabled = true;
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\OrderItems\OrderItemConsts.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public static class OrderItemConsts
		    {
		        private const string DefaultSorting = "{0}CreationTime desc";
		
		        public static string GetDefaultSorting(bool withEntityName)
		        {
		            return string.Format(DefaultSorting, withEntityName ? "OrderItem." : string.Empty);
		        }
		
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\Orders\OrderConsts.cs'>
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public static class OrderConsts
		    {
		        private const string DefaultSorting = "{0}CreationTime desc";
		
		        public static string GetDefaultSorting(bool withEntityName)
		        {
		            return string.Format(DefaultSorting, withEntityName ? "Order." : string.Empty);
		        }
		
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain.Shared\Products\ProductConsts.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public static class ProductConsts
		    {
		        private const string DefaultSorting = "{0}CreationTime desc";
		
		        public static string GetDefaultSorting(bool withEntityName)
		        {
		            return string.Format(DefaultSorting, withEntityName ? "Product." : string.Empty);
		        }
		
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Data\ExampleAbpApplicationLayerDbMigrationService.cs'><![CDATA[
		﻿using System;
		using System.Collections.Generic;
		using System.Diagnostics;
		using System.IO;
		using System.Linq;
		using System.Runtime.InteropServices;
		using System.Threading.Tasks;
		using Microsoft.Extensions.Logging;
		using Microsoft.Extensions.Logging.Abstractions;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Identity;
		using Volo.Abp.MultiTenancy;
		using ExampleAbpApplicationLayer.MultiTenancy;
		using Volo.Saas.Tenants;
		
		namespace ExampleAbpApplicationLayer.Data;
		
		public class ExampleAbpApplicationLayerDbMigrationService : ITransientDependency
		{
		    public ILogger<ExampleAbpApplicationLayerDbMigrationService> Logger { get; set; }
		
		    private readonly IDataSeeder _dataSeeder;
		    private readonly IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> _dbSchemaMigrators;
		    private readonly ITenantRepository _tenantRepository;
		    private readonly ICurrentTenant _currentTenant;
		
		    public ExampleAbpApplicationLayerDbMigrationService(
		        IDataSeeder dataSeeder,
		        ITenantRepository tenantRepository,
		        ICurrentTenant currentTenant,
		        IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> dbSchemaMigrators)
		    {
		        _dataSeeder = dataSeeder;
		        _tenantRepository = tenantRepository;
		        _currentTenant = currentTenant;
		        _dbSchemaMigrators = dbSchemaMigrators;
		
		        Logger = NullLogger<ExampleAbpApplicationLayerDbMigrationService>.Instance;
		    }
		
		    public async Task MigrateAsync()
		    {
		        var initialMigrationAdded = AddInitialMigrationIfNotExist();
		
		        if (initialMigrationAdded)
		        {
		            return;
		        }
		
		        Logger.LogInformation("Started database migrations...");
		
		        await MigrateDatabaseSchemaAsync();
		        await SeedDataAsync();
		
		        Logger.LogInformation($"Successfully completed host database migrations.");
		
		        if (MultiTenancyConsts.IsEnabled)
		        {
		            
		            var tenants = await _tenantRepository.GetListAsync(includeDetails: true);
		
		            var migratedDatabaseSchemas = new HashSet<string>();
		            foreach (var tenant in tenants)
		            {
		                using (_currentTenant.Change(tenant.Id))
		                {
		                    if (tenant.ConnectionStrings.Any())
		                    {
		                        var tenantConnectionStrings = tenant.ConnectionStrings
		                            .Select(x => x.Value)
		                            .ToList();
		
		                        if (!migratedDatabaseSchemas.IsSupersetOf(tenantConnectionStrings))
		                        {
		                            await MigrateDatabaseSchemaAsync(tenant);
		
		                            migratedDatabaseSchemas.AddIfNotContains(tenantConnectionStrings);
		                        }
		                    }
		
		                    await SeedDataAsync(tenant);
		                }
		
		                Logger.LogInformation($"Successfully completed {tenant.Name} tenant database migrations.");
		            }
		
		            Logger.LogInformation("Successfully completed all database migrations.");
		        }
		        Logger.LogInformation("You can safely end this process...");
		    }
		
		    private async Task MigrateDatabaseSchemaAsync(Tenant? tenant = null)
		    {
		        Logger.LogInformation(
		            $"Migrating schema for {(tenant == null ? "host" : tenant.Name + " tenant")} database...");
		        
		        foreach (var migrator in _dbSchemaMigrators)
		        {
		            await migrator.MigrateAsync();
		        }
		    }
		
		    private async Task SeedDataAsync(Tenant? tenant = null)
		    {
		        Logger.LogInformation($"Executing {(tenant == null ? "host" : tenant.Name + " tenant")} database seed...");
		        
		        await _dataSeeder.SeedAsync(new DataSeedContext(tenant?.Id)
		            .WithProperty(IdentityDataSeedContributor.AdminEmailPropertyName,
		                ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue)
		            .WithProperty(IdentityDataSeedContributor.AdminPasswordPropertyName,
		                ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue)
		        );
		    }
		
		    private bool AddInitialMigrationIfNotExist()
		    {
		        try
		        {
		            if (!DbMigrationsProjectExists())
		            {
		                return false;
		            }
		        }
		        catch (Exception)
		        {
		            return false;
		        }
		
		        try
		        {
		            if (!MigrationsFolderExists())
		            {
		                AddInitialMigration();
		                return true;
		            }
		            else
		            {
		                return false;
		            }
		        }
		        catch (Exception e)
		        {
		            Logger.LogWarning("Couldn't determinate if any migrations exist : " + e.Message);
		            return false;
		        }
		    }
		
		    private bool DbMigrationsProjectExists()
		    {
		        var dbMigrationsProjectFolder = GetEntityFrameworkCoreProjectFolderPath();
		
		        return dbMigrationsProjectFolder != null;
		    }
		
		    private bool MigrationsFolderExists()
		    {
		        var dbMigrationsProjectFolder = GetEntityFrameworkCoreProjectFolderPath();
		
		        return dbMigrationsProjectFolder != null && Directory.Exists(Path.Combine(dbMigrationsProjectFolder, "Migrations"));
		    }
		
		    private void AddInitialMigration()
		    {
		        Logger.LogInformation("Creating initial migration...");
		
		        string argumentPrefix;
		        string fileName;
		
		        if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
		        {
		            argumentPrefix = "-c";
		            fileName = "/bin/bash";
		        }
		        else
		        {
		            argumentPrefix = "/C";
		            fileName = "cmd.exe";
		        }
		
		        var procStartInfo = new ProcessStartInfo(fileName,
		            $"{argumentPrefix} \"abp create-migration-and-run-migrator \"{GetEntityFrameworkCoreProjectFolderPath()}\"\""
		        );
		
		        try
		        {
		            Process.Start(procStartInfo);
		        }
		        catch (Exception)
		        {
		            throw new Exception("Couldn't run ABP CLI...");
		        }
		    }
		
		    private string? GetEntityFrameworkCoreProjectFolderPath()
		    {
		        var slnDirectoryPath = GetSolutionDirectoryPath();
		
		        if (slnDirectoryPath == null)
		        {
		            throw new Exception("Solution folder not found!");
		        }
		
		        var srcDirectoryPath = Path.Combine(slnDirectoryPath, "src");
		
		        return Directory.GetDirectories(srcDirectoryPath)
		            .FirstOrDefault(d => d.EndsWith(".EntityFrameworkCore"));
		    }
		
		    private string? GetSolutionDirectoryPath()
		    {
		        var currentDirectory = new DirectoryInfo(Directory.GetCurrentDirectory());
		
		        while (currentDirectory != null && Directory.GetParent(currentDirectory.FullName) != null)
		        {
		            currentDirectory = Directory.GetParent(currentDirectory.FullName);
		
		            if (currentDirectory != null && Directory.GetFiles(currentDirectory.FullName).FirstOrDefault(f => f.EndsWith(".sln")) != null)
		            {
		                return currentDirectory.FullName;
		            }
		        }
		
		        return null;
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Data\ExampleAbpApplicationLayerTenantDatabaseMigrationHandler.cs'><![CDATA[
		﻿using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Threading.Tasks;
		using Microsoft.Extensions.Logging;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.EventBus.Distributed;
		using Volo.Abp.Identity;
		using Volo.Abp.MultiTenancy;
		using Volo.Abp.Uow;
		
		namespace ExampleAbpApplicationLayer.Data;
		
		public class ExampleAbpApplicationLayerTenantDatabaseMigrationHandler :
		    IDistributedEventHandler<TenantCreatedEto>,
		    IDistributedEventHandler<TenantConnectionStringUpdatedEto>,
		    IDistributedEventHandler<ApplyDatabaseMigrationsEto>,
		    ITransientDependency
		{
		    private readonly IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> _dbSchemaMigrators;
		    private readonly ICurrentTenant _currentTenant;
		    private readonly IUnitOfWorkManager _unitOfWorkManager;
		    private readonly IDataSeeder _dataSeeder;
		    private readonly ITenantStore _tenantStore;
		    private readonly ILogger<ExampleAbpApplicationLayerTenantDatabaseMigrationHandler> _logger;
		
		    public ExampleAbpApplicationLayerTenantDatabaseMigrationHandler(
		        IEnumerable<IExampleAbpApplicationLayerDbSchemaMigrator> dbSchemaMigrators,
		        ICurrentTenant currentTenant,
		        IUnitOfWorkManager unitOfWorkManager,
		        IDataSeeder dataSeeder,
		        ITenantStore tenantStore,
		        ILogger<ExampleAbpApplicationLayerTenantDatabaseMigrationHandler> logger)
		    {
		        _dbSchemaMigrators = dbSchemaMigrators;
		        _currentTenant = currentTenant;
		        _unitOfWorkManager = unitOfWorkManager;
		        _dataSeeder = dataSeeder;
		        _tenantStore = tenantStore;
		        _logger = logger;
		    }
		
		    public async Task HandleEventAsync(TenantCreatedEto eventData)
		    {
		        await MigrateAndSeedForTenantAsync(
		            eventData.Id,
		            eventData.Properties.GetOrDefault("AdminEmail") ?? ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue,
		            eventData.Properties.GetOrDefault("AdminPassword") ?? ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue
		        );
		    }
		
		    public async Task HandleEventAsync(TenantConnectionStringUpdatedEto eventData)
		    {
		        if (eventData.ConnectionStringName != ConnectionStrings.DefaultConnectionStringName ||
		            eventData.NewValue.IsNullOrWhiteSpace())
		        {
		            return;
		        }
		
		        await MigrateAndSeedForTenantAsync(
		            eventData.Id,
		            ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue,
		            ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue
		        );
		
		        /* You may want to move your data from the old database to the new database!
		         * It is up to you. If you don't make it, new database will be empty
		         * (and tenant's admin password is reset to 1q2w3E*).
		         */
		    }
		
		    public async Task HandleEventAsync(ApplyDatabaseMigrationsEto eventData)
		    {
		        if (eventData.TenantId == null)
		        {
		            return;
		        }
		
		        await MigrateAndSeedForTenantAsync(
		            eventData.TenantId.Value,
		            ExampleAbpApplicationLayerConsts.AdminEmailDefaultValue,
		            ExampleAbpApplicationLayerConsts.AdminPasswordDefaultValue
		        );
		    }
		
		    private async Task MigrateAndSeedForTenantAsync(
		        Guid tenantId,
		        string adminEmail,
		        string adminPassword)
		    {
		        try
		        {
		            using (_currentTenant.Change(tenantId))
		            {
		                // Create database tables if needed
		                using (var uow = _unitOfWorkManager.Begin(requiresNew: true, isTransactional: false))
		                {
		                    var tenantConfiguration = await _tenantStore.FindAsync(tenantId);
		                    if (tenantConfiguration?.ConnectionStrings != null &&
		                        !tenantConfiguration.ConnectionStrings.Default.IsNullOrWhiteSpace())
		                    {
		                        foreach (var migrator in _dbSchemaMigrators)
		                        {
		                            await migrator.MigrateAsync();
		                        }
		                    }
		
		                    await uow.CompleteAsync();
		                }
		
		                // Seed data
		                using (var uow = _unitOfWorkManager.Begin(requiresNew: true, isTransactional: true))
		                {
		                    await _dataSeeder.SeedAsync(
		                        new DataSeedContext(tenantId)
		                            .WithProperty(IdentityDataSeedContributor.AdminEmailPropertyName, adminEmail)
		                            .WithProperty(IdentityDataSeedContributor.AdminPasswordPropertyName, adminPassword)
		                    );
		
		                    await uow.CompleteAsync();
		                }
		            }
		        }
		        catch (Exception ex)
		        {
		            _logger.LogException(ex);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Data\IExampleAbpApplicationLayerDbSchemaMigrator.cs'>
		﻿using System.Threading.Tasks;
		
		namespace ExampleAbpApplicationLayer.Data;
		
		public interface IExampleAbpApplicationLayerDbSchemaMigrator
		{
		    Task MigrateAsync();
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Data\NullExampleAbpApplicationLayerDbSchemaMigrator.cs'>
		﻿using System.Threading.Tasks;
		using Volo.Abp.DependencyInjection;
		
		namespace ExampleAbpApplicationLayer.Data;
		
		/* This is used if database provider does't define
		 * IExampleAbpApplicationLayerDbSchemaMigrator implementation.
		 */
		public class NullExampleAbpApplicationLayerDbSchemaMigrator : IExampleAbpApplicationLayerDbSchemaMigrator, ITransientDependency
		{
		    public Task MigrateAsync()
		    {
		        return Task.CompletedTask;
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.abppkg'>
		{
		  "role": "lib.domain"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.abppkg.analyze.json'>
		{
		  "name": "ExampleAbpApplicationLayer.Domain",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain.Shared",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerDomainSharedModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.Domain",
		          "namespace": "Volo.Abp.AuditLogging",
		          "name": "AbpAuditLoggingDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Caching",
		          "namespace": "Volo.Abp.Caching",
		          "name": "AbpCachingModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.BackgroundJobs.Domain",
		          "namespace": "Volo.Abp.BackgroundJobs",
		          "name": "AbpBackgroundJobsDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.Domain",
		          "namespace": "Volo.Abp.FeatureManagement",
		          "name": "AbpFeatureManagementDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.Domain.Identity",
		          "namespace": "Volo.Abp.PermissionManagement.Identity",
		          "name": "AbpPermissionManagementDomainIdentityModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.Domain.OpenIddict",
		          "namespace": "Volo.Abp.PermissionManagement.OpenIddict",
		          "name": "AbpPermissionManagementDomainOpenIddictModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.Domain",
		          "namespace": "Volo.Abp.SettingManagement",
		          "name": "AbpSettingManagementDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Emailing",
		          "namespace": "Volo.Abp.Emailing",
		          "name": "AbpEmailingModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.Domain",
		          "namespace": "Volo.Abp.Identity",
		          "name": "AbpIdentityProDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.Domain",
		          "namespace": "Volo.Abp.OpenIddict",
		          "name": "AbpOpenIddictProDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.Domain",
		          "namespace": "Volo.Abp.TextTemplateManagement",
		          "name": "TextTemplateManagementDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.Domain",
		          "namespace": "Volo.Abp.LanguageManagement",
		          "name": "LanguageManagementDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Commercial.SuiteTemplates",
		          "namespace": "Volo.Abp.Commercial.SuiteTemplates",
		          "name": "VoloAbpCommercialSuiteTemplatesModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.Domain",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.BlobStoring.Database.Domain",
		          "namespace": "Volo.Abp.BlobStoring.Database",
		          "name": "BlobStoringDatabaseDomainModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerDomainModule",
		      "summary": null
		    }
		  ]
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj'><![CDATA[
		﻿<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain.Shared\ExampleAbpApplicationLayer.Domain.Shared.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Emailing" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Caching" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.PermissionManagement.Domain.Identity" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.PermissionManagement.Domain.OpenIddict" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.BackgroundJobs.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.BlobStoring.Database.Domain" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Identity.Pro.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Commercial.SuiteTemplates" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.Domain" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LeptonXTheme.Management.Domain" Version="4.3.1" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayerConsts.cs'>
		﻿using Volo.Abp.Identity;
		
		namespace ExampleAbpApplicationLayer;
		
		public static class ExampleAbpApplicationLayerConsts
		{
		    public const string DbTablePrefix = "App";
		    public const string? DbSchema = null;
		    public const string AdminEmailDefaultValue = IdentityDataSeedContributor.AdminEmailDefaultValue;
		    public const string AdminPasswordDefaultValue = IdentityDataSeedContributor.AdminPasswordDefaultValue;
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayerDomainModule.cs'><![CDATA[
		using Microsoft.Extensions.DependencyInjection;
		using Microsoft.Extensions.DependencyInjection.Extensions;
		using ExampleAbpApplicationLayer.Localization;
		using ExampleAbpApplicationLayer.MultiTenancy;
		using Volo.Abp.Localization;
		using Volo.Abp.Modularity;
		using Volo.Abp.MultiTenancy;
		using Volo.Abp.PermissionManagement.Identity;
		using Volo.Abp.SettingManagement;
		using Volo.Abp.BlobStoring.Database;
		using Volo.Abp.Caching;
		using Volo.Abp.OpenIddict;
		using Volo.Abp.PermissionManagement.OpenIddict;
		using Volo.Abp.AuditLogging;
		using Volo.Abp.BackgroundJobs;
		using Volo.Abp.Emailing;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Identity;
		using Volo.Abp.Commercial.SuiteTemplates;
		using Volo.Abp.LanguageManagement;
		using Volo.FileManagement;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Saas;
		using Volo.Abp.Gdpr;
		using Volo.Chat;
		using Volo.Abp.LeptonXTheme.Management;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerDomainSharedModule),
		    typeof(AbpAuditLoggingDomainModule),
		    typeof(AbpCachingModule),
		    typeof(AbpBackgroundJobsDomainModule),
		    typeof(AbpFeatureManagementDomainModule),
		    typeof(AbpPermissionManagementDomainIdentityModule),
		    typeof(AbpPermissionManagementDomainOpenIddictModule),
		    typeof(AbpSettingManagementDomainModule),
		    typeof(AbpEmailingModule),
		    typeof(AbpIdentityProDomainModule),
		    typeof(AbpOpenIddictProDomainModule),
		    typeof(SaasDomainModule),
		    typeof(ChatDomainModule),
		    typeof(TextTemplateManagementDomainModule),
		    typeof(LanguageManagementDomainModule),
		    typeof(FileManagementDomainModule),
		    typeof(VoloAbpCommercialSuiteTemplatesModule),
		    typeof(AbpGdprDomainModule),
		    typeof(LeptonXThemeManagementDomainModule),
		    typeof(BlobStoringDatabaseDomainModule)
		    )]
		public class ExampleAbpApplicationLayerDomainModule : AbpModule
		{
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        Configure<AbpMultiTenancyOptions>(options =>
		        {
		            options.IsEnabled = MultiTenancyConsts.IsEnabled;
		        });
		
		
		#if DEBUG
		        context.Services.Replace(ServiceDescriptor.Singleton<IEmailSender, NullEmailSender>());
		#endif
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Features\ChatServiceFeatureProvider.cs'>
		﻿using Volo.Abp.Features;
		using Volo.Chat;
		using System.Linq;
		
		namespace ExampleAbpApplicationLayer.ChatService.Features;
		
		public class ChatServiceFeatureProvider : FeatureDefinitionProvider 
		{
		    public override void Define(IFeatureDefinitionContext context)
		    {
		        context
		            .GetGroupOrNull(ChatFeatures.GroupName)!
		            .Features
		            .FirstOrDefault(f => f.Name == ChatFeatures.Enable)!
		            .DefaultValue = "true";
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Identity\ChangeIdentityPasswordPolicySettingDefinitionProvider.cs'>
		using Volo.Abp.Identity.Settings;
		using Volo.Abp.Settings;
		
		namespace ExampleAbpApplicationLayer.Identity;
		
		public class ChangeIdentityPasswordPolicySettingDefinitionProvider : SettingDefinitionProvider
		{
		    public override void Define(ISettingDefinitionContext context)
		    {
		        var requireNonAlphanumeric = context.GetOrNull(IdentitySettingNames.Password.RequireNonAlphanumeric);
		        if (requireNonAlphanumeric != null)
		        {
		            requireNonAlphanumeric.DefaultValue = false.ToString();
		        }
		
		        var requireLowercase = context.GetOrNull(IdentitySettingNames.Password.RequireLowercase);
		        if (requireLowercase != null)
		        {
		            requireLowercase.DefaultValue = false.ToString();
		        }
		
		        var requireUppercase = context.GetOrNull(IdentitySettingNames.Password.RequireUppercase);
		        if (requireUppercase != null)
		        {
		            requireUppercase.DefaultValue = false.ToString();
		        }
		
		        var requireDigit = context.GetOrNull(IdentitySettingNames.Password.RequireDigit);
		        if (requireDigit != null)
		        {
		            requireDigit.DefaultValue = false.ToString();
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OpenIddict\OpenIddictDataSeedContributor.cs'><![CDATA[
		﻿using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Text.Json;
		using System.Threading.Tasks;
		using JetBrains.Annotations;
		using Microsoft.Extensions.Configuration;
		using Microsoft.Extensions.Localization;
		using OpenIddict.Abstractions;
		using Volo.Abp;
		using Volo.Abp.Authorization.Permissions;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.OpenIddict.Applications;
		using Volo.Abp.OpenIddict.Scopes;
		using Volo.Abp.PermissionManagement;
		using Volo.Abp.Uow;
		
		namespace ExampleAbpApplicationLayer.OpenIddict;
		
		/* Creates initial data that is needed to property run the application
		 * and make client-to-server communication possible.
		 */
		public class OpenIddictDataSeedContributor : IDataSeedContributor, ITransientDependency
		{
		    private readonly IConfiguration _configuration;
		    private readonly IOpenIddictApplicationRepository _openIddictApplicationRepository;
		    private readonly IAbpApplicationManager _applicationManager;
		    private readonly IOpenIddictScopeRepository _openIddictScopeRepository;
		    private readonly IOpenIddictScopeManager _scopeManager;
		    private readonly IPermissionDataSeeder _permissionDataSeeder;
		    private readonly IStringLocalizer<OpenIddictResponse> L;
		
		    public OpenIddictDataSeedContributor(
		        IConfiguration configuration,
		        IOpenIddictApplicationRepository openIddictApplicationRepository,
		        IAbpApplicationManager applicationManager,
		        IOpenIddictScopeRepository openIddictScopeRepository,
		        IOpenIddictScopeManager scopeManager,
		        IPermissionDataSeeder permissionDataSeeder,
		        IStringLocalizer<OpenIddictResponse> l)
		    {
		        _configuration = configuration;
		        _openIddictApplicationRepository = openIddictApplicationRepository;
		        _applicationManager = applicationManager;
		        _openIddictScopeRepository = openIddictScopeRepository;
		        _scopeManager = scopeManager;
		        _permissionDataSeeder = permissionDataSeeder;
		        L = l;
		    }
		
		    [UnitOfWork]
		    public virtual async Task SeedAsync(DataSeedContext context)
		    {
		        await CreateScopesAsync();
		        await CreateApplicationsAsync();
		    }
		
		    private async Task CreateScopesAsync()
		    {
		        if (await _openIddictScopeRepository.FindByNameAsync("ExampleAbpApplicationLayer") == null)
		        {
		            await _scopeManager.CreateAsync(new OpenIddictScopeDescriptor {
		                Name = "ExampleAbpApplicationLayer", DisplayName = "ExampleAbpApplicationLayer API", Resources = { "ExampleAbpApplicationLayer" }
		            });
		        }
		    }
		
		    private async Task CreateApplicationsAsync()
		    {
		        var commonScopes = new List<string> {
		            OpenIddictConstants.Permissions.Scopes.Address,
		            OpenIddictConstants.Permissions.Scopes.Email,
		            OpenIddictConstants.Permissions.Scopes.Phone,
		            OpenIddictConstants.Permissions.Scopes.Profile,
		            OpenIddictConstants.Permissions.Scopes.Roles,
		            "ExampleAbpApplicationLayer"
		        };
		
		        var configurationSection = _configuration.GetSection("OpenIddict:Applications");
		
		
		        //Console Test / Angular Client
		        var consoleAndAngularClientId = configurationSection["ExampleAbpApplicationLayer_App:ClientId"];
		        if (!consoleAndAngularClientId.IsNullOrWhiteSpace())
		        {
		            var consoleAndAngularClientRootUrl = configurationSection["ExampleAbpApplicationLayer_App:RootUrl"]?.TrimEnd('/');
		            await CreateApplicationAsync(
		                applicationType: OpenIddictConstants.ApplicationTypes.Web,
		                name: consoleAndAngularClientId!,
		                type: OpenIddictConstants.ClientTypes.Public,
		                consentType: OpenIddictConstants.ConsentTypes.Implicit,
		                displayName: "Console Test / Angular Application",
		                secret: null,
		                grantTypes: new List<string> {
		                    OpenIddictConstants.GrantTypes.AuthorizationCode,
		                    OpenIddictConstants.GrantTypes.Password,
		                    OpenIddictConstants.GrantTypes.ClientCredentials,
		                    OpenIddictConstants.GrantTypes.RefreshToken,
		                    "LinkLogin",
		                    "Impersonation"
		                },
		                scopes: commonScopes,
		                redirectUris: new List<string> { consoleAndAngularClientRootUrl },
		                postLogoutRedirectUris: new List<string> { consoleAndAngularClientRootUrl },
		                clientUri: consoleAndAngularClientRootUrl,
		                logoUri: "/images/clients/angular.svg"
		            );
		        }
		
		        
		        
		
		
		
		
		        // Swagger Client
		        var swaggerClientId = configurationSection["ExampleAbpApplicationLayer_Swagger:ClientId"];
		        if (!swaggerClientId.IsNullOrWhiteSpace())
		        {
		            var swaggerRootUrl = configurationSection["ExampleAbpApplicationLayer_Swagger:RootUrl"]?.TrimEnd('/');
		
		            await CreateApplicationAsync(
		                applicationType: OpenIddictConstants.ApplicationTypes.Web,
		                name: swaggerClientId!,
		                type: OpenIddictConstants.ClientTypes.Public,
		                consentType: OpenIddictConstants.ConsentTypes.Implicit,
		                displayName: "Swagger Application",
		                secret: null,
		                grantTypes: new List<string> { OpenIddictConstants.GrantTypes.AuthorizationCode, },
		                scopes: commonScopes,
		                redirectUris: new List<string> { $"{swaggerRootUrl}/swagger/oauth2-redirect.html" },
		                clientUri: swaggerRootUrl.EnsureEndsWith('/') + "swagger",
		                logoUri: "/images/clients/swagger.svg"
		            );
		        }
		
		
		    }
		
		    private async Task CreateApplicationAsync(
		        [NotNull] string applicationType,
		        [NotNull] string name,
		        [NotNull] string type,
		        [NotNull] string consentType,
		        string displayName,
		        string? secret,
		        List<string> grantTypes,
		        List<string> scopes,
		        List<string>? redirectUris = null,
		        List<string>? postLogoutRedirectUris = null,
		        List<string>? permissions = null,
		        string? clientUri = null,
		        string? logoUri = null)
		    {
		        if (!string.IsNullOrEmpty(secret) && string.Equals(type, OpenIddictConstants.ClientTypes.Public,
		                StringComparison.OrdinalIgnoreCase))
		        {
		            throw new BusinessException(L["NoClientSecretCanBeSetForPublicApplications"]);
		        }
		
		        if (string.IsNullOrEmpty(secret) && string.Equals(type, OpenIddictConstants.ClientTypes.Confidential,
		                StringComparison.OrdinalIgnoreCase))
		        {
		            throw new BusinessException(L["TheClientSecretIsRequiredForConfidentialApplications"]);
		        }
		
		        var client = await _openIddictApplicationRepository.FindByClientIdAsync(name);
		
		        var application = new AbpApplicationDescriptor {
		            ApplicationType = applicationType,
		            ClientId = name,
		            ClientType = type,
		            ClientSecret = secret,
		            ConsentType = consentType,
		            DisplayName = displayName,
		            ClientUri = clientUri,
		            LogoUri = logoUri,
		        };
		
		        Check.NotNullOrEmpty(grantTypes, nameof(grantTypes));
		        Check.NotNullOrEmpty(scopes, nameof(scopes));
		
		        if (new[] { OpenIddictConstants.GrantTypes.AuthorizationCode, OpenIddictConstants.GrantTypes.Implicit }.All(
		                grantTypes.Contains))
		        {
		            application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeIdToken);
		
		            if (string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeIdTokenToken);
		                application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.CodeToken);
		            }
		        }
		
		        if (!redirectUris.IsNullOrEmpty() || !postLogoutRedirectUris.IsNullOrEmpty())
		        {
		            application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.EndSession);
		        }
		
		        var buildInGrantTypes = new[] {
		            OpenIddictConstants.GrantTypes.Implicit, OpenIddictConstants.GrantTypes.Password,
		            OpenIddictConstants.GrantTypes.AuthorizationCode, OpenIddictConstants.GrantTypes.ClientCredentials,
		            OpenIddictConstants.GrantTypes.DeviceCode, OpenIddictConstants.GrantTypes.RefreshToken
		        };
		
		        foreach (var grantType in grantTypes)
		        {
		            if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode);
		                application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.Code);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode ||
		                grantType == OpenIddictConstants.GrantTypes.Implicit)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Authorization);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.AuthorizationCode ||
		                grantType == OpenIddictConstants.GrantTypes.ClientCredentials ||
		                grantType == OpenIddictConstants.GrantTypes.Password ||
		                grantType == OpenIddictConstants.GrantTypes.RefreshToken ||
		                grantType == OpenIddictConstants.GrantTypes.DeviceCode)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Token);
		                application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Revocation);
		                application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.Introspection);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.ClientCredentials)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.ClientCredentials);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.Implicit)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.Implicit);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.Password)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.Password);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.RefreshToken)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.RefreshToken);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.DeviceCode)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.GrantTypes.DeviceCode);
		                application.Permissions.Add(OpenIddictConstants.Permissions.Endpoints.DeviceAuthorization);
		            }
		
		            if (grantType == OpenIddictConstants.GrantTypes.Implicit)
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.IdToken);
		                if (string.Equals(type, OpenIddictConstants.ClientTypes.Public, StringComparison.OrdinalIgnoreCase))
		                {
		                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.IdTokenToken);
		                    application.Permissions.Add(OpenIddictConstants.Permissions.ResponseTypes.Token);
		                }
		            }
		
		            if (!buildInGrantTypes.Contains(grantType))
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.Prefixes.GrantType + grantType);
		            }
		        }
		
		        var buildInScopes = new[] {
		            OpenIddictConstants.Permissions.Scopes.Address, OpenIddictConstants.Permissions.Scopes.Email,
		            OpenIddictConstants.Permissions.Scopes.Phone, OpenIddictConstants.Permissions.Scopes.Profile,
		            OpenIddictConstants.Permissions.Scopes.Roles
		        };
		
		        foreach (var scope in scopes)
		        {
		            if (buildInScopes.Contains(scope))
		            {
		                application.Permissions.Add(scope);
		            }
		            else
		            {
		                application.Permissions.Add(OpenIddictConstants.Permissions.Prefixes.Scope + scope);
		            }
		        }
		
		        if (!redirectUris.IsNullOrEmpty())
		        {
		            foreach (var redirectUri in redirectUris!.Where(redirectUri => !redirectUri.IsNullOrWhiteSpace()))
		            {
		                if (!Uri.TryCreate(redirectUri, UriKind.Absolute, out var uri) || !uri.IsWellFormedOriginalString())
		                {
		                    throw new BusinessException(L["InvalidRedirectUri", redirectUri]);
		                }
		
		                if (application.RedirectUris.All(x => x != uri))
		                {
		                    application.RedirectUris.Add(uri);
		                }
		            }
		            
		        }
		        
		        if (!postLogoutRedirectUris.IsNullOrEmpty())
		        {
		            foreach (var postLogoutRedirectUri in postLogoutRedirectUris!.Where(postLogoutRedirectUri => !postLogoutRedirectUri.IsNullOrWhiteSpace()))
		            {
		                if (!Uri.TryCreate(postLogoutRedirectUri, UriKind.Absolute, out var uri) ||
		                    !uri.IsWellFormedOriginalString())
		                {
		                    throw new BusinessException(L["InvalidPostLogoutRedirectUri", postLogoutRedirectUri]);
		                }
		
		                if (application.PostLogoutRedirectUris.All(x => x != uri))
		                {
		                    application.PostLogoutRedirectUris.Add(uri);
		                }
		            }
		        }
		
		        if (permissions != null)
		        {
		            await _permissionDataSeeder.SeedAsync(
		                ClientPermissionValueProvider.ProviderName,
		                name,
		                permissions,
		                null
		            );
		        }
		
		        if (client == null)
		        {
		            await _applicationManager.CreateAsync(application);
		            return;
		        }
		
		        if (!HasSameRedirectUris(client, application))
		        {
		            client.RedirectUris = JsonSerializer.Serialize(application.RedirectUris.Select(q => q.ToString().RemovePostFix("/")));
		            client.PostLogoutRedirectUris = JsonSerializer.Serialize(application.PostLogoutRedirectUris.Select(q => q.ToString().RemovePostFix("/")));
		
		            await _applicationManager.UpdateAsync(client.ToModel());
		        }
		
		        if (!HasSameScopes(client, application))
		        {
		            client.Permissions = JsonSerializer.Serialize(application.Permissions.Select(q => q.ToString()));
		            await _applicationManager.UpdateAsync(client.ToModel());
		        }
		    }
		
		    private bool HasSameRedirectUris(OpenIddictApplication existingClient, AbpApplicationDescriptor application)
		    {
		        return existingClient.RedirectUris == JsonSerializer.Serialize(application.RedirectUris.Select(q => q.ToString().RemovePostFix("/")));
		    }
		
		    private bool HasSameScopes(OpenIddictApplication existingClient, AbpApplicationDescriptor application)
		    {
		        return existingClient.Permissions == JsonSerializer.Serialize(application.Permissions.Select(q => q.ToString().TrimEnd('/')));
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\IOrderItemRepository.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Threading;
		using System.Threading.Tasks;
		using Volo.Abp.Domain.Repositories;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public partial interface IOrderItemRepository : IRepository<OrderItem, Guid>
		    {
		        Task<List<OrderItem>> GetListByOrderIdAsync(
		    Guid orderId,
		    string? sorting = null,
		    int maxResultCount = int.MaxValue,
		    int skipCount = 0,
		    CancellationToken cancellationToken = default
		);
		
		        Task<long> GetCountByOrderIdAsync(Guid orderId, CancellationToken cancellationToken = default);
		
		        Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesByOrderIdAsync(
		            Guid orderId,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default
		        );
		
		        Task<OrderItemWithNavigationProperties> GetWithNavigationPropertiesAsync(
		            Guid id,
		            CancellationToken cancellationToken = default
		        );
		
		        Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
		            string? filterText = null,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null,
		            Guid? productId = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default
		        );
		
		        Task<List<OrderItem>> GetListAsync(
		                    string? filterText = null,
		                    int? qtyMin = null,
		                    int? qtyMax = null,
		                    float? priceMin = null,
		                    float? priceMax = null,
		                    float? totalPriceMin = null,
		                    float? totalPriceMax = null,
		                    string? sorting = null,
		                    int maxResultCount = int.MaxValue,
		                    int skipCount = 0,
		                    CancellationToken cancellationToken = default
		                );
		
		        Task<long> GetCountAsync(
		            string? filterText = null,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null,
		            Guid? productId = null,
		            CancellationToken cancellationToken = default);
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\IOrderItemRepository.Extended.cs'>
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public partial interface IOrderItemRepository
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItem.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Products;
		using System;
		using System.Linq;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Volo.Abp.Domain.Entities;
		using Volo.Abp.Domain.Entities.Auditing;
		using Volo.Abp.MultiTenancy;
		using JetBrains.Annotations;
		
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemBase : FullAuditedEntity<Guid>, IMultiTenant
		    {
		        public virtual Guid OrderId { get; set; }
		
		        public virtual Guid? TenantId { get; set; }
		
		        public virtual int Qty { get; set; }
		
		        public virtual float Price { get; set; }
		
		        public virtual float TotalPrice { get; set; }
		
		        [CanBeNull]
		        public virtual string? ProductName { get; set; }
		        public Guid ProductId { get; set; }
		
		        protected OrderItemBase()
		        {
		
		        }
		
		        public OrderItemBase(Guid id, Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null)
		        {
		
		            Id = id;
		            OrderId = orderId;
		            Qty = qty;
		            Price = price;
		            TotalPrice = totalPrice;
		            ProductName = productName;
		            ProductId = productId;
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItem.Extended.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Products;
		using System;
		using System.Linq;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Volo.Abp.Domain.Entities;
		using Volo.Abp.Domain.Entities.Auditing;
		using Volo.Abp.MultiTenancy;
		using JetBrains.Annotations;
		
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItem : OrderItemBase
		    {
		        //<suite-custom-code-autogenerated>
		        protected OrderItem()
		        {
		
		        }
		
		        public OrderItem(Guid id, Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null)
		            : base(id, orderId, productId, qty, price, totalPrice, productName)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemManager.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Threading.Tasks;
		using JetBrains.Annotations;
		using Volo.Abp;
		using Volo.Abp.Domain.Repositories;
		using Volo.Abp.Domain.Services;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemManagerBase : DomainService
		    {
		        protected IOrderItemRepository _orderItemRepository;
		
		        public OrderItemManagerBase(IOrderItemRepository orderItemRepository)
		        {
		            _orderItemRepository = orderItemRepository;
		        }
		
		        public virtual async Task<OrderItem> CreateAsync(
		        Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null)
		        {
		            Check.NotNull(productId, nameof(productId));
		
		            var orderItem = new OrderItem(
		             GuidGenerator.Create(),
		             orderId, productId, qty, price, totalPrice, productName
		             );
		
		            return await _orderItemRepository.InsertAsync(orderItem);
		        }
		
		        public virtual async Task<OrderItem> UpdateAsync(
		            Guid id,
		            Guid orderId, Guid productId, int qty, float price, float totalPrice, string? productName = null
		        )
		        {
		            Check.NotNull(productId, nameof(productId));
		
		            var orderItem = await _orderItemRepository.GetAsync(id);
		
		            orderItem.OrderId = orderId;
		            orderItem.ProductId = productId;
		            orderItem.Qty = qty;
		            orderItem.Price = price;
		            orderItem.TotalPrice = totalPrice;
		            orderItem.ProductName = productName;
		
		            return await _orderItemRepository.UpdateAsync(orderItem);
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemManager.Extended.cs'><![CDATA[
		using System;
		using Volo.Abp.Domain.Services;
		using Volo.Abp.Domain.Repositories;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemManager : OrderItemManagerBase
		    {
		        //<suite-custom-code-autogenerated>
		        public OrderItemManager(IOrderItemRepository orderItemRepository)
		            : base(orderItemRepository)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemWithNavigationProperties.cs'>
		using ExampleAbpApplicationLayer.Products;
		
		using System;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class OrderItemWithNavigationPropertiesBase
		    {
		        public OrderItem OrderItem { get; set; } = null!;
		
		        public Product Product { get; set; } = null!;
		        
		
		        
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\OrderItems\OrderItemWithNavigationProperties.Extended.cs'>
		using ExampleAbpApplicationLayer.Products;
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class OrderItemWithNavigationProperties : OrderItemWithNavigationPropertiesBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\IOrderRepository.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using System.Collections.Generic;
		using System.Threading;
		using System.Threading.Tasks;
		using Volo.Abp.Domain.Repositories;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public partial interface IOrderRepository : IRepository<Order, Guid>
		    {
		        Task<OrderWithNavigationProperties> GetWithNavigationPropertiesAsync(
		    Guid id,
		    CancellationToken cancellationToken = default
		);
		
		        Task<List<OrderWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
		            string? filterText = null,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null,
		            Guid? identityUserId = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default
		        );
		
		        Task<List<Order>> GetListAsync(
		                    string? filterText = null,
		                    DateTime? orderDateMin = null,
		                    DateTime? orderDateMax = null,
		                    float? totalAmountMin = null,
		                    float? totalAmountMax = null,
		                    OrderStatus? status = null,
		                    string? sorting = null,
		                    int maxResultCount = int.MaxValue,
		                    int skipCount = 0,
		                    CancellationToken cancellationToken = default
		                );
		
		        Task<long> GetCountAsync(
		            string? filterText = null,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null,
		            Guid? identityUserId = null,
		            CancellationToken cancellationToken = default);
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\IOrderRepository.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public partial interface IOrderRepository
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\Order.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Enums.Orders;
		using Volo.Abp.Identity;
		using System;
		using System.Linq;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Volo.Abp.Domain.Entities;
		using Volo.Abp.Domain.Entities.Auditing;
		using Volo.Abp.MultiTenancy;
		using JetBrains.Annotations;
		
		using ExampleAbpApplicationLayer.OrderItems;
		
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderBase : FullAuditedAggregateRoot<Guid>, IMultiTenant
		    {
		        public virtual Guid? TenantId { get; set; }
		
		        public virtual DateTime OrderDate { get; set; }
		
		        public virtual float TotalAmount { get; set; }
		
		        public virtual OrderStatus Status { get; set; }
		        public Guid? IdentityUserId { get; set; }
		        public ICollection<OrderItem> OrderItems { get; private set; }
		
		        protected OrderBase()
		        {
		
		        }
		
		        public OrderBase(Guid id, Guid? identityUserId, DateTime orderDate, float totalAmount, OrderStatus status)
		        {
		
		            Id = id;
		            OrderDate = orderDate;
		            TotalAmount = totalAmount;
		            Status = status;
		            IdentityUserId = identityUserId;
		            OrderItems = new Collection<OrderItem>();
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\Order.Extended.cs'><![CDATA[
		using Volo.Abp.Identity;
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using System.Linq;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Volo.Abp.Domain.Entities;
		using Volo.Abp.Domain.Entities.Auditing;
		using Volo.Abp.MultiTenancy;
		using JetBrains.Annotations;
		
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class Order : OrderBase
		    {
		        //<suite-custom-code-autogenerated>
		        protected Order()
		        {
		
		        }
		
		        public Order(Guid id, Guid? identityUserId, DateTime orderDate, float totalAmount, OrderStatus status)
		            : base(id, identityUserId, orderDate, totalAmount, status)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\OrderDeletedEventHandler.cs'><![CDATA[
		using ExampleAbpApplicationLayer.OrderItems;
		
		using System.Threading.Tasks;
		using Volo.Abp;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Domain.Entities.Events;
		using Volo.Abp.EventBus;
		
		namespace ExampleAbpApplicationLayer.Orders;
		
		public class OrderDeletedEventHandler : ILocalEventHandler<EntityDeletedEventData<Order>>, ITransientDependency
		{
		    private readonly IOrderItemRepository _orderItemRepository;
		
		    public OrderDeletedEventHandler(IOrderItemRepository orderItemRepository)
		    {
		        _orderItemRepository = orderItemRepository;
		
		    }
		
		    public async Task HandleEventAsync(EntityDeletedEventData<Order> eventData)
		    {
		        if (eventData.Entity is not ISoftDelete softDeletedEntity)
		        {
		            return;
		        }
		
		        if (!softDeletedEntity.IsDeleted)
		        {
		            return;
		        }
		
		        try
		        {
		            await _orderItemRepository.DeleteManyAsync(await _orderItemRepository.GetListByOrderIdAsync(eventData.Entity.Id));
		
		        }
		        catch
		        {
		            //...
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\OrderManager.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Threading.Tasks;
		using JetBrains.Annotations;
		using Volo.Abp;
		using Volo.Abp.Domain.Repositories;
		using Volo.Abp.Domain.Services;
		using Volo.Abp.Data;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderManagerBase : DomainService
		    {
		        protected IOrderRepository _orderRepository;
		
		        public OrderManagerBase(IOrderRepository orderRepository)
		        {
		            _orderRepository = orderRepository;
		        }
		
		        public virtual async Task<Order> CreateAsync(
		        Guid? identityUserId, DateTime orderDate, float totalAmount, OrderStatus status)
		        {
		            Check.NotNull(orderDate, nameof(orderDate));
		            Check.NotNull(status, nameof(status));
		
		            var order = new Order(
		             GuidGenerator.Create(),
		             identityUserId, orderDate, totalAmount, status
		             );
		
		            return await _orderRepository.InsertAsync(order);
		        }
		
		        public virtual async Task<Order> UpdateAsync(
		            Guid id,
		            Guid? identityUserId, DateTime orderDate, float totalAmount, OrderStatus status, [CanBeNull] string? concurrencyStamp = null
		        )
		        {
		            Check.NotNull(orderDate, nameof(orderDate));
		            Check.NotNull(status, nameof(status));
		
		            var order = await _orderRepository.GetAsync(id);
		
		            order.IdentityUserId = identityUserId;
		            order.OrderDate = orderDate;
		            order.TotalAmount = totalAmount;
		            order.Status = status;
		
		            order.SetConcurrencyStampIfNotNull(concurrencyStamp);
		            return await _orderRepository.UpdateAsync(order);
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\OrderManager.Extended.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Enums.Orders;
		using ExampleAbpApplicationLayer.Enums.Orders;
		using System;
		using Volo.Abp.Domain.Services;
		using Volo.Abp.Domain.Repositories;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderManager : OrderManagerBase
		    {
		        //<suite-custom-code-autogenerated>
		        public OrderManager(IOrderRepository orderRepository)
		            : base(orderRepository)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\OrderWithNavigationProperties.cs'>
		using Volo.Abp.Identity;
		
		using System;
		using System.Collections.Generic;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrderWithNavigationPropertiesBase
		    {
		        public Order Order { get; set; } = null!;
		
		        public IdentityUser IdentityUser { get; set; } = null!;
		        
		
		        
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Orders\OrderWithNavigationProperties.Extended.cs'>
		using ExampleAbpApplicationLayer.Enums.Orders;
		using Volo.Abp.Identity;
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrderWithNavigationProperties : OrderWithNavigationPropertiesBase
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Products\IProductRepository.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Threading;
		using System.Threading.Tasks;
		using Volo.Abp.Domain.Repositories;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public partial interface IProductRepository : IRepository<Product, Guid>
		    {
		
		        Task DeleteAllAsync(
		            string? filterText = null,
		            string? name = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            bool? isActive = null,
		            CancellationToken cancellationToken = default);
		        Task<List<Product>> GetListAsync(
		                    string? filterText = null,
		                    string? name = null,
		                    float? priceMin = null,
		                    float? priceMax = null,
		                    bool? isActive = null,
		                    string? sorting = null,
		                    int maxResultCount = int.MaxValue,
		                    int skipCount = 0,
		                    CancellationToken cancellationToken = default
		                );
		
		        Task<long> GetCountAsync(
		            string? filterText = null,
		            string? name = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            bool? isActive = null,
		            CancellationToken cancellationToken = default);
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Products\IProductRepository.Extended.cs'>
		namespace ExampleAbpApplicationLayer.Products
		{
		    public partial interface IProductRepository
		    {
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Products\Product.cs'><![CDATA[
		using System;
		using System.Linq;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Volo.Abp.Domain.Entities;
		using Volo.Abp.Domain.Entities.Auditing;
		using Volo.Abp.MultiTenancy;
		using JetBrains.Annotations;
		
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductBase : FullAuditedAggregateRoot<Guid>, IMultiTenant
		    {
		        public virtual Guid? TenantId { get; set; }
		
		        [NotNull]
		        public virtual string Name { get; set; }
		
		        [CanBeNull]
		        public virtual string? Desc { get; set; }
		
		        public virtual float Price { get; set; }
		
		        public virtual bool IsActive { get; set; }
		
		        protected ProductBase()
		        {
		
		        }
		
		        public ProductBase(Guid id, string name, float price, bool isActive, string? desc = null)
		        {
		
		            Id = id;
		            Check.NotNull(name, nameof(name));
		            Name = name;
		            Price = price;
		            IsActive = isActive;
		            Desc = desc;
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Products\Product.Extended.cs'><![CDATA[
		using System;
		using System.Linq;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Volo.Abp.Domain.Entities;
		using Volo.Abp.Domain.Entities.Auditing;
		using Volo.Abp.MultiTenancy;
		using JetBrains.Annotations;
		
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class Product : ProductBase
		    {
		        //<suite-custom-code-autogenerated>
		        protected Product()
		        {
		
		        }
		
		        public Product(Guid id, string name, float price, bool isActive, string? desc = null)
		            : base(id, name, price, isActive, desc)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Products\ProductManager.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Threading.Tasks;
		using JetBrains.Annotations;
		using Volo.Abp;
		using Volo.Abp.Domain.Repositories;
		using Volo.Abp.Domain.Services;
		using Volo.Abp.Data;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductManagerBase : DomainService
		    {
		        protected IProductRepository _productRepository;
		
		        public ProductManagerBase(IProductRepository productRepository)
		        {
		            _productRepository = productRepository;
		        }
		
		        public virtual async Task<Product> CreateAsync(
		        string name, float price, bool isActive, string? desc = null)
		        {
		            Check.NotNullOrWhiteSpace(name, nameof(name));
		
		            var product = new Product(
		             GuidGenerator.Create(),
		             name, price, isActive, desc
		             );
		
		            return await _productRepository.InsertAsync(product);
		        }
		
		        public virtual async Task<Product> UpdateAsync(
		            Guid id,
		            string name, float price, bool isActive, string? desc = null, [CanBeNull] string? concurrencyStamp = null
		        )
		        {
		            Check.NotNullOrWhiteSpace(name, nameof(name));
		
		            var product = await _productRepository.GetAsync(id);
		
		            product.Name = name;
		            product.Price = price;
		            product.IsActive = isActive;
		            product.Desc = desc;
		
		            product.SetConcurrencyStampIfNotNull(concurrencyStamp);
		            return await _productRepository.UpdateAsync(product);
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Products\ProductManager.Extended.cs'><![CDATA[
		using System;
		using Volo.Abp.Domain.Services;
		using Volo.Abp.Domain.Repositories;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductManager : ProductManagerBase
		    {
		        //<suite-custom-code-autogenerated>
		        public ProductManager(IProductRepository productRepository)
		            : base(productRepository)
		        {
		        }
		        //</suite-custom-code-autogenerated>
		
		        //Write your custom code...
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Properties\AssemblyInfo.cs'>
		﻿using System.Runtime.CompilerServices;
		[assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.Domain.Tests")]
		[assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.TestBase")]</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Saas\SaasDataSeedContributor.cs'>
		﻿using System.Threading.Tasks;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.MultiTenancy;
		using Volo.Abp.Uow;
		using Volo.Saas.Editions;
		
		namespace ExampleAbpApplicationLayer.Saas;
		
		public class SaasDataSeedContributor : IDataSeedContributor, ITransientDependency
		{
		    private readonly IEditionDataSeeder _editionDataSeeder;
		    private readonly ICurrentTenant _currentTenant;
		
		    public SaasDataSeedContributor(IEditionDataSeeder editionDataSeeder, ICurrentTenant currentTenant)
		    {
		        _editionDataSeeder = editionDataSeeder;
		        _currentTenant = currentTenant;
		    }
		
		    [UnitOfWork]
		    public virtual async Task SeedAsync(DataSeedContext context)
		    {
		        using (_currentTenant.Change(context?.TenantId))
		        {
		            await _editionDataSeeder.CreateStandardEditionsAsync();
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Settings\ExampleAbpApplicationLayerSettingDefinitionProvider.cs'>
		﻿using Volo.Abp.Settings;
		
		namespace ExampleAbpApplicationLayer.Settings;
		
		public class ExampleAbpApplicationLayerSettingDefinitionProvider : SettingDefinitionProvider
		{
		    public override void Define(ISettingDefinitionContext context)
		    {
		        //Define your own settings here. Example:
		        //context.Add(new SettingDefinition(ExampleAbpApplicationLayerSettings.MySetting1));
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.Domain\Settings\ExampleAbpApplicationLayerSettings.cs'>
		﻿namespace ExampleAbpApplicationLayer.Settings;
		
		public static class ExampleAbpApplicationLayerSettings
		{
		    private const string Prefix = "ExampleAbpApplicationLayer";
		
		    //Add your own setting names here. Example:
		    //public const string MySetting1 = Prefix + ".MySetting1";
		}</file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\EntityFrameworkCoreExampleAbpApplicationLayerDbSchemaMigrator.cs'><![CDATA[
		﻿using System;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Microsoft.Extensions.DependencyInjection;
		using ExampleAbpApplicationLayer.Data;
		using Volo.Abp.DependencyInjection;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		public class EntityFrameworkCoreExampleAbpApplicationLayerDbSchemaMigrator
		    : IExampleAbpApplicationLayerDbSchemaMigrator, ITransientDependency
		{
		    private readonly IServiceProvider _serviceProvider;
		
		    public EntityFrameworkCoreExampleAbpApplicationLayerDbSchemaMigrator(IServiceProvider serviceProvider)
		    {
		        _serviceProvider = serviceProvider;
		    }
		
		    public async Task MigrateAsync()
		    {
		        /* We intentionally resolving the ExampleAbpApplicationLayerDbContext
		         * from IServiceProvider (instead of directly injecting it)
		         * to properly get the connection string of the current tenant in the
		         * current scope.
		         */
		
		        await _serviceProvider
		            .GetRequiredService<ExampleAbpApplicationLayerDbContext>()
		            .Database
		            .MigrateAsync();
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerDbContext.cs'><![CDATA[
		using ExampleAbpApplicationLayer.OrderItems;
		using ExampleAbpApplicationLayer.Orders;
		using ExampleAbpApplicationLayer.Products;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.AuditLogging.EntityFrameworkCore;
		using Volo.Abp.BackgroundJobs.EntityFrameworkCore;
		using Volo.Abp.BlobStoring.Database.EntityFrameworkCore;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore.Modeling;
		using Volo.Abp.FeatureManagement.EntityFrameworkCore;
		using Volo.Abp.Identity;
		using Volo.Abp.Identity.EntityFrameworkCore;
		using Volo.Abp.PermissionManagement.EntityFrameworkCore;
		using Volo.Abp.SettingManagement.EntityFrameworkCore;
		using Volo.Abp.OpenIddict.EntityFrameworkCore;
		using Volo.Abp.LanguageManagement.EntityFrameworkCore;
		using Volo.FileManagement.EntityFrameworkCore;
		using Volo.Chat.EntityFrameworkCore;
		using Volo.Abp.TextTemplateManagement.EntityFrameworkCore;
		using Volo.Saas.EntityFrameworkCore;
		using Volo.Saas.Editions;
		using Volo.Saas.Tenants;
		using Volo.Abp.Gdpr;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		[ReplaceDbContext(typeof(IIdentityProDbContext))]
		[ReplaceDbContext(typeof(ISaasDbContext))]
		[ConnectionStringName("Default")]
		public class ExampleAbpApplicationLayerDbContext :
		    AbpDbContext<ExampleAbpApplicationLayerDbContext>,
		    ISaasDbContext,
		    IIdentityProDbContext
		{
		    public DbSet<OrderItem> OrderItems { get; set; } = null!;
		    public DbSet<Order> Orders { get; set; } = null!;
		    public DbSet<Product> Products { get; set; } = null!;
		    /* Add DbSet properties for your Aggregate Roots / Entities here. */
		
		    #region Entities from the modules
		
		    /* Notice: We only implemented IIdentityProDbContext and ISaasDbContext
		     * and replaced them for this DbContext. This allows you to perform JOIN
		     * queries for the entities of these modules over the repositories easily. You
		     * typically don't need that for other modules. But, if you need, you can
		     * implement the DbContext interface of the needed module and use ReplaceDbContext
		     * attribute just like IIdentityProDbContext and ISaasDbContext.
		     *
		     * More info: Replacing a DbContext of a module ensures that the related module
		     * uses this DbContext on runtime. Otherwise, it will use its own DbContext class.
		     */
		
		    // Identity
		    public DbSet<IdentityUser> Users { get; set; }
		    public DbSet<IdentityRole> Roles { get; set; }
		    public DbSet<IdentityClaimType> ClaimTypes { get; set; }
		    public DbSet<OrganizationUnit> OrganizationUnits { get; set; }
		    public DbSet<IdentitySecurityLog> SecurityLogs { get; set; }
		    public DbSet<IdentityLinkUser> LinkUsers { get; set; }
		    public DbSet<IdentityUserDelegation> UserDelegations { get; set; }
		    public DbSet<IdentitySession> Sessions { get; set; }
		
		    // SaaS
		    public DbSet<Tenant> Tenants { get; set; }
		    public DbSet<Edition> Editions { get; set; }
		    public DbSet<TenantConnectionString> TenantConnectionStrings { get; set; }
		
		    #endregion
		
		    public ExampleAbpApplicationLayerDbContext(DbContextOptions<ExampleAbpApplicationLayerDbContext> options)
		        : base(options)
		    {
		
		    }
		
		    protected override void OnModelCreating(ModelBuilder builder)
		    {
		        base.OnModelCreating(builder);
		
		        /* Include modules to your migration db context */
		
		        builder.ConfigurePermissionManagement();
		        builder.ConfigureSettingManagement();
		        builder.ConfigureBackgroundJobs();
		        builder.ConfigureAuditLogging();
		        builder.ConfigureFeatureManagement();
		        builder.ConfigureIdentityPro();
		        builder.ConfigureOpenIddictPro();
		        builder.ConfigureLanguageManagement();
		        builder.ConfigureFileManagement();
		        builder.ConfigureSaas();
		        builder.ConfigureChat();
		        builder.ConfigureTextTemplateManagement();
		        builder.ConfigureGdpr();
		        builder.ConfigureBlobStoring();
		
		        /* Configure your own tables/entities inside here */
		
		        //builder.Entity<YourEntity>(b =>
		        //{
		        //    b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "YourEntities", ExampleAbpApplicationLayerConsts.DbSchema);
		        //    b.ConfigureByConvention(); //auto configure for the base class props
		        //    //...
		        //});
		
		        builder.Entity<OrderItem>(b =>
		                {
		                    b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "OrderItems", ExampleAbpApplicationLayerConsts.DbSchema);
		                    b.ConfigureByConvention();
		                    b.Property(x => x.TenantId).HasColumnName(nameof(OrderItem.TenantId));
		                    b.Property(x => x.Qty).HasColumnName(nameof(OrderItem.Qty));
		                    b.Property(x => x.Price).HasColumnName(nameof(OrderItem.Price));
		                    b.Property(x => x.TotalPrice).HasColumnName(nameof(OrderItem.TotalPrice));
		                    b.Property(x => x.ProductName).HasColumnName(nameof(OrderItem.ProductName));
		                    b.HasOne<Product>().WithMany().IsRequired().HasForeignKey(x => x.ProductId).OnDelete(DeleteBehavior.NoAction);
		                    b.HasOne<Order>().WithMany(x => x.OrderItems).HasForeignKey(x => x.OrderId).IsRequired().OnDelete(DeleteBehavior.Cascade);
		                });
		        builder.Entity<Product>(b =>
		                {
		                    b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "Products", ExampleAbpApplicationLayerConsts.DbSchema);
		                    b.ConfigureByConvention();
		                    b.Property(x => x.TenantId).HasColumnName(nameof(Product.TenantId));
		                    b.Property(x => x.Name).HasColumnName(nameof(Product.Name)).IsRequired();
		                    b.Property(x => x.Desc).HasColumnName(nameof(Product.Desc));
		                    b.Property(x => x.Price).HasColumnName(nameof(Product.Price));
		                    b.Property(x => x.IsActive).HasColumnName(nameof(Product.IsActive));
		                });
		        builder.Entity<Order>(b =>
		                {
		                    b.ToTable(ExampleAbpApplicationLayerConsts.DbTablePrefix + "Orders", ExampleAbpApplicationLayerConsts.DbSchema);
		                    b.ConfigureByConvention();
		                    b.Property(x => x.TenantId).HasColumnName(nameof(Order.TenantId));
		                    b.Property(x => x.OrderDate).HasColumnName(nameof(Order.OrderDate));
		                    b.Property(x => x.TotalAmount).HasColumnName(nameof(Order.TotalAmount));
		                    b.Property(x => x.Status).HasColumnName(nameof(Order.Status));
		                    b.HasOne<IdentityUser>().WithMany().HasForeignKey(x => x.IdentityUserId).OnDelete(DeleteBehavior.SetNull);
		                    b.HasMany(x => x.OrderItems).WithOne().HasForeignKey(x => x.OrderId).IsRequired().OnDelete(DeleteBehavior.Cascade);
		                });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerDbContextFactory.cs'><![CDATA[
		﻿using System;
		using System.IO;
		using Microsoft.EntityFrameworkCore;
		using Microsoft.EntityFrameworkCore.Design;
		using Microsoft.Extensions.Configuration;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		/* This class is needed for EF Core console commands
		 * (like Add-Migration and Update-Database commands) */
		public class ExampleAbpApplicationLayerDbContextFactory : IDesignTimeDbContextFactory<ExampleAbpApplicationLayerDbContext>
		{
		    public ExampleAbpApplicationLayerDbContext CreateDbContext(string[] args)
		    {
		        var configuration = BuildConfiguration();
		        
		        ExampleAbpApplicationLayerEfCoreEntityExtensionMappings.Configure();
		
		        var builder = new DbContextOptionsBuilder<ExampleAbpApplicationLayerDbContext>()
		            .UseSqlServer(configuration.GetConnectionString("Default"));
		        
		        return new ExampleAbpApplicationLayerDbContext(builder.Options);
		    }
		
		    private static IConfigurationRoot BuildConfiguration()
		    {
		        var builder = new ConfigurationBuilder()
		            .SetBasePath(Path.Combine(Directory.GetCurrentDirectory(), "../ExampleAbpApplicationLayer.DbMigrator/"))
		            .AddJsonFile("appsettings.json", optional: false);
		
		        return builder.Build();
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerEfCoreEntityExtensionMappings.cs'><![CDATA[
		﻿using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Identity;
		using Volo.Abp.ObjectExtending;
		using Volo.Abp.Threading;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		public static class ExampleAbpApplicationLayerEfCoreEntityExtensionMappings
		{
		    private static readonly OneTimeRunner OneTimeRunner = new OneTimeRunner();
		
		    public static void Configure()
		    {
		        ExampleAbpApplicationLayerGlobalFeatureConfigurator.Configure();
		        ExampleAbpApplicationLayerModuleExtensionConfigurator.Configure();
		
		        OneTimeRunner.Run(() =>
		        {
		                /* You can configure extra properties for the
		                 * entities defined in the modules used by your application.
		                 *
		                 * This class can be used to map these extra properties to table fields in the database.
		                 *
		                 * USE THIS CLASS ONLY TO CONFIGURE EF CORE RELATED MAPPING.
		                 * USE ExampleAbpApplicationLayerModuleExtensionConfigurator CLASS (in the Domain.Shared project)
		                 * FOR A HIGH LEVEL API TO DEFINE EXTRA PROPERTIES TO ENTITIES OF THE USED MODULES
		                 *
		                 * Example: Map a property to a table field:
		
		                     ObjectExtensionManager.Instance
		                         .MapEfCoreProperty<IdentityUser, string>(
		                             "MyProperty",
		                             (entityBuilder, propertyBuilder) =>
		                             {
		                                 propertyBuilder.HasMaxLength(128);
		                             }
		                         );
		
		                 * See the documentation for more:
		                 * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities
		                 */
		        });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreModule.cs'><![CDATA[
		using ExampleAbpApplicationLayer.OrderItems;
		
		using ExampleAbpApplicationLayer.Orders;
		
		using ExampleAbpApplicationLayer.Products;
		
		using System;
		using Microsoft.Extensions.DependencyInjection;
		using Volo.Abp.Uow;
		using Volo.Abp.AuditLogging.EntityFrameworkCore;
		using Volo.Abp.BackgroundJobs.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore.SqlServer;
		using Volo.Abp.FeatureManagement.EntityFrameworkCore;
		using Volo.Abp.Identity.EntityFrameworkCore;
		using Volo.Abp.OpenIddict.EntityFrameworkCore;
		using Volo.Abp.Modularity;
		using Volo.Abp.PermissionManagement.EntityFrameworkCore;
		using Volo.Abp.SettingManagement.EntityFrameworkCore;
		using Volo.Abp.BlobStoring.Database.EntityFrameworkCore;
		using Volo.Abp.LanguageManagement.EntityFrameworkCore;
		using Volo.FileManagement.EntityFrameworkCore;
		using Volo.Abp.TextTemplateManagement.EntityFrameworkCore;
		using Volo.Saas.EntityFrameworkCore;
		using Volo.Abp.Gdpr;
		using Volo.Chat.EntityFrameworkCore;
		using Volo.Abp.Studio;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerDomainModule),
		    typeof(AbpPermissionManagementEntityFrameworkCoreModule),
		    typeof(AbpSettingManagementEntityFrameworkCoreModule),
		    typeof(AbpEntityFrameworkCoreSqlServerModule),
		    typeof(AbpBackgroundJobsEntityFrameworkCoreModule),
		    typeof(AbpAuditLoggingEntityFrameworkCoreModule),
		    typeof(AbpFeatureManagementEntityFrameworkCoreModule),
		    typeof(AbpIdentityProEntityFrameworkCoreModule),
		    typeof(AbpOpenIddictProEntityFrameworkCoreModule),
		    typeof(LanguageManagementEntityFrameworkCoreModule),
		    typeof(FileManagementEntityFrameworkCoreModule),
		    typeof(SaasEntityFrameworkCoreModule),
		    typeof(ChatEntityFrameworkCoreModule),
		    typeof(TextTemplateManagementEntityFrameworkCoreModule),
		    typeof(AbpGdprEntityFrameworkCoreModule),
		    typeof(BlobStoringDatabaseEntityFrameworkCoreModule)
		    )]
		public class ExampleAbpApplicationLayerEntityFrameworkCoreModule : AbpModule
		{
		    public override void PreConfigureServices(ServiceConfigurationContext context)
		    {
		
		        ExampleAbpApplicationLayerEfCoreEntityExtensionMappings.Configure();
		    }
		
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        context.Services.AddAbpDbContext<ExampleAbpApplicationLayerDbContext>(options =>
		        {
		            /* Remove "includeAllEntities: true" to create
		             * default repositories only for aggregate roots */
		            options.AddDefaultRepositories(includeAllEntities: true);
		            options.AddRepository<Product, Products.EfCoreProductRepository>();
		
		            options.AddRepository<Order, Orders.EfCoreOrderRepository>();
		
		            options.AddRepository<OrderItem, OrderItems.EfCoreOrderItemRepository>();
		
		        });
		
		        if (AbpStudioAnalyzeHelper.IsInAnalyzeMode)
		        {
		            return;
		        }
		
		        Configure<AbpDbContextOptions>(options =>
		        {
		            /* The main point to change your DBMS.
		             * See also ExampleAbpApplicationLayerDbContextFactory for EF Core tooling. */
		
		            options.UseSqlServer();
		
		        });
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.abppkg'>
		{
		  "role": "lib.ef"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.abppkg.analyze.json'><![CDATA[
		{
		  "name": "ExampleAbpApplicationLayer.EntityFrameworkCore",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer.EntityFrameworkCore",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Domain",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerDomainModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.EntityFrameworkCore",
		          "namespace": "Volo.Abp.PermissionManagement.EntityFrameworkCore",
		          "name": "AbpPermissionManagementEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.EntityFrameworkCore",
		          "namespace": "Volo.Abp.SettingManagement.EntityFrameworkCore",
		          "name": "AbpSettingManagementEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore.SqlServer",
		          "namespace": "Volo.Abp.EntityFrameworkCore.SqlServer",
		          "name": "AbpEntityFrameworkCoreSqlServerModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.BackgroundJobs.EntityFrameworkCore",
		          "namespace": "Volo.Abp.BackgroundJobs.EntityFrameworkCore",
		          "name": "AbpBackgroundJobsEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.EntityFrameworkCore",
		          "namespace": "Volo.Abp.AuditLogging.EntityFrameworkCore",
		          "name": "AbpAuditLoggingEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.EntityFrameworkCore",
		          "namespace": "Volo.Abp.FeatureManagement.EntityFrameworkCore",
		          "name": "AbpFeatureManagementEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.EntityFrameworkCore",
		          "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
		          "name": "AbpIdentityProEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.EntityFrameworkCore",
		          "namespace": "Volo.Abp.OpenIddict.EntityFrameworkCore",
		          "name": "AbpOpenIddictProEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.EntityFrameworkCore",
		          "namespace": "Volo.Abp.LanguageManagement.EntityFrameworkCore",
		          "name": "LanguageManagementEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.EntityFrameworkCore",
		          "namespace": "Volo.Abp.TextTemplateManagement.EntityFrameworkCore",
		          "name": "TextTemplateManagementEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.EntityFrameworkCore",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprEntityFrameworkCoreModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.BlobStoring.Database.EntityFrameworkCore",
		          "namespace": "Volo.Abp.BlobStoring.Database.EntityFrameworkCore",
		          "name": "BlobStoringDatabaseEntityFrameworkCoreModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerEntityFrameworkCoreModule",
		      "summary": null
		    },
		    {
		      "namespace": "ExampleAbpApplicationLayer.EntityFrameworkCore",
		      "connectionStringName": "Default",
		      "databaseTables": [],
		      "replacedDbContexts": [
		        {
		          "name": "ISaasDbContext",
		          "namespace": "Volo.Saas.EntityFrameworkCore",
		          "declaringAssemblyName": "Volo.Saas.EntityFrameworkCore",
		          "fullName": "Volo.Saas.EntityFrameworkCore.ISaasDbContext"
		        },
		        {
		          "name": "IIdentityProDbContext",
		          "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.EntityFrameworkCore",
		          "fullName": "Volo.Abp.Identity.EntityFrameworkCore.IIdentityProDbContext"
		        }
		      ],
		      "modelBuilderExtensionMethods": [],
		      "implementingInterfaces": [
		        {
		          "name": "IInfrastructure<IServiceProvider>",
		          "namespace": "Microsoft.EntityFrameworkCore.Infrastructure",
		          "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
		          "fullName": "Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<IServiceProvider>"
		        },
		        {
		          "name": "IDbContextDependencies",
		          "namespace": "Microsoft.EntityFrameworkCore.Internal",
		          "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
		          "fullName": "Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies"
		        },
		        {
		          "name": "IDbSetCache",
		          "namespace": "Microsoft.EntityFrameworkCore.Internal",
		          "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
		          "fullName": "Microsoft.EntityFrameworkCore.Internal.IDbSetCache"
		        },
		        {
		          "name": "IDbContextPoolable",
		          "namespace": "Microsoft.EntityFrameworkCore.Internal",
		          "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
		          "fullName": "Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable"
		        },
		        {
		          "name": "IResettableService",
		          "namespace": "Microsoft.EntityFrameworkCore.Infrastructure",
		          "declaringAssemblyName": "Microsoft.EntityFrameworkCore",
		          "fullName": "Microsoft.EntityFrameworkCore.Infrastructure.IResettableService"
		        },
		        {
		          "name": "IDisposable",
		          "namespace": "System",
		          "declaringAssemblyName": "System.Private.CoreLib",
		          "fullName": "System.IDisposable"
		        },
		        {
		          "name": "IAsyncDisposable",
		          "namespace": "System",
		          "declaringAssemblyName": "System.Private.CoreLib",
		          "fullName": "System.IAsyncDisposable"
		        },
		        {
		          "name": "IAbpEfCoreDbContext",
		          "namespace": "Volo.Abp.EntityFrameworkCore",
		          "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore",
		          "fullName": "Volo.Abp.EntityFrameworkCore.IAbpEfCoreDbContext"
		        },
		        {
		          "name": "IEfCoreDbContext",
		          "namespace": "Volo.Abp.EntityFrameworkCore",
		          "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore",
		          "fullName": "Volo.Abp.EntityFrameworkCore.IEfCoreDbContext"
		        },
		        {
		          "name": "IAbpEfCoreDbFunctionContext",
		          "namespace": "Volo.Abp.EntityFrameworkCore.GlobalFilters",
		          "declaringAssemblyName": "Volo.Abp.EntityFrameworkCore",
		          "fullName": "Volo.Abp.EntityFrameworkCore.GlobalFilters.IAbpEfCoreDbFunctionContext"
		        },
		        {
		          "name": "ITransientDependency",
		          "namespace": "Volo.Abp.DependencyInjection",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.DependencyInjection.ITransientDependency"
		        },
		        {
		          "name": "IIdentityProDbContext",
		          "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.EntityFrameworkCore",
		          "fullName": "Volo.Abp.Identity.EntityFrameworkCore.IIdentityProDbContext"
		        },
		        {
		          "name": "IIdentityDbContext",
		          "namespace": "Volo.Abp.Identity.EntityFrameworkCore",
		          "declaringAssemblyName": "Volo.Abp.Identity.EntityFrameworkCore",
		          "fullName": "Volo.Abp.Identity.EntityFrameworkCore.IIdentityDbContext"
		        }
		      ],
		      "contentType": "efCoreDbContext",
		      "name": "ExampleAbpApplicationLayerDbContext",
		      "summary": null
		    }
		  ]
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.EntityFrameworkCore.SqlServer" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.PermissionManagement.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.BackgroundJobs.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.BlobStoring.Database.EntityFrameworkCore" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Identity.Pro.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.EntityFrameworkCore" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.EntityFrameworkCore" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.5">
		      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		      <PrivateAssets>compile; contentFiles; build; buildMultitargeting; buildTransitive; analyzers; native</PrivateAssets>
		    </PackageReference>
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\OrderItems\EfCoreOrderItemRepository.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Products;
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Linq.Dynamic.Core;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public abstract class EfCoreOrderItemRepositoryBase : EfCoreRepository<ExampleAbpApplicationLayerDbContext, OrderItem, Guid>
		    {
		        public EfCoreOrderItemRepositoryBase(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
		            : base(dbContextProvider)
		        {
		
		        }
		
		        public virtual async Task<List<OrderItem>> GetListByOrderIdAsync(
		           Guid orderId,
		           string? sorting = null,
		           int maxResultCount = int.MaxValue,
		           int skipCount = 0,
		           CancellationToken cancellationToken = default)
		        {
		            var query = (await GetQueryableAsync()).Where(x => x.OrderId == orderId);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(false) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        public virtual async Task<long> GetCountByOrderIdAsync(Guid orderId, CancellationToken cancellationToken = default)
		        {
		            return await (await GetQueryableAsync()).Where(x => x.OrderId == orderId).CountAsync(cancellationToken);
		        }
		
		        public virtual async Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesByOrderIdAsync(
		    Guid orderId,
		    string? sorting = null,
		    int maxResultCount = int.MaxValue,
		    int skipCount = 0,
		    CancellationToken cancellationToken = default)
		        {
		            var query = await GetQueryForNavigationPropertiesAsync();
		            query = query.Where(x => x.OrderItem.OrderId == orderId);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(true) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        public virtual async Task<OrderItemWithNavigationProperties> GetWithNavigationPropertiesAsync(Guid id, CancellationToken cancellationToken = default)
		        {
		            var dbContext = await GetDbContextAsync();
		
		            return (await GetDbSetAsync()).Where(b => b.Id == id)
		                .Select(orderItem => new OrderItemWithNavigationProperties
		                {
		                    OrderItem = orderItem,
		                    Product = dbContext.Set<Product>().FirstOrDefault(c => c.Id == orderItem.ProductId)
		                }).FirstOrDefault();
		        }
		
		        public virtual async Task<List<OrderItemWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
		            string? filterText = null,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null,
		            Guid? productId = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default)
		        {
		            var query = await GetQueryForNavigationPropertiesAsync();
		            query = ApplyFilter(query, filterText, qtyMin, qtyMax, priceMin, priceMax, totalPriceMin, totalPriceMax, productId);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(true) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        protected virtual async Task<IQueryable<OrderItemWithNavigationProperties>> GetQueryForNavigationPropertiesAsync()
		        {
		            return from orderItem in (await GetDbSetAsync())
		                   join product in (await GetDbContextAsync()).Set<Product>() on orderItem.ProductId equals product.Id into products
		                   from product in products.DefaultIfEmpty()
		                   select new OrderItemWithNavigationProperties
		                   {
		                       OrderItem = orderItem,
		                       Product = product
		                   };
		        }
		
		        protected virtual IQueryable<OrderItemWithNavigationProperties> ApplyFilter(
		            IQueryable<OrderItemWithNavigationProperties> query,
		            string? filterText,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null,
		            Guid? productId = null)
		        {
		            return query
		                .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => e.OrderItem.ProductName!.Contains(filterText!))
		                    .WhereIf(qtyMin.HasValue, e => e.OrderItem.Qty >= qtyMin!.Value)
		                    .WhereIf(qtyMax.HasValue, e => e.OrderItem.Qty <= qtyMax!.Value)
		                    .WhereIf(priceMin.HasValue, e => e.OrderItem.Price >= priceMin!.Value)
		                    .WhereIf(priceMax.HasValue, e => e.OrderItem.Price <= priceMax!.Value)
		                    .WhereIf(totalPriceMin.HasValue, e => e.OrderItem.TotalPrice >= totalPriceMin!.Value)
		                    .WhereIf(totalPriceMax.HasValue, e => e.OrderItem.TotalPrice <= totalPriceMax!.Value)
		                    .WhereIf(productId != null && productId != Guid.Empty, e => e.Product != null && e.Product.Id == productId);
		        }
		
		        public virtual async Task<List<OrderItem>> GetListAsync(
		            string? filterText = null,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default)
		        {
		            var query = ApplyFilter((await GetQueryableAsync()), filterText, qtyMin, qtyMax, priceMin, priceMax, totalPriceMin, totalPriceMax);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderItemConsts.GetDefaultSorting(false) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        public virtual async Task<long> GetCountAsync(
		            string? filterText = null,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null,
		            Guid? productId = null,
		            CancellationToken cancellationToken = default)
		        {
		            var query = await GetQueryForNavigationPropertiesAsync();
		            query = ApplyFilter(query, filterText, qtyMin, qtyMax, priceMin, priceMax, totalPriceMin, totalPriceMax, productId);
		            return await query.LongCountAsync(GetCancellationToken(cancellationToken));
		        }
		
		        protected virtual IQueryable<OrderItem> ApplyFilter(
		            IQueryable<OrderItem> query,
		            string? filterText = null,
		            int? qtyMin = null,
		            int? qtyMax = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            float? totalPriceMin = null,
		            float? totalPriceMax = null)
		        {
		            return query
		                    .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => e.ProductName!.Contains(filterText!))
		                    .WhereIf(qtyMin.HasValue, e => e.Qty >= qtyMin!.Value)
		                    .WhereIf(qtyMax.HasValue, e => e.Qty <= qtyMax!.Value)
		                    .WhereIf(priceMin.HasValue, e => e.Price >= priceMin!.Value)
		                    .WhereIf(priceMax.HasValue, e => e.Price <= priceMax!.Value)
		                    .WhereIf(totalPriceMin.HasValue, e => e.TotalPrice >= totalPriceMin!.Value)
		                    .WhereIf(totalPriceMax.HasValue, e => e.TotalPrice <= totalPriceMax!.Value);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\OrderItems\EfCoreOrderItemRepository.Extended.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Linq.Dynamic.Core;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.OrderItems
		{
		    public class EfCoreOrderItemRepository : EfCoreOrderItemRepositoryBase, IOrderItemRepository
		    {
		        public EfCoreOrderItemRepository(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
		            : base(dbContextProvider)
		        {
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\Orders\EfCoreOrderRepository.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Enums.Orders;
		using Volo.Abp.Identity;
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Linq.Dynamic.Core;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class EfCoreOrderRepositoryBase : EfCoreRepository<ExampleAbpApplicationLayerDbContext, Order, Guid>
		    {
		        public EfCoreOrderRepositoryBase(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
		            : base(dbContextProvider)
		        {
		
		        }
		
		        public virtual async Task<OrderWithNavigationProperties> GetWithNavigationPropertiesAsync(Guid id, CancellationToken cancellationToken = default)
		        {
		            var dbContext = await GetDbContextAsync();
		
		            return (await GetDbSetAsync()).Where(b => b.Id == id)
		                .Select(order => new OrderWithNavigationProperties
		                {
		                    Order = order,
		                    IdentityUser = dbContext.Set<IdentityUser>().FirstOrDefault(c => c.Id == order.IdentityUserId)
		                }).FirstOrDefault();
		        }
		
		        public virtual async Task<List<OrderWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
		            string? filterText = null,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null,
		            Guid? identityUserId = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default)
		        {
		            var query = await GetQueryForNavigationPropertiesAsync();
		            query = ApplyFilter(query, filterText, orderDateMin, orderDateMax, totalAmountMin, totalAmountMax, status, identityUserId);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderConsts.GetDefaultSorting(true) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        protected virtual async Task<IQueryable<OrderWithNavigationProperties>> GetQueryForNavigationPropertiesAsync()
		        {
		            return from order in (await GetDbSetAsync())
		                   join identityUser in (await GetDbContextAsync()).Set<IdentityUser>() on order.IdentityUserId equals identityUser.Id into identityUsers
		                   from identityUser in identityUsers.DefaultIfEmpty()
		                   select new OrderWithNavigationProperties
		                   {
		                       Order = order,
		                       IdentityUser = identityUser
		                   };
		        }
		
		        protected virtual IQueryable<OrderWithNavigationProperties> ApplyFilter(
		            IQueryable<OrderWithNavigationProperties> query,
		            string? filterText,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null,
		            Guid? identityUserId = null)
		        {
		            return query
		                .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => true)
		                    .WhereIf(orderDateMin.HasValue, e => e.Order.OrderDate >= orderDateMin!.Value)
		                    .WhereIf(orderDateMax.HasValue, e => e.Order.OrderDate <= orderDateMax!.Value)
		                    .WhereIf(totalAmountMin.HasValue, e => e.Order.TotalAmount >= totalAmountMin!.Value)
		                    .WhereIf(totalAmountMax.HasValue, e => e.Order.TotalAmount <= totalAmountMax!.Value)
		                    .WhereIf(status.HasValue, e => e.Order.Status == status)
		                    .WhereIf(identityUserId != null && identityUserId != Guid.Empty, e => e.IdentityUser != null && e.IdentityUser.Id == identityUserId);
		        }
		
		        public virtual async Task<List<Order>> GetListAsync(
		            string? filterText = null,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default)
		        {
		            var query = ApplyFilter((await GetQueryableAsync()), filterText, orderDateMin, orderDateMax, totalAmountMin, totalAmountMax, status);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? OrderConsts.GetDefaultSorting(false) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        public virtual async Task<long> GetCountAsync(
		            string? filterText = null,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null,
		            Guid? identityUserId = null,
		            CancellationToken cancellationToken = default)
		        {
		            var query = await GetQueryForNavigationPropertiesAsync();
		            query = ApplyFilter(query, filterText, orderDateMin, orderDateMax, totalAmountMin, totalAmountMax, status, identityUserId);
		            return await query.LongCountAsync(GetCancellationToken(cancellationToken));
		        }
		
		        protected virtual IQueryable<Order> ApplyFilter(
		            IQueryable<Order> query,
		            string? filterText = null,
		            DateTime? orderDateMin = null,
		            DateTime? orderDateMax = null,
		            float? totalAmountMin = null,
		            float? totalAmountMax = null,
		            OrderStatus? status = null)
		        {
		            return query
		                    .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => true)
		                    .WhereIf(orderDateMin.HasValue, e => e.OrderDate >= orderDateMin!.Value)
		                    .WhereIf(orderDateMax.HasValue, e => e.OrderDate <= orderDateMax!.Value)
		                    .WhereIf(totalAmountMin.HasValue, e => e.TotalAmount >= totalAmountMin!.Value)
		                    .WhereIf(totalAmountMax.HasValue, e => e.TotalAmount <= totalAmountMax!.Value)
		                    .WhereIf(status.HasValue, e => e.Status == status);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\Orders\EfCoreOrderRepository.Extended.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Linq.Dynamic.Core;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class EfCoreOrderRepository : EfCoreOrderRepositoryBase, IOrderRepository
		    {
		        public EfCoreOrderRepository(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
		            : base(dbContextProvider)
		        {
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\Products\EfCoreProductRepository.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Linq.Dynamic.Core;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class EfCoreProductRepositoryBase : EfCoreRepository<ExampleAbpApplicationLayerDbContext, Product, Guid>
		    {
		        public EfCoreProductRepositoryBase(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
		            : base(dbContextProvider)
		        {
		
		        }
		
		        public virtual async Task DeleteAllAsync(
		            string? filterText = null,
		                        string? name = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            bool? isActive = null,
		            CancellationToken cancellationToken = default)
		        {
		
		            var query = await GetQueryableAsync();
		
		            query = ApplyFilter(query, filterText, name, priceMin, priceMax, isActive);
		
		            var ids = query.Select(x => x.Id);
		            await DeleteManyAsync(ids, cancellationToken: GetCancellationToken(cancellationToken));
		        }
		
		        public virtual async Task<List<Product>> GetListAsync(
		            string? filterText = null,
		            string? name = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            bool? isActive = null,
		            string? sorting = null,
		            int maxResultCount = int.MaxValue,
		            int skipCount = 0,
		            CancellationToken cancellationToken = default)
		        {
		            var query = ApplyFilter((await GetQueryableAsync()), filterText, name, priceMin, priceMax, isActive);
		            query = query.OrderBy(string.IsNullOrWhiteSpace(sorting) ? ProductConsts.GetDefaultSorting(false) : sorting);
		            return await query.PageBy(skipCount, maxResultCount).ToListAsync(cancellationToken);
		        }
		
		        public virtual async Task<long> GetCountAsync(
		            string? filterText = null,
		            string? name = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            bool? isActive = null,
		            CancellationToken cancellationToken = default)
		        {
		            var query = ApplyFilter((await GetDbSetAsync()), filterText, name, priceMin, priceMax, isActive);
		            return await query.LongCountAsync(GetCancellationToken(cancellationToken));
		        }
		
		        protected virtual IQueryable<Product> ApplyFilter(
		            IQueryable<Product> query,
		            string? filterText = null,
		            string? name = null,
		            float? priceMin = null,
		            float? priceMax = null,
		            bool? isActive = null)
		        {
		            return query
		                    .WhereIf(!string.IsNullOrWhiteSpace(filterText), e => e.Name!.Contains(filterText!))
		                    .WhereIf(!string.IsNullOrWhiteSpace(name), e => e.Name.Contains(name))
		                    .WhereIf(priceMin.HasValue, e => e.Price >= priceMin!.Value)
		                    .WhereIf(priceMax.HasValue, e => e.Price <= priceMax!.Value)
		                    .WhereIf(isActive.HasValue, e => e.IsActive == isActive);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\Products\EfCoreProductRepository.Extended.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Linq.Dynamic.Core;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.EntityFrameworkCore;
		using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class EfCoreProductRepository : EfCoreProductRepositoryBase, IProductRepository
		    {
		        public EfCoreProductRepository(IDbContextProvider<ExampleAbpApplicationLayerDbContext> dbContextProvider)
		            : base(dbContextProvider)
		        {
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.EntityFrameworkCore\Properties\AssemblyInfo.cs'>
		﻿using System.Runtime.CompilerServices;
		[assembly:InternalsVisibleToAttribute("ExampleAbpApplicationLayer.EntityFrameworkCore.Tests")]</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.abppkg'>
		{
		  "role": "lib.http-api-client"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.abppkg.analyze.json'>
		{
		  "name": "ExampleAbpApplicationLayer.HttpApi.Client",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Application.Contracts",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.HttpApi.Client",
		          "namespace": "Volo.Abp.PermissionManagement",
		          "name": "AbpPermissionManagementHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.HttpApi.Client",
		          "namespace": "Volo.Abp.FeatureManagement",
		          "name": "AbpFeatureManagementHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.HttpApi.Client",
		          "namespace": "Volo.Abp.Identity",
		          "name": "AbpIdentityHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.HttpApi.Client",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountAdminHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.HttpApi.Client",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountPublicHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.HttpApi.Client",
		          "namespace": "Volo.Abp.AuditLogging",
		          "name": "AbpAuditLoggingHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.HttpApi.Client",
		          "namespace": "Volo.Abp.OpenIddict",
		          "name": "AbpOpenIddictProHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.HttpApi.Client",
		          "namespace": "Volo.Abp.TextTemplateManagement",
		          "name": "TextTemplateManagementHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.HttpApi.Client",
		          "namespace": "Volo.Abp.LanguageManagement",
		          "name": "LanguageManagementHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.HttpApi.Client",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprHttpApiClientModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.HttpApi.Client",
		          "namespace": "Volo.Abp.SettingManagement",
		          "name": "AbpSettingManagementHttpApiClientModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerHttpApiClientModule",
		      "summary": null
		    }
		  ]
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.csproj'><![CDATA[
		﻿<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.PermissionManagement.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.HttpApi.Client" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Identity.Pro.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Admin.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Public.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.Host.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.HttpApi.Client" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LeptonXTheme.Management.HttpApi.Client" Version="4.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <EmbeddedResource Include="**\*generate-proxy.json" />
		    <Content Remove="**\*generate-proxy.json" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayerHttpApiClientModule.cs'><![CDATA[
		﻿using Microsoft.Extensions.DependencyInjection;
		using Volo.Abp.Account;
		using Volo.Abp.Modularity;
		using Volo.Abp.PermissionManagement;
		using Volo.Abp.SettingManagement;
		using Volo.Abp.VirtualFileSystem;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Identity;
		using Volo.Abp.AuditLogging;
		using Volo.Abp.LanguageManagement;
		using Volo.FileManagement;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Saas.Host;
		using Volo.Abp.Gdpr;
		using Volo.Abp.OpenIddict;
		using Volo.Chat;
		using Volo.Abp.LeptonXTheme.Management;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerApplicationContractsModule),
		    typeof(AbpPermissionManagementHttpApiClientModule),
		    typeof(AbpFeatureManagementHttpApiClientModule),
		    typeof(AbpIdentityHttpApiClientModule),
		    typeof(AbpAccountAdminHttpApiClientModule),
		    typeof(AbpAccountPublicHttpApiClientModule),
		    typeof(SaasHostHttpApiClientModule),
		    typeof(AbpAuditLoggingHttpApiClientModule),
		    typeof(AbpOpenIddictProHttpApiClientModule),
		    typeof(TextTemplateManagementHttpApiClientModule),
		    typeof(LanguageManagementHttpApiClientModule),
		    typeof(FileManagementHttpApiClientModule),
		    typeof(AbpGdprHttpApiClientModule),
		    typeof(ChatHttpApiClientModule),
		    typeof(LeptonXThemeManagementHttpApiClientModule),
		    typeof(AbpSettingManagementHttpApiClientModule)
		)]
		public class ExampleAbpApplicationLayerHttpApiClientModule : AbpModule
		{
		    public const string RemoteServiceName = "Default";
		
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        context.Services.AddHttpClientProxies(
		            typeof(ExampleAbpApplicationLayerApplicationContractsModule).Assembly,
		            RemoteServiceName
		        );
		
		        Configure<AbpVirtualFileSystemOptions>(options =>
		        {
		            options.FileSets.AddEmbedded<ExampleAbpApplicationLayerHttpApiClientModule>();
		        });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\abp.resourcemapping.js'>
		module.exports = {
		    aliases: {
		
		    },
		    clean: [
		
		    ],
		    mappings: {
		
		    }
		};</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\appsettings.Development.json'>
		{
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\appsettings.json'>
		{
		  "App": {
		    "SelfUrl": "https://localhost:44302",
		    "AngularUrl": "http://localhost:4200",
		    "CorsOrigins": "https://*.ExampleAbpApplicationLayer.com,http://localhost:4200",
		    "RedirectAllowedUrls": "http://localhost:4200",
		    "DisablePII": false,
		    "HealthCheckUrl": "/health-status"
		  },
		  "ConnectionStrings": {
		    "Default": "Server=localhost;Database=ExampleAbpApplicationLayer;Trusted_Connection=True;TrustServerCertificate=true"
		  },
		  "AuthServer": {
		    "Authority": "https://localhost:44302",
		    "RequireHttpsMetadata": true,
		    "SwaggerClientId": "ExampleAbpApplicationLayer_Swagger",
		    "CertificatePassPhrase": "64d11a84-cb9a-4241-aa49-4d2e1146e0b5"
		  },
		  "StringEncryption": {
		    "DefaultPassPhrase": "SpOOeQFpH5eH4TMY"
		  }}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\appsettings.secrets.json'>
		{
		"AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Dockerfile'>
		FROM mcr.microsoft.com/dotnet/aspnet:9.0
		COPY bin/Release/net9.0/publish/ app/
		WORKDIR /app
		ENV ASPNETCORE_URLS=http://+:80
		ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.HttpApi.Host.dll"]</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Dockerfile.local'>
		FROM mcr.microsoft.com/dotnet/aspnet:9.0  AS base
		USER $APP_UID
		EXPOSE 8080
		EXPOSE 8081
		
		COPY bin/Release/net9.0/publish/ app/
		WORKDIR /app
		
		FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
		WORKDIR /src
		RUN dotnet dev-certs https -v -ep openiddict.pfx -p 64d11a84-cb9a-4241-aa49-4d2e1146e0b5
		RUN chmod 644 openiddict.pfx
		
		FROM base AS final
		WORKDIR /app
		COPY --from=build /src .
		
		ENTRYPOINT ["dotnet", "ExampleAbpApplicationLayer.HttpApi.Host.dll"]</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayer.HttpApi.Host.abppkg'>
		{
		  "role": "host.http-api"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayer.HttpApi.Host.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk.Web">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		    <PreserveCompilationReferences>true</PreserveCompilationReferences>
		  </PropertyGroup>
		
		  <PropertyGroup Condition=" '$(RunConfiguration)' == 'ExampleAbpApplicationLayer.HttpApi.Host' " />
		
		  <ItemGroup>
		    <PackageReference Include="AspNetCore.HealthChecks.UI" Version="9.0.0" />
		    <PackageReference Include="AspNetCore.HealthChecks.UI.Client" Version="9.0.0" />
		    <PackageReference Include="AspNetCore.HealthChecks.UI.InMemory.Storage" Version="9.0.0" />
		    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.5" />
		    <PackageReference Include="Serilog.AspNetCore" Version="9.0.0" />
		    <PackageReference Include="Serilog.Sinks.Async" Version="2.1.0" />
		    <PackageReference Include="Microsoft.AspNetCore.Authentication.Google" Version="9.0.5" />
		    <PackageReference Include="Microsoft.AspNetCore.Authentication.MicrosoftAccount" Version="9.0.5" />
		    <PackageReference Include="Microsoft.AspNetCore.Authentication.Twitter" Version="9.0.5" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Chat.SignalR" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.AspNetCore.MultiTenancy" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AspNetCore.Serilog" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Swashbuckle" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Account.Pro.Public.Web.OpenIddict" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Public.Web.Impersonation" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonX" Version="4.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Studio.Client.AspNetCore" Version="1.2.1" />
		  </ItemGroup>
		
		  <ItemGroup Condition="Exists('./openiddict.pfx')">
		    <None Remove="openiddict.pfx" />
		    <EmbeddedResource Include="openiddict.pfx">
		      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		    </EmbeddedResource>
		  </ItemGroup>
		
		  <ItemGroup>
		    <Compile Remove="Logs\**" />
		    <Content Remove="Logs\**" />
		    <EmbeddedResource Remove="Logs\**" />
		    <None Remove="Logs\**" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayerBrandingProvider.cs'><![CDATA[
		﻿using Microsoft.Extensions.Localization;
		using ExampleAbpApplicationLayer.Localization;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Ui.Branding;
		
		namespace ExampleAbpApplicationLayer;
		
		[Dependency(ReplaceServices = true)]
		public class ExampleAbpApplicationLayerBrandingProvider : DefaultBrandingProvider
		{
		    private IStringLocalizer<ExampleAbpApplicationLayerResource> _localizer;
		
		    public ExampleAbpApplicationLayerBrandingProvider(IStringLocalizer<ExampleAbpApplicationLayerResource> localizer)
		    {
		        _localizer = localizer;
		    }
		
		    public override string AppName => _localizer["AppName"];
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\ExampleAbpApplicationLayerHttpApiHostModule.cs'><![CDATA[
		using System;
		using System.Collections.Generic;
		using System.IO;
		using System.Linq;
		using System.Security.Cryptography.X509Certificates;
		using Microsoft.AspNetCore.Authentication;
		using Microsoft.AspNetCore.Authentication.Google;
		using Microsoft.AspNetCore.Authentication.MicrosoftAccount;
		using Microsoft.AspNetCore.Authentication.Twitter;
		using Microsoft.AspNetCore.Builder;
		using Microsoft.AspNetCore.Cors;
		using Microsoft.AspNetCore.HttpOverrides;
		using Microsoft.Extensions.Configuration;
		using Microsoft.Extensions.DependencyInjection;
		using Microsoft.Extensions.Hosting;
		using Microsoft.AspNetCore.Extensions.DependencyInjection;
		using OpenIddict.Validation.AspNetCore;
		using OpenIddict.Server.AspNetCore;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		using ExampleAbpApplicationLayer.MultiTenancy;
		using ExampleAbpApplicationLayer.HealthChecks;
		using Microsoft.OpenApi.Models;
		using Volo.Abp;
		using Volo.Abp.Studio;
		using Volo.Abp.Account;
		using Volo.Abp.Account.Web;
		using Volo.Abp.AspNetCore.MultiTenancy;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Autofac;
		using Volo.Abp.Localization;
		using Volo.Abp.Modularity;
		using Volo.Abp.UI.Navigation.Urls;
		using Volo.Abp.VirtualFileSystem;
		using Volo.Abp.AspNetCore.Mvc.UI.Bundling;
		using Volo.Abp.AspNetCore.Mvc.UI.Theme.Shared;
		using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonX;
		using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonX.Bundling;
		using Volo.Abp.LeptonX.Shared;
		using Microsoft.AspNetCore.Hosting;
		using Volo.Abp.AspNetCore.Serilog;
		using Volo.Abp.Identity;
		using Volo.Abp.OpenIddict;
		using Volo.Abp.Swashbuckle;
		using Volo.Abp.Studio.Client.AspNetCore;
		using Volo.Abp.Security.Claims;
		using Volo.Abp.Account.Public.Web.ExternalProviders;
		using Volo.Abp.Account.Public.Web;
		using Volo.Abp.Account.Public.Web.Impersonation;
		using Volo.Saas.Host;
		using Volo.Chat;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerHttpApiModule),
		    typeof(AbpStudioClientAspNetCoreModule),
		    typeof(AbpAspNetCoreMvcUiLeptonXThemeModule),
		    typeof(AbpAutofacModule),
		    typeof(AbpAspNetCoreMultiTenancyModule),
		    typeof(ExampleAbpApplicationLayerApplicationModule),
		    typeof(ExampleAbpApplicationLayerEntityFrameworkCoreModule),
		    typeof(AbpAccountPublicWebImpersonationModule),
		    typeof(AbpAccountPublicWebOpenIddictModule),
		    typeof(ChatSignalRModule),
		    typeof(AbpSwashbuckleModule),
		    typeof(AbpAspNetCoreSerilogModule)
		    )]
		public class ExampleAbpApplicationLayerHttpApiHostModule : AbpModule
		{
		    public override void PreConfigureServices(ServiceConfigurationContext context)
		    {
		        var hostingEnvironment = context.Services.GetHostingEnvironment();
		        var configuration = context.Services.GetConfiguration();
		
		        PreConfigure<OpenIddictBuilder>(builder =>
		        {
		            builder.AddValidation(options =>
		            {
		                options.AddAudiences("ExampleAbpApplicationLayer");
		                options.UseLocalServer();
		                options.UseAspNetCore();
		            });
		        });
		
		        if (!hostingEnvironment.IsDevelopment())
		        {
		            PreConfigure<AbpOpenIddictAspNetCoreOptions>(options =>
		            {
		                options.AddDevelopmentEncryptionAndSigningCertificate = false;
		            });
		
		            PreConfigure<OpenIddictServerBuilder>(serverBuilder =>
		            {
		                serverBuilder.AddProductionEncryptionAndSigningCertificate("openiddict.pfx", configuration["AuthServer:CertificatePassPhrase"]!);
		                serverBuilder.SetIssuer(new Uri(configuration["AuthServer:Authority"]!));
		            });
		        }
		    }
		
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        var configuration = context.Services.GetConfiguration();
		        var hostingEnvironment = context.Services.GetHostingEnvironment();
		
		        if (!configuration.GetValue<bool>("App:DisablePII"))
		        {
		            Microsoft.IdentityModel.Logging.IdentityModelEventSource.ShowPII = true;
		            Microsoft.IdentityModel.Logging.IdentityModelEventSource.LogCompleteSecurityArtifact = true;
		        }
		
		        if (!configuration.GetValue<bool>("AuthServer:RequireHttpsMetadata"))
		        {
		            Configure<OpenIddictServerAspNetCoreOptions>(options =>
		            {
		                options.DisableTransportSecurityRequirement = true;
		            });
		            
		            Configure<ForwardedHeadersOptions>(options =>
		            {
		                options.ForwardedHeaders = ForwardedHeaders.XForwardedProto;
		            });
		        }
		
		        ConfigureAuthentication(context);
		        ConfigureUrls(configuration);
		        ConfigureBundles();
		        ConfigureConventionalControllers();
		        ConfigureExternalProviders(context);
		        ConfigureImpersonation(context, configuration);
		        ConfigureHealthChecks(context);
		        ConfigureSwagger(context, configuration);
		        ConfigureVirtualFileSystem(context);
		        ConfigureCors(context, configuration);
		        ConfigureTheme();
		    }
		    
		    private void ConfigureTheme()
		    {
		        Configure<LeptonXThemeOptions>(options =>
		        {
		            options.DefaultStyle = LeptonXStyleNames.System;
		        });
		    }
		
		    private void ConfigureAuthentication(ServiceConfigurationContext context)
		    {
		        context.Services.ForwardIdentityAuthenticationForBearer(OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme);
		        context.Services.Configure<AbpClaimsPrincipalFactoryOptions>(options =>
		        {
		            options.IsDynamicClaimsEnabled = true;
		        });
		    }
		
		    private void ConfigureUrls(IConfiguration configuration)
		    {
		        Configure<AppUrlOptions>(options =>
		        {
		            options.Applications["MVC"].RootUrl = configuration["App:SelfUrl"];
		            options.Applications["Angular"].RootUrl = configuration["App:AngularUrl"];
		            options.Applications["Angular"].Urls[AccountUrlNames.PasswordReset] = "account/reset-password";
		            options.Applications["Angular"].Urls[AccountUrlNames.EmailConfirmation] = "account/email-confirmation";
		            options.RedirectAllowedUrls.AddRange(configuration["App:RedirectAllowedUrls"]?.Split(',') ?? Array.Empty<string>());
		        });
		    }
		
		    private void ConfigureBundles()
		    {
		        Configure<AbpBundlingOptions>(options =>
		        {
		            options.StyleBundles.Configure(
		                LeptonXThemeBundles.Styles.Global,
		                bundle =>
		                {
		                    bundle.AddFiles("/global-styles.css");
		                }
		            );
		
		            options.ScriptBundles.Configure(
		                LeptonXThemeBundles.Scripts.Global,
		                bundle =>
		                {
		                    bundle.AddFiles("/global-scripts.js");
		                }
		            );
		        });
		    }
		
		
		    private void ConfigureVirtualFileSystem(ServiceConfigurationContext context)
		    {
		        var hostingEnvironment = context.Services.GetHostingEnvironment();
		
		        if (hostingEnvironment.IsDevelopment())
		        {
		            Configure<AbpVirtualFileSystemOptions>(options =>
		            {
		                options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerDomainSharedModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Domain.Shared"));
		                options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerDomainModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Domain"));
		                options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerApplicationContractsModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Application.Contracts"));
		                options.FileSets.ReplaceEmbeddedByPhysical<ExampleAbpApplicationLayerApplicationModule>(Path.Combine(hostingEnvironment.ContentRootPath, $"..{Path.DirectorySeparatorChar}ExampleAbpApplicationLayer.Application"));
		            });
		        }
		    }
		
		    private void ConfigureConventionalControllers()
		    {
		        Configure<AbpAspNetCoreMvcOptions>(options =>
		        {
		            options.ConventionalControllers.Create(typeof(ExampleAbpApplicationLayerApplicationModule).Assembly);
		        });
		    }
		
		    private static void ConfigureSwagger(ServiceConfigurationContext context, IConfiguration configuration)
		    {
		        context.Services.AddAbpSwaggerGenWithOidc(
		            configuration["AuthServer:Authority"]!,
		            ["ExampleAbpApplicationLayer"],
		            [AbpSwaggerOidcFlows.AuthorizationCode],
		            null,
		            options =>
		            {
		                options.SwaggerDoc("v1", new OpenApiInfo { Title = "ExampleAbpApplicationLayer API", Version = "v1" });
		                options.DocInclusionPredicate((docName, description) => true);
		                options.CustomSchemaIds(type => type.FullName);
		            });
		    }
		
		    private void ConfigureCors(ServiceConfigurationContext context, IConfiguration configuration)
		    {
		        context.Services.AddCors(options =>
		        {
		            options.AddDefaultPolicy(builder =>
		            {
		                builder
		                    .WithOrigins(
		                        configuration["App:CorsOrigins"]?
		                            .Split(",", StringSplitOptions.RemoveEmptyEntries)
		                            .Select(o => o.Trim().RemovePostFix("/"))
		                            .ToArray() ?? Array.Empty<string>()
		                    )
		                    .WithAbpExposedHeaders()
		                    .SetIsOriginAllowedToAllowWildcardSubdomains()
		                    .AllowAnyHeader()
		                    .AllowAnyMethod()
		                    .AllowCredentials();
		            });
		        });
		    }
		    
		    private void ConfigureExternalProviders(ServiceConfigurationContext context)
		    {
		        context.Services.AddAuthentication()
		            .AddGoogle(GoogleDefaults.AuthenticationScheme, options =>
		            {
		                options.ClaimActions.MapJsonKey(AbpClaimTypes.Picture, "picture");
		            })
		            .WithDynamicOptions<GoogleOptions, GoogleHandler>(
		                GoogleDefaults.AuthenticationScheme,
		                options =>
		                {
		                    options.WithProperty(x => x.ClientId);
		                    options.WithProperty(x => x.ClientSecret, isSecret: true);
		                }
		            )
		            .AddMicrosoftAccount(MicrosoftAccountDefaults.AuthenticationScheme, options =>
		            {
		                //Personal Microsoft accounts as an example.
		                options.AuthorizationEndpoint = "https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize";
		                options.TokenEndpoint = "https://login.microsoftonline.com/consumers/oauth2/v2.0/token";
		
		                options.ClaimActions.MapCustomJson("picture", _ => "https://graph.microsoft.com/v1.0/me/photo/$value");
		                options.SaveTokens = true;
		            })
		            .WithDynamicOptions<MicrosoftAccountOptions, MicrosoftAccountHandler>(
		                MicrosoftAccountDefaults.AuthenticationScheme,
		                options =>
		                {
		                    options.WithProperty(x => x.ClientId);
		                    options.WithProperty(x => x.ClientSecret, isSecret: true);
		                }
		            )
		            .AddTwitter(TwitterDefaults.AuthenticationScheme, options =>
		            {
		                options.ClaimActions.MapJsonKey(AbpClaimTypes.Picture, "profile_image_url_https");
		                options.RetrieveUserDetails = true;
		            })
		            .WithDynamicOptions<TwitterOptions, TwitterHandler>(
		                TwitterDefaults.AuthenticationScheme,
		                options =>
		                {
		                    options.WithProperty(x => x.ConsumerKey);
		                    options.WithProperty(x => x.ConsumerSecret, isSecret: true);
		                }
		            );
		    }
		
		    private void ConfigureImpersonation(ServiceConfigurationContext context, IConfiguration configuration)
		    {
		        context.Services.Configure<AbpAccountOptions>(options =>
		        {
		            options.TenantAdminUserName = "admin";
		            options.ImpersonationTenantPermission = SaasHostPermissions.Tenants.Impersonation;
		            options.ImpersonationUserPermission = IdentityPermissions.Users.Impersonation;
		        });
		    }
		
		    private void ConfigureHealthChecks(ServiceConfigurationContext context)
		    {
		        context.Services.AddExampleAbpApplicationLayerHealthChecks();
		    }
		
		    public override void OnApplicationInitialization(ApplicationInitializationContext context)
		    {
		        var app = context.GetApplicationBuilder();
		        var env = context.GetEnvironment();
		
		        app.UseForwardedHeaders();
		
		        if (env.IsDevelopment())
		        {
		            app.UseDeveloperExceptionPage();
		        }
		
		        app.UseAbpRequestLocalization();
		
		        if (!env.IsDevelopment())
		        {
		            app.UseErrorPage();
		        }
		        
		        app.Use(async (httpContext, next) =>
		        {
		            var accessToken = httpContext.Request.Query["access_token"];
		
		            var path = httpContext.Request.Path;
		            if (!string.IsNullOrEmpty(accessToken) &&
		                (path.StartsWithSegments("/signalr-hubs/chat")))
		            {
		                httpContext.Request.Headers["Authorization"] = "Bearer " + accessToken;
		            }
		
		            await next();
		        });
		
		        app.UseRouting();
		        app.MapAbpStaticAssets();
		        app.UseAbpStudioLink();
		        app.UseAbpSecurityHeaders();
		        app.UseCors();
		        app.UseAuthentication();
		        app.UseAbpOpenIddictValidation();
		
		        if (MultiTenancyConsts.IsEnabled)
		        {
		            app.UseMultiTenancy();
		        }
		
		        app.UseUnitOfWork();
		        app.UseDynamicClaims();
		        app.UseAuthorization();
		
		        app.UseSwagger();
		        app.UseAbpSwaggerUI(options =>
		        {
		            options.SwaggerEndpoint("/swagger/v1/swagger.json", "ExampleAbpApplicationLayer API");
		
		            var configuration = context.ServiceProvider.GetRequiredService<IConfiguration>();
		            options.OAuthClientId(configuration["AuthServer:SwaggerClientId"]);
		        });
		        app.UseAuditing();
		        app.UseAbpSerilogEnrichers();
		        app.UseConfiguredEndpoints();
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\HealthChecks\ExampleAbpApplicationLayerDatabaseCheck.cs'><![CDATA[
		﻿using System;
		using System.Threading;
		using System.Threading.Tasks;
		using Microsoft.Extensions.Diagnostics.HealthChecks;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Identity;
		
		namespace ExampleAbpApplicationLayer.HealthChecks;
		
		public class ExampleAbpApplicationLayerDatabaseCheck : IHealthCheck, ITransientDependency
		{
		    protected readonly IIdentityRoleRepository IdentityRoleRepository;
		
		    public ExampleAbpApplicationLayerDatabaseCheck(IIdentityRoleRepository identityRoleRepository)
		    {
		        IdentityRoleRepository = identityRoleRepository;
		    }
		
		    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
		    {
		        try
		        {
		            await IdentityRoleRepository.GetListAsync(sorting: nameof(IdentityRole.Id), maxResultCount: 1, cancellationToken: cancellationToken);
		
		            return HealthCheckResult.Healthy($"Could connect to database and get record.");
		        }
		        catch (Exception e)
		        {
		            return HealthCheckResult.Unhealthy($"Error when trying to get database record. ", e);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\HealthChecks\HealthChecksBuilderExtensions.cs'><![CDATA[
		﻿using System;
		using HealthChecks.UI.Client;
		using Microsoft.AspNetCore.Builder;
		using Microsoft.AspNetCore.Diagnostics.HealthChecks;
		using Microsoft.AspNetCore.Http;
		using Microsoft.AspNetCore.Routing;
		using Microsoft.Extensions.DependencyInjection;
		
		namespace ExampleAbpApplicationLayer.HealthChecks;
		
		public static class HealthChecksBuilderExtensions
		{
		    public static void AddExampleAbpApplicationLayerHealthChecks(this IServiceCollection services)
		    {
		        // Add your health checks here
		        var healthChecksBuilder = services.AddHealthChecks();
		        healthChecksBuilder.AddCheck<ExampleAbpApplicationLayerDatabaseCheck>("ExampleAbpApplicationLayer DbContext Check", tags: new string[] { "database" });
		
		        services.ConfigureHealthCheckEndpoint("/health-status");
		
		        var configuration = services.GetConfiguration();
		        var healthCheckUrl = configuration["App:HealthCheckUrl"];
		
		        if (string.IsNullOrEmpty(healthCheckUrl))
		        {
		            healthCheckUrl = "/health-status";
		        }
		
		        var healthChecksUiBuilder = services.AddHealthChecksUI(settings =>
		        {
		            settings.AddHealthCheckEndpoint("ExampleAbpApplicationLayer Health Status", configuration["App:HealthUiCheckUrl"] ?? healthCheckUrl);
		        });
		
		        // Set your HealthCheck UI Storage here
		        healthChecksUiBuilder.AddInMemoryStorage();
		
		        services.MapHealthChecksUiEndpoints(options =>
		        {
		            options.UIPath = "/health-ui";
		            options.ApiPath = "/health-api";
		        });
		    }
		
		    private static IServiceCollection ConfigureHealthCheckEndpoint(this IServiceCollection services, string path)
		    {
		        services.Configure<AbpEndpointRouterOptions>(options =>
		        {
		            options.EndpointConfigureActions.Add(endpointContext =>
		            {
		                endpointContext.Endpoints.MapHealthChecks(
		                    new PathString(path.EnsureStartsWith('/')),
		                    new HealthCheckOptions
		                    {
		                        Predicate = _ => true,
		                        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse,
		                        AllowCachingResponses = false,
		                    });
		            });
		        });
		
		        return services;
		    }
		
		    private static IServiceCollection MapHealthChecksUiEndpoints(this IServiceCollection services, Action<global::HealthChecks.UI.Configuration.Options>? setupOption = null)
		    {
		        services.Configure<AbpEndpointRouterOptions>(routerOptions =>
		        {
		            routerOptions.EndpointConfigureActions.Add(endpointContext =>
		            {
		                endpointContext.Endpoints.MapHealthChecksUI(setupOption);
		            });
		        });
		
		        return services;
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\package.json'>
		{
		  "version": "1.0.0",
		  "name": "my-app",
		  "private": true,
		  "dependencies": {
		    "@volo/account": "~9.3.1",
				"@volo/abp.aspnetcore.mvc.ui.theme.leptonx": "~4.3.1"
		  }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Pages\_ViewImports.cshtml'>
		﻿@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
		@addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI
		@addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI.Bootstrap
		@addTagHelper *, Volo.Abp.AspNetCore.Mvc.UI.Bundling</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Pages\Index.cshtml'><![CDATA[
		﻿@page
		@using Microsoft.AspNetCore.Mvc.Localization
		@using Microsoft.AspNetCore.Http.Extensions
		@using ExampleAbpApplicationLayer.Localization
		@using ExampleAbpApplicationLayer.Pages
		@using Volo.Abp.Account.Localization
		@using Volo.Abp.Users
		@using Volo.Abp.AspNetCore.Mvc.UI.Theming
		@using Volo.Abp.Ui.Branding
		@model IndexModel
		@inject IHtmlLocalizer<ExampleAbpApplicationLayerResource> L
		@inject IHtmlLocalizer<AccountResource> AccountLocalizer
		@inject ICurrentUser CurrentUser
		@inject IBrandingProvider BrandingProvider
		@inject ITheme Theme
		@{
		    Layout = Theme.GetEmptyLayout();
		}
		
		<div class="d-flex align-items-center" style="min-height: 100vh;">
		    <div class="container">
		        <abp-row>
		
		            <div class="col mx-auto account-column">
		                <div class="account-brand p-4 text-center mb-1">
		
		                    @if (!BrandingProvider.LogoUrl.IsNullOrEmpty())
		                    {
		                        <a class="navbar-brand" href="~/" alt="@BrandingProvider.AppName"></a>
		                    }
		                    else
		                    {
		                        <h1>@BrandingProvider.AppName</h1>
		                    }
		                </div>
		                <abp-card class="border rounded">
		
		                    <abp-card-body>
		
		                        <div class="container">
		                            <abp-row>
		                                <abp-column size="_9">
		
		                                    <div class="mr-auto p-2 float-start">
		                                        @if (CurrentUser.IsAuthenticated)
		                                        {
		                                            <div>
		                                                <div>
		                                                    <a abp-button="Outline_Primary" asp-controller="Manage" asp-action="Index" asp-area="Account" class="me-2">@AccountLocalizer["MyAccount"]</a>
		                                                    <a abp-button="Primary" asp-controller="Logout" asp-action="Index" asp-area="Account">@L["Logout"]</a>
		                                                </div>
		                                            </div>
		
		                                        }
		                                        else
		                                        {
		                                            <div class="text-center">
		                                                <a abp-button="Primary" asp-controller="Login" asp-action="Index" asp-area="Account">@L["Login"]</a>
		                                            </div>
		                                        }
		                                    </div>
		                                </abp-column>
		                                <abp-column size="_3">
		                                    <div class="ml-auto p-2 float-end">
		                                        <abp-dropdown>
		                                            @if (Model.CurrentLanguage != null)
		                                            {
		                                                <abp-dropdown-button text="@Model.CurrentLanguage"/>
		                                            }
		
		                                            @if (Model.Languages != null)
		                                            {
		                                                <abp-dropdown-menu>
		                                                    @foreach (var language in Model.Languages)
		                                                    {
		                                                        var languageUrl = Url.Content($"~/Abp/Languages/Switch?culture={language.CultureName}&uiCulture={language.UiCultureName}&returnUrl={System.Net.WebUtility.UrlEncode(Request.GetEncodedPathAndQuery())}");
		                                                        <abp-dropdown-item href="@languageUrl">@language.DisplayName</abp-dropdown-item>
		                                                    }
		                                                </abp-dropdown-menu>
		                                            }
		                                        </abp-dropdown>
		                                    </div>
		                                </abp-column>
		
		                            </abp-row>
		                            <hr class="m-4" />
		
		                            <abp-row>
		                                @if (Model.Applications != null)
		                                {
		                                    @foreach (var application in Model.Applications)
		                                    {
		                                        <abp-column size-md="_4" class="mb-2">
		                                            <a href="@application.ClientUri" style="text-decoration:none">
		                                                <abp-card>
		                                                    <abp-card-body>
		                                                        @if (!application.LogoUri.IsNullOrEmpty())
		                                                        {
		                                                            var logoUri = application.LogoUri;
		                                                            if(application.LogoUri.StartsWith('/'))
		                                                            {
		                                                                logoUri = @Url.Content(application.LogoUri.EnsureStartsWith('~'));
		                                                            }
		
		                                                            <div class="mx-auto">
		                                                                <img src="@logoUri" style="height:64px" class="mb-3" />
		                                                            </div>
		                                                        }
		                                                        <h4>@application.DisplayName</h4>
		                                                        <span class="text-muted">@application.ClientUri</span>
		                                                    </abp-card-body>
		                                                </abp-card>
		                                            </a>
		                                        </abp-column>
		                                    }
		                                }
		                            </abp-row>
		                        </div>
		
		                    </abp-card-body>
		
		                </abp-card>
		            </div>
		
		        </abp-row>
		    </div>
		</div>]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Pages\Index.cshtml.cs'><![CDATA[
		using System.Collections.Generic;
		using System.Globalization;
		using System.Threading.Tasks;
		using Volo.Abp.AspNetCore.Mvc.UI.RazorPages;
		using Volo.Abp.Localization;
		using Volo.Abp.OpenIddict.Applications;
		
		namespace ExampleAbpApplicationLayer.Pages;
		
		public class IndexModel : AbpPageModel
		{
		    public List<OpenIddictApplication>? Applications { get; protected set; }
		
		    public IReadOnlyList<LanguageInfo>? Languages { get; protected set; }
		
		    public string? CurrentLanguage { get; protected set; }
		
		    protected IOpenIddictApplicationRepository OpenIdApplicationRepository { get; }
		
		    protected ILanguageProvider LanguageProvider { get; }
		
		    public IndexModel(IOpenIddictApplicationRepository openIdApplicationmRepository, ILanguageProvider languageProvider)
		    {
		        OpenIdApplicationRepository = openIdApplicationmRepository;
		        LanguageProvider = languageProvider;
		    }
		
		    public async Task OnGetAsync()
		    {
		        Applications = await OpenIdApplicationRepository.GetListAsync();
		
		        Languages = await LanguageProvider.GetLanguagesAsync();
		        CurrentLanguage = CultureInfo.CurrentCulture.DisplayName;
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Program.cs'><![CDATA[
		﻿using System;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Builder;
		using Microsoft.Extensions.DependencyInjection;
		using Microsoft.Extensions.Hosting;
		using Serilog;
		using Serilog.Events;
		
		namespace ExampleAbpApplicationLayer;
		
		public class Program
		{
		    public async static Task<int> Main(string[] args)
		    {
		        Log.Logger = new LoggerConfiguration()
		            .WriteTo.Async(c => c.File("Logs/logs.txt"))
		            .WriteTo.Async(c => c.Console())
		            .CreateBootstrapLogger();
		
		        try
		        {
		            Log.Information("Starting ExampleAbpApplicationLayer.HttpApi.Host.");
		            var builder = WebApplication.CreateBuilder(args);
		            builder.Host
		                .AddAppSettingsSecretsJson()
		                .UseAutofac()
		                .UseSerilog((context, services, loggerConfiguration) =>
		                {
		                    loggerConfiguration
		                    #if DEBUG
		                        .MinimumLevel.Debug()
		                    #else
		                        .MinimumLevel.Information()
		                    #endif
		                        .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
		                        .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Warning)
		                        .Enrich.FromLogContext()
		                        .WriteTo.Async(c => c.File("Logs/logs.txt"))
		                        .WriteTo.Async(c => c.Console())
		                        .WriteTo.Async(c => c.AbpStudio(services));
		                });
		            await builder.AddApplicationAsync<ExampleAbpApplicationLayerHttpApiHostModule>();
		            var app = builder.Build();
		            await app.InitializeApplicationAsync();
		            await app.RunAsync();
		            return 0;
		        }
		        catch (Exception ex)
		        {
		            if (ex is HostAbortedException)
		            {
		                throw;
		            }
		
		            Log.Fatal(ex, "Host terminated unexpectedly!");
		            return 1;
		        }
		        finally
		        {
		            Log.CloseAndFlush();
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\Properties\launchSettings.json'>
		{
		  "iisSettings": {
		    "windowsAuthentication": false,
		    "anonymousAuthentication": true,
		    "iisExpress": {
		      "applicationUrl": "https://localhost:44302",
		      "sslPort": 44302
		    }
		  },
		  "profiles": {
		    "IIS Express": {
		      "commandName": "IISExpress",
		      "launchBrowser": true,
		      "environmentVariables": {
		        "ASPNETCORE_ENVIRONMENT": "Development"
		      }
		    },
		    "ExampleAbpApplicationLayer.HttpApi.Host": {
		      "commandName": "Project",
		      "launchBrowser": true,
		      "applicationUrl": "https://localhost:44302",
		      "environmentVariables": {
		        "ASPNETCORE_ENVIRONMENT": "Development"
		      }
		    }
		  }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\web.config'><![CDATA[
		﻿<?xml version="1.0" encoding="utf-8"?>
		<configuration>
		  <location path="." inheritInChildApplications="false">
		    <system.webServer>
		      <handlers>
		        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
		      </handlers>
		      <aspNetCore processPath="dotnet" arguments=".\ExampleAbpApplicationLayer.HttpApi.Host.dll" stdoutLogEnabled="false" stdoutLogFile=".\Logs\stdout" hostingModel="inprocess" />
		    </system.webServer>
		  </location>
		  <system.webServer>
		    <httpProtocol>
		      <customHeaders>
		        <remove name="x-powered-by" />
		      </customHeaders>
		    </httpProtocol>
		  </system.webServer>
		</configuration>]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\wwwroot\global-scripts.js'>
		/* Your Global Scripts */</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi.Host\wwwroot\global-styles.css'>
		:root {
		    --lpx-theme-light-bg: url('/LeptonX/images/login-pages/login-bg-img-light.svg');
		    --lpx-theme-dim-bg: url('/LeptonX/images/login-pages/login-bg-img-dim.svg');
		    --lpx-theme-dark-bg: url('/LeptonX/images/login-pages/login-bg-img-dark.svg');
		}
		
		:root {
		    --lpx-logo: url('/images/logo/leptonx/icon.svg');
		    --lpx-logo-icon: url('/images/logo/leptonx/icon.svg');
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\ExampleAbpApplicationLayerController.cs'>
		﻿using ExampleAbpApplicationLayer.Localization;
		using Volo.Abp.AspNetCore.Mvc;
		
		namespace ExampleAbpApplicationLayer.Controllers;
		
		/* Inherit your controllers from this class.
		 */
		public abstract class ExampleAbpApplicationLayerController : AbpControllerBase
		{
		    protected ExampleAbpApplicationLayerController()
		    {
		        LocalizationResource = typeof(ExampleAbpApplicationLayerResource);
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\OrderItems\OrderItemController.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using Asp.Versioning;
		using System;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Mvc;
		using Volo.Abp;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Application.Dtos;
		using ExampleAbpApplicationLayer.OrderItems;
		
		namespace ExampleAbpApplicationLayer.Controllers.OrderItems
		{
		    [RemoteService]
		    [Area("app")]
		    [ControllerName("OrderItem")]
		    [Route("api/app/order-items")]
		
		    public abstract class OrderItemControllerBase : AbpController
		    {
		        protected IOrderItemsAppService _orderItemsAppService;
		
		        public OrderItemControllerBase(IOrderItemsAppService orderItemsAppService)
		        {
		            _orderItemsAppService = orderItemsAppService;
		        }
		
		        [HttpGet]
		        [Route("by-order")]
		        public virtual Task<PagedResultDto<OrderItemDto>> GetListByOrderIdAsync(GetOrderItemListInput input)
		        {
		            return _orderItemsAppService.GetListByOrderIdAsync(input);
		        }
		        [HttpGet]
		        [Route("detailed/by-order")]
		        public virtual Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListWithNavigationPropertiesByOrderIdAsync(GetOrderItemListInput input)
		        {
		            return _orderItemsAppService.GetListWithNavigationPropertiesByOrderIdAsync(input);
		        }
		
		        [HttpGet]
		        public virtual Task<PagedResultDto<OrderItemWithNavigationPropertiesDto>> GetListAsync(GetOrderItemsInput input)
		        {
		            return _orderItemsAppService.GetListAsync(input);
		        }
		
		        [HttpGet]
		        [Route("with-navigation-properties/{id}")]
		        public virtual Task<OrderItemWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
		        {
		            return _orderItemsAppService.GetWithNavigationPropertiesAsync(id);
		        }
		
		        [HttpGet]
		        [Route("{id}")]
		        public virtual Task<OrderItemDto> GetAsync(Guid id)
		        {
		            return _orderItemsAppService.GetAsync(id);
		        }
		
		        [HttpGet]
		        [Route("product-lookup")]
		        public virtual Task<PagedResultDto<LookupDto<Guid>>> GetProductLookupAsync(LookupRequestDto input)
		        {
		            return _orderItemsAppService.GetProductLookupAsync(input);
		        }
		
		        [HttpPost]
		        public virtual Task<OrderItemDto> CreateAsync(OrderItemCreateDto input)
		        {
		            return _orderItemsAppService.CreateAsync(input);
		        }
		
		        [HttpPut]
		        [Route("{id}")]
		        public virtual Task<OrderItemDto> UpdateAsync(Guid id, OrderItemUpdateDto input)
		        {
		            return _orderItemsAppService.UpdateAsync(id, input);
		        }
		
		        [HttpDelete]
		        [Route("{id}")]
		        public virtual Task DeleteAsync(Guid id)
		        {
		            return _orderItemsAppService.DeleteAsync(id);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\OrderItems\OrderItemController.Extended.cs'>
		using Asp.Versioning;
		using System;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Mvc;
		using Volo.Abp;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Application.Dtos;
		using ExampleAbpApplicationLayer.OrderItems;
		
		namespace ExampleAbpApplicationLayer.Controllers.OrderItems
		{
		    [RemoteService]
		    [Area("app")]
		    [ControllerName("OrderItem")]
		    [Route("api/app/order-items")]
		
		    public class OrderItemController : OrderItemControllerBase, IOrderItemsAppService
		    {
		        public OrderItemController(IOrderItemsAppService orderItemsAppService) : base(orderItemsAppService)
		        {
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\Orders\OrderController.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Shared;
		using Asp.Versioning;
		using System;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Mvc;
		using Volo.Abp;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Application.Dtos;
		using ExampleAbpApplicationLayer.Orders;
		using Volo.Abp.Content;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Controllers.Orders
		{
		    [RemoteService]
		    [Area("app")]
		    [ControllerName("Order")]
		    [Route("api/app/orders")]
		
		    public abstract class OrderControllerBase : AbpController
		    {
		        protected IOrdersAppService _ordersAppService;
		
		        public OrderControllerBase(IOrdersAppService ordersAppService)
		        {
		            _ordersAppService = ordersAppService;
		        }
		
		        [HttpGet]
		        public virtual Task<PagedResultDto<OrderWithNavigationPropertiesDto>> GetListAsync(GetOrdersInput input)
		        {
		            return _ordersAppService.GetListAsync(input);
		        }
		
		        [HttpGet]
		        [Route("with-navigation-properties/{id}")]
		        public virtual Task<OrderWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
		        {
		            return _ordersAppService.GetWithNavigationPropertiesAsync(id);
		        }
		
		        [HttpGet]
		        [Route("{id}")]
		        public virtual Task<OrderDto> GetAsync(Guid id)
		        {
		            return _ordersAppService.GetAsync(id);
		        }
		
		        [HttpGet]
		        [Route("identity-user-lookup")]
		        public virtual Task<PagedResultDto<LookupDto<Guid>>> GetIdentityUserLookupAsync(LookupRequestDto input)
		        {
		            return _ordersAppService.GetIdentityUserLookupAsync(input);
		        }
		
		        [HttpPost]
		        public virtual Task<OrderDto> CreateAsync(OrderCreateDto input)
		        {
		            return _ordersAppService.CreateAsync(input);
		        }
		
		        [HttpPut]
		        [Route("{id}")]
		        public virtual Task<OrderDto> UpdateAsync(Guid id, OrderUpdateDto input)
		        {
		            return _ordersAppService.UpdateAsync(id, input);
		        }
		
		        [HttpDelete]
		        [Route("{id}")]
		        public virtual Task DeleteAsync(Guid id)
		        {
		            return _ordersAppService.DeleteAsync(id);
		        }
		
		        [HttpGet]
		        [Route("as-excel-file")]
		        public virtual Task<IRemoteStreamContent> GetListAsExcelFileAsync(OrderExcelDownloadDto input)
		        {
		            return _ordersAppService.GetListAsExcelFileAsync(input);
		        }
		
		        [HttpGet]
		        [Route("download-token")]
		        public virtual Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
		        {
		            return _ordersAppService.GetDownloadTokenAsync();
		        }
		
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\Orders\OrderController.Extended.cs'>
		using Asp.Versioning;
		using System;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Mvc;
		using Volo.Abp;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Application.Dtos;
		using ExampleAbpApplicationLayer.Orders;
		
		namespace ExampleAbpApplicationLayer.Controllers.Orders
		{
		    [RemoteService]
		    [Area("app")]
		    [ControllerName("Order")]
		    [Route("api/app/orders")]
		
		    public class OrderController : OrderControllerBase, IOrdersAppService
		    {
		        public OrderController(IOrdersAppService ordersAppService) : base(ordersAppService)
		        {
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\Products\ProductController.cs'><![CDATA[
		using Asp.Versioning;
		using System;
		using System.Collections.Generic;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Mvc;
		using Volo.Abp;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Application.Dtos;
		using ExampleAbpApplicationLayer.Products;
		using Volo.Abp.Content;
		using ExampleAbpApplicationLayer.Shared;
		
		namespace ExampleAbpApplicationLayer.Controllers.Products
		{
		    [RemoteService]
		    [Area("app")]
		    [ControllerName("Product")]
		    [Route("api/app/products")]
		
		    public abstract class ProductControllerBase : AbpController
		    {
		        protected IProductsAppService _productsAppService;
		
		        public ProductControllerBase(IProductsAppService productsAppService)
		        {
		            _productsAppService = productsAppService;
		        }
		
		        [HttpGet]
		        public virtual Task<PagedResultDto<ProductDto>> GetListAsync(GetProductsInput input)
		        {
		            return _productsAppService.GetListAsync(input);
		        }
		
		        [HttpGet]
		        [Route("{id}")]
		        public virtual Task<ProductDto> GetAsync(Guid id)
		        {
		            return _productsAppService.GetAsync(id);
		        }
		
		        [HttpPost]
		        public virtual Task<ProductDto> CreateAsync(ProductCreateDto input)
		        {
		            return _productsAppService.CreateAsync(input);
		        }
		
		        [HttpPut]
		        [Route("{id}")]
		        public virtual Task<ProductDto> UpdateAsync(Guid id, ProductUpdateDto input)
		        {
		            return _productsAppService.UpdateAsync(id, input);
		        }
		
		        [HttpDelete]
		        [Route("{id}")]
		        public virtual Task DeleteAsync(Guid id)
		        {
		            return _productsAppService.DeleteAsync(id);
		        }
		
		        [HttpGet]
		        [Route("as-excel-file")]
		        public virtual Task<IRemoteStreamContent> GetListAsExcelFileAsync(ProductExcelDownloadDto input)
		        {
		            return _productsAppService.GetListAsExcelFileAsync(input);
		        }
		
		        [HttpGet]
		        [Route("download-token")]
		        public virtual Task<ExampleAbpApplicationLayer.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
		        {
		            return _productsAppService.GetDownloadTokenAsync();
		        }
		
		        [HttpDelete]
		        [Route("")]
		        public virtual Task DeleteByIdsAsync(List<Guid> productIds)
		        {
		            return _productsAppService.DeleteByIdsAsync(productIds);
		        }
		
		        [HttpDelete]
		        [Route("all")]
		        public virtual Task DeleteAllAsync(GetProductsInput input)
		        {
		            return _productsAppService.DeleteAllAsync(input);
		        }
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Controllers\Products\ProductController.Extended.cs'>
		using Asp.Versioning;
		using System;
		using System.Threading.Tasks;
		using Microsoft.AspNetCore.Mvc;
		using Volo.Abp;
		using Volo.Abp.AspNetCore.Mvc;
		using Volo.Abp.Application.Dtos;
		using ExampleAbpApplicationLayer.Products;
		
		namespace ExampleAbpApplicationLayer.Controllers.Products
		{
		    [RemoteService]
		    [Area("app")]
		    [ControllerName("Product")]
		    [Route("api/app/products")]
		
		    public class ProductController : ProductControllerBase, IProductsAppService
		    {
		        public ProductController(IProductsAppService productsAppService) : base(productsAppService)
		        {
		        }
		    }
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.abppkg'>
		{
		  "role": "lib.http-api"
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.abppkg.analyze.json'>
		{
		  "name": "ExampleAbpApplicationLayer.HttpApi",
		  "hash": "",
		  "contents": [
		    {
		      "namespace": "ExampleAbpApplicationLayer",
		      "dependsOnModules": [
		        {
		          "declaringAssemblyName": "ExampleAbpApplicationLayer.Application.Contracts",
		          "namespace": "ExampleAbpApplicationLayer",
		          "name": "ExampleAbpApplicationLayerApplicationContractsModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.PermissionManagement.HttpApi",
		          "namespace": "Volo.Abp.PermissionManagement.HttpApi",
		          "name": "AbpPermissionManagementHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.SettingManagement.HttpApi",
		          "namespace": "Volo.Abp.SettingManagement",
		          "name": "AbpSettingManagementHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Identity.Pro.HttpApi",
		          "namespace": "Volo.Abp.Identity",
		          "name": "AbpIdentityHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Admin.HttpApi",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountAdminHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.TextTemplateManagement.HttpApi",
		          "namespace": "Volo.Abp.TextTemplateManagement",
		          "name": "TextTemplateManagementHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.AuditLogging.HttpApi",
		          "namespace": "Volo.Abp.AuditLogging",
		          "name": "AbpAuditLoggingHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.OpenIddict.Pro.HttpApi",
		          "namespace": "Volo.Abp.OpenIddict",
		          "name": "AbpOpenIddictProHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.LanguageManagement.HttpApi",
		          "namespace": "Volo.Abp.LanguageManagement",
		          "name": "LanguageManagementHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Gdpr.HttpApi",
		          "namespace": "Volo.Abp.Gdpr",
		          "name": "AbpGdprHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.Account.Pro.Public.HttpApi",
		          "namespace": "Volo.Abp.Account",
		          "name": "AbpAccountPublicHttpApiModule"
		        },
		        {
		          "declaringAssemblyName": "Volo.Abp.FeatureManagement.HttpApi",
		          "namespace": "Volo.Abp.FeatureManagement",
		          "name": "AbpFeatureManagementHttpApiModule"
		        }
		      ],
		      "implementingInterfaces": [
		        {
		          "name": "IAbpModule",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IAbpModule"
		        },
		        {
		          "name": "IOnPreApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPreApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationInitialization",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationInitialization"
		        },
		        {
		          "name": "IOnPostApplicationInitialization",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IOnPostApplicationInitialization"
		        },
		        {
		          "name": "IOnApplicationShutdown",
		          "namespace": "Volo.Abp",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.IOnApplicationShutdown"
		        },
		        {
		          "name": "IPreConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPreConfigureServices"
		        },
		        {
		          "name": "IPostConfigureServices",
		          "namespace": "Volo.Abp.Modularity",
		          "declaringAssemblyName": "Volo.Abp.Core",
		          "fullName": "Volo.Abp.Modularity.IPostConfigureServices"
		        }
		      ],
		      "contentType": "abpModule",
		      "name": "ExampleAbpApplicationLayerHttpApiModule",
		      "summary": null
		    }
		  ]
		}</file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayer.HttpApi.csproj'><![CDATA[
		﻿<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Contracts\ExampleAbpApplicationLayer.Application.Contracts.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.PermissionManagement.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.FeatureManagement.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.SettingManagement.HttpApi" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Identity.Pro.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Admin.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.AuditLogging.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.OpenIddict.Pro.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LanguageManagement.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.FileManagement.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Saas.Host.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Chat.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TextTemplateManagement.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Gdpr.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Account.Pro.Public.HttpApi" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.LeptonXTheme.Management.HttpApi" Version="4.3.1" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\ExampleAbpApplicationLayerHttpApiModule.cs'><![CDATA[
		﻿using Localization.Resources.AbpUi;
		using ExampleAbpApplicationLayer.Localization;
		using Volo.Abp.Account;
		using Volo.Abp.SettingManagement;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Identity;
		using Volo.Abp.Modularity;
		using Volo.Abp.PermissionManagement.HttpApi;
		using Volo.Abp.Localization;
		using Volo.Abp.AuditLogging;
		using Volo.Abp.LanguageManagement;
		using Volo.FileManagement;
		using Volo.Saas.Host;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Abp.Gdpr;
		using Volo.Abp.OpenIddict;
		using Volo.Chat;
		using Volo.Abp.LeptonXTheme.Management;
		
		namespace ExampleAbpApplicationLayer;
		
		 [DependsOn(
		    typeof(ExampleAbpApplicationLayerApplicationContractsModule),
		    typeof(AbpPermissionManagementHttpApiModule),
		    typeof(AbpSettingManagementHttpApiModule),
		    typeof(AbpIdentityHttpApiModule),
		    typeof(AbpAccountAdminHttpApiModule),
		    typeof(TextTemplateManagementHttpApiModule),
		    typeof(AbpAuditLoggingHttpApiModule),
		    typeof(AbpOpenIddictProHttpApiModule),
		    typeof(LanguageManagementHttpApiModule),
		    typeof(FileManagementHttpApiModule),
		    typeof(SaasHostHttpApiModule),
		    typeof(AbpGdprHttpApiModule),
		    typeof(ChatHttpApiModule),
		    typeof(AbpAccountPublicHttpApiModule),
		    typeof(LeptonXThemeManagementHttpApiModule),
		    typeof(AbpFeatureManagementHttpApiModule)
		    )]
		public class ExampleAbpApplicationLayerHttpApiModule : AbpModule
		{
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        ConfigureLocalization();
		    }
		
		    private void ConfigureLocalization()
		    {
		        Configure<AbpLocalizationOptions>(options =>
		        {
		            options.Resources
		                .Get<ExampleAbpApplicationLayerResource>()
		                .AddBaseTypes(
		                    typeof(AbpUiResource)
		                );
		        });
		    }
		}]]></file>
	<file path='src\ExampleAbpApplicationLayer.HttpApi\Models\Test\TestModel.cs'>
		﻿using System;
		
		namespace ExampleAbpApplicationLayer.Models.Test;
		
		public class TestModel
		{
		    public string? Name { get; set; }
		
		    public DateTime BirthDate { get; set; }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.abppkg'>
		{
		  "role": "lib.test"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.Application\ExampleAbpApplicationLayer.Application.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayerApplicationTestBase.cs'><![CDATA[
		﻿using Volo.Abp.Modularity;
		
		namespace ExampleAbpApplicationLayer;
		
		public abstract class ExampleAbpApplicationLayerApplicationTestBase<TStartupModule> : ExampleAbpApplicationLayerTestBase<TStartupModule>
		    where TStartupModule : IAbpModule
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayerApplicationTestModule.cs'>
		﻿using Volo.Abp.Modularity;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerApplicationModule),
		    typeof(ExampleAbpApplicationLayerDomainTestModule)
		)]
		public class ExampleAbpApplicationLayerApplicationTestModule : AbpModule
		{
		
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\Orders\OrderApplicationTests.cs'><![CDATA[
		using System;
		using System.Linq;
		using Shouldly;
		using System.Threading.Tasks;
		using Volo.Abp.Domain.Repositories;
		using Volo.Abp.Modularity;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public abstract class OrdersAppServiceTests<TStartupModule> : ExampleAbpApplicationLayerApplicationTestBase<TStartupModule>
		        where TStartupModule : IAbpModule
		    {
		        private readonly IOrdersAppService _ordersAppService;
		        private readonly IRepository<Order, Guid> _orderRepository;
		
		        public OrdersAppServiceTests()
		        {
		            _ordersAppService = GetRequiredService<IOrdersAppService>();
		            _orderRepository = GetRequiredService<IRepository<Order, Guid>>();
		        }
		
		        [Fact]
		        public async Task GetListAsync()
		        {
		            // Act
		            var result = await _ordersAppService.GetListAsync(new GetOrdersInput());
		
		            // Assert
		            result.TotalCount.ShouldBe(2);
		            result.Items.Count.ShouldBe(2);
		            result.Items.Any(x => x.Order.Id == Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d")).ShouldBe(true);
		            result.Items.Any(x => x.Order.Id == Guid.Parse("d5545aa7-9121-4baa-9bc5-d232e20f6482")).ShouldBe(true);
		        }
		
		        [Fact]
		        public async Task GetAsync()
		        {
		            // Act
		            var result = await _ordersAppService.GetAsync(Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"));
		
		            // Assert
		            result.ShouldNotBeNull();
		            result.Id.ShouldBe(Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"));
		        }
		
		        [Fact]
		        public async Task CreateAsync()
		        {
		            // Arrange
		            var input = new OrderCreateDto
		            {
		                OrderDate = new DateTime(2018, 5, 16),
		                TotalAmount = 1586680255,
		                Status = default
		            };
		
		            // Act
		            var serviceResult = await _ordersAppService.CreateAsync(input);
		
		            // Assert
		            var result = await _orderRepository.FindAsync(c => c.Id == serviceResult.Id);
		
		            result.ShouldNotBe(null);
		            result.OrderDate.ShouldBe(new DateTime(2018, 5, 16));
		            result.TotalAmount.ShouldBe(1586680255);
		            result.Status.ShouldBe(default);
		        }
		
		        [Fact]
		        public async Task UpdateAsync()
		        {
		            // Arrange
		            var input = new OrderUpdateDto()
		            {
		                OrderDate = new DateTime(2019, 5, 9),
		                TotalAmount = 698533817,
		                Status = default
		            };
		
		            // Act
		            var serviceResult = await _ordersAppService.UpdateAsync(Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"), input);
		
		            // Assert
		            var result = await _orderRepository.FindAsync(c => c.Id == serviceResult.Id);
		
		            result.ShouldNotBe(null);
		            result.OrderDate.ShouldBe(new DateTime(2019, 5, 9));
		            result.TotalAmount.ShouldBe(698533817);
		            result.Status.ShouldBe(default);
		        }
		
		        [Fact]
		        public async Task DeleteAsync()
		        {
		            // Act
		            await _ordersAppService.DeleteAsync(Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"));
		
		            // Assert
		            var result = await _orderRepository.FindAsync(c => c.Id == Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"));
		
		            result.ShouldBeNull();
		        }
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\Products\ProductApplicationTests.cs'><![CDATA[
		using System;
		using System.Linq;
		using Shouldly;
		using System.Threading.Tasks;
		using Volo.Abp.Domain.Repositories;
		using Volo.Abp.Modularity;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public abstract class ProductsAppServiceTests<TStartupModule> : ExampleAbpApplicationLayerApplicationTestBase<TStartupModule>
		        where TStartupModule : IAbpModule
		    {
		        private readonly IProductsAppService _productsAppService;
		        private readonly IRepository<Product, Guid> _productRepository;
		
		        public ProductsAppServiceTests()
		        {
		            _productsAppService = GetRequiredService<IProductsAppService>();
		            _productRepository = GetRequiredService<IRepository<Product, Guid>>();
		        }
		
		        [Fact]
		        public async Task GetListAsync()
		        {
		            // Act
		            var result = await _productsAppService.GetListAsync(new GetProductsInput());
		
		            // Assert
		            result.TotalCount.ShouldBe(2);
		            result.Items.Count.ShouldBe(2);
		            result.Items.Any(x => x.Id == Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30")).ShouldBe(true);
		            result.Items.Any(x => x.Id == Guid.Parse("1fb2febb-25f1-48b5-83f0-4c7b4c218476")).ShouldBe(true);
		        }
		
		        [Fact]
		        public async Task GetAsync()
		        {
		            // Act
		            var result = await _productsAppService.GetAsync(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
		
		            // Assert
		            result.ShouldNotBeNull();
		            result.Id.ShouldBe(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
		        }
		
		        [Fact]
		        public async Task CreateAsync()
		        {
		            // Arrange
		            var input = new ProductCreateDto
		            {
		                Name = "bac02df9832f493cada933bc16daec5d7537d5e15a954fc18b3d",
		                Desc = "893e6f582",
		                Price = 483816289,
		                IsActive = true
		            };
		
		            // Act
		            var serviceResult = await _productsAppService.CreateAsync(input);
		
		            // Assert
		            var result = await _productRepository.FindAsync(c => c.Id == serviceResult.Id);
		
		            result.ShouldNotBe(null);
		            result.Name.ShouldBe("bac02df9832f493cada933bc16daec5d7537d5e15a954fc18b3d");
		            result.Desc.ShouldBe("893e6f582");
		            result.Price.ShouldBe(483816289);
		            result.IsActive.ShouldBe(true);
		        }
		
		        [Fact]
		        public async Task UpdateAsync()
		        {
		            // Arrange
		            var input = new ProductUpdateDto()
		            {
		                Name = "6f2999bf4a71400d98bd5217e63611477d14",
		                Desc = "af562c7a791346e0b6fc4163368bb75deef92116279d4acfa945aac0ed10e57bd5732d565c7a4d6a9088",
		                Price = 1002811477,
		                IsActive = true
		            };
		
		            // Act
		            var serviceResult = await _productsAppService.UpdateAsync(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"), input);
		
		            // Assert
		            var result = await _productRepository.FindAsync(c => c.Id == serviceResult.Id);
		
		            result.ShouldNotBe(null);
		            result.Name.ShouldBe("6f2999bf4a71400d98bd5217e63611477d14");
		            result.Desc.ShouldBe("af562c7a791346e0b6fc4163368bb75deef92116279d4acfa945aac0ed10e57bd5732d565c7a4d6a9088");
		            result.Price.ShouldBe(1002811477);
		            result.IsActive.ShouldBe(true);
		        }
		
		        [Fact]
		        public async Task DeleteAsync()
		        {
		            // Act
		            await _productsAppService.DeleteAsync(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
		
		            // Assert
		            var result = await _productRepository.FindAsync(c => c.Id == Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
		
		            result.ShouldBeNull();
		        }
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.Application.Tests\Samples\SampleAppServiceTests.cs'><![CDATA[
		﻿using Shouldly;
		using System.Threading.Tasks;
		using Volo.Abp.Identity;
		using Volo.Abp.Modularity;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.Samples;
		
		/* This is just an example test class.
		 * Normally, you don't test code of the modules you are using
		 * (like IIdentityUserAppService here).
		 * Only test your own application services.
		 */
		public abstract class SampleAppServiceTests<TStartupModule> : ExampleAbpApplicationLayerApplicationTestBase<TStartupModule>
		    where TStartupModule : IAbpModule
		{
		    private readonly IIdentityUserAppService _userAppService;
		
		    protected SampleAppServiceTests()
		    {
		        _userAppService = GetRequiredService<IIdentityUserAppService>();
		    }
		
		    [Fact]
		    public async Task Initial_Data_Should_Contain_Admin_User()
		    {
		        //Act
		        var result = await _userAppService.GetListAsync(new GetIdentityUsersInput());
		
		        //Assert
		        result.TotalCount.ShouldBeGreaterThan(0);
		        result.Items.ShouldContain(u => u.UserName == "admin");
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.abppkg'>
		{
		  "role": "lib.test"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayer.Domain.Tests.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.Domain\ExampleAbpApplicationLayer.Domain.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayerDomainTestBase.cs'><![CDATA[
		﻿using Volo.Abp.Modularity;
		
		namespace ExampleAbpApplicationLayer;
		
		/* Inherit from this class for your domain layer tests. */
		public abstract class ExampleAbpApplicationLayerDomainTestBase<TStartupModule> : ExampleAbpApplicationLayerTestBase<TStartupModule>
		    where TStartupModule : IAbpModule
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\ExampleAbpApplicationLayerDomainTestModule.cs'>
		﻿using Volo.Abp.Modularity;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerDomainModule),
		    typeof(ExampleAbpApplicationLayerTestBaseModule)
		)]
		public class ExampleAbpApplicationLayerDomainTestModule : AbpModule
		{
		
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\Orders\OrdersDataSeedContributor.cs'>
		using System;
		using System.Threading.Tasks;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Uow;
		using ExampleAbpApplicationLayer.Orders;
		
		namespace ExampleAbpApplicationLayer.Orders
		{
		    public class OrdersDataSeedContributor : IDataSeedContributor, ISingletonDependency
		    {
		        private bool IsSeeded = false;
		        private readonly IOrderRepository _orderRepository;
		        private readonly IUnitOfWorkManager _unitOfWorkManager;
		
		        public OrdersDataSeedContributor(IOrderRepository orderRepository, IUnitOfWorkManager unitOfWorkManager)
		        {
		            _orderRepository = orderRepository;
		            _unitOfWorkManager = unitOfWorkManager;
		
		        }
		
		        public async Task SeedAsync(DataSeedContext context)
		        {
		            if (IsSeeded)
		            {
		                return;
		            }
		
		            await _orderRepository.InsertAsync(new Order
		            (
		                id: Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"),
		                orderDate: new DateTime(2014, 8, 10),
		                totalAmount: 442297264,
		                status: default,
		                identityUserId: null
		            ));
		
		            await _orderRepository.InsertAsync(new Order
		            (
		                id: Guid.Parse("d5545aa7-9121-4baa-9bc5-d232e20f6482"),
		                orderDate: new DateTime(2017, 4, 11),
		                totalAmount: 1109970867,
		                status: default,
		                identityUserId: null
		            ));
		
		            await _unitOfWorkManager!.Current!.SaveChangesAsync();
		
		            IsSeeded = true;
		        }
		    }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\Products\ProductsDataSeedContributor.cs'>
		using System;
		using System.Threading.Tasks;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Uow;
		using ExampleAbpApplicationLayer.Products;
		
		namespace ExampleAbpApplicationLayer.Products
		{
		    public class ProductsDataSeedContributor : IDataSeedContributor, ISingletonDependency
		    {
		        private bool IsSeeded = false;
		        private readonly IProductRepository _productRepository;
		        private readonly IUnitOfWorkManager _unitOfWorkManager;
		
		        public ProductsDataSeedContributor(IProductRepository productRepository, IUnitOfWorkManager unitOfWorkManager)
		        {
		            _productRepository = productRepository;
		            _unitOfWorkManager = unitOfWorkManager;
		
		        }
		
		        public async Task SeedAsync(DataSeedContext context)
		        {
		            if (IsSeeded)
		            {
		                return;
		            }
		
		            await _productRepository.InsertAsync(new Product
		            (
		                id: Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"),
		                name: "11c71ef2c24743f9a15561f887f77ff1af1fc02044ad40b08b2cdee1a9f4227728370b25ec",
		                desc: "ca38a7fceb674ede95bb5732eb52",
		                price: 983272089,
		                isActive: true
		            ));
		
		            await _productRepository.InsertAsync(new Product
		            (
		                id: Guid.Parse("1fb2febb-25f1-48b5-83f0-4c7b4c218476"),
		                name: "c75153fbae544e9f9877689c8f8b37be6490c5f01e4348ab93f19a95ea61a964bcbe1532bf6c4cc78beb027269229847db",
		                desc: "ea807e41d2b84c10a9f58c9c7534dd7d1e4add1437e64df6ab688756ec",
		                price: 1794088944,
		                isActive: true
		            ));
		
		            await _unitOfWorkManager!.Current!.SaveChangesAsync();
		
		            IsSeeded = true;
		        }
		    }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.Domain.Tests\Samples\SampleDomainTests.cs'><![CDATA[
		﻿using System.Threading.Tasks;
		using Shouldly;
		using Volo.Abp.Identity;
		using Volo.Abp.Modularity;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.Samples;
		
		/* This is just an example test class.
		 * Normally, you don't test code of the modules you are using
		 * (like IdentityUserManager here).
		 * Only test your own domain services.
		 */
		public abstract class SampleDomainTests<TStartupModule> : ExampleAbpApplicationLayerDomainTestBase<TStartupModule>
		    where TStartupModule : IAbpModule
		{
		    private readonly IIdentityUserRepository _identityUserRepository;
		    private readonly IdentityUserManager _identityUserManager;
		
		    protected SampleDomainTests()
		    {
		        _identityUserRepository = GetRequiredService<IIdentityUserRepository>();
		        _identityUserManager = GetRequiredService<IdentityUserManager>();
		    }
		
		    [Fact]
		    public async Task Should_Set_Email_Of_A_User()
		    {
		        IdentityUser adminUser;
		
		        /* Need to manually start Unit Of Work because
		         * FirstOrDefaultAsync should be executed while db connection / context is available.
		         */
		        await WithUnitOfWorkAsync(async () =>
		        {
		            adminUser = await _identityUserRepository
		                .FindByNormalizedUserNameAsync("ADMIN");
		
		            await _identityUserManager.SetEmailAsync(adminUser, "newemail@abp.io");
		            await _identityUserRepository.UpdateAsync(adminUser);
		        });
		
		        adminUser = await _identityUserRepository.FindByNormalizedUserNameAsync("ADMIN");
		        adminUser.Email.ShouldBe("newemail@abp.io");
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Applications\EfCoreSampleAppServiceTests.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Samples;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Applications;
		
		[Collection(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
		public class EfCoreSampleAppServiceTests : SampleAppServiceTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Applications\Orders\EfCoreOrdersAppServiceTests.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Orders;
		using Xunit;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.Orders;
		
		public class EfCoreOrdersAppServiceTests : OrdersAppServiceTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
		{
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Applications\Products\EfCoreProductsAppServiceTests.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Products;
		using Xunit;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		namespace ExampleAbpApplicationLayer.Products;
		
		public class EfCoreProductsAppServiceTests : ProductsAppServiceTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
		{
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Domains\EfCoreSampleDomainTests.cs'><![CDATA[
		using ExampleAbpApplicationLayer.Samples;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Domains;
		
		[Collection(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
		public class EfCoreSampleDomainTests : SampleDomainTests<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Domains\Orders\OrderRepositoryTests.cs'><![CDATA[
		using Shouldly;
		using System;
		using System.Linq;
		using System.Threading.Tasks;
		using ExampleAbpApplicationLayer.Orders;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Domains.Orders
		{
		    public class OrderRepositoryTests : ExampleAbpApplicationLayerEntityFrameworkCoreTestBase
		    {
		        private readonly IOrderRepository _orderRepository;
		
		        public OrderRepositoryTests()
		        {
		            _orderRepository = GetRequiredService<IOrderRepository>();
		        }
		
		        [Fact]
		        public async Task GetListAsync()
		        {
		            // Arrange
		            await WithUnitOfWorkAsync(async () =>
		            {
		                // Act
		                var result = await _orderRepository.GetListAsync(
		                    status: default
		                );
		
		                // Assert
		                result.Count.ShouldBe(1);
		                result.FirstOrDefault().ShouldNotBe(null);
		                result.First().Id.ShouldBe(Guid.Parse("0d508788-38cc-4743-804d-65adda7f6a6d"));
		            });
		        }
		
		        [Fact]
		        public async Task GetCountAsync()
		        {
		            // Arrange
		            await WithUnitOfWorkAsync(async () =>
		            {
		                // Act
		                var result = await _orderRepository.GetCountAsync(
		                    status: default
		                );
		
		                // Assert
		                result.ShouldBe(1);
		            });
		        }
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Domains\Products\ProductRepositoryTests.cs'><![CDATA[
		using Shouldly;
		using System;
		using System.Linq;
		using System.Threading.Tasks;
		using ExampleAbpApplicationLayer.Products;
		using ExampleAbpApplicationLayer.EntityFrameworkCore;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Domains.Products
		{
		    public class ProductRepositoryTests : ExampleAbpApplicationLayerEntityFrameworkCoreTestBase
		    {
		        private readonly IProductRepository _productRepository;
		
		        public ProductRepositoryTests()
		        {
		            _productRepository = GetRequiredService<IProductRepository>();
		        }
		
		        [Fact]
		        public async Task GetListAsync()
		        {
		            // Arrange
		            await WithUnitOfWorkAsync(async () =>
		            {
		                // Act
		                var result = await _productRepository.GetListAsync(
		                    name: "11c71ef2c24743f9a15561f887f77ff1af1fc02044ad40b08b2cdee1a9f4227728370b25ec",
		                    isActive: true
		                );
		
		                // Assert
		                result.Count.ShouldBe(1);
		                result.FirstOrDefault().ShouldNotBe(null);
		                result.First().Id.ShouldBe(Guid.Parse("d6604948-933e-4944-8191-ab78d78f1d30"));
		            });
		        }
		
		        [Fact]
		        public async Task GetCountAsync()
		        {
		            // Arrange
		            await WithUnitOfWorkAsync(async () =>
		            {
		                // Act
		                var result = await _productRepository.GetCountAsync(
		                    name: "c75153fbae544e9f9877689c8f8b37be6490c5f01e4348ab93f19a95ea61a964bcbe1532bf6c4cc78beb027269229847db",
		                    isActive: true
		                );
		
		                // Assert
		                result.ShouldBe(1);
		            });
		        }
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreCollection.cs'><![CDATA[
		﻿using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		[CollectionDefinition(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
		public class ExampleAbpApplicationLayerEntityFrameworkCoreCollection : ICollectionFixture<ExampleAbpApplicationLayerEntityFrameworkCoreFixture>
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreCollectionFixtureBase.cs'><![CDATA[
		﻿using ExampleAbpApplicationLayer.EntityFrameworkCore;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		public class ExampleAbpApplicationLayerEntityFrameworkCoreCollectionFixtureBase : ICollectionFixture<ExampleAbpApplicationLayerEntityFrameworkCoreFixture>
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreFixture.cs'>
		﻿using System;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		public class ExampleAbpApplicationLayerEntityFrameworkCoreFixture : IDisposable
		{
		    public void Dispose()
		    {
		
		    }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreTestBase.cs'><![CDATA[
		﻿using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		public abstract class ExampleAbpApplicationLayerEntityFrameworkCoreTestBase : ExampleAbpApplicationLayerTestBase<ExampleAbpApplicationLayerEntityFrameworkCoreTestModule>
		{
		
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\ExampleAbpApplicationLayerEntityFrameworkCoreTestModule.cs'><![CDATA[
		﻿using Microsoft.Data.Sqlite;
		using Microsoft.EntityFrameworkCore;
		using Microsoft.EntityFrameworkCore.Infrastructure;
		using Microsoft.EntityFrameworkCore.Storage;
		using Microsoft.Extensions.DependencyInjection;
		using Volo.Abp;
		using Volo.Abp.EntityFrameworkCore;
		using Volo.Abp.EntityFrameworkCore.Sqlite;
		using Volo.Abp.FeatureManagement;
		using Volo.Abp.Modularity;
		using Volo.Abp.PermissionManagement;
		using Volo.Abp.TextTemplateManagement;
		using Volo.Abp.Uow;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore;
		
		[DependsOn(
		    typeof(ExampleAbpApplicationLayerApplicationTestModule),
		    typeof(ExampleAbpApplicationLayerEntityFrameworkCoreModule),
		    typeof(AbpEntityFrameworkCoreSqliteModule)
		)]
		public class ExampleAbpApplicationLayerEntityFrameworkCoreTestModule : AbpModule
		{
		    private SqliteConnection? _sqliteConnection;
		
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        Configure<FeatureManagementOptions>(options =>
		        {
		            options.SaveStaticFeaturesToDatabase = false;
		            options.IsDynamicFeatureStoreEnabled = false;
		        });
		        Configure<PermissionManagementOptions>(options =>
		        {
		            options.SaveStaticPermissionsToDatabase = false;
		            options.IsDynamicPermissionStoreEnabled = false;
		        });
		        Configure<TextTemplateManagementOptions>(options =>
		        {
		            options.SaveStaticTemplatesToDatabase = false;
		            options.IsDynamicTemplateStoreEnabled = false;
		        });
		        context.Services.AddAlwaysDisableUnitOfWorkTransaction();
		
		        ConfigureInMemorySqlite(context.Services);
		
		    }
		
		    private void ConfigureInMemorySqlite(IServiceCollection services)
		    {
		        _sqliteConnection = CreateDatabaseAndGetConnection();
		
		        services.Configure<AbpDbContextOptions>(options =>
		        {
		            options.Configure(context =>
		            {
		                context.DbContextOptions.UseSqlite(_sqliteConnection);
		            });
		        });
		    }
		
		    public override void OnApplicationShutdown(ApplicationShutdownContext context)
		    {
		        _sqliteConnection?.Dispose();
		    }
		
		    private static SqliteConnection CreateDatabaseAndGetConnection()
		    {
		        var connection = new SqliteConnection("Data Source=:memory:");
		        connection.Open();
		
		        var options = new DbContextOptionsBuilder<ExampleAbpApplicationLayerDbContext>()
		            .UseSqlite(connection)
		            .Options;
		
		        using (var context = new ExampleAbpApplicationLayerDbContext(options))
		        {
		            context.GetService<IRelationalDatabaseCreator>().CreateTables();
		        }
		
		        return connection;
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\EntityFrameworkCore\Samples\SampleRepositoryTests.cs'><![CDATA[
		﻿using System;
		using System.Threading.Tasks;
		using Shouldly;
		using Volo.Abp.Domain.Repositories;
		using Volo.Abp.Identity;
		using Xunit;
		
		namespace ExampleAbpApplicationLayer.EntityFrameworkCore.Samples;
		
		/* This is just an example test class.
		 * Normally, you don't test ABP framework code
		 * Only test your custom repository methods.
		 */
		[Collection(ExampleAbpApplicationLayerTestConsts.CollectionDefinitionName)]
		public class SampleRepositoryTests : ExampleAbpApplicationLayerEntityFrameworkCoreTestBase
		{
		    private readonly IRepository<IdentityUser, Guid> _appUserRepository;
		
		    public SampleRepositoryTests()
		    {
		        _appUserRepository = GetRequiredService<IRepository<IdentityUser, Guid>>();
		    }
		
		    [Fact]
		    public async Task Should_Query_AppUser()
		    {
		        /* Need to manually start Unit Of Work because
		         * FirstOrDefaultAsync should be executed while db connection / context is available.
		         */
		        await WithUnitOfWorkAsync(async () =>
		        {
		                //Act
		                var adminUser = await _appUserRepository
		                .FirstOrDefaultAsync(u => u.UserName == "admin");
		
		                //Assert
		                adminUser.ShouldNotBeNull();
		        });
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.abppkg'>
		{
		  "role": "lib.test"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests\ExampleAbpApplicationLayer.EntityFrameworkCore.Tests.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.EntityFrameworkCore\ExampleAbpApplicationLayer.EntityFrameworkCore.csproj" />
		    <ProjectReference Include="..\ExampleAbpApplicationLayer.Application.Tests\ExampleAbpApplicationLayer.Application.Tests.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.EntityFrameworkCore.Sqlite" Version="9.3.1" />
		    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\appsettings.json'>
		{
		  "RemoteServices": {
		    "Default": {
		      "BaseUrl": "https://localhost:44302/"
		    }
		  },
		  "IdentityClients": {
		    "Default": {
		      "GrantType": "password",
		      "ClientId": "ExampleAbpApplicationLayer_App",
		      "UserName": "admin",
		      "UserPassword": "1q2w3E*",
		      "Authority": "https://localhost:44302/",
		      "Scope": "ExampleAbpApplicationLayer"
		    }
		  }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\appsettings.secrets.json'>
		{
		    "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ClientDemoService.cs'>
		﻿using System;
		using System.Threading.Tasks;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Identity;
		using Volo.Abp.Account;
		
		namespace ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp;
		
		public class ClientDemoService : ITransientDependency
		{
		    private readonly IProfileAppService _profileAppService;
		    private readonly IIdentityUserAppService _identityUserAppService;
		
		    public ClientDemoService(
		        IProfileAppService profileAppService,
		        IIdentityUserAppService identityUserAppService)
		    {
		        _profileAppService = profileAppService;
		        _identityUserAppService = identityUserAppService;
		    }
		
		    public async Task RunAsync()
		    {
		        var profileDto = await _profileAppService.GetAsync();
		        Console.WriteLine($"UserName : {profileDto.UserName}");
		        Console.WriteLine($"Email    : {profileDto.Email}");
		        Console.WriteLine($"Name     : {profileDto.Name}");
		        Console.WriteLine($"Surname  : {profileDto.Surname}");
		        Console.WriteLine();
		
		        var resultDto = await _identityUserAppService.GetListAsync(new GetIdentityUsersInput());
		        Console.WriteLine($"Total users: {resultDto.TotalCount}");
		        foreach (var identityUserDto in resultDto.Items)
		        {
		            Console.WriteLine($"- [{identityUserDto.Id}] {identityUserDto.Name}");
		        }
		    }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.abppkg'>
		{
		  "role": "lib.test"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <PropertyGroup>
		    <OutputType>Exe</OutputType>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <None Remove="appsettings.json" />
		    <Content Include="appsettings.json">
		      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		    </Content>
		    <None Remove="appsettings.secrets.json" />
		    <Content Include="appsettings.secrets.json">
		      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		    </Content>
		  </ItemGroup>
		
		  <ItemGroup>
		    <ProjectReference Include="..\..\src\ExampleAbpApplicationLayer.HttpApi.Client\ExampleAbpApplicationLayer.HttpApi.Client.csproj" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Http.Client.IdentityModel" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.5" />
		    <PackageReference Include="Microsoft.Extensions.Http.Polly" Version="9.0.5" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <None Remove="**\*.abppkg" />
		    <None Remove="**\*.abppkg.analyze.json" />
		    <Content Remove="$(UserProfile)\.nuget\packages\*\*\contentFiles\any\*\*.abppkg*" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\ExampleAbpApplicationLayerConsoleApiClientModule.cs'><![CDATA[
		﻿using System;
		using Microsoft.Extensions.DependencyInjection;
		using Polly;
		using Volo.Abp.Autofac;
		using Volo.Abp.Http.Client;
		using Volo.Abp.Http.Client.IdentityModel;
		using Volo.Abp.Modularity;
		
		namespace ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp;
		
		[DependsOn(
		    typeof(AbpAutofacModule),
		    typeof(ExampleAbpApplicationLayerHttpApiClientModule),
		    typeof(AbpHttpClientIdentityModelModule)
		    )]
		public class ExampleAbpApplicationLayerConsoleApiClientModule : AbpModule
		{
		    public override void PreConfigureServices(ServiceConfigurationContext context)
		    {
		        PreConfigure<AbpHttpClientBuilderOptions>(options =>
		        {
		            options.ProxyClientBuildActions.Add((remoteServiceName, clientBuilder) =>
		            {
		                clientBuilder.AddTransientHttpErrorPolicy(
		                    policyBuilder => policyBuilder.WaitAndRetryAsync(3, i => TimeSpan.FromSeconds(Math.Pow(2, i)))
		                );
		            });
		        });
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp\Program.cs'><![CDATA[
		﻿using System;
		using System.Threading.Tasks;
		using Microsoft.Extensions.Configuration;
		using Microsoft.Extensions.DependencyInjection;
		using Volo.Abp;
		
		namespace ExampleAbpApplicationLayer.HttpApi.Client.ConsoleTestApp;
		
		class Program
		{
		    static async Task Main(string[] args)
		    {
		        using (var application = await AbpApplicationFactory.CreateAsync<ExampleAbpApplicationLayerConsoleApiClientModule>(options =>
		        {
		           var builder = new ConfigurationBuilder();
		           builder.AddJsonFile("appsettings.json", false);
		           builder.AddJsonFile("appsettings.secrets.json", true);
		           options.Services.ReplaceConfiguration(builder.Build());
		           options.UseAutofac();
		        }))
		        {
		            await application.InitializeAsync();
		
		            var demo = application.ServiceProvider.GetRequiredService<ClientDemoService>();
		            await demo.RunAsync();
		
		            Console.WriteLine("Press ENTER to stop application...");
		            Console.ReadLine();
		
		            await application.ShutdownAsync();
		        }
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\appsettings.json'>
		{
		
		}</file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\appsettings.secrets.json'>
		{
		  "AbpLicenseCode": "PABMAGkAYwBlAG4AcwBlAD4ACgAgACAAPABJAGQAPgAzAGEAMQA2ADcAZQA5AGYALQA5ADIAMwAwAC0AZAAwADcAMAAtAGYAOQBhADAALQBhAGMAZAAzADgANgA3ADQANQA5AGIANgA8AC8ASQBkAD4ACgAgACAAPABMAGkAYwBlAG4AcwBlAEEAdAB0AHIAaQBiAHUAdABlAHMAPgAKACAAIAAgACAAPABBAHQAdAByAGkAYgB1AHQAZQAgAG4AYQBtAGUAPQAiAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAEkAZAAiAD4AMwBhADEANgA3AGUAOQBmAC0AOQAyADMAMAAtAGQAMAA3ADAALQBmADkAYQAwAC0AYQBjAGQAMwA4ADYANwA0ADUAOQBiADYAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBPAHIAZwBhAG4AaQB6AGEAdABpAG8AbgBOAGEAbQBlACIAPgBZAGUAbQBlAG4ALQBLAHUAdwBhAGkAdAAtAEIAYQBuAGsALQBTAEQAPAAvAEEAdAB0AHIAaQBiAHUAdABlAD4ACgAgACAAIAAgADwAQQB0AHQAcgBpAGIAdQB0AGUAIABuAGEAbQBlAD0AIgBDAHIAZQBhAHQAaQBvAG4AVABpAG0AZQAiAD4AMgAwADIANQAtADAAOAAtADIAMwAgADAAMgA6ADAAMQA6ADUANQA8AC8AQQB0AHQAcgBpAGIAdQB0AGUAPgAKACAAIAA8AC8ATABpAGMAZQBuAHMAZQBBAHQAdAByAGkAYgB1AHQAZQBzAD4ACgAgACAAPABTAGkAZwBuAGEAdAB1AHIAZQA+AE0ARQBZAEMASQBRAEMAbwA5AHIATAB0AE0ATwBZAHoAcwArADYAdQBVAEcAQgBvADYASAA0AEcAYwBHAC8ARwBJAGgAYQBTAEkAUQBTAHYAQgA5AEQAcwAxAEoAMgBzAFIAUQBJAGgAQQBMAGUAZwA5AGYAeQBoAEYAYwB5ACsAWgBrAGQAaAB2AGgAcgA0AFIASAA1AG0AbAA4AGsAcABzADgARgBPADcATQBqAGwAQgB6AC8AagBHAGIASwBUADwALwBTAGkAZwBuAGEAdAB1AHIAZQA+AAoAPAAvAEwAaQBjAGUAbgBzAGUAPgBNAEYAawB3AEUAdwBZAEgASwBvAFoASQB6AGoAMABDAEEAUQBZAEkASwBvAFoASQB6AGoAMABEAEEAUQBjAEQAUQBnAEEARQBTAGYAZgAzADkAUgAvAFAAegB2AHcAegBGAGcAegBFADUANgBDAFAAMAB5AHcAeQBFAGYAcQBKAFEAcwBGAFMASgB0AEwAeABoAGUAVgBwADIAcwBxAGkATQBDAHQAaQBDADkATgA2ADQARwBiAFQATgBTADYATgBpAE4ASgBMAFgARQB3AHoAVABsAGQAdAB4AGgAWABEAHcAKwBTAHQAawBuAHAAMABxAEEAPQA9AF8AMQAyADQA"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.abppkg'>
		{
		  "role": "lib.test"
		}</file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayer.TestBase.csproj'><![CDATA[
		<Project Sdk="Microsoft.NET.Sdk">
		
		  <Import Project="..\..\common.props" />
		
		  <PropertyGroup>
		    <TargetFramework>net9.0</TargetFramework>
		    <Nullable>enable</Nullable>
		    <RootNamespace>ExampleAbpApplicationLayer</RootNamespace>
		  </PropertyGroup>
		
		  <ItemGroup>
		    <None Remove="appsettings.json" />
		    <Content Include="appsettings.json">
		      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
		      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		    </Content>
		    <None Remove="appsettings.secrets.json" />
		    <Content Include="appsettings.secrets.json">
		      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		    </Content>
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Volo.Abp.Autofac" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.TestBase" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.Authorization" Version="9.3.1" />
		    <PackageReference Include="Volo.Abp.BackgroundJobs.Abstractions" Version="9.3.1" />
		  </ItemGroup>
		
		  <ItemGroup>
		    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
		    <PackageReference Include="NSubstitute" Version="5.3.0" />
		    <PackageReference Include="NSubstitute.Analyzers.CSharp" Version="1.0.17">
		      <PrivateAssets>all</PrivateAssets>
		      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		    </PackageReference>
		    <PackageReference Include="Shouldly" Version="4.2.1" />
		    <PackageReference Include="xunit" Version="2.9.3" />
		    <PackageReference Include="xunit.extensibility.execution" Version="2.9.3" />
		    <PackageReference Include="xunit.runner.visualstudio" Version="3.0.1" />
		  </ItemGroup>
		
		</Project>]]></file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestBase.cs'><![CDATA[
		﻿using System;
		using System.Threading.Tasks;
		using Microsoft.Extensions.Configuration;
		using Microsoft.Extensions.DependencyInjection;
		using Volo.Abp;
		using Volo.Abp.Modularity;
		using Volo.Abp.Uow;
		using Volo.Abp.Testing;
		
		namespace ExampleAbpApplicationLayer;
		
		public abstract class ExampleAbpApplicationLayerTestBase<TStartupModule> : AbpIntegratedTest<TStartupModule>
		    where TStartupModule : IAbpModule
		{
		    protected override void SetAbpApplicationCreationOptions(AbpApplicationCreationOptions options)
		    {
		        options.UseAutofac();
		    }
		
		    protected override void BeforeAddApplication(IServiceCollection services)
		    {
		        var builder = new ConfigurationBuilder();
		        builder.AddJsonFile("appsettings.json", false);
		        builder.AddJsonFile("appsettings.secrets.json", true);
		        services.ReplaceConfiguration(builder.Build());
		    }
		
		    protected virtual Task WithUnitOfWorkAsync(Func<Task> func)
		    {
		        return WithUnitOfWorkAsync(new AbpUnitOfWorkOptions(), func);
		    }
		
		    protected virtual async Task WithUnitOfWorkAsync(AbpUnitOfWorkOptions options, Func<Task> action)
		    {
		        using (var scope = ServiceProvider.CreateScope())
		        {
		            var uowManager = scope.ServiceProvider.GetRequiredService<IUnitOfWorkManager>();
		
		            using (var uow = uowManager.Begin(options))
		            {
		                await action();
		
		                await uow.CompleteAsync();
		            }
		        }
		    }
		
		    protected virtual Task<TResult> WithUnitOfWorkAsync<TResult>(Func<Task<TResult>> func)
		    {
		        return WithUnitOfWorkAsync(new AbpUnitOfWorkOptions(), func);
		    }
		
		    protected virtual async Task<TResult> WithUnitOfWorkAsync<TResult>(AbpUnitOfWorkOptions options, Func<Task<TResult>> func)
		    {
		        using (var scope = ServiceProvider.CreateScope())
		        {
		            var uowManager = scope.ServiceProvider.GetRequiredService<IUnitOfWorkManager>();
		
		            using (var uow = uowManager.Begin(options))
		            {
		                var result = await func();
		                await uow.CompleteAsync();
		                return result;
		            }
		        }
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestBaseModule.cs'><![CDATA[
		﻿using Microsoft.Extensions.DependencyInjection;
		using Volo.Abp;
		using Volo.Abp.Authorization;
		using Volo.Abp.Autofac;
		using Volo.Abp.BackgroundJobs;
		using Volo.Abp.Data;
		using Volo.Abp.Modularity;
		using Volo.Abp.Threading;
		
		namespace ExampleAbpApplicationLayer;
		
		[DependsOn(
		    typeof(AbpAutofacModule),
		    typeof(AbpTestBaseModule),
		    typeof(AbpAuthorizationModule),
		    typeof(AbpBackgroundJobsAbstractionsModule)
		)]
		public class ExampleAbpApplicationLayerTestBaseModule : AbpModule
		{
		    public override void ConfigureServices(ServiceConfigurationContext context)
		    {
		        Configure<AbpBackgroundJobOptions>(options =>
		        {
		            options.IsJobExecutionEnabled = false;
		        });
		
		        context.Services.AddAlwaysAllowAuthorization();
		    }
		
		    public override void OnApplicationInitialization(ApplicationInitializationContext context)
		    {
		        SeedTestData(context);
		    }
		
		    private static void SeedTestData(ApplicationInitializationContext context)
		    {
		        AsyncHelper.RunSync(async () =>
		        {
		            using (var scope = context.ServiceProvider.CreateScope())
		            {
		                await scope.ServiceProvider
		                    .GetRequiredService<IDataSeeder>()
		                    .SeedAsync();
		            }
		        });
		    }
		}]]></file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestConsts.cs'>
		﻿namespace ExampleAbpApplicationLayer;
		
		public static class ExampleAbpApplicationLayerTestConsts
		{
		    public const string CollectionDefinitionName = "ExampleAbpApplicationLayer collection";
		}</file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\ExampleAbpApplicationLayerTestDataBuilder.cs'>
		﻿using System.Threading.Tasks;
		using Volo.Abp.Data;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.MultiTenancy;
		
		namespace ExampleAbpApplicationLayer;
		
		public class ExampleAbpApplicationLayerTestDataSeedContributor : IDataSeedContributor, ITransientDependency
		{
		    private readonly ICurrentTenant _currentTenant;
		
		    public ExampleAbpApplicationLayerTestDataSeedContributor(ICurrentTenant currentTenant)
		    {
		        _currentTenant = currentTenant;
		    }
		
		    public Task SeedAsync(DataSeedContext context)
		    {
		        /* Seed additional test data... */
		
		        using (_currentTenant.Change(context?.TenantId))
		        {
		            return Task.CompletedTask;
		        }
		    }
		}</file>
	<file path='test\ExampleAbpApplicationLayer.TestBase\Security\FakeCurrentPrincipalAccessor.cs'><![CDATA[
		﻿using System;
		using System.Collections.Generic;
		using System.Security.Claims;
		using Volo.Abp.DependencyInjection;
		using Volo.Abp.Security.Claims;
		
		namespace ExampleAbpApplicationLayer.Security;
		
		[Dependency(ReplaceServices = true)]
		public class FakeCurrentPrincipalAccessor : ThreadCurrentPrincipalAccessor
		{
		    protected override ClaimsPrincipal GetClaimsPrincipal()
		    {
		        return GetPrincipal();
		    }
		
		    private ClaimsPrincipal GetPrincipal()
		    {
		        return new ClaimsPrincipal(new ClaimsIdentity(new List<Claim>
		        {
		            new Claim(AbpClaimTypes.UserId, "2e701e62-0953-4dd3-910b-dc6cc93ccb0d"),
		            new Claim(AbpClaimTypes.UserName, "admin"),
		            new Claim(AbpClaimTypes.Email, "admin@abp.io")
		        }));
		    }
		}]]></file>
</files>
